
04_obc_v111_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e91c  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  0810ebb4  0810ebb4  0000fbb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0810eca0  0810eca0  0000fca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .fini_array   00000004  0810eca4  0810eca4  0000fca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .data         000001fc  10032000  0810eca8  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00004980  100321fc  0810eea4  000101fc  2**2
                  ALLOC
  7 ._user_heap_stack 00000a04  10036b7c  0810eea4  00010b7c  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000101fc  2**0
                  CONTENTS, READONLY
  9 .debug_info   00026d41  00000000  00000000  0001022c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00005a0b  00000000  00000000  00036f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00002378  00000000  00000000  0003c978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00001aef  00000000  00000000  0003ecf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000459a2  00000000  00000000  000407df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002c341  00000000  00000000  00086181  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001a87bd  00000000  00000000  000b24c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000043  00000000  00000000  0025ac7f  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009638  00000000  00000000  0025acc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000068  00000000  00000000  002642fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	100321fc 	.word	0x100321fc
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810eb9c 	.word	0x0810eb9c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10032200 	.word	0x10032200
 81002d4:	0810eb9c 	.word	0x0810eb9c

081002d8 <Mgmt_HardwareSystemPreparing>:
//#include "UART_DMA/uart_dma_driver.h"
/*************************************************
 *                   Function                    *
 *************************************************/

void Mgmt_HardwareSystemPreparing(void){
 81002d8:	b580      	push	{r7, lr}
 81002da:	af00      	add	r7, sp, #0
	UART_DMA_Driver_Init();
 81002dc:	f000 fd88 	bl	8100df0 <UART_DMA_Driver_Init>
	CDC_RingBuffer_Init();
 81002e0:	f000 ff76 	bl	81011d0 <CDC_RingBuffer_Init>
//	UART_Driver_SendString(UART_PORT, "Hello");
}
 81002e4:	bf00      	nop
 81002e6:	bd80      	pop	{r7, pc}

081002e8 <Mgmt_SystemStart>:

void Mgmt_SystemStart(void){
 81002e8:	b580      	push	{r7, lr}
 81002ea:	af00      	add	r7, sp, #0

	  SCH_Initialize();
 81002ec:	f000 f808 	bl	8100300 <SCH_Initialize>

	  SchedulerTasks_Create();
 81002f0:	f000 fb34 	bl	810095c <SchedulerTasks_Create>

	  SCH_StartScheduler();
 81002f4:	f000 f94e 	bl	8100594 <SCH_StartScheduler>

	  while(1){
			SCH_HandleScheduledTask();
 81002f8:	f000 f958 	bl	81005ac <SCH_HandleScheduledTask>
 81002fc:	e7fc      	b.n	81002f8 <Mgmt_SystemStart+0x10>
	...

08100300 <SCH_Initialize>:
 * @brief  Function initializes scheduler
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_Initialize(void)
{
 8100300:	b580      	push	{r7, lr}
 8100302:	af00      	add	r7, sp, #0
    s_SystemTick = RESET;
 8100304:	4b17      	ldr	r3, [pc, #92]	@ (8100364 <SCH_Initialize+0x64>)
 8100306:	2200      	movs	r2, #0
 8100308:	601a      	str	r2, [r3, #0]
    s_NumOfTaskScheduled = RESET;
 810030a:	4b17      	ldr	r3, [pc, #92]	@ (8100368 <SCH_Initialize+0x68>)
 810030c:	2200      	movs	r2, #0
 810030e:	701a      	strb	r2, [r3, #0]
    s_NumOfTimers = RESET;
 8100310:	4b16      	ldr	r3, [pc, #88]	@ (810036c <SCH_Initialize+0x6c>)
 8100312:	2200      	movs	r2, #0
 8100314:	701a      	strb	r2, [r3, #0]
    
#ifdef USE_SCH_SEMAPHORE
    s_NumOfSemaphores = RESET;
 8100316:	4b16      	ldr	r3, [pc, #88]	@ (8100370 <SCH_Initialize+0x70>)
 8100318:	2200      	movs	r2, #0
 810031a:	701a      	strb	r2, [r3, #0]
#endif

    s_SchedulerRunning = FALSE;
 810031c:	4b15      	ldr	r3, [pc, #84]	@ (8100374 <SCH_Initialize+0x74>)
 810031e:	2200      	movs	r2, #0
 8100320:	701a      	strb	r2, [r3, #0]

    // Initial Scheduler Context
    memset((uint8_t *)&s_TaskContext[0], RESET, (sizeof(SCH_TaskContextTypedef) * MAX_TASK));
 8100322:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8100326:	2100      	movs	r1, #0
 8100328:	4813      	ldr	r0, [pc, #76]	@ (8100378 <SCH_Initialize+0x78>)
 810032a:	f00e fbe9 	bl	810eb00 <memset>
    memset((uint8_t *)&s_TimerContext[0], RESET, (sizeof(SCH_TimerContextTypedef) * MAX_TIMERS));
 810032e:	22a0      	movs	r2, #160	@ 0xa0
 8100330:	2100      	movs	r1, #0
 8100332:	4812      	ldr	r0, [pc, #72]	@ (810037c <SCH_Initialize+0x7c>)
 8100334:	f00e fbe4 	bl	810eb00 <memset>
    memset((uint8_t *)&s_SoftTimers[0], RESET, (sizeof(uint32_t) * SCH_TIM_LAST));
 8100338:	2208      	movs	r2, #8
 810033a:	2100      	movs	r1, #0
 810033c:	4810      	ldr	r0, [pc, #64]	@ (8100380 <SCH_Initialize+0x80>)
 810033e:	f00e fbdf 	bl	810eb00 <memset>
    memset((uint8_t *)&s_TaskPending[0], RESET, (sizeof(uint32_t) * NUM_TASK_PENDING_ARRAYS));
 8100342:	2204      	movs	r2, #4
 8100344:	2100      	movs	r1, #0
 8100346:	480f      	ldr	r0, [pc, #60]	@ (8100384 <SCH_Initialize+0x84>)
 8100348:	f00e fbda 	bl	810eb00 <memset>
    memset((uint8_t *)&s_TimerPending[0], RESET, (sizeof(uint32_t) * NUM_TIMER_PENDING_ARRAYS));
 810034c:	2204      	movs	r2, #4
 810034e:	2100      	movs	r1, #0
 8100350:	480d      	ldr	r0, [pc, #52]	@ (8100388 <SCH_Initialize+0x88>)
 8100352:	f00e fbd5 	bl	810eb00 <memset>
#ifdef USE_SCH_SEMAPHORE
    memset((uint8_t *)&s_SemaphoreContext[0], RESET, (sizeof(SCH_SemaphoreTypedef) * MAX_SEMAPHORES));
 8100356:	2204      	movs	r2, #4
 8100358:	2100      	movs	r1, #0
 810035a:	480c      	ldr	r0, [pc, #48]	@ (810038c <SCH_Initialize+0x8c>)
 810035c:	f00e fbd0 	bl	810eb00 <memset>
#endif
}
 8100360:	bf00      	nop
 8100362:	bd80      	pop	{r7, pc}
 8100364:	10032454 	.word	0x10032454
 8100368:	1003239c 	.word	0x1003239c
 810036c:	10032440 	.word	0x10032440
 8100370:	10032448 	.word	0x10032448
 8100374:	10032218 	.word	0x10032218
 8100378:	1003221c 	.word	0x1003221c
 810037c:	100323a0 	.word	0x100323a0
 8100380:	10032458 	.word	0x10032458
 8100384:	1003244c 	.word	0x1003244c
 8100388:	10032450 	.word	0x10032450
 810038c:	10032444 	.word	0x10032444

08100390 <SCH_TASK_CreateTask>:
 * @param  SCH_TASK_HANDLE* pHandle - pointer to task handle
 *         SCH_TaskPropertyTypedef TaskProperty
 * @retval status
 *****************************************************************************/
SCH_Status SCH_TASK_CreateTask(SCH_TASK_HANDLE *pHandle, SCH_TaskPropertyTypedef *pTaskProperty)
{
 8100390:	b580      	push	{r7, lr}
 8100392:	b084      	sub	sp, #16
 8100394:	af00      	add	r7, sp, #0
 8100396:	6078      	str	r0, [r7, #4]
 8100398:	6039      	str	r1, [r7, #0]
    SCH_Status status = SCH_ERROR;
 810039a:	2301      	movs	r3, #1
 810039c:	73fb      	strb	r3, [r7, #15]
    if (pHandle && pTaskProperty)
 810039e:	687b      	ldr	r3, [r7, #4]
 81003a0:	2b00      	cmp	r3, #0
 81003a2:	d030      	beq.n	8100406 <SCH_TASK_CreateTask+0x76>
 81003a4:	683b      	ldr	r3, [r7, #0]
 81003a6:	2b00      	cmp	r3, #0
 81003a8:	d02d      	beq.n	8100406 <SCH_TASK_CreateTask+0x76>
    {
        if (s_NumOfTaskScheduled < MAX_TASK)
 81003aa:	4b19      	ldr	r3, [pc, #100]	@ (8100410 <SCH_TASK_CreateTask+0x80>)
 81003ac:	781b      	ldrb	r3, [r3, #0]
 81003ae:	2b0f      	cmp	r3, #15
 81003b0:	d829      	bhi.n	8100406 <SCH_TASK_CreateTask+0x76>
        {
            SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[s_NumOfTaskScheduled];
 81003b2:	4b17      	ldr	r3, [pc, #92]	@ (8100410 <SCH_TASK_CreateTask+0x80>)
 81003b4:	781b      	ldrb	r3, [r3, #0]
 81003b6:	461a      	mov	r2, r3
 81003b8:	4613      	mov	r3, r2
 81003ba:	005b      	lsls	r3, r3, #1
 81003bc:	4413      	add	r3, r2
 81003be:	00db      	lsls	r3, r3, #3
 81003c0:	4a14      	ldr	r2, [pc, #80]	@ (8100414 <SCH_TASK_CreateTask+0x84>)
 81003c2:	4413      	add	r3, r2
 81003c4:	60bb      	str	r3, [r7, #8]
            memcpy(&pTaskContext->taskProperty, pTaskProperty, sizeof(SCH_TaskPropertyTypedef));
 81003c6:	68bb      	ldr	r3, [r7, #8]
 81003c8:	3308      	adds	r3, #8
 81003ca:	2210      	movs	r2, #16
 81003cc:	6839      	ldr	r1, [r7, #0]
 81003ce:	4618      	mov	r0, r3
 81003d0:	f00e fbd6 	bl	810eb80 <memcpy>
            pTaskContext->currentTick = 0;
 81003d4:	68bb      	ldr	r3, [r7, #8]
 81003d6:	2200      	movs	r2, #0
 81003d8:	605a      	str	r2, [r3, #4]
            pTaskContext->taskState = (pTaskProperty->taskType == SCH_TASK_ASYNC) 
 81003da:	683b      	ldr	r3, [r7, #0]
 81003dc:	781b      	ldrb	r3, [r3, #0]
                                                        ? TASK_StateHold : TASK_StateReady;
 81003de:	2b02      	cmp	r3, #2
 81003e0:	bf14      	ite	ne
 81003e2:	2301      	movne	r3, #1
 81003e4:	2300      	moveq	r3, #0
 81003e6:	b2db      	uxtb	r3, r3
 81003e8:	461a      	mov	r2, r3
            pTaskContext->taskState = (pTaskProperty->taskType == SCH_TASK_ASYNC) 
 81003ea:	68bb      	ldr	r3, [r7, #8]
 81003ec:	701a      	strb	r2, [r3, #0]

            *pHandle = s_NumOfTaskScheduled;
 81003ee:	4b08      	ldr	r3, [pc, #32]	@ (8100410 <SCH_TASK_CreateTask+0x80>)
 81003f0:	781a      	ldrb	r2, [r3, #0]
 81003f2:	687b      	ldr	r3, [r7, #4]
 81003f4:	701a      	strb	r2, [r3, #0]
            s_NumOfTaskScheduled++;
 81003f6:	4b06      	ldr	r3, [pc, #24]	@ (8100410 <SCH_TASK_CreateTask+0x80>)
 81003f8:	781b      	ldrb	r3, [r3, #0]
 81003fa:	3301      	adds	r3, #1
 81003fc:	b2da      	uxtb	r2, r3
 81003fe:	4b04      	ldr	r3, [pc, #16]	@ (8100410 <SCH_TASK_CreateTask+0x80>)
 8100400:	701a      	strb	r2, [r3, #0]
            status = SCH_DONE;
 8100402:	2300      	movs	r3, #0
 8100404:	73fb      	strb	r3, [r7, #15]
        }
    }
    return status;
 8100406:	7bfb      	ldrb	r3, [r7, #15]
}
 8100408:	4618      	mov	r0, r3
 810040a:	3710      	adds	r7, #16
 810040c:	46bd      	mov	sp, r7
 810040e:	bd80      	pop	{r7, pc}
 8100410:	1003239c 	.word	0x1003239c
 8100414:	1003221c 	.word	0x1003221c

08100418 <SCH_RunSystemTickTimer>:
 * @brief  Function handles system tick timer
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_RunSystemTickTimer(void)
{
 8100418:	b480      	push	{r7}
 810041a:	b087      	sub	sp, #28
 810041c:	af00      	add	r7, sp, #0
    if (s_SchedulerRunning)
 810041e:	4b54      	ldr	r3, [pc, #336]	@ (8100570 <SCH_RunSystemTickTimer+0x158>)
 8100420:	781b      	ldrb	r3, [r3, #0]
 8100422:	2b00      	cmp	r3, #0
 8100424:	f000 809e 	beq.w	8100564 <SCH_RunSystemTickTimer+0x14c>
    {
        uint8_t taskIndex;
        SCH_TaskContextTypedef *pTaskContext;
        uint8_t timerIndex;
        SCH_TimerContextTypedef *pTimerContext;
        s_SystemTick++;
 8100428:	4b52      	ldr	r3, [pc, #328]	@ (8100574 <SCH_RunSystemTickTimer+0x15c>)
 810042a:	681b      	ldr	r3, [r3, #0]
 810042c:	3301      	adds	r3, #1
 810042e:	4a51      	ldr	r2, [pc, #324]	@ (8100574 <SCH_RunSystemTickTimer+0x15c>)
 8100430:	6013      	str	r3, [r2, #0]
        // Task
        for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 8100432:	2300      	movs	r3, #0
 8100434:	75fb      	strb	r3, [r7, #23]
 8100436:	e035      	b.n	81004a4 <SCH_RunSystemTickTimer+0x8c>
        {
            pTaskContext = &s_TaskContext[taskIndex];
 8100438:	7dfa      	ldrb	r2, [r7, #23]
 810043a:	4613      	mov	r3, r2
 810043c:	005b      	lsls	r3, r3, #1
 810043e:	4413      	add	r3, r2
 8100440:	00db      	lsls	r3, r3, #3
 8100442:	4a4d      	ldr	r2, [pc, #308]	@ (8100578 <SCH_RunSystemTickTimer+0x160>)
 8100444:	4413      	add	r3, r2
 8100446:	60bb      	str	r3, [r7, #8]
            if (pTaskContext->taskProperty.taskType == SCH_TASK_SYNC && 
 8100448:	68bb      	ldr	r3, [r7, #8]
 810044a:	7a1b      	ldrb	r3, [r3, #8]
 810044c:	2b01      	cmp	r3, #1
 810044e:	d126      	bne.n	810049e <SCH_RunSystemTickTimer+0x86>
                pTaskContext->taskState == TASK_StateReady)
 8100450:	68bb      	ldr	r3, [r7, #8]
 8100452:	781b      	ldrb	r3, [r3, #0]
            if (pTaskContext->taskProperty.taskType == SCH_TASK_SYNC && 
 8100454:	2b01      	cmp	r3, #1
 8100456:	d122      	bne.n	810049e <SCH_RunSystemTickTimer+0x86>
            {
                pTaskContext->currentTick += 1;
 8100458:	68bb      	ldr	r3, [r7, #8]
 810045a:	685b      	ldr	r3, [r3, #4]
 810045c:	1c5a      	adds	r2, r3, #1
 810045e:	68bb      	ldr	r3, [r7, #8]
 8100460:	605a      	str	r2, [r3, #4]
                if (pTaskContext->currentTick >= pTaskContext->taskProperty.taskPeriodInMS)
 8100462:	68bb      	ldr	r3, [r7, #8]
 8100464:	685a      	ldr	r2, [r3, #4]
 8100466:	68bb      	ldr	r3, [r7, #8]
 8100468:	68db      	ldr	r3, [r3, #12]
 810046a:	429a      	cmp	r2, r3
 810046c:	d317      	bcc.n	810049e <SCH_RunSystemTickTimer+0x86>
                {
                    pTaskContext->currentTick = 0;
 810046e:	68bb      	ldr	r3, [r7, #8]
 8100470:	2200      	movs	r2, #0
 8100472:	605a      	str	r2, [r3, #4]
                    uint8_t index = taskIndex / 32;
 8100474:	7dfb      	ldrb	r3, [r7, #23]
 8100476:	095b      	lsrs	r3, r3, #5
 8100478:	71fb      	strb	r3, [r7, #7]
                    uint8_t bit = taskIndex % 32;
 810047a:	7dfb      	ldrb	r3, [r7, #23]
 810047c:	f003 031f 	and.w	r3, r3, #31
 8100480:	71bb      	strb	r3, [r7, #6]
                    s_TaskPending[index] |= (1 << bit);  // Set bit for task
 8100482:	79fb      	ldrb	r3, [r7, #7]
 8100484:	4a3d      	ldr	r2, [pc, #244]	@ (810057c <SCH_RunSystemTickTimer+0x164>)
 8100486:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810048a:	79bb      	ldrb	r3, [r7, #6]
 810048c:	2101      	movs	r1, #1
 810048e:	fa01 f303 	lsl.w	r3, r1, r3
 8100492:	4619      	mov	r1, r3
 8100494:	79fb      	ldrb	r3, [r7, #7]
 8100496:	430a      	orrs	r2, r1
 8100498:	4938      	ldr	r1, [pc, #224]	@ (810057c <SCH_RunSystemTickTimer+0x164>)
 810049a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (taskIndex = 0; taskIndex < s_NumOfTaskScheduled; taskIndex++)
 810049e:	7dfb      	ldrb	r3, [r7, #23]
 81004a0:	3301      	adds	r3, #1
 81004a2:	75fb      	strb	r3, [r7, #23]
 81004a4:	4b36      	ldr	r3, [pc, #216]	@ (8100580 <SCH_RunSystemTickTimer+0x168>)
 81004a6:	781b      	ldrb	r3, [r3, #0]
 81004a8:	7dfa      	ldrb	r2, [r7, #23]
 81004aa:	429a      	cmp	r2, r3
 81004ac:	d3c4      	bcc.n	8100438 <SCH_RunSystemTickTimer+0x20>
                }
            }
        }

        // Timer
        for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 81004ae:	2300      	movs	r3, #0
 81004b0:	75bb      	strb	r3, [r7, #22]
 81004b2:	e03b      	b.n	810052c <SCH_RunSystemTickTimer+0x114>
        {
            pTimerContext = &s_TimerContext[timerIndex];
 81004b4:	7dba      	ldrb	r2, [r7, #22]
 81004b6:	4613      	mov	r3, r2
 81004b8:	009b      	lsls	r3, r3, #2
 81004ba:	4413      	add	r3, r2
 81004bc:	009b      	lsls	r3, r3, #2
 81004be:	4a31      	ldr	r2, [pc, #196]	@ (8100584 <SCH_RunSystemTickTimer+0x16c>)
 81004c0:	4413      	add	r3, r2
 81004c2:	613b      	str	r3, [r7, #16]
            if (TIM_StateRun == pTimerContext->timerState)
 81004c4:	693b      	ldr	r3, [r7, #16]
 81004c6:	781b      	ldrb	r3, [r3, #0]
 81004c8:	2b01      	cmp	r3, #1
 81004ca:	d12c      	bne.n	8100526 <SCH_RunSystemTickTimer+0x10e>
            {
                pTimerContext->currentTick += 1;
 81004cc:	693b      	ldr	r3, [r7, #16]
 81004ce:	685b      	ldr	r3, [r3, #4]
 81004d0:	1c5a      	adds	r2, r3, #1
 81004d2:	693b      	ldr	r3, [r7, #16]
 81004d4:	605a      	str	r2, [r3, #4]
                if (pTimerContext->currentTick >= pTimerContext->timerProperty.timerPeriodInMS)
 81004d6:	693b      	ldr	r3, [r7, #16]
 81004d8:	685a      	ldr	r2, [r3, #4]
 81004da:	693b      	ldr	r3, [r7, #16]
 81004dc:	68db      	ldr	r3, [r3, #12]
 81004de:	429a      	cmp	r2, r3
 81004e0:	d321      	bcc.n	8100526 <SCH_RunSystemTickTimer+0x10e>
                {
                    uint8_t index = timerIndex / 32;
 81004e2:	7dbb      	ldrb	r3, [r7, #22]
 81004e4:	095b      	lsrs	r3, r3, #5
 81004e6:	73fb      	strb	r3, [r7, #15]
                    uint8_t bit = timerIndex % 32;
 81004e8:	7dbb      	ldrb	r3, [r7, #22]
 81004ea:	f003 031f 	and.w	r3, r3, #31
 81004ee:	73bb      	strb	r3, [r7, #14]
                    s_TimerPending[index] |= (1 << bit);  // Set bit for timer
 81004f0:	7bfb      	ldrb	r3, [r7, #15]
 81004f2:	4a25      	ldr	r2, [pc, #148]	@ (8100588 <SCH_RunSystemTickTimer+0x170>)
 81004f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81004f8:	7bbb      	ldrb	r3, [r7, #14]
 81004fa:	2101      	movs	r1, #1
 81004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8100500:	4619      	mov	r1, r3
 8100502:	7bfb      	ldrb	r3, [r7, #15]
 8100504:	430a      	orrs	r2, r1
 8100506:	4920      	ldr	r1, [pc, #128]	@ (8100588 <SCH_RunSystemTickTimer+0x170>)
 8100508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    pTimerContext->currentTick = 0;
 810050c:	693b      	ldr	r3, [r7, #16]
 810050e:	2200      	movs	r2, #0
 8100510:	605a      	str	r2, [r3, #4]
                    pTimerContext->timerState = (SCH_TIMER_PERIODIC == pTimerContext->timerProperty.timerType) ? TIM_StateRun : TIM_StateStop;
 8100512:	693b      	ldr	r3, [r7, #16]
 8100514:	7a1b      	ldrb	r3, [r3, #8]
 8100516:	2b02      	cmp	r3, #2
 8100518:	bf0c      	ite	eq
 810051a:	2301      	moveq	r3, #1
 810051c:	2300      	movne	r3, #0
 810051e:	b2db      	uxtb	r3, r3
 8100520:	461a      	mov	r2, r3
 8100522:	693b      	ldr	r3, [r7, #16]
 8100524:	701a      	strb	r2, [r3, #0]
        for (timerIndex = 0; timerIndex < s_NumOfTimers; timerIndex++)
 8100526:	7dbb      	ldrb	r3, [r7, #22]
 8100528:	3301      	adds	r3, #1
 810052a:	75bb      	strb	r3, [r7, #22]
 810052c:	4b17      	ldr	r3, [pc, #92]	@ (810058c <SCH_RunSystemTickTimer+0x174>)
 810052e:	781b      	ldrb	r3, [r3, #0]
 8100530:	7dba      	ldrb	r2, [r7, #22]
 8100532:	429a      	cmp	r2, r3
 8100534:	d3be      	bcc.n	81004b4 <SCH_RunSystemTickTimer+0x9c>
                }
            }
        }

        // Soft timer
        for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8100536:	2300      	movs	r3, #0
 8100538:	75bb      	strb	r3, [r7, #22]
 810053a:	e010      	b.n	810055e <SCH_RunSystemTickTimer+0x146>
        {
            if (s_SoftTimers[timerIndex] > 0)
 810053c:	7dbb      	ldrb	r3, [r7, #22]
 810053e:	4a14      	ldr	r2, [pc, #80]	@ (8100590 <SCH_RunSystemTickTimer+0x178>)
 8100540:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100544:	2b00      	cmp	r3, #0
 8100546:	d007      	beq.n	8100558 <SCH_RunSystemTickTimer+0x140>
                s_SoftTimers[timerIndex]--;
 8100548:	7dbb      	ldrb	r3, [r7, #22]
 810054a:	4a11      	ldr	r2, [pc, #68]	@ (8100590 <SCH_RunSystemTickTimer+0x178>)
 810054c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8100550:	3a01      	subs	r2, #1
 8100552:	490f      	ldr	r1, [pc, #60]	@ (8100590 <SCH_RunSystemTickTimer+0x178>)
 8100554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (timerIndex = 0; timerIndex < SCH_TIM_LAST; timerIndex++)
 8100558:	7dbb      	ldrb	r3, [r7, #22]
 810055a:	3301      	adds	r3, #1
 810055c:	75bb      	strb	r3, [r7, #22]
 810055e:	7dbb      	ldrb	r3, [r7, #22]
 8100560:	2b01      	cmp	r3, #1
 8100562:	d9eb      	bls.n	810053c <SCH_RunSystemTickTimer+0x124>
        }
    }
}
 8100564:	bf00      	nop
 8100566:	371c      	adds	r7, #28
 8100568:	46bd      	mov	sp, r7
 810056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810056e:	4770      	bx	lr
 8100570:	10032218 	.word	0x10032218
 8100574:	10032454 	.word	0x10032454
 8100578:	1003221c 	.word	0x1003221c
 810057c:	1003244c 	.word	0x1003244c
 8100580:	1003239c 	.word	0x1003239c
 8100584:	100323a0 	.word	0x100323a0
 8100588:	10032450 	.word	0x10032450
 810058c:	10032440 	.word	0x10032440
 8100590:	10032458 	.word	0x10032458

08100594 <SCH_StartScheduler>:
 * @brief  Start scheduler
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_StartScheduler(void)
{
 8100594:	b480      	push	{r7}
 8100596:	af00      	add	r7, sp, #0
    s_SchedulerRunning = TRUE;
 8100598:	4b03      	ldr	r3, [pc, #12]	@ (81005a8 <SCH_StartScheduler+0x14>)
 810059a:	2201      	movs	r2, #1
 810059c:	701a      	strb	r2, [r3, #0]
}
 810059e:	bf00      	nop
 81005a0:	46bd      	mov	sp, r7
 81005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005a6:	4770      	bx	lr
 81005a8:	10032218 	.word	0x10032218

081005ac <SCH_HandleScheduledTask>:
 * @brief  Function handles scheduled task and timer events
 * @param  None
 * @retval None
 *****************************************************************************/
void SCH_HandleScheduledTask(void)
{
 81005ac:	b580      	push	{r7, lr}
 81005ae:	b088      	sub	sp, #32
 81005b0:	af00      	add	r7, sp, #0
    if (s_SchedulerRunning)
 81005b2:	4b5b      	ldr	r3, [pc, #364]	@ (8100720 <SCH_HandleScheduledTask+0x174>)
 81005b4:	781b      	ldrb	r3, [r3, #0]
 81005b6:	2b00      	cmp	r3, #0
 81005b8:	f000 80ad 	beq.w	8100716 <SCH_HandleScheduledTask+0x16a>
    {
        // Task - Process by priority from highest (SCH_TASK_PRIO_3) to lowest (SCH_TASK_PRIO_0)
        for (int8_t priority = SCH_TASK_PRIO_3; priority >= SCH_TASK_PRIO_0; priority--)
 81005bc:	2303      	movs	r3, #3
 81005be:	77fb      	strb	r3, [r7, #31]
 81005c0:	e05c      	b.n	810067c <SCH_HandleScheduledTask+0xd0>
        {
            for (uint8_t index = 0; index < NUM_TASK_PENDING_ARRAYS; index++)
 81005c2:	2300      	movs	r3, #0
 81005c4:	77bb      	strb	r3, [r7, #30]
 81005c6:	e050      	b.n	810066a <SCH_HandleScheduledTask+0xbe>
            {
                uint32_t pending = s_TaskPending[index];
 81005c8:	7fbb      	ldrb	r3, [r7, #30]
 81005ca:	4a56      	ldr	r2, [pc, #344]	@ (8100724 <SCH_HandleScheduledTask+0x178>)
 81005cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81005d0:	60bb      	str	r3, [r7, #8]
                for (uint8_t bit = 0; bit < 32; bit++)
 81005d2:	2300      	movs	r3, #0
 81005d4:	777b      	strb	r3, [r7, #29]
 81005d6:	e042      	b.n	810065e <SCH_HandleScheduledTask+0xb2>
                {
                    if (pending & (1 << bit))
 81005d8:	7f7b      	ldrb	r3, [r7, #29]
 81005da:	2201      	movs	r2, #1
 81005dc:	fa02 f303 	lsl.w	r3, r2, r3
 81005e0:	461a      	mov	r2, r3
 81005e2:	68bb      	ldr	r3, [r7, #8]
 81005e4:	4013      	ands	r3, r2
 81005e6:	2b00      	cmp	r3, #0
 81005e8:	d036      	beq.n	8100658 <SCH_HandleScheduledTask+0xac>
                    {
                        uint8_t taskIndex = index * 32 + bit;
 81005ea:	7fbb      	ldrb	r3, [r7, #30]
 81005ec:	015b      	lsls	r3, r3, #5
 81005ee:	b2da      	uxtb	r2, r3
 81005f0:	7f7b      	ldrb	r3, [r7, #29]
 81005f2:	4413      	add	r3, r2
 81005f4:	71fb      	strb	r3, [r7, #7]
                        if (taskIndex < s_NumOfTaskScheduled)
 81005f6:	4b4c      	ldr	r3, [pc, #304]	@ (8100728 <SCH_HandleScheduledTask+0x17c>)
 81005f8:	781b      	ldrb	r3, [r3, #0]
 81005fa:	79fa      	ldrb	r2, [r7, #7]
 81005fc:	429a      	cmp	r2, r3
 81005fe:	d22b      	bcs.n	8100658 <SCH_HandleScheduledTask+0xac>
                        {
                            SCH_TaskContextTypedef *pTaskContext = &s_TaskContext[taskIndex];
 8100600:	79fa      	ldrb	r2, [r7, #7]
 8100602:	4613      	mov	r3, r2
 8100604:	005b      	lsls	r3, r3, #1
 8100606:	4413      	add	r3, r2
 8100608:	00db      	lsls	r3, r3, #3
 810060a:	4a48      	ldr	r2, [pc, #288]	@ (810072c <SCH_HandleScheduledTask+0x180>)
 810060c:	4413      	add	r3, r2
 810060e:	603b      	str	r3, [r7, #0]
                            if (pTaskContext->taskProperty.taskPriority == priority &&
 8100610:	683b      	ldr	r3, [r7, #0]
 8100612:	7a5b      	ldrb	r3, [r3, #9]
 8100614:	461a      	mov	r2, r3
 8100616:	f997 301f 	ldrsb.w	r3, [r7, #31]
 810061a:	429a      	cmp	r2, r3
 810061c:	d11c      	bne.n	8100658 <SCH_HandleScheduledTask+0xac>
                                pTaskContext->taskState == TASK_StateReady)
 810061e:	683b      	ldr	r3, [r7, #0]
 8100620:	781b      	ldrb	r3, [r3, #0]
                            if (pTaskContext->taskProperty.taskPriority == priority &&
 8100622:	2b01      	cmp	r3, #1
 8100624:	d118      	bne.n	8100658 <SCH_HandleScheduledTask+0xac>
                            {
                                s_TaskPending[index] &= ~(1 << bit);  // Clear bit
 8100626:	7fbb      	ldrb	r3, [r7, #30]
 8100628:	4a3e      	ldr	r2, [pc, #248]	@ (8100724 <SCH_HandleScheduledTask+0x178>)
 810062a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 810062e:	7f7b      	ldrb	r3, [r7, #29]
 8100630:	2101      	movs	r1, #1
 8100632:	fa01 f303 	lsl.w	r3, r1, r3
 8100636:	43db      	mvns	r3, r3
 8100638:	4619      	mov	r1, r3
 810063a:	7fbb      	ldrb	r3, [r7, #30]
 810063c:	400a      	ands	r2, r1
 810063e:	4939      	ldr	r1, [pc, #228]	@ (8100724 <SCH_HandleScheduledTask+0x178>)
 8100640:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                                pTaskContext->taskProperty.taskFunction();
 8100644:	683b      	ldr	r3, [r7, #0]
 8100646:	691b      	ldr	r3, [r3, #16]
 8100648:	4798      	blx	r3
                                // Async tasks, set state to Hold after execution
                                if (pTaskContext->taskProperty.taskType == SCH_TASK_ASYNC)
 810064a:	683b      	ldr	r3, [r7, #0]
 810064c:	7a1b      	ldrb	r3, [r3, #8]
 810064e:	2b02      	cmp	r3, #2
 8100650:	d102      	bne.n	8100658 <SCH_HandleScheduledTask+0xac>
                                {
                                    pTaskContext->taskState = TASK_StateHold;
 8100652:	683b      	ldr	r3, [r7, #0]
 8100654:	2200      	movs	r2, #0
 8100656:	701a      	strb	r2, [r3, #0]
                for (uint8_t bit = 0; bit < 32; bit++)
 8100658:	7f7b      	ldrb	r3, [r7, #29]
 810065a:	3301      	adds	r3, #1
 810065c:	777b      	strb	r3, [r7, #29]
 810065e:	7f7b      	ldrb	r3, [r7, #29]
 8100660:	2b1f      	cmp	r3, #31
 8100662:	d9b9      	bls.n	81005d8 <SCH_HandleScheduledTask+0x2c>
            for (uint8_t index = 0; index < NUM_TASK_PENDING_ARRAYS; index++)
 8100664:	7fbb      	ldrb	r3, [r7, #30]
 8100666:	3301      	adds	r3, #1
 8100668:	77bb      	strb	r3, [r7, #30]
 810066a:	7fbb      	ldrb	r3, [r7, #30]
 810066c:	2b00      	cmp	r3, #0
 810066e:	d0ab      	beq.n	81005c8 <SCH_HandleScheduledTask+0x1c>
        for (int8_t priority = SCH_TASK_PRIO_3; priority >= SCH_TASK_PRIO_0; priority--)
 8100670:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8100674:	b2db      	uxtb	r3, r3
 8100676:	3b01      	subs	r3, #1
 8100678:	b2db      	uxtb	r3, r3
 810067a:	77fb      	strb	r3, [r7, #31]
 810067c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8100680:	2b00      	cmp	r3, #0
 8100682:	da9e      	bge.n	81005c2 <SCH_HandleScheduledTask+0x16>
                }
            }
        }

        // Timer
        for (uint8_t index = 0; index < NUM_TIMER_PENDING_ARRAYS; index++)
 8100684:	2300      	movs	r3, #0
 8100686:	773b      	strb	r3, [r7, #28]
 8100688:	e042      	b.n	8100710 <SCH_HandleScheduledTask+0x164>
        {
            uint32_t pending = s_TimerPending[index];
 810068a:	7f3b      	ldrb	r3, [r7, #28]
 810068c:	4a28      	ldr	r2, [pc, #160]	@ (8100730 <SCH_HandleScheduledTask+0x184>)
 810068e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100692:	617b      	str	r3, [r7, #20]
            for (uint8_t bit = 0; bit < 32; bit++)
 8100694:	2300      	movs	r3, #0
 8100696:	76fb      	strb	r3, [r7, #27]
 8100698:	e034      	b.n	8100704 <SCH_HandleScheduledTask+0x158>
            {
                if (pending & (1 << bit))
 810069a:	7efb      	ldrb	r3, [r7, #27]
 810069c:	2201      	movs	r2, #1
 810069e:	fa02 f303 	lsl.w	r3, r2, r3
 81006a2:	461a      	mov	r2, r3
 81006a4:	697b      	ldr	r3, [r7, #20]
 81006a6:	4013      	ands	r3, r2
 81006a8:	2b00      	cmp	r3, #0
 81006aa:	d028      	beq.n	81006fe <SCH_HandleScheduledTask+0x152>
                {
                    uint8_t timerIndex = index * 32 + bit;
 81006ac:	7f3b      	ldrb	r3, [r7, #28]
 81006ae:	015b      	lsls	r3, r3, #5
 81006b0:	b2da      	uxtb	r2, r3
 81006b2:	7efb      	ldrb	r3, [r7, #27]
 81006b4:	4413      	add	r3, r2
 81006b6:	74fb      	strb	r3, [r7, #19]
                    if (timerIndex < s_NumOfTimers)
 81006b8:	4b1e      	ldr	r3, [pc, #120]	@ (8100734 <SCH_HandleScheduledTask+0x188>)
 81006ba:	781b      	ldrb	r3, [r3, #0]
 81006bc:	7cfa      	ldrb	r2, [r7, #19]
 81006be:	429a      	cmp	r2, r3
 81006c0:	d21d      	bcs.n	81006fe <SCH_HandleScheduledTask+0x152>
                    {
                        s_TimerPending[index] &= ~(1 << bit);  // Clear bit
 81006c2:	7f3b      	ldrb	r3, [r7, #28]
 81006c4:	4a1a      	ldr	r2, [pc, #104]	@ (8100730 <SCH_HandleScheduledTask+0x184>)
 81006c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 81006ca:	7efb      	ldrb	r3, [r7, #27]
 81006cc:	2101      	movs	r1, #1
 81006ce:	fa01 f303 	lsl.w	r3, r1, r3
 81006d2:	43db      	mvns	r3, r3
 81006d4:	4619      	mov	r1, r3
 81006d6:	7f3b      	ldrb	r3, [r7, #28]
 81006d8:	400a      	ands	r2, r1
 81006da:	4915      	ldr	r1, [pc, #84]	@ (8100730 <SCH_HandleScheduledTask+0x184>)
 81006dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                        SCH_TimerContextTypedef *pTimerContext = &s_TimerContext[timerIndex];
 81006e0:	7cfa      	ldrb	r2, [r7, #19]
 81006e2:	4613      	mov	r3, r2
 81006e4:	009b      	lsls	r3, r3, #2
 81006e6:	4413      	add	r3, r2
 81006e8:	009b      	lsls	r3, r3, #2
 81006ea:	4a13      	ldr	r2, [pc, #76]	@ (8100738 <SCH_HandleScheduledTask+0x18c>)
 81006ec:	4413      	add	r3, r2
 81006ee:	60fb      	str	r3, [r7, #12]
                        if (pTimerContext->timerProperty.timerCallbackFunction)
 81006f0:	68fb      	ldr	r3, [r7, #12]
 81006f2:	691b      	ldr	r3, [r3, #16]
 81006f4:	2b00      	cmp	r3, #0
 81006f6:	d002      	beq.n	81006fe <SCH_HandleScheduledTask+0x152>
                        {
                            pTimerContext->timerProperty.timerCallbackFunction();
 81006f8:	68fb      	ldr	r3, [r7, #12]
 81006fa:	691b      	ldr	r3, [r3, #16]
 81006fc:	4798      	blx	r3
            for (uint8_t bit = 0; bit < 32; bit++)
 81006fe:	7efb      	ldrb	r3, [r7, #27]
 8100700:	3301      	adds	r3, #1
 8100702:	76fb      	strb	r3, [r7, #27]
 8100704:	7efb      	ldrb	r3, [r7, #27]
 8100706:	2b1f      	cmp	r3, #31
 8100708:	d9c7      	bls.n	810069a <SCH_HandleScheduledTask+0xee>
        for (uint8_t index = 0; index < NUM_TIMER_PENDING_ARRAYS; index++)
 810070a:	7f3b      	ldrb	r3, [r7, #28]
 810070c:	3301      	adds	r3, #1
 810070e:	773b      	strb	r3, [r7, #28]
 8100710:	7f3b      	ldrb	r3, [r7, #28]
 8100712:	2b00      	cmp	r3, #0
 8100714:	d0b9      	beq.n	810068a <SCH_HandleScheduledTask+0xde>
                    }
                }
            }
        }
    }
}
 8100716:	bf00      	nop
 8100718:	3720      	adds	r7, #32
 810071a:	46bd      	mov	sp, r7
 810071c:	bd80      	pop	{r7, pc}
 810071e:	bf00      	nop
 8100720:	10032218 	.word	0x10032218
 8100724:	1003244c 	.word	0x1003244c
 8100728:	1003239c 	.word	0x1003239c
 810072c:	1003221c 	.word	0x1003221c
 8100730:	10032450 	.word	0x10032450
 8100734:	10032440 	.word	0x10032440
 8100738:	100323a0 	.word	0x100323a0

0810073c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 810073c:	b480      	push	{r7}
 810073e:	b083      	sub	sp, #12
 8100740:	af00      	add	r7, sp, #0
 8100742:	6078      	str	r0, [r7, #4]
 8100744:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8100746:	687b      	ldr	r3, [r7, #4]
 8100748:	683a      	ldr	r2, [r7, #0]
 810074a:	619a      	str	r2, [r3, #24]
}
 810074c:	bf00      	nop
 810074e:	370c      	adds	r7, #12
 8100750:	46bd      	mov	sp, r7
 8100752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100756:	4770      	bx	lr

08100758 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8100758:	b480      	push	{r7}
 810075a:	b083      	sub	sp, #12
 810075c:	af00      	add	r7, sp, #0
 810075e:	6078      	str	r0, [r7, #4]
 8100760:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8100762:	683b      	ldr	r3, [r7, #0]
 8100764:	041a      	lsls	r2, r3, #16
 8100766:	687b      	ldr	r3, [r7, #4]
 8100768:	619a      	str	r2, [r3, #24]
}
 810076a:	bf00      	nop
 810076c:	370c      	adds	r7, #12
 810076e:	46bd      	mov	sp, r7
 8100770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100774:	4770      	bx	lr
	...

08100778 <SharedREG_Write>:
#else /* CORE_CM4 */
    #define SHARED_IS_WRITER(dir)   ((dir) == DIR_M4_TO_M7)
#endif

void SharedREG_Write(SharedDir_t dir, uint16_t slot, uint8_t data)
{
 8100778:	b480      	push	{r7}
 810077a:	b083      	sub	sp, #12
 810077c:	af00      	add	r7, sp, #0
 810077e:	4603      	mov	r3, r0
 8100780:	71fb      	strb	r3, [r7, #7]
 8100782:	460b      	mov	r3, r1
 8100784:	80bb      	strh	r3, [r7, #4]
 8100786:	4613      	mov	r3, r2
 8100788:	71bb      	strb	r3, [r7, #6]
    if (slot > SHARED_SLOT_MAX) return;
 810078a:	88bb      	ldrh	r3, [r7, #4]
 810078c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8100790:	d211      	bcs.n	81007b6 <SharedREG_Write+0x3e>
    if (!SHARED_IS_WRITER(dir)) return;
 8100792:	79fb      	ldrb	r3, [r7, #7]
 8100794:	2b01      	cmp	r3, #1
 8100796:	d110      	bne.n	81007ba <SharedREG_Write+0x42>

    if (dir == DIR_M7_TO_M4)
 8100798:	79fb      	ldrb	r3, [r7, #7]
 810079a:	2b00      	cmp	r3, #0
 810079c:	d104      	bne.n	81007a8 <SharedREG_Write+0x30>
        SHARED.M7_to_M4[slot] = data;
 810079e:	490a      	ldr	r1, [pc, #40]	@ (81007c8 <SharedREG_Write+0x50>)
 81007a0:	88bb      	ldrh	r3, [r7, #4]
 81007a2:	79ba      	ldrb	r2, [r7, #6]
 81007a4:	54ca      	strb	r2, [r1, r3]
 81007a6:	e009      	b.n	81007bc <SharedREG_Write+0x44>
    else
        SHARED.M4_to_M7[slot] = data;
 81007a8:	4a07      	ldr	r2, [pc, #28]	@ (81007c8 <SharedREG_Write+0x50>)
 81007aa:	88bb      	ldrh	r3, [r7, #4]
 81007ac:	4413      	add	r3, r2
 81007ae:	79ba      	ldrb	r2, [r7, #6]
 81007b0:	f883 2400 	strb.w	r2, [r3, #1024]	@ 0x400
 81007b4:	e002      	b.n	81007bc <SharedREG_Write+0x44>
    if (slot > SHARED_SLOT_MAX) return;
 81007b6:	bf00      	nop
 81007b8:	e000      	b.n	81007bc <SharedREG_Write+0x44>
    if (!SHARED_IS_WRITER(dir)) return;
 81007ba:	bf00      	nop

}
 81007bc:	370c      	adds	r7, #12
 81007be:	46bd      	mov	sp, r7
 81007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007c4:	4770      	bx	lr
 81007c6:	bf00      	nop
 81007c8:	3800f800 	.word	0x3800f800

081007cc <BlinkLed1_Task>:

/*************************************************
 *                    Task List                  *
 *************************************************/
static void BlinkLed1_Task(void)
{
 81007cc:	b580      	push	{r7, lr}
 81007ce:	af00      	add	r7, sp, #0
    static uint8_t ledState = 0;
    if (ledState == 0)
 81007d0:	4b0b      	ldr	r3, [pc, #44]	@ (8100800 <BlinkLed1_Task+0x34>)
 81007d2:	781b      	ldrb	r3, [r3, #0]
 81007d4:	2b00      	cmp	r3, #0
 81007d6:	d108      	bne.n	81007ea <BlinkLed1_Task+0x1e>
    {
        ledState = 1;
 81007d8:	4b09      	ldr	r3, [pc, #36]	@ (8100800 <BlinkLed1_Task+0x34>)
 81007da:	2201      	movs	r2, #1
 81007dc:	701a      	strb	r2, [r3, #0]
        LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
 81007de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81007e2:	4808      	ldr	r0, [pc, #32]	@ (8100804 <BlinkLed1_Task+0x38>)
 81007e4:	f7ff ffaa 	bl	810073c <LL_GPIO_SetOutputPin>
    else
    {
        LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
        ledState = 0;
    }
}
 81007e8:	e007      	b.n	81007fa <BlinkLed1_Task+0x2e>
        LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED2_GPIO_Port, MCU_IO_DEBUG_LED2_Pin);
 81007ea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 81007ee:	4805      	ldr	r0, [pc, #20]	@ (8100804 <BlinkLed1_Task+0x38>)
 81007f0:	f7ff ffb2 	bl	8100758 <LL_GPIO_ResetOutputPin>
        ledState = 0;
 81007f4:	4b02      	ldr	r3, [pc, #8]	@ (8100800 <BlinkLed1_Task+0x34>)
 81007f6:	2200      	movs	r2, #0
 81007f8:	701a      	strb	r2, [r3, #0]
}
 81007fa:	bf00      	nop
 81007fc:	bd80      	pop	{r7, pc}
 81007fe:	bf00      	nop
 8100800:	10032461 	.word	0x10032461
 8100804:	58020c00 	.word	0x58020c00

08100808 <BlinkLed2_Task>:

static void BlinkLed2_Task(void)
{
 8100808:	b480      	push	{r7}
 810080a:	af00      	add	r7, sp, #0
//    else
//    {
//        LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
//        ledState = 0;
//    }
}
 810080c:	bf00      	nop
 810080e:	46bd      	mov	sp, r7
 8100810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100814:	4770      	bx	lr
	...

08100818 <CDC_RxPoll_Task>:

static void CDC_RxPoll_Task(void)
{
 8100818:	b580      	push	{r7, lr}
 810081a:	b082      	sub	sp, #8
 810081c:	af00      	add	r7, sp, #0
    if (!CDC_getRxReady()) return;
 810081e:	f000 fd9d 	bl	810135c <CDC_getRxReady>
 8100822:	4603      	mov	r3, r0
 8100824:	2b00      	cmp	r3, #0
 8100826:	d010      	beq.n	810084a <CDC_RxPoll_Task+0x32>
    CDC_setRxReady(0);
 8100828:	2000      	movs	r0, #0
 810082a:	f000 fda3 	bl	8101374 <CDC_setRxReady>

    uint8_t ch;
    while (CDC_RX_RingBuffer_Get(&ch))
 810082e:	e004      	b.n	810083a <CDC_RxPoll_Task+0x22>
    {
        UART_Driver_Write(UART_PORT, ch);
 8100830:	79fb      	ldrb	r3, [r7, #7]
 8100832:	4619      	mov	r1, r3
 8100834:	4807      	ldr	r0, [pc, #28]	@ (8100854 <CDC_RxPoll_Task+0x3c>)
 8100836:	f000 fbb3 	bl	8100fa0 <UART_Driver_Write>
    while (CDC_RX_RingBuffer_Get(&ch))
 810083a:	1dfb      	adds	r3, r7, #7
 810083c:	4618      	mov	r0, r3
 810083e:	f000 fd65 	bl	810130c <CDC_RX_RingBuffer_Get>
 8100842:	4603      	mov	r3, r0
 8100844:	2b00      	cmp	r3, #0
 8100846:	d1f3      	bne.n	8100830 <CDC_RxPoll_Task+0x18>
 8100848:	e000      	b.n	810084c <CDC_RxPoll_Task+0x34>
    if (!CDC_getRxReady()) return;
 810084a:	bf00      	nop
    }
}
 810084c:	3708      	adds	r7, #8
 810084e:	46bd      	mov	sp, r7
 8100850:	bd80      	pop	{r7, pc}
 8100852:	bf00      	nop
 8100854:	40011400 	.word	0x40011400

08100858 <CDC_TxPoll_Task>:

static void CDC_TxPoll_Task(void)
{
 8100858:	b580      	push	{r7, lr}
 810085a:	f6ad 0d08 	subw	sp, sp, #2056	@ 0x808
 810085e:	af00      	add	r7, sp, #0
    if (!CDC_IsTxReady())
 8100860:	f00d fce8 	bl	810e234 <CDC_IsTxReady>
 8100864:	4603      	mov	r3, r0
 8100866:	f083 0301 	eor.w	r3, r3, #1
 810086a:	b2db      	uxtb	r3, r3
 810086c:	2b00      	cmp	r3, #0
 810086e:	d125      	bne.n	81008bc <CDC_TxPoll_Task+0x64>
    {
        return;
    }

    uint8_t pkt[CDC_USB_MAX_PKT];
    uint16_t cnt = 0;
 8100870:	2300      	movs	r3, #0
 8100872:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
    while (cnt < CDC_USB_MAX_PKT && CDC_TX_RingBuffer_Get(&pkt[cnt]))
 8100876:	e004      	b.n	8100882 <CDC_TxPoll_Task+0x2a>
    {
        ++cnt;
 8100878:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 810087c:	3301      	adds	r3, #1
 810087e:	f8a7 3806 	strh.w	r3, [r7, #2054]	@ 0x806
    while (cnt < CDC_USB_MAX_PKT && CDC_TX_RingBuffer_Get(&pkt[cnt]))
 8100882:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8100886:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810088a:	d209      	bcs.n	81008a0 <CDC_TxPoll_Task+0x48>
 810088c:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 8100890:	1d3a      	adds	r2, r7, #4
 8100892:	4413      	add	r3, r2
 8100894:	4618      	mov	r0, r3
 8100896:	f000 fd29 	bl	81012ec <CDC_TX_RingBuffer_Get>
 810089a:	4603      	mov	r3, r0
 810089c:	2b00      	cmp	r3, #0
 810089e:	d1eb      	bne.n	8100878 <CDC_TxPoll_Task+0x20>
    }

    if (cnt == 0)
 81008a0:	f8b7 3806 	ldrh.w	r3, [r7, #2054]	@ 0x806
 81008a4:	2b00      	cmp	r3, #0
 81008a6:	d00b      	beq.n	81008c0 <CDC_TxPoll_Task+0x68>
    {
        return;
    }

    if (CDC_Transmit_FS(pkt, cnt) != USBD_OK)
 81008a8:	f8b7 2806 	ldrh.w	r2, [r7, #2054]	@ 0x806
 81008ac:	1d3b      	adds	r3, r7, #4
 81008ae:	4611      	mov	r1, r2
 81008b0:	4618      	mov	r0, r3
 81008b2:	f00d fc7b 	bl	810e1ac <CDC_Transmit_FS>
 81008b6:	4603      	mov	r3, r0
 81008b8:	2b00      	cmp	r3, #0
 81008ba:	e002      	b.n	81008c2 <CDC_TxPoll_Task+0x6a>
        return;
 81008bc:	bf00      	nop
 81008be:	e000      	b.n	81008c2 <CDC_TxPoll_Task+0x6a>
        return;
 81008c0:	bf00      	nop
    {
        return;
    }
}
 81008c2:	f607 0708 	addw	r7, r7, #2056	@ 0x808
 81008c6:	46bd      	mov	sp, r7
 81008c8:	bd80      	pop	{r7, pc}
	...

081008cc <USB_Check_Task>:

static void USB_Check_Task(void)
{
 81008cc:	b580      	push	{r7, lr}
 81008ce:	b082      	sub	sp, #8
 81008d0:	af00      	add	r7, sp, #0
    if (USB_checkUSB())
 81008d2:	f000 fd5f 	bl	8101394 <USB_checkUSB>
 81008d6:	4603      	mov	r3, r0
 81008d8:	2b00      	cmp	r3, #0
 81008da:	d01a      	beq.n	8100912 <USB_Check_Task+0x46>
    {
    	USB_setCheckFlag(0);
 81008dc:	2000      	movs	r0, #0
 81008de:	f000 fd65 	bl	81013ac <USB_setCheckFlag>
        uint8_t comPortState = CDC_ComPort_IsOpen() ? 1 : 0;
 81008e2:	f00d fc9b 	bl	810e21c <CDC_ComPort_IsOpen>
 81008e6:	4603      	mov	r3, r0
 81008e8:	71fb      	strb	r3, [r7, #7]
        if(comPortState){
 81008ea:	79fb      	ldrb	r3, [r7, #7]
 81008ec:	2b00      	cmp	r3, #0
 81008ee:	d005      	beq.n	81008fc <USB_Check_Task+0x30>
        	LL_GPIO_ResetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
 81008f0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81008f4:	4809      	ldr	r0, [pc, #36]	@ (810091c <USB_Check_Task+0x50>)
 81008f6:	f7ff ff2f 	bl	8100758 <LL_GPIO_ResetOutputPin>
 81008fa:	e004      	b.n	8100906 <USB_Check_Task+0x3a>
        }else{
        	LL_GPIO_SetOutputPin(MCU_IO_DEBUG_LED3_GPIO_Port, MCU_IO_DEBUG_LED3_Pin);
 81008fc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8100900:	4806      	ldr	r0, [pc, #24]	@ (810091c <USB_Check_Task+0x50>)
 8100902:	f7ff ff1b 	bl	810073c <LL_GPIO_SetOutputPin>
        }
        SharedREG_Write(DIR_M4_TO_M7, 0, comPortState);
 8100906:	79fb      	ldrb	r3, [r7, #7]
 8100908:	461a      	mov	r2, r3
 810090a:	2100      	movs	r1, #0
 810090c:	2001      	movs	r0, #1
 810090e:	f7ff ff33 	bl	8100778 <SharedREG_Write>
    }
}
 8100912:	bf00      	nop
 8100914:	3708      	adds	r7, #8
 8100916:	46bd      	mov	sp, r7
 8100918:	bd80      	pop	{r7, pc}
 810091a:	bf00      	nop
 810091c:	58020c00 	.word	0x58020c00

08100920 <UART_Port_RxPoll_Task>:
static void UART_Port_RxPoll_Task(void)
{
 8100920:	b580      	push	{r7, lr}
 8100922:	b082      	sub	sp, #8
 8100924:	af00      	add	r7, sp, #0
    if (UART_DMA_Driver_IsDataAvailable(UART_PORT))
 8100926:	480c      	ldr	r0, [pc, #48]	@ (8100958 <UART_Port_RxPoll_Task+0x38>)
 8100928:	f000 fc3a 	bl	81011a0 <UART_DMA_Driver_IsDataAvailable>
 810092c:	4603      	mov	r3, r0
 810092e:	2b00      	cmp	r3, #0
 8100930:	d00d      	beq.n	810094e <UART_Port_RxPoll_Task+0x2e>
    {
        int c;
        while ((c = UART_DMA_Driver_Read(UART_PORT)) != -1)
 8100932:	e004      	b.n	810093e <UART_Port_RxPoll_Task+0x1e>
        {
            CDC_SendChar((char)c);
 8100934:	687b      	ldr	r3, [r7, #4]
 8100936:	b2db      	uxtb	r3, r3
 8100938:	4618      	mov	r0, r3
 810093a:	f000 fd64 	bl	8101406 <CDC_SendChar>
        while ((c = UART_DMA_Driver_Read(UART_PORT)) != -1)
 810093e:	4806      	ldr	r0, [pc, #24]	@ (8100958 <UART_Port_RxPoll_Task+0x38>)
 8100940:	f000 fc0d 	bl	810115e <UART_DMA_Driver_Read>
 8100944:	6078      	str	r0, [r7, #4]
 8100946:	687b      	ldr	r3, [r7, #4]
 8100948:	f1b3 3fff 	cmp.w	r3, #4294967295
 810094c:	d1f2      	bne.n	8100934 <UART_Port_RxPoll_Task+0x14>
        }
    }
}
 810094e:	bf00      	nop
 8100950:	3708      	adds	r7, #8
 8100952:	46bd      	mov	sp, r7
 8100954:	bd80      	pop	{r7, pc}
 8100956:	bf00      	nop
 8100958:	40011400 	.word	0x40011400

0810095c <SchedulerTasks_Create>:
 *************************************************/

#define NUM_SCHEDULER_TASKS (sizeof(schedulerTasks) / sizeof(schedulerTasks[0]))

void SchedulerTasks_Create(void)
{
 810095c:	b580      	push	{r7, lr}
 810095e:	b082      	sub	sp, #8
 8100960:	af00      	add	r7, sp, #0
    for (uint8_t i = 0; i < NUM_SCHEDULER_TASKS; i++)
 8100962:	2300      	movs	r3, #0
 8100964:	71fb      	strb	r3, [r7, #7]
 8100966:	e029      	b.n	81009bc <SchedulerTasks_Create+0x60>
    {
        SCH_TASK_CreateTask(&schedulerTasks[i].taskHandle, &schedulerTasks[i].taskProperty);
 8100968:	79fa      	ldrb	r2, [r7, #7]
 810096a:	4613      	mov	r3, r2
 810096c:	009b      	lsls	r3, r3, #2
 810096e:	4413      	add	r3, r2
 8100970:	009b      	lsls	r3, r3, #2
 8100972:	4a16      	ldr	r2, [pc, #88]	@ (81009cc <SchedulerTasks_Create+0x70>)
 8100974:	1898      	adds	r0, r3, r2
 8100976:	79fa      	ldrb	r2, [r7, #7]
 8100978:	4613      	mov	r3, r2
 810097a:	009b      	lsls	r3, r3, #2
 810097c:	4413      	add	r3, r2
 810097e:	009b      	lsls	r3, r3, #2
 8100980:	4a12      	ldr	r2, [pc, #72]	@ (81009cc <SchedulerTasks_Create+0x70>)
 8100982:	4413      	add	r3, r2
 8100984:	3304      	adds	r3, #4
 8100986:	4619      	mov	r1, r3
 8100988:	f7ff fd02 	bl	8100390 <SCH_TASK_CreateTask>
        if (schedulerTasks[i].taskProperty.taskType == SCH_TASK_ASYNC)
 810098c:	79fa      	ldrb	r2, [r7, #7]
 810098e:	490f      	ldr	r1, [pc, #60]	@ (81009cc <SchedulerTasks_Create+0x70>)
 8100990:	4613      	mov	r3, r2
 8100992:	009b      	lsls	r3, r3, #2
 8100994:	4413      	add	r3, r2
 8100996:	009b      	lsls	r3, r3, #2
 8100998:	440b      	add	r3, r1
 810099a:	3304      	adds	r3, #4
 810099c:	781b      	ldrb	r3, [r3, #0]
 810099e:	2b02      	cmp	r3, #2
 81009a0:	d109      	bne.n	81009b6 <SchedulerTasks_Create+0x5a>
        {
            asyncTaskHandle = schedulerTasks[i].taskHandle;
 81009a2:	79fa      	ldrb	r2, [r7, #7]
 81009a4:	4909      	ldr	r1, [pc, #36]	@ (81009cc <SchedulerTasks_Create+0x70>)
 81009a6:	4613      	mov	r3, r2
 81009a8:	009b      	lsls	r3, r3, #2
 81009aa:	4413      	add	r3, r2
 81009ac:	009b      	lsls	r3, r3, #2
 81009ae:	440b      	add	r3, r1
 81009b0:	781a      	ldrb	r2, [r3, #0]
 81009b2:	4b07      	ldr	r3, [pc, #28]	@ (81009d0 <SchedulerTasks_Create+0x74>)
 81009b4:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < NUM_SCHEDULER_TASKS; i++)
 81009b6:	79fb      	ldrb	r3, [r7, #7]
 81009b8:	3301      	adds	r3, #1
 81009ba:	71fb      	strb	r3, [r7, #7]
 81009bc:	79fb      	ldrb	r3, [r7, #7]
 81009be:	2b05      	cmp	r3, #5
 81009c0:	d9d2      	bls.n	8100968 <SchedulerTasks_Create+0xc>
        }
    }
}
 81009c2:	bf00      	nop
 81009c4:	bf00      	nop
 81009c6:	3708      	adds	r7, #8
 81009c8:	46bd      	mov	sp, r7
 81009ca:	bd80      	pop	{r7, pc}
 81009cc:	10032000 	.word	0x10032000
 81009d0:	10032460 	.word	0x10032460

081009d4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 81009d4:	b480      	push	{r7}
 81009d6:	b083      	sub	sp, #12
 81009d8:	af00      	add	r7, sp, #0
 81009da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 81009dc:	687b      	ldr	r3, [r7, #4]
 81009de:	681b      	ldr	r3, [r3, #0]
 81009e0:	f043 0201 	orr.w	r2, r3, #1
 81009e4:	687b      	ldr	r3, [r7, #4]
 81009e6:	601a      	str	r2, [r3, #0]
}
 81009e8:	bf00      	nop
 81009ea:	370c      	adds	r7, #12
 81009ec:	46bd      	mov	sp, r7
 81009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81009f2:	4770      	bx	lr

081009f4 <LL_USART_Disable>:
  * @rmtoll CR1          UE            LL_USART_Disable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Disable(USART_TypeDef *USARTx)
{
 81009f4:	b480      	push	{r7}
 81009f6:	b083      	sub	sp, #12
 81009f8:	af00      	add	r7, sp, #0
 81009fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_UE);
 81009fc:	687b      	ldr	r3, [r7, #4]
 81009fe:	681b      	ldr	r3, [r3, #0]
 8100a00:	f023 0201 	bic.w	r2, r3, #1
 8100a04:	687b      	ldr	r3, [r7, #4]
 8100a06:	601a      	str	r2, [r3, #0]
}
 8100a08:	bf00      	nop
 8100a0a:	370c      	adds	r7, #12
 8100a0c:	46bd      	mov	sp, r7
 8100a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a12:	4770      	bx	lr

08100a14 <LL_USART_IsActiveFlag_TXE_TXFNF>:
  * @rmtoll ISR          TXE_TXFNF     LL_USART_IsActiveFlag_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8100a14:	b480      	push	{r7}
 8100a16:	b083      	sub	sp, #12
 8100a18:	af00      	add	r7, sp, #0
 8100a1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8100a1c:	687b      	ldr	r3, [r7, #4]
 8100a1e:	69db      	ldr	r3, [r3, #28]
 8100a20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100a24:	2b80      	cmp	r3, #128	@ 0x80
 8100a26:	d101      	bne.n	8100a2c <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8100a28:	2301      	movs	r3, #1
 8100a2a:	e000      	b.n	8100a2e <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8100a2c:	2300      	movs	r3, #0
}
 8100a2e:	4618      	mov	r0, r3
 8100a30:	370c      	adds	r7, #12
 8100a32:	46bd      	mov	sp, r7
 8100a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a38:	4770      	bx	lr

08100a3a <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8100a3a:	b480      	push	{r7}
 8100a3c:	b089      	sub	sp, #36	@ 0x24
 8100a3e:	af00      	add	r7, sp, #0
 8100a40:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8100a42:	687b      	ldr	r3, [r7, #4]
 8100a44:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100a46:	68fb      	ldr	r3, [r7, #12]
 8100a48:	e853 3f00 	ldrex	r3, [r3]
 8100a4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8100a4e:	68bb      	ldr	r3, [r7, #8]
 8100a50:	f043 0310 	orr.w	r3, r3, #16
 8100a54:	61fb      	str	r3, [r7, #28]
 8100a56:	687b      	ldr	r3, [r7, #4]
 8100a58:	69fa      	ldr	r2, [r7, #28]
 8100a5a:	61ba      	str	r2, [r7, #24]
 8100a5c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100a5e:	6979      	ldr	r1, [r7, #20]
 8100a60:	69ba      	ldr	r2, [r7, #24]
 8100a62:	e841 2300 	strex	r3, r2, [r1]
 8100a66:	613b      	str	r3, [r7, #16]
   return(result);
 8100a68:	693b      	ldr	r3, [r7, #16]
 8100a6a:	2b00      	cmp	r3, #0
 8100a6c:	d1e9      	bne.n	8100a42 <LL_USART_EnableIT_IDLE+0x8>
}
 8100a6e:	bf00      	nop
 8100a70:	bf00      	nop
 8100a72:	3724      	adds	r7, #36	@ 0x24
 8100a74:	46bd      	mov	sp, r7
 8100a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a7a:	4770      	bx	lr

08100a7c <LL_USART_EnableIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_EnableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8100a7c:	b480      	push	{r7}
 8100a7e:	b089      	sub	sp, #36	@ 0x24
 8100a80:	af00      	add	r7, sp, #0
 8100a82:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8100a84:	687b      	ldr	r3, [r7, #4]
 8100a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100a88:	68fb      	ldr	r3, [r7, #12]
 8100a8a:	e853 3f00 	ldrex	r3, [r3]
 8100a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8100a90:	68bb      	ldr	r3, [r7, #8]
 8100a92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8100a96:	61fb      	str	r3, [r7, #28]
 8100a98:	687b      	ldr	r3, [r7, #4]
 8100a9a:	69fa      	ldr	r2, [r7, #28]
 8100a9c:	61ba      	str	r2, [r7, #24]
 8100a9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100aa0:	6979      	ldr	r1, [r7, #20]
 8100aa2:	69ba      	ldr	r2, [r7, #24]
 8100aa4:	e841 2300 	strex	r3, r2, [r1]
 8100aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8100aaa:	693b      	ldr	r3, [r7, #16]
 8100aac:	2b00      	cmp	r3, #0
 8100aae:	d1e9      	bne.n	8100a84 <LL_USART_EnableIT_TXE_TXFNF+0x8>
}
 8100ab0:	bf00      	nop
 8100ab2:	bf00      	nop
 8100ab4:	3724      	adds	r7, #36	@ 0x24
 8100ab6:	46bd      	mov	sp, r7
 8100ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100abc:	4770      	bx	lr

08100abe <LL_USART_DisableIT_TXE_TXFNF>:
  * @rmtoll CR1        TXEIE_TXFNFIE  LL_USART_DisableIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_TXE_TXFNF(USART_TypeDef *USARTx)
{
 8100abe:	b480      	push	{r7}
 8100ac0:	b089      	sub	sp, #36	@ 0x24
 8100ac2:	af00      	add	r7, sp, #0
 8100ac4:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE);
 8100ac6:	687b      	ldr	r3, [r7, #4]
 8100ac8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100aca:	68fb      	ldr	r3, [r7, #12]
 8100acc:	e853 3f00 	ldrex	r3, [r3]
 8100ad0:	60bb      	str	r3, [r7, #8]
   return(result);
 8100ad2:	68bb      	ldr	r3, [r7, #8]
 8100ad4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8100ad8:	61fb      	str	r3, [r7, #28]
 8100ada:	687b      	ldr	r3, [r7, #4]
 8100adc:	69fa      	ldr	r2, [r7, #28]
 8100ade:	61ba      	str	r2, [r7, #24]
 8100ae0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100ae2:	6979      	ldr	r1, [r7, #20]
 8100ae4:	69ba      	ldr	r2, [r7, #24]
 8100ae6:	e841 2300 	strex	r3, r2, [r1]
 8100aea:	613b      	str	r3, [r7, #16]
   return(result);
 8100aec:	693b      	ldr	r3, [r7, #16]
 8100aee:	2b00      	cmp	r3, #0
 8100af0:	d1e9      	bne.n	8100ac6 <LL_USART_DisableIT_TXE_TXFNF+0x8>
}
 8100af2:	bf00      	nop
 8100af4:	bf00      	nop
 8100af6:	3724      	adds	r7, #36	@ 0x24
 8100af8:	46bd      	mov	sp, r7
 8100afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100afe:	4770      	bx	lr

08100b00 <LL_USART_IsEnabledIT_TXE_TXFNF>:
  * @rmtoll CR1         TXEIE_TXFNFIE  LL_USART_IsEnabledIT_TXE_TXFNF
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_TXE_TXFNF(const USART_TypeDef *USARTx)
{
 8100b00:	b480      	push	{r7}
 8100b02:	b083      	sub	sp, #12
 8100b04:	af00      	add	r7, sp, #0
 8100b06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE_TXFNFIE) == (USART_CR1_TXEIE_TXFNFIE)) ? 1UL : 0UL);
 8100b08:	687b      	ldr	r3, [r7, #4]
 8100b0a:	681b      	ldr	r3, [r3, #0]
 8100b0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8100b10:	2b80      	cmp	r3, #128	@ 0x80
 8100b12:	d101      	bne.n	8100b18 <LL_USART_IsEnabledIT_TXE_TXFNF+0x18>
 8100b14:	2301      	movs	r3, #1
 8100b16:	e000      	b.n	8100b1a <LL_USART_IsEnabledIT_TXE_TXFNF+0x1a>
 8100b18:	2300      	movs	r3, #0
}
 8100b1a:	4618      	mov	r0, r3
 8100b1c:	370c      	adds	r7, #12
 8100b1e:	46bd      	mov	sp, r7
 8100b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b24:	4770      	bx	lr

08100b26 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8100b26:	b480      	push	{r7}
 8100b28:	b089      	sub	sp, #36	@ 0x24
 8100b2a:	af00      	add	r7, sp, #0
 8100b2c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8100b2e:	687b      	ldr	r3, [r7, #4]
 8100b30:	3308      	adds	r3, #8
 8100b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100b34:	68fb      	ldr	r3, [r7, #12]
 8100b36:	e853 3f00 	ldrex	r3, [r3]
 8100b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8100b3c:	68bb      	ldr	r3, [r7, #8]
 8100b3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8100b42:	61fb      	str	r3, [r7, #28]
 8100b44:	687b      	ldr	r3, [r7, #4]
 8100b46:	3308      	adds	r3, #8
 8100b48:	69fa      	ldr	r2, [r7, #28]
 8100b4a:	61ba      	str	r2, [r7, #24]
 8100b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100b4e:	6979      	ldr	r1, [r7, #20]
 8100b50:	69ba      	ldr	r2, [r7, #24]
 8100b52:	e841 2300 	strex	r3, r2, [r1]
 8100b56:	613b      	str	r3, [r7, #16]
   return(result);
 8100b58:	693b      	ldr	r3, [r7, #16]
 8100b5a:	2b00      	cmp	r3, #0
 8100b5c:	d1e7      	bne.n	8100b2e <LL_USART_EnableDMAReq_RX+0x8>
}
 8100b5e:	bf00      	nop
 8100b60:	bf00      	nop
 8100b62:	3724      	adds	r7, #36	@ 0x24
 8100b64:	46bd      	mov	sp, r7
 8100b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b6a:	4770      	bx	lr

08100b6c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8100b6c:	b480      	push	{r7}
 8100b6e:	b085      	sub	sp, #20
 8100b70:	af00      	add	r7, sp, #0
 8100b72:	6078      	str	r0, [r7, #4]
 8100b74:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8100b76:	683b      	ldr	r3, [r7, #0]
 8100b78:	2b00      	cmp	r3, #0
 8100b7a:	d103      	bne.n	8100b84 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8100b7c:	687b      	ldr	r3, [r7, #4]
 8100b7e:	3328      	adds	r3, #40	@ 0x28
 8100b80:	60fb      	str	r3, [r7, #12]
 8100b82:	e002      	b.n	8100b8a <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8100b84:	687b      	ldr	r3, [r7, #4]
 8100b86:	3324      	adds	r3, #36	@ 0x24
 8100b88:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8100b8a:	68fb      	ldr	r3, [r7, #12]
}
 8100b8c:	4618      	mov	r0, r3
 8100b8e:	3714      	adds	r7, #20
 8100b90:	46bd      	mov	sp, r7
 8100b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b96:	4770      	bx	lr

08100b98 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8100b98:	b480      	push	{r7}
 8100b9a:	b083      	sub	sp, #12
 8100b9c:	af00      	add	r7, sp, #0
 8100b9e:	6078      	str	r0, [r7, #4]
 8100ba0:	460b      	mov	r3, r1
 8100ba2:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8100ba4:	78fa      	ldrb	r2, [r7, #3]
 8100ba6:	687b      	ldr	r3, [r7, #4]
 8100ba8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8100baa:	bf00      	nop
 8100bac:	370c      	adds	r7, #12
 8100bae:	46bd      	mov	sp, r7
 8100bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bb4:	4770      	bx	lr
	...

08100bb8 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100bb8:	b480      	push	{r7}
 8100bba:	b085      	sub	sp, #20
 8100bbc:	af00      	add	r7, sp, #0
 8100bbe:	6078      	str	r0, [r7, #4]
 8100bc0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100bc2:	687b      	ldr	r3, [r7, #4]
 8100bc4:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8100bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8100bf8 <LL_DMA_EnableStream+0x40>)
 8100bc8:	683b      	ldr	r3, [r7, #0]
 8100bca:	4413      	add	r3, r2
 8100bcc:	781b      	ldrb	r3, [r3, #0]
 8100bce:	461a      	mov	r2, r3
 8100bd0:	68fb      	ldr	r3, [r7, #12]
 8100bd2:	4413      	add	r3, r2
 8100bd4:	681b      	ldr	r3, [r3, #0]
 8100bd6:	4908      	ldr	r1, [pc, #32]	@ (8100bf8 <LL_DMA_EnableStream+0x40>)
 8100bd8:	683a      	ldr	r2, [r7, #0]
 8100bda:	440a      	add	r2, r1
 8100bdc:	7812      	ldrb	r2, [r2, #0]
 8100bde:	4611      	mov	r1, r2
 8100be0:	68fa      	ldr	r2, [r7, #12]
 8100be2:	440a      	add	r2, r1
 8100be4:	f043 0301 	orr.w	r3, r3, #1
 8100be8:	6013      	str	r3, [r2, #0]
}
 8100bea:	bf00      	nop
 8100bec:	3714      	adds	r7, #20
 8100bee:	46bd      	mov	sp, r7
 8100bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bf4:	4770      	bx	lr
 8100bf6:	bf00      	nop
 8100bf8:	0810ec38 	.word	0x0810ec38

08100bfc <LL_DMA_DisableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100bfc:	b480      	push	{r7}
 8100bfe:	b085      	sub	sp, #20
 8100c00:	af00      	add	r7, sp, #0
 8100c02:	6078      	str	r0, [r7, #4]
 8100c04:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100c06:	687b      	ldr	r3, [r7, #4]
 8100c08:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8100c0a:	4a0c      	ldr	r2, [pc, #48]	@ (8100c3c <LL_DMA_DisableStream+0x40>)
 8100c0c:	683b      	ldr	r3, [r7, #0]
 8100c0e:	4413      	add	r3, r2
 8100c10:	781b      	ldrb	r3, [r3, #0]
 8100c12:	461a      	mov	r2, r3
 8100c14:	68fb      	ldr	r3, [r7, #12]
 8100c16:	4413      	add	r3, r2
 8100c18:	681b      	ldr	r3, [r3, #0]
 8100c1a:	4908      	ldr	r1, [pc, #32]	@ (8100c3c <LL_DMA_DisableStream+0x40>)
 8100c1c:	683a      	ldr	r2, [r7, #0]
 8100c1e:	440a      	add	r2, r1
 8100c20:	7812      	ldrb	r2, [r2, #0]
 8100c22:	4611      	mov	r1, r2
 8100c24:	68fa      	ldr	r2, [r7, #12]
 8100c26:	440a      	add	r2, r1
 8100c28:	f023 0301 	bic.w	r3, r3, #1
 8100c2c:	6013      	str	r3, [r2, #0]
}
 8100c2e:	bf00      	nop
 8100c30:	3714      	adds	r7, #20
 8100c32:	46bd      	mov	sp, r7
 8100c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c38:	4770      	bx	lr
 8100c3a:	bf00      	nop
 8100c3c:	0810ec38 	.word	0x0810ec38

08100c40 <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
 8100c40:	b480      	push	{r7}
 8100c42:	b087      	sub	sp, #28
 8100c44:	af00      	add	r7, sp, #0
 8100c46:	60f8      	str	r0, [r7, #12]
 8100c48:	60b9      	str	r1, [r7, #8]
 8100c4a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100c4c:	68fb      	ldr	r3, [r7, #12]
 8100c4e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8100c50:	4a0d      	ldr	r2, [pc, #52]	@ (8100c88 <LL_DMA_SetDataLength+0x48>)
 8100c52:	68bb      	ldr	r3, [r7, #8]
 8100c54:	4413      	add	r3, r2
 8100c56:	781b      	ldrb	r3, [r3, #0]
 8100c58:	461a      	mov	r2, r3
 8100c5a:	697b      	ldr	r3, [r7, #20]
 8100c5c:	4413      	add	r3, r2
 8100c5e:	685b      	ldr	r3, [r3, #4]
 8100c60:	0c1b      	lsrs	r3, r3, #16
 8100c62:	041b      	lsls	r3, r3, #16
 8100c64:	4908      	ldr	r1, [pc, #32]	@ (8100c88 <LL_DMA_SetDataLength+0x48>)
 8100c66:	68ba      	ldr	r2, [r7, #8]
 8100c68:	440a      	add	r2, r1
 8100c6a:	7812      	ldrb	r2, [r2, #0]
 8100c6c:	4611      	mov	r1, r2
 8100c6e:	697a      	ldr	r2, [r7, #20]
 8100c70:	440a      	add	r2, r1
 8100c72:	4611      	mov	r1, r2
 8100c74:	687a      	ldr	r2, [r7, #4]
 8100c76:	4313      	orrs	r3, r2
 8100c78:	604b      	str	r3, [r1, #4]
}
 8100c7a:	bf00      	nop
 8100c7c:	371c      	adds	r7, #28
 8100c7e:	46bd      	mov	sp, r7
 8100c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c84:	4770      	bx	lr
 8100c86:	bf00      	nop
 8100c88:	0810ec38 	.word	0x0810ec38

08100c8c <LL_DMA_GetDataLength>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval Between 0 to 0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_DMA_GetDataLength(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100c8c:	b480      	push	{r7}
 8100c8e:	b085      	sub	sp, #20
 8100c90:	af00      	add	r7, sp, #0
 8100c92:	6078      	str	r0, [r7, #4]
 8100c94:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100c96:	687b      	ldr	r3, [r7, #4]
 8100c98:	60fb      	str	r3, [r7, #12]

  return (READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT));
 8100c9a:	4a07      	ldr	r2, [pc, #28]	@ (8100cb8 <LL_DMA_GetDataLength+0x2c>)
 8100c9c:	683b      	ldr	r3, [r7, #0]
 8100c9e:	4413      	add	r3, r2
 8100ca0:	781b      	ldrb	r3, [r3, #0]
 8100ca2:	461a      	mov	r2, r3
 8100ca4:	68fb      	ldr	r3, [r7, #12]
 8100ca6:	4413      	add	r3, r2
 8100ca8:	685b      	ldr	r3, [r3, #4]
 8100caa:	b29b      	uxth	r3, r3
}
 8100cac:	4618      	mov	r0, r3
 8100cae:	3714      	adds	r7, #20
 8100cb0:	46bd      	mov	sp, r7
 8100cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cb6:	4770      	bx	lr
 8100cb8:	0810ec38 	.word	0x0810ec38

08100cbc <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8100cbc:	b480      	push	{r7}
 8100cbe:	b087      	sub	sp, #28
 8100cc0:	af00      	add	r7, sp, #0
 8100cc2:	60f8      	str	r0, [r7, #12]
 8100cc4:	60b9      	str	r1, [r7, #8]
 8100cc6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100cc8:	68fb      	ldr	r3, [r7, #12]
 8100cca:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8100ccc:	4a07      	ldr	r2, [pc, #28]	@ (8100cec <LL_DMA_SetMemoryAddress+0x30>)
 8100cce:	68bb      	ldr	r3, [r7, #8]
 8100cd0:	4413      	add	r3, r2
 8100cd2:	781b      	ldrb	r3, [r3, #0]
 8100cd4:	461a      	mov	r2, r3
 8100cd6:	697b      	ldr	r3, [r7, #20]
 8100cd8:	4413      	add	r3, r2
 8100cda:	461a      	mov	r2, r3
 8100cdc:	687b      	ldr	r3, [r7, #4]
 8100cde:	60d3      	str	r3, [r2, #12]
}
 8100ce0:	bf00      	nop
 8100ce2:	371c      	adds	r7, #28
 8100ce4:	46bd      	mov	sp, r7
 8100ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cea:	4770      	bx	lr
 8100cec:	0810ec38 	.word	0x0810ec38

08100cf0 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(const DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8100cf0:	b480      	push	{r7}
 8100cf2:	b087      	sub	sp, #28
 8100cf4:	af00      	add	r7, sp, #0
 8100cf6:	60f8      	str	r0, [r7, #12]
 8100cf8:	60b9      	str	r1, [r7, #8]
 8100cfa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100cfc:	68fb      	ldr	r3, [r7, #12]
 8100cfe:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8100d00:	4a07      	ldr	r2, [pc, #28]	@ (8100d20 <LL_DMA_SetPeriphAddress+0x30>)
 8100d02:	68bb      	ldr	r3, [r7, #8]
 8100d04:	4413      	add	r3, r2
 8100d06:	781b      	ldrb	r3, [r3, #0]
 8100d08:	461a      	mov	r2, r3
 8100d0a:	697b      	ldr	r3, [r7, #20]
 8100d0c:	4413      	add	r3, r2
 8100d0e:	461a      	mov	r2, r3
 8100d10:	687b      	ldr	r3, [r7, #4]
 8100d12:	6093      	str	r3, [r2, #8]
}
 8100d14:	bf00      	nop
 8100d16:	371c      	adds	r7, #28
 8100d18:	46bd      	mov	sp, r7
 8100d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d1e:	4770      	bx	lr
 8100d20:	0810ec38 	.word	0x0810ec38

08100d24 <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100d24:	b480      	push	{r7}
 8100d26:	b085      	sub	sp, #20
 8100d28:	af00      	add	r7, sp, #0
 8100d2a:	6078      	str	r0, [r7, #4]
 8100d2c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100d2e:	687b      	ldr	r3, [r7, #4]
 8100d30:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE);
 8100d32:	4a0c      	ldr	r2, [pc, #48]	@ (8100d64 <LL_DMA_EnableIT_HT+0x40>)
 8100d34:	683b      	ldr	r3, [r7, #0]
 8100d36:	4413      	add	r3, r2
 8100d38:	781b      	ldrb	r3, [r3, #0]
 8100d3a:	461a      	mov	r2, r3
 8100d3c:	68fb      	ldr	r3, [r7, #12]
 8100d3e:	4413      	add	r3, r2
 8100d40:	681b      	ldr	r3, [r3, #0]
 8100d42:	4908      	ldr	r1, [pc, #32]	@ (8100d64 <LL_DMA_EnableIT_HT+0x40>)
 8100d44:	683a      	ldr	r2, [r7, #0]
 8100d46:	440a      	add	r2, r1
 8100d48:	7812      	ldrb	r2, [r2, #0]
 8100d4a:	4611      	mov	r1, r2
 8100d4c:	68fa      	ldr	r2, [r7, #12]
 8100d4e:	440a      	add	r2, r1
 8100d50:	f043 0308 	orr.w	r3, r3, #8
 8100d54:	6013      	str	r3, [r2, #0]
}
 8100d56:	bf00      	nop
 8100d58:	3714      	adds	r7, #20
 8100d5a:	46bd      	mov	sp, r7
 8100d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d60:	4770      	bx	lr
 8100d62:	bf00      	nop
 8100d64:	0810ec38 	.word	0x0810ec38

08100d68 <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100d68:	b480      	push	{r7}
 8100d6a:	b085      	sub	sp, #20
 8100d6c:	af00      	add	r7, sp, #0
 8100d6e:	6078      	str	r0, [r7, #4]
 8100d70:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100d72:	687b      	ldr	r3, [r7, #4]
 8100d74:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE);
 8100d76:	4a0c      	ldr	r2, [pc, #48]	@ (8100da8 <LL_DMA_EnableIT_TE+0x40>)
 8100d78:	683b      	ldr	r3, [r7, #0]
 8100d7a:	4413      	add	r3, r2
 8100d7c:	781b      	ldrb	r3, [r3, #0]
 8100d7e:	461a      	mov	r2, r3
 8100d80:	68fb      	ldr	r3, [r7, #12]
 8100d82:	4413      	add	r3, r2
 8100d84:	681b      	ldr	r3, [r3, #0]
 8100d86:	4908      	ldr	r1, [pc, #32]	@ (8100da8 <LL_DMA_EnableIT_TE+0x40>)
 8100d88:	683a      	ldr	r2, [r7, #0]
 8100d8a:	440a      	add	r2, r1
 8100d8c:	7812      	ldrb	r2, [r2, #0]
 8100d8e:	4611      	mov	r1, r2
 8100d90:	68fa      	ldr	r2, [r7, #12]
 8100d92:	440a      	add	r2, r1
 8100d94:	f043 0304 	orr.w	r3, r3, #4
 8100d98:	6013      	str	r3, [r2, #0]
}
 8100d9a:	bf00      	nop
 8100d9c:	3714      	adds	r7, #20
 8100d9e:	46bd      	mov	sp, r7
 8100da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100da4:	4770      	bx	lr
 8100da6:	bf00      	nop
 8100da8:	0810ec38 	.word	0x0810ec38

08100dac <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 8100dac:	b480      	push	{r7}
 8100dae:	b085      	sub	sp, #20
 8100db0:	af00      	add	r7, sp, #0
 8100db2:	6078      	str	r0, [r7, #4]
 8100db4:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8100db6:	687b      	ldr	r3, [r7, #4]
 8100db8:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE);
 8100dba:	4a0c      	ldr	r2, [pc, #48]	@ (8100dec <LL_DMA_EnableIT_TC+0x40>)
 8100dbc:	683b      	ldr	r3, [r7, #0]
 8100dbe:	4413      	add	r3, r2
 8100dc0:	781b      	ldrb	r3, [r3, #0]
 8100dc2:	461a      	mov	r2, r3
 8100dc4:	68fb      	ldr	r3, [r7, #12]
 8100dc6:	4413      	add	r3, r2
 8100dc8:	681b      	ldr	r3, [r3, #0]
 8100dca:	4908      	ldr	r1, [pc, #32]	@ (8100dec <LL_DMA_EnableIT_TC+0x40>)
 8100dcc:	683a      	ldr	r2, [r7, #0]
 8100dce:	440a      	add	r2, r1
 8100dd0:	7812      	ldrb	r2, [r2, #0]
 8100dd2:	4611      	mov	r1, r2
 8100dd4:	68fa      	ldr	r2, [r7, #12]
 8100dd6:	440a      	add	r2, r1
 8100dd8:	f043 0310 	orr.w	r3, r3, #16
 8100ddc:	6013      	str	r3, [r2, #0]
}
 8100dde:	bf00      	nop
 8100de0:	3714      	adds	r7, #20
 8100de2:	46bd      	mov	sp, r7
 8100de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100de8:	4770      	bx	lr
 8100dea:	bf00      	nop
 8100dec:	0810ec38 	.word	0x0810ec38

08100df0 <UART_DMA_Driver_Init>:
        .old_dma_pos       = 0
    }
};

Std_ReturnType UART_DMA_Driver_Init(void)
{
 8100df0:	b5b0      	push	{r4, r5, r7, lr}
 8100df2:	b084      	sub	sp, #16
 8100df4:	af02      	add	r7, sp, #8
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100df6:	2300      	movs	r3, #0
 8100df8:	607b      	str	r3, [r7, #4]
 8100dfa:	e022      	b.n	8100e42 <UART_DMA_Driver_Init+0x52>
        LL_USART_Disable(uart_dma_drivers[i].uart);
 8100dfc:	494b      	ldr	r1, [pc, #300]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100dfe:	687a      	ldr	r2, [r7, #4]
 8100e00:	4613      	mov	r3, r2
 8100e02:	011b      	lsls	r3, r3, #4
 8100e04:	1a9b      	subs	r3, r3, r2
 8100e06:	00db      	lsls	r3, r3, #3
 8100e08:	440b      	add	r3, r1
 8100e0a:	681b      	ldr	r3, [r3, #0]
 8100e0c:	4618      	mov	r0, r3
 8100e0e:	f7ff fdf1 	bl	81009f4 <LL_USART_Disable>
        LL_DMA_DisableStream(uart_dma_drivers[i].dma_rx_instance, uart_dma_drivers[i].dma_rx_channel);
 8100e12:	4946      	ldr	r1, [pc, #280]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100e14:	687a      	ldr	r2, [r7, #4]
 8100e16:	4613      	mov	r3, r2
 8100e18:	011b      	lsls	r3, r3, #4
 8100e1a:	1a9b      	subs	r3, r3, r2
 8100e1c:	00db      	lsls	r3, r3, #3
 8100e1e:	440b      	add	r3, r1
 8100e20:	3364      	adds	r3, #100	@ 0x64
 8100e22:	6818      	ldr	r0, [r3, #0]
 8100e24:	4941      	ldr	r1, [pc, #260]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100e26:	687a      	ldr	r2, [r7, #4]
 8100e28:	4613      	mov	r3, r2
 8100e2a:	011b      	lsls	r3, r3, #4
 8100e2c:	1a9b      	subs	r3, r3, r2
 8100e2e:	00db      	lsls	r3, r3, #3
 8100e30:	440b      	add	r3, r1
 8100e32:	3368      	adds	r3, #104	@ 0x68
 8100e34:	681b      	ldr	r3, [r3, #0]
 8100e36:	4619      	mov	r1, r3
 8100e38:	f7ff fee0 	bl	8100bfc <LL_DMA_DisableStream>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100e3c:	687b      	ldr	r3, [r7, #4]
 8100e3e:	3301      	adds	r3, #1
 8100e40:	607b      	str	r3, [r7, #4]
 8100e42:	687b      	ldr	r3, [r7, #4]
 8100e44:	2b00      	cmp	r3, #0
 8100e46:	ddd9      	ble.n	8100dfc <UART_DMA_Driver_Init+0xc>
    }
    /* Index 0 – USART6 ------------------------------------------------- */
    RingBuffer_Create(&uart_dma_drivers[0].rx_buffer, 1,
 8100e48:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8100e4c:	9300      	str	r3, [sp, #0]
 8100e4e:	4b38      	ldr	r3, [pc, #224]	@ (8100f30 <UART_DMA_Driver_Init+0x140>)
 8100e50:	4a38      	ldr	r2, [pc, #224]	@ (8100f34 <UART_DMA_Driver_Init+0x144>)
 8100e52:	2101      	movs	r1, #1
 8100e54:	4838      	ldr	r0, [pc, #224]	@ (8100f38 <UART_DMA_Driver_Init+0x148>)
 8100e56:	f000 fae4 	bl	8101422 <RingBuffer_Create>
                      "UART6_RX", uart6_rx_data, UART6_BUFFER_SIZE);
    RingBuffer_Create(&uart_dma_drivers[0].tx_buffer, 2,
 8100e5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8100e5e:	9300      	str	r3, [sp, #0]
 8100e60:	4b36      	ldr	r3, [pc, #216]	@ (8100f3c <UART_DMA_Driver_Init+0x14c>)
 8100e62:	4a37      	ldr	r2, [pc, #220]	@ (8100f40 <UART_DMA_Driver_Init+0x150>)
 8100e64:	2102      	movs	r1, #2
 8100e66:	4837      	ldr	r0, [pc, #220]	@ (8100f44 <UART_DMA_Driver_Init+0x154>)
 8100e68:	f000 fadb 	bl	8101422 <RingBuffer_Create>
                      "UART6_TX", uart6_tx_data, UART6_BUFFER_SIZE);

    /* DMA circular RX --------------------------------------------------- */
    LL_DMA_SetPeriphAddress(uart_dma_drivers[0].dma_rx_instance,
 8100e6c:	4b2f      	ldr	r3, [pc, #188]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100e6e:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8100e70:	4b2e      	ldr	r3, [pc, #184]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100e72:	6e9d      	ldr	r5, [r3, #104]	@ 0x68
 8100e74:	2101      	movs	r1, #1
 8100e76:	4834      	ldr	r0, [pc, #208]	@ (8100f48 <UART_DMA_Driver_Init+0x158>)
 8100e78:	f7ff fe78 	bl	8100b6c <LL_USART_DMA_GetRegAddr>
 8100e7c:	4603      	mov	r3, r0
 8100e7e:	461a      	mov	r2, r3
 8100e80:	4629      	mov	r1, r5
 8100e82:	4620      	mov	r0, r4
 8100e84:	f7ff ff34 	bl	8100cf0 <LL_DMA_SetPeriphAddress>
                            uart_dma_drivers[0].dma_rx_channel,
                            LL_USART_DMA_GetRegAddr(USART6,
                                LL_USART_DMA_REG_DATA_RECEIVE));
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance,
 8100e88:	4b28      	ldr	r3, [pc, #160]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100e8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100e8c:	4a27      	ldr	r2, [pc, #156]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100e8e:	6e91      	ldr	r1, [r2, #104]	@ 0x68
                            uart_dma_drivers[0].dma_rx_channel,
                            (uint32_t)uart_dma_drivers[0].dma_rx_buffer);
 8100e90:	4a26      	ldr	r2, [pc, #152]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100e92:	6ed2      	ldr	r2, [r2, #108]	@ 0x6c
    LL_DMA_SetMemoryAddress(uart_dma_drivers[0].dma_rx_instance,
 8100e94:	4618      	mov	r0, r3
 8100e96:	f7ff ff11 	bl	8100cbc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength (uart_dma_drivers[0].dma_rx_instance,
 8100e9a:	4b24      	ldr	r3, [pc, #144]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100e9c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100e9e:	4a23      	ldr	r2, [pc, #140]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100ea0:	6e91      	ldr	r1, [r2, #104]	@ 0x68
                          uart_dma_drivers[0].dma_rx_channel,
                          uart_dma_drivers[0].dma_rx_buffer_size);
 8100ea2:	4a22      	ldr	r2, [pc, #136]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100ea4:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
    LL_DMA_SetDataLength (uart_dma_drivers[0].dma_rx_instance,
 8100ea8:	4618      	mov	r0, r3
 8100eaa:	f7ff fec9 	bl	8100c40 <LL_DMA_SetDataLength>

    LL_DMA_EnableIT_TC(uart_dma_drivers[0].dma_rx_instance,
 8100eae:	4b1f      	ldr	r3, [pc, #124]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100eb0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100eb2:	4a1e      	ldr	r2, [pc, #120]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100eb4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8100eb6:	4611      	mov	r1, r2
 8100eb8:	4618      	mov	r0, r3
 8100eba:	f7ff ff77 	bl	8100dac <LL_DMA_EnableIT_TC>
                       uart_dma_drivers[0].dma_rx_channel);
    LL_DMA_EnableIT_HT(uart_dma_drivers[0].dma_rx_instance,
 8100ebe:	4b1b      	ldr	r3, [pc, #108]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100ec0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100ec2:	4a1a      	ldr	r2, [pc, #104]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100ec4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8100ec6:	4611      	mov	r1, r2
 8100ec8:	4618      	mov	r0, r3
 8100eca:	f7ff ff2b 	bl	8100d24 <LL_DMA_EnableIT_HT>
                       uart_dma_drivers[0].dma_rx_channel);
    LL_DMA_EnableIT_TE(uart_dma_drivers[0].dma_rx_instance,
 8100ece:	4b17      	ldr	r3, [pc, #92]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100ed0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100ed2:	4a16      	ldr	r2, [pc, #88]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100ed4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8100ed6:	4611      	mov	r1, r2
 8100ed8:	4618      	mov	r0, r3
 8100eda:	f7ff ff45 	bl	8100d68 <LL_DMA_EnableIT_TE>
                       uart_dma_drivers[0].dma_rx_channel);

    LL_DMA_EnableStream(uart_dma_drivers[0].dma_rx_instance,
 8100ede:	4b13      	ldr	r3, [pc, #76]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100ee0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8100ee2:	4a12      	ldr	r2, [pc, #72]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100ee4:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8100ee6:	4611      	mov	r1, r2
 8100ee8:	4618      	mov	r0, r3
 8100eea:	f7ff fe65 	bl	8100bb8 <LL_DMA_EnableStream>
                        uart_dma_drivers[0].dma_rx_channel);

    LL_USART_EnableDMAReq_RX(USART6);
 8100eee:	4816      	ldr	r0, [pc, #88]	@ (8100f48 <UART_DMA_Driver_Init+0x158>)
 8100ef0:	f7ff fe19 	bl	8100b26 <LL_USART_EnableDMAReq_RX>
    LL_USART_EnableIT_IDLE(USART6);
 8100ef4:	4814      	ldr	r0, [pc, #80]	@ (8100f48 <UART_DMA_Driver_Init+0x158>)
 8100ef6:	f7ff fda0 	bl	8100a3a <LL_USART_EnableIT_IDLE>

    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100efa:	2300      	movs	r3, #0
 8100efc:	603b      	str	r3, [r7, #0]
 8100efe:	e00d      	b.n	8100f1c <UART_DMA_Driver_Init+0x12c>
        LL_USART_Enable(uart_dma_drivers[i].uart);
 8100f00:	490a      	ldr	r1, [pc, #40]	@ (8100f2c <UART_DMA_Driver_Init+0x13c>)
 8100f02:	683a      	ldr	r2, [r7, #0]
 8100f04:	4613      	mov	r3, r2
 8100f06:	011b      	lsls	r3, r3, #4
 8100f08:	1a9b      	subs	r3, r3, r2
 8100f0a:	00db      	lsls	r3, r3, #3
 8100f0c:	440b      	add	r3, r1
 8100f0e:	681b      	ldr	r3, [r3, #0]
 8100f10:	4618      	mov	r0, r3
 8100f12:	f7ff fd5f 	bl	81009d4 <LL_USART_Enable>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100f16:	683b      	ldr	r3, [r7, #0]
 8100f18:	3301      	adds	r3, #1
 8100f1a:	603b      	str	r3, [r7, #0]
 8100f1c:	683b      	ldr	r3, [r7, #0]
 8100f1e:	2b00      	cmp	r3, #0
 8100f20:	ddee      	ble.n	8100f00 <UART_DMA_Driver_Init+0x110>
    }
    return E_OK;
 8100f22:	2300      	movs	r3, #0
}
 8100f24:	4618      	mov	r0, r3
 8100f26:	3708      	adds	r7, #8
 8100f28:	46bd      	mov	sp, r7
 8100f2a:	bdb0      	pop	{r4, r5, r7, pc}
 8100f2c:	10032078 	.word	0x10032078
 8100f30:	10032c64 	.word	0x10032c64
 8100f34:	0810ebb4 	.word	0x0810ebb4
 8100f38:	1003207c 	.word	0x1003207c
 8100f3c:	10033464 	.word	0x10033464
 8100f40:	0810ebc0 	.word	0x0810ebc0
 8100f44:	100320ac 	.word	0x100320ac
 8100f48:	40011400 	.word	0x40011400

08100f4c <UART_DMA_Driver_Get>:
#define RESET 						    0U
#endif


UART_DMA_Driver_t* UART_DMA_Driver_Get(USART_TypeDef *uart)
{
 8100f4c:	b480      	push	{r7}
 8100f4e:	b085      	sub	sp, #20
 8100f50:	af00      	add	r7, sp, #0
 8100f52:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100f54:	2300      	movs	r3, #0
 8100f56:	60fb      	str	r3, [r7, #12]
 8100f58:	e015      	b.n	8100f86 <UART_DMA_Driver_Get+0x3a>
        if (uart_dma_drivers[i].uart == uart) {
 8100f5a:	4910      	ldr	r1, [pc, #64]	@ (8100f9c <UART_DMA_Driver_Get+0x50>)
 8100f5c:	68fa      	ldr	r2, [r7, #12]
 8100f5e:	4613      	mov	r3, r2
 8100f60:	011b      	lsls	r3, r3, #4
 8100f62:	1a9b      	subs	r3, r3, r2
 8100f64:	00db      	lsls	r3, r3, #3
 8100f66:	440b      	add	r3, r1
 8100f68:	681b      	ldr	r3, [r3, #0]
 8100f6a:	687a      	ldr	r2, [r7, #4]
 8100f6c:	429a      	cmp	r2, r3
 8100f6e:	d107      	bne.n	8100f80 <UART_DMA_Driver_Get+0x34>
            return &uart_dma_drivers[i];
 8100f70:	68fa      	ldr	r2, [r7, #12]
 8100f72:	4613      	mov	r3, r2
 8100f74:	011b      	lsls	r3, r3, #4
 8100f76:	1a9b      	subs	r3, r3, r2
 8100f78:	00db      	lsls	r3, r3, #3
 8100f7a:	4a08      	ldr	r2, [pc, #32]	@ (8100f9c <UART_DMA_Driver_Get+0x50>)
 8100f7c:	4413      	add	r3, r2
 8100f7e:	e006      	b.n	8100f8e <UART_DMA_Driver_Get+0x42>
    for (int i = 0; i < UART_DMA_DRIVER_COUNT; i++) {
 8100f80:	68fb      	ldr	r3, [r7, #12]
 8100f82:	3301      	adds	r3, #1
 8100f84:	60fb      	str	r3, [r7, #12]
 8100f86:	68fb      	ldr	r3, [r7, #12]
 8100f88:	2b00      	cmp	r3, #0
 8100f8a:	dde6      	ble.n	8100f5a <UART_DMA_Driver_Get+0xe>
        }
    }
    return NULL;
 8100f8c:	2300      	movs	r3, #0
}
 8100f8e:	4618      	mov	r0, r3
 8100f90:	3714      	adds	r7, #20
 8100f92:	46bd      	mov	sp, r7
 8100f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f98:	4770      	bx	lr
 8100f9a:	bf00      	nop
 8100f9c:	10032078 	.word	0x10032078

08100fa0 <UART_Driver_Write>:

void UART_Driver_Write(USART_TypeDef *uart, uint8_t data)
{
 8100fa0:	b580      	push	{r7, lr}
 8100fa2:	b084      	sub	sp, #16
 8100fa4:	af00      	add	r7, sp, #0
 8100fa6:	6078      	str	r0, [r7, #4]
 8100fa8:	460b      	mov	r3, r1
 8100faa:	70fb      	strb	r3, [r7, #3]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8100fac:	6878      	ldr	r0, [r7, #4]
 8100fae:	f7ff ffcd 	bl	8100f4c <UART_DMA_Driver_Get>
 8100fb2:	60b8      	str	r0, [r7, #8]
    if (driver == NULL)
 8100fb4:	68bb      	ldr	r3, [r7, #8]
 8100fb6:	2b00      	cmp	r3, #0
 8100fb8:	d01f      	beq.n	8100ffa <UART_Driver_Write+0x5a>
        return;

    uint32_t timeout = 500000;
 8100fba:	4b13      	ldr	r3, [pc, #76]	@ (8101008 <UART_Driver_Write+0x68>)
 8100fbc:	60fb      	str	r3, [r7, #12]

    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8100fbe:	e005      	b.n	8100fcc <UART_Driver_Write+0x2c>
    {
        if (--timeout == 0)
 8100fc0:	68fb      	ldr	r3, [r7, #12]
 8100fc2:	3b01      	subs	r3, #1
 8100fc4:	60fb      	str	r3, [r7, #12]
 8100fc6:	68fb      	ldr	r3, [r7, #12]
 8100fc8:	2b00      	cmp	r3, #0
 8100fca:	d018      	beq.n	8100ffe <UART_Driver_Write+0x5e>
    while (!RingBuffer_Put(&driver->tx_buffer, data))
 8100fcc:	68bb      	ldr	r3, [r7, #8]
 8100fce:	3334      	adds	r3, #52	@ 0x34
 8100fd0:	78fa      	ldrb	r2, [r7, #3]
 8100fd2:	4611      	mov	r1, r2
 8100fd4:	4618      	mov	r0, r3
 8100fd6:	f000 fa57 	bl	8101488 <RingBuffer_Put>
 8100fda:	4603      	mov	r3, r0
 8100fdc:	f083 0301 	eor.w	r3, r3, #1
 8100fe0:	b2db      	uxtb	r3, r3
 8100fe2:	2b00      	cmp	r3, #0
 8100fe4:	d1ec      	bne.n	8100fc0 <UART_Driver_Write+0x20>
        {
            return;
        }
    }

    if (!LL_USART_IsEnabledIT_TXE(uart)) {
 8100fe6:	6878      	ldr	r0, [r7, #4]
 8100fe8:	f7ff fd8a 	bl	8100b00 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8100fec:	4603      	mov	r3, r0
 8100fee:	2b00      	cmp	r3, #0
 8100ff0:	d106      	bne.n	8101000 <UART_Driver_Write+0x60>
        LL_USART_EnableIT_TXE(uart);
 8100ff2:	6878      	ldr	r0, [r7, #4]
 8100ff4:	f7ff fd42 	bl	8100a7c <LL_USART_EnableIT_TXE_TXFNF>
 8100ff8:	e002      	b.n	8101000 <UART_Driver_Write+0x60>
        return;
 8100ffa:	bf00      	nop
 8100ffc:	e000      	b.n	8101000 <UART_Driver_Write+0x60>
            return;
 8100ffe:	bf00      	nop
    }
}
 8101000:	3710      	adds	r7, #16
 8101002:	46bd      	mov	sp, r7
 8101004:	bd80      	pop	{r7, pc}
 8101006:	bf00      	nop
 8101008:	0007a120 	.word	0x0007a120

0810100c <UART_Driver_TX_ISR>:
    atomic_store_explicit(&driver->tx_buffer.head, 0U, memory_order_release);
    atomic_store_explicit(&driver->tx_buffer.tail, 0U, memory_order_release);
}

void UART_Driver_TX_ISR(USART_TypeDef *uart)
{
 810100c:	b580      	push	{r7, lr}
 810100e:	b084      	sub	sp, #16
 8101010:	af00      	add	r7, sp, #0
 8101012:	6078      	str	r0, [r7, #4]
	UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8101014:	6878      	ldr	r0, [r7, #4]
 8101016:	f7ff ff99 	bl	8100f4c <UART_DMA_Driver_Get>
 810101a:	60f8      	str	r0, [r7, #12]
    if (driver == NULL)
 810101c:	68fb      	ldr	r3, [r7, #12]
 810101e:	2b00      	cmp	r3, #0
 8101020:	d020      	beq.n	8101064 <UART_Driver_TX_ISR+0x58>
        return;

    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8101022:	6878      	ldr	r0, [r7, #4]
 8101024:	f7ff fcf6 	bl	8100a14 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8101028:	4603      	mov	r3, r0
 810102a:	2b00      	cmp	r3, #0
 810102c:	d01b      	beq.n	8101066 <UART_Driver_TX_ISR+0x5a>
        (LL_USART_IsEnabledIT_TXE(uart) != RESET))
 810102e:	6878      	ldr	r0, [r7, #4]
 8101030:	f7ff fd66 	bl	8100b00 <LL_USART_IsEnabledIT_TXE_TXFNF>
 8101034:	4603      	mov	r3, r0
    if ((LL_USART_IsActiveFlag_TXE(uart) != RESET) &&
 8101036:	2b00      	cmp	r3, #0
 8101038:	d015      	beq.n	8101066 <UART_Driver_TX_ISR+0x5a>
    {
        uint8_t tx_data;
        if (RingBuffer_Get(&driver->tx_buffer, &tx_data))
 810103a:	68fb      	ldr	r3, [r7, #12]
 810103c:	3334      	adds	r3, #52	@ 0x34
 810103e:	f107 020b 	add.w	r2, r7, #11
 8101042:	4611      	mov	r1, r2
 8101044:	4618      	mov	r0, r3
 8101046:	f000 fa65 	bl	8101514 <RingBuffer_Get>
 810104a:	4603      	mov	r3, r0
 810104c:	2b00      	cmp	r3, #0
 810104e:	d005      	beq.n	810105c <UART_Driver_TX_ISR+0x50>
        {
            LL_USART_TransmitData8(uart, tx_data);
 8101050:	7afb      	ldrb	r3, [r7, #11]
 8101052:	4619      	mov	r1, r3
 8101054:	6878      	ldr	r0, [r7, #4]
 8101056:	f7ff fd9f 	bl	8100b98 <LL_USART_TransmitData8>
 810105a:	e004      	b.n	8101066 <UART_Driver_TX_ISR+0x5a>
        }
        else
        {
            LL_USART_DisableIT_TXE(uart);
 810105c:	6878      	ldr	r0, [r7, #4]
 810105e:	f7ff fd2e 	bl	8100abe <LL_USART_DisableIT_TXE_TXFNF>
 8101062:	e000      	b.n	8101066 <UART_Driver_TX_ISR+0x5a>
        return;
 8101064:	bf00      	nop
        }
    }
}
 8101066:	3710      	adds	r7, #16
 8101068:	46bd      	mov	sp, r7
 810106a:	bd80      	pop	{r7, pc}

0810106c <UART_DMA_Rx_Check>:

/************************************************
 *                    DMA RX                    *
 ************************************************/
void UART_DMA_Rx_Check(USART_TypeDef *uart)
{
 810106c:	b580      	push	{r7, lr}
 810106e:	b08a      	sub	sp, #40	@ 0x28
 8101070:	af00      	add	r7, sp, #0
 8101072:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8101074:	6878      	ldr	r0, [r7, #4]
 8101076:	f7ff ff69 	bl	8100f4c <UART_DMA_Driver_Get>
 810107a:	61b8      	str	r0, [r7, #24]
    if (driver == NULL)
 810107c:	69bb      	ldr	r3, [r7, #24]
 810107e:	2b00      	cmp	r3, #0
 8101080:	d069      	beq.n	8101156 <UART_DMA_Rx_Check+0xea>
        return;

    size_t old_pos = driver->old_dma_pos;
 8101082:	69bb      	ldr	r3, [r7, #24]
 8101084:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101086:	617b      	str	r3, [r7, #20]
    size_t pos;

    uint16_t remaining = LL_DMA_GetDataLength(driver->dma_rx_instance,
 8101088:	69bb      	ldr	r3, [r7, #24]
 810108a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 810108c:	69bb      	ldr	r3, [r7, #24]
 810108e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8101090:	4619      	mov	r1, r3
 8101092:	4610      	mov	r0, r2
 8101094:	f7ff fdfa 	bl	8100c8c <LL_DMA_GetDataLength>
 8101098:	4603      	mov	r3, r0
 810109a:	827b      	strh	r3, [r7, #18]
                                              driver->dma_rx_channel);
    pos = driver->dma_rx_buffer_size - remaining;
 810109c:	69bb      	ldr	r3, [r7, #24]
 810109e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 81010a2:	461a      	mov	r2, r3
 81010a4:	8a7b      	ldrh	r3, [r7, #18]
 81010a6:	1ad3      	subs	r3, r2, r3
 81010a8:	60fb      	str	r3, [r7, #12]

    if (pos != old_pos)
 81010aa:	68fa      	ldr	r2, [r7, #12]
 81010ac:	697b      	ldr	r3, [r7, #20]
 81010ae:	429a      	cmp	r2, r3
 81010b0:	d052      	beq.n	8101158 <UART_DMA_Rx_Check+0xec>
    {
        if (pos > old_pos) {
 81010b2:	68fa      	ldr	r2, [r7, #12]
 81010b4:	697b      	ldr	r3, [r7, #20]
 81010b6:	429a      	cmp	r2, r3
 81010b8:	d914      	bls.n	81010e4 <UART_DMA_Rx_Check+0x78>
            for (size_t i = old_pos; i < pos; i++) {
 81010ba:	697b      	ldr	r3, [r7, #20]
 81010bc:	627b      	str	r3, [r7, #36]	@ 0x24
 81010be:	e00c      	b.n	81010da <UART_DMA_Rx_Check+0x6e>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 81010c0:	69bb      	ldr	r3, [r7, #24]
 81010c2:	1d18      	adds	r0, r3, #4
 81010c4:	69bb      	ldr	r3, [r7, #24]
 81010c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81010ca:	4413      	add	r3, r2
 81010cc:	781b      	ldrb	r3, [r3, #0]
 81010ce:	4619      	mov	r1, r3
 81010d0:	f000 f9da 	bl	8101488 <RingBuffer_Put>
            for (size_t i = old_pos; i < pos; i++) {
 81010d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81010d6:	3301      	adds	r3, #1
 81010d8:	627b      	str	r3, [r7, #36]	@ 0x24
 81010da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81010dc:	68fb      	ldr	r3, [r7, #12]
 81010de:	429a      	cmp	r2, r3
 81010e0:	d3ee      	bcc.n	81010c0 <UART_DMA_Rx_Check+0x54>
 81010e2:	e02a      	b.n	810113a <UART_DMA_Rx_Check+0xce>
            }
        } else {
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 81010e4:	697b      	ldr	r3, [r7, #20]
 81010e6:	623b      	str	r3, [r7, #32]
 81010e8:	e00c      	b.n	8101104 <UART_DMA_Rx_Check+0x98>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 81010ea:	69bb      	ldr	r3, [r7, #24]
 81010ec:	1d18      	adds	r0, r3, #4
 81010ee:	69bb      	ldr	r3, [r7, #24]
 81010f0:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 81010f2:	6a3b      	ldr	r3, [r7, #32]
 81010f4:	4413      	add	r3, r2
 81010f6:	781b      	ldrb	r3, [r3, #0]
 81010f8:	4619      	mov	r1, r3
 81010fa:	f000 f9c5 	bl	8101488 <RingBuffer_Put>
            for (size_t i = old_pos; i < driver->dma_rx_buffer_size; i++) {
 81010fe:	6a3b      	ldr	r3, [r7, #32]
 8101100:	3301      	adds	r3, #1
 8101102:	623b      	str	r3, [r7, #32]
 8101104:	69bb      	ldr	r3, [r7, #24]
 8101106:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 810110a:	461a      	mov	r2, r3
 810110c:	6a3b      	ldr	r3, [r7, #32]
 810110e:	4293      	cmp	r3, r2
 8101110:	d3eb      	bcc.n	81010ea <UART_DMA_Rx_Check+0x7e>
            }
            for (size_t i = 0; i < pos; i++) {
 8101112:	2300      	movs	r3, #0
 8101114:	61fb      	str	r3, [r7, #28]
 8101116:	e00c      	b.n	8101132 <UART_DMA_Rx_Check+0xc6>
                RingBuffer_Put(&driver->rx_buffer, driver->dma_rx_buffer[i]);
 8101118:	69bb      	ldr	r3, [r7, #24]
 810111a:	1d18      	adds	r0, r3, #4
 810111c:	69bb      	ldr	r3, [r7, #24]
 810111e:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8101120:	69fb      	ldr	r3, [r7, #28]
 8101122:	4413      	add	r3, r2
 8101124:	781b      	ldrb	r3, [r3, #0]
 8101126:	4619      	mov	r1, r3
 8101128:	f000 f9ae 	bl	8101488 <RingBuffer_Put>
            for (size_t i = 0; i < pos; i++) {
 810112c:	69fb      	ldr	r3, [r7, #28]
 810112e:	3301      	adds	r3, #1
 8101130:	61fb      	str	r3, [r7, #28]
 8101132:	69fa      	ldr	r2, [r7, #28]
 8101134:	68fb      	ldr	r3, [r7, #12]
 8101136:	429a      	cmp	r2, r3
 8101138:	d3ee      	bcc.n	8101118 <UART_DMA_Rx_Check+0xac>
            }
        }
        driver->old_dma_pos = pos;
 810113a:	69bb      	ldr	r3, [r7, #24]
 810113c:	68fa      	ldr	r2, [r7, #12]
 810113e:	675a      	str	r2, [r3, #116]	@ 0x74
        if (driver->old_dma_pos == driver->dma_rx_buffer_size){
 8101140:	69bb      	ldr	r3, [r7, #24]
 8101142:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8101144:	69ba      	ldr	r2, [r7, #24]
 8101146:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 810114a:	4293      	cmp	r3, r2
 810114c:	d104      	bne.n	8101158 <UART_DMA_Rx_Check+0xec>
            driver->old_dma_pos = 0;
 810114e:	69bb      	ldr	r3, [r7, #24]
 8101150:	2200      	movs	r2, #0
 8101152:	675a      	str	r2, [r3, #116]	@ 0x74
 8101154:	e000      	b.n	8101158 <UART_DMA_Rx_Check+0xec>
        return;
 8101156:	bf00      	nop
		}
	}
}
 8101158:	3728      	adds	r7, #40	@ 0x28
 810115a:	46bd      	mov	sp, r7
 810115c:	bd80      	pop	{r7, pc}

0810115e <UART_DMA_Driver_Read>:


int UART_DMA_Driver_Read(USART_TypeDef *uart)
{
 810115e:	b580      	push	{r7, lr}
 8101160:	b084      	sub	sp, #16
 8101162:	af00      	add	r7, sp, #0
 8101164:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 8101166:	6878      	ldr	r0, [r7, #4]
 8101168:	f7ff fef0 	bl	8100f4c <UART_DMA_Driver_Get>
 810116c:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 810116e:	68fb      	ldr	r3, [r7, #12]
 8101170:	2b00      	cmp	r3, #0
 8101172:	d102      	bne.n	810117a <UART_DMA_Driver_Read+0x1c>
        return -1;
 8101174:	f04f 33ff 	mov.w	r3, #4294967295
 8101178:	e00e      	b.n	8101198 <UART_DMA_Driver_Read+0x3a>

    RingBufElement data;
    if(RingBuffer_Get(&driver->rx_buffer, &data)){
 810117a:	68fb      	ldr	r3, [r7, #12]
 810117c:	3304      	adds	r3, #4
 810117e:	f107 020b 	add.w	r2, r7, #11
 8101182:	4611      	mov	r1, r2
 8101184:	4618      	mov	r0, r3
 8101186:	f000 f9c5 	bl	8101514 <RingBuffer_Get>
 810118a:	4603      	mov	r3, r0
 810118c:	2b00      	cmp	r3, #0
 810118e:	d001      	beq.n	8101194 <UART_DMA_Driver_Read+0x36>
        return data;
 8101190:	7afb      	ldrb	r3, [r7, #11]
 8101192:	e001      	b.n	8101198 <UART_DMA_Driver_Read+0x3a>
    }
    return -1;
 8101194:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101198:	4618      	mov	r0, r3
 810119a:	3710      	adds	r7, #16
 810119c:	46bd      	mov	sp, r7
 810119e:	bd80      	pop	{r7, pc}

081011a0 <UART_DMA_Driver_IsDataAvailable>:

_Bool UART_DMA_Driver_IsDataAvailable(USART_TypeDef *uart)
{
 81011a0:	b580      	push	{r7, lr}
 81011a2:	b084      	sub	sp, #16
 81011a4:	af00      	add	r7, sp, #0
 81011a6:	6078      	str	r0, [r7, #4]
    UART_DMA_Driver_t *driver = UART_DMA_Driver_Get(uart);
 81011a8:	6878      	ldr	r0, [r7, #4]
 81011aa:	f7ff fecf 	bl	8100f4c <UART_DMA_Driver_Get>
 81011ae:	60f8      	str	r0, [r7, #12]
    if(driver == NULL)
 81011b0:	68fb      	ldr	r3, [r7, #12]
 81011b2:	2b00      	cmp	r3, #0
 81011b4:	d101      	bne.n	81011ba <UART_DMA_Driver_IsDataAvailable+0x1a>
        return false;
 81011b6:	2300      	movs	r3, #0
 81011b8:	e005      	b.n	81011c6 <UART_DMA_Driver_IsDataAvailable+0x26>

    return RingBuffer_IsDataAvailable(&driver->rx_buffer);
 81011ba:	68fb      	ldr	r3, [r7, #12]
 81011bc:	3304      	adds	r3, #4
 81011be:	4618      	mov	r0, r3
 81011c0:	f000 f9e9 	bl	8101596 <RingBuffer_IsDataAvailable>
 81011c4:	4603      	mov	r3, r0
}
 81011c6:	4618      	mov	r0, r3
 81011c8:	3710      	adds	r7, #16
 81011ca:	46bd      	mov	sp, r7
 81011cc:	bd80      	pop	{r7, pc}
	...

081011d0 <CDC_RingBuffer_Init>:
/*************************************************
 *                 Function Define               *
 *************************************************/

void CDC_RingBuffer_Init(void)
{
 81011d0:	b580      	push	{r7, lr}
 81011d2:	b082      	sub	sp, #8
 81011d4:	af02      	add	r7, sp, #8
	RingBuffer_Create(&cdcTxRingBuffer, 3, "CDC_TX", cdcTxBuffer, CDC_TX_RING_BUFFER_SIZE);
 81011d6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81011da:	9300      	str	r3, [sp, #0]
 81011dc:	4b08      	ldr	r3, [pc, #32]	@ (8101200 <CDC_RingBuffer_Init+0x30>)
 81011de:	4a09      	ldr	r2, [pc, #36]	@ (8101204 <CDC_RingBuffer_Init+0x34>)
 81011e0:	2103      	movs	r1, #3
 81011e2:	4809      	ldr	r0, [pc, #36]	@ (8101208 <CDC_RingBuffer_Init+0x38>)
 81011e4:	f000 f91d 	bl	8101422 <RingBuffer_Create>
    RingBuffer_Create(&cdcRxRingBuffer, 4, "CDC_RX", cdcRxBuffer, CDC_RX_RING_BUFFER_SIZE);
 81011e8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81011ec:	9300      	str	r3, [sp, #0]
 81011ee:	4b07      	ldr	r3, [pc, #28]	@ (810120c <CDC_RingBuffer_Init+0x3c>)
 81011f0:	4a07      	ldr	r2, [pc, #28]	@ (8101210 <CDC_RingBuffer_Init+0x40>)
 81011f2:	2104      	movs	r1, #4
 81011f4:	4807      	ldr	r0, [pc, #28]	@ (8101214 <CDC_RingBuffer_Init+0x44>)
 81011f6:	f000 f914 	bl	8101422 <RingBuffer_Create>
}
 81011fa:	bf00      	nop
 81011fc:	46bd      	mov	sp, r7
 81011fe:	bd80      	pop	{r7, pc}
 8101200:	10034494 	.word	0x10034494
 8101204:	0810ebcc 	.word	0x0810ebcc
 8101208:	10034c94 	.word	0x10034c94
 810120c:	10033c64 	.word	0x10033c64
 8101210:	0810ebd4 	.word	0x0810ebd4
 8101214:	10034464 	.word	0x10034464

08101218 <CDC_TX_RingBuffer_Put>:
/*************************************************/
static _Bool CDC_TX_RingBuffer_Put(uint8_t data)
{
 8101218:	b580      	push	{r7, lr}
 810121a:	b082      	sub	sp, #8
 810121c:	af00      	add	r7, sp, #0
 810121e:	4603      	mov	r3, r0
 8101220:	71fb      	strb	r3, [r7, #7]
    return RingBuffer_Put(&cdcTxRingBuffer, data);
 8101222:	79fb      	ldrb	r3, [r7, #7]
 8101224:	4619      	mov	r1, r3
 8101226:	4804      	ldr	r0, [pc, #16]	@ (8101238 <CDC_TX_RingBuffer_Put+0x20>)
 8101228:	f000 f92e 	bl	8101488 <RingBuffer_Put>
 810122c:	4603      	mov	r3, r0
}
 810122e:	4618      	mov	r0, r3
 8101230:	3708      	adds	r7, #8
 8101232:	46bd      	mov	sp, r7
 8101234:	bd80      	pop	{r7, pc}
 8101236:	bf00      	nop
 8101238:	10034c94 	.word	0x10034c94

0810123c <CDC_RX_RingBuffer_Put>:

static _Bool CDC_RX_RingBuffer_Put(uint8_t data)
{
 810123c:	b580      	push	{r7, lr}
 810123e:	b082      	sub	sp, #8
 8101240:	af00      	add	r7, sp, #0
 8101242:	4603      	mov	r3, r0
 8101244:	71fb      	strb	r3, [r7, #7]
    return RingBuffer_Put(&cdcRxRingBuffer, data);
 8101246:	79fb      	ldrb	r3, [r7, #7]
 8101248:	4619      	mov	r1, r3
 810124a:	4804      	ldr	r0, [pc, #16]	@ (810125c <CDC_RX_RingBuffer_Put+0x20>)
 810124c:	f000 f91c 	bl	8101488 <RingBuffer_Put>
 8101250:	4603      	mov	r3, r0
}
 8101252:	4618      	mov	r0, r3
 8101254:	3708      	adds	r7, #8
 8101256:	46bd      	mov	sp, r7
 8101258:	bd80      	pop	{r7, pc}
 810125a:	bf00      	nop
 810125c:	10034464 	.word	0x10034464

08101260 <CDC_TX_RingBuffer_PutBuffer>:
/*************************************************/
uint32_t CDC_TX_RingBuffer_PutBuffer(const uint8_t* data, uint32_t len)
{
 8101260:	b580      	push	{r7, lr}
 8101262:	b084      	sub	sp, #16
 8101264:	af00      	add	r7, sp, #0
 8101266:	6078      	str	r0, [r7, #4]
 8101268:	6039      	str	r1, [r7, #0]
    uint32_t count = 0;
 810126a:	2300      	movs	r3, #0
 810126c:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 810126e:	2300      	movs	r3, #0
 8101270:	60bb      	str	r3, [r7, #8]
 8101272:	e00f      	b.n	8101294 <CDC_TX_RingBuffer_PutBuffer+0x34>
    {
        if(CDC_TX_RingBuffer_Put(data[i]))
 8101274:	687a      	ldr	r2, [r7, #4]
 8101276:	68bb      	ldr	r3, [r7, #8]
 8101278:	4413      	add	r3, r2
 810127a:	781b      	ldrb	r3, [r3, #0]
 810127c:	4618      	mov	r0, r3
 810127e:	f7ff ffcb 	bl	8101218 <CDC_TX_RingBuffer_Put>
 8101282:	4603      	mov	r3, r0
 8101284:	2b00      	cmp	r3, #0
 8101286:	d002      	beq.n	810128e <CDC_TX_RingBuffer_PutBuffer+0x2e>
        {
            count++;
 8101288:	68fb      	ldr	r3, [r7, #12]
 810128a:	3301      	adds	r3, #1
 810128c:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 810128e:	68bb      	ldr	r3, [r7, #8]
 8101290:	3301      	adds	r3, #1
 8101292:	60bb      	str	r3, [r7, #8]
 8101294:	68ba      	ldr	r2, [r7, #8]
 8101296:	683b      	ldr	r3, [r7, #0]
 8101298:	429a      	cmp	r2, r3
 810129a:	d3eb      	bcc.n	8101274 <CDC_TX_RingBuffer_PutBuffer+0x14>
        }
    }
    return count;
 810129c:	68fb      	ldr	r3, [r7, #12]
}
 810129e:	4618      	mov	r0, r3
 81012a0:	3710      	adds	r7, #16
 81012a2:	46bd      	mov	sp, r7
 81012a4:	bd80      	pop	{r7, pc}

081012a6 <CDC_RX_RingBuffer_PutBuffer>:

uint32_t CDC_RX_RingBuffer_PutBuffer(uint8_t* data, uint32_t len)
{
 81012a6:	b580      	push	{r7, lr}
 81012a8:	b084      	sub	sp, #16
 81012aa:	af00      	add	r7, sp, #0
 81012ac:	6078      	str	r0, [r7, #4]
 81012ae:	6039      	str	r1, [r7, #0]
    uint32_t count = 0;
 81012b0:	2300      	movs	r3, #0
 81012b2:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 81012b4:	2300      	movs	r3, #0
 81012b6:	60bb      	str	r3, [r7, #8]
 81012b8:	e00f      	b.n	81012da <CDC_RX_RingBuffer_PutBuffer+0x34>
    {
        if(CDC_RX_RingBuffer_Put(data[i]))
 81012ba:	687a      	ldr	r2, [r7, #4]
 81012bc:	68bb      	ldr	r3, [r7, #8]
 81012be:	4413      	add	r3, r2
 81012c0:	781b      	ldrb	r3, [r3, #0]
 81012c2:	4618      	mov	r0, r3
 81012c4:	f7ff ffba 	bl	810123c <CDC_RX_RingBuffer_Put>
 81012c8:	4603      	mov	r3, r0
 81012ca:	2b00      	cmp	r3, #0
 81012cc:	d002      	beq.n	81012d4 <CDC_RX_RingBuffer_PutBuffer+0x2e>
        {
            count++;
 81012ce:	68fb      	ldr	r3, [r7, #12]
 81012d0:	3301      	adds	r3, #1
 81012d2:	60fb      	str	r3, [r7, #12]
    for(uint32_t i = 0; i < len; i++)
 81012d4:	68bb      	ldr	r3, [r7, #8]
 81012d6:	3301      	adds	r3, #1
 81012d8:	60bb      	str	r3, [r7, #8]
 81012da:	68ba      	ldr	r2, [r7, #8]
 81012dc:	683b      	ldr	r3, [r7, #0]
 81012de:	429a      	cmp	r2, r3
 81012e0:	d3eb      	bcc.n	81012ba <CDC_RX_RingBuffer_PutBuffer+0x14>
        }
    }
    return count;
 81012e2:	68fb      	ldr	r3, [r7, #12]
}
 81012e4:	4618      	mov	r0, r3
 81012e6:	3710      	adds	r7, #16
 81012e8:	46bd      	mov	sp, r7
 81012ea:	bd80      	pop	{r7, pc}

081012ec <CDC_TX_RingBuffer_Get>:
/*************************************************/
_Bool CDC_TX_RingBuffer_Get(uint8_t* data)
{
 81012ec:	b580      	push	{r7, lr}
 81012ee:	b082      	sub	sp, #8
 81012f0:	af00      	add	r7, sp, #0
 81012f2:	6078      	str	r0, [r7, #4]
    return RingBuffer_Get(&cdcTxRingBuffer, data);
 81012f4:	6879      	ldr	r1, [r7, #4]
 81012f6:	4804      	ldr	r0, [pc, #16]	@ (8101308 <CDC_TX_RingBuffer_Get+0x1c>)
 81012f8:	f000 f90c 	bl	8101514 <RingBuffer_Get>
 81012fc:	4603      	mov	r3, r0
}
 81012fe:	4618      	mov	r0, r3
 8101300:	3708      	adds	r7, #8
 8101302:	46bd      	mov	sp, r7
 8101304:	bd80      	pop	{r7, pc}
 8101306:	bf00      	nop
 8101308:	10034c94 	.word	0x10034c94

0810130c <CDC_RX_RingBuffer_Get>:

_Bool CDC_RX_RingBuffer_Get(uint8_t* data)
{
 810130c:	b580      	push	{r7, lr}
 810130e:	b082      	sub	sp, #8
 8101310:	af00      	add	r7, sp, #0
 8101312:	6078      	str	r0, [r7, #4]
    return RingBuffer_Get(&cdcRxRingBuffer, data);
 8101314:	6879      	ldr	r1, [r7, #4]
 8101316:	4804      	ldr	r0, [pc, #16]	@ (8101328 <CDC_RX_RingBuffer_Get+0x1c>)
 8101318:	f000 f8fc 	bl	8101514 <RingBuffer_Get>
 810131c:	4603      	mov	r3, r0
}
 810131e:	4618      	mov	r0, r3
 8101320:	3708      	adds	r7, #8
 8101322:	46bd      	mov	sp, r7
 8101324:	bd80      	pop	{r7, pc}
 8101326:	bf00      	nop
 8101328:	10034464 	.word	0x10034464

0810132c <CDC_ISR_RxNotify>:
/*************************************************/

void CDC_ISR_RxNotify(void)
{
 810132c:	b480      	push	{r7}
 810132e:	af00      	add	r7, sp, #0
    g_cdcRxReady = 1;
 8101330:	4b03      	ldr	r3, [pc, #12]	@ (8101340 <CDC_ISR_RxNotify+0x14>)
 8101332:	2201      	movs	r2, #1
 8101334:	701a      	strb	r2, [r3, #0]
}
 8101336:	bf00      	nop
 8101338:	46bd      	mov	sp, r7
 810133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810133e:	4770      	bx	lr
 8101340:	10034cc4 	.word	0x10034cc4

08101344 <USB_Check_Notify>:

void USB_Check_Notify(void)
{
 8101344:	b480      	push	{r7}
 8101346:	af00      	add	r7, sp, #0
    g_usbCheckEvt = 1;
 8101348:	4b03      	ldr	r3, [pc, #12]	@ (8101358 <USB_Check_Notify+0x14>)
 810134a:	2201      	movs	r2, #1
 810134c:	701a      	strb	r2, [r3, #0]
}
 810134e:	bf00      	nop
 8101350:	46bd      	mov	sp, r7
 8101352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101356:	4770      	bx	lr
 8101358:	10034cc5 	.word	0x10034cc5

0810135c <CDC_getRxReady>:

uint8_t CDC_getRxReady(void)
{
 810135c:	b480      	push	{r7}
 810135e:	af00      	add	r7, sp, #0
    return g_cdcRxReady;
 8101360:	4b03      	ldr	r3, [pc, #12]	@ (8101370 <CDC_getRxReady+0x14>)
 8101362:	781b      	ldrb	r3, [r3, #0]
 8101364:	b2db      	uxtb	r3, r3
}
 8101366:	4618      	mov	r0, r3
 8101368:	46bd      	mov	sp, r7
 810136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810136e:	4770      	bx	lr
 8101370:	10034cc4 	.word	0x10034cc4

08101374 <CDC_setRxReady>:

void CDC_setRxReady(uint8_t value)
{
 8101374:	b480      	push	{r7}
 8101376:	b083      	sub	sp, #12
 8101378:	af00      	add	r7, sp, #0
 810137a:	4603      	mov	r3, r0
 810137c:	71fb      	strb	r3, [r7, #7]
    g_cdcRxReady = value;
 810137e:	4a04      	ldr	r2, [pc, #16]	@ (8101390 <CDC_setRxReady+0x1c>)
 8101380:	79fb      	ldrb	r3, [r7, #7]
 8101382:	7013      	strb	r3, [r2, #0]
}
 8101384:	bf00      	nop
 8101386:	370c      	adds	r7, #12
 8101388:	46bd      	mov	sp, r7
 810138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810138e:	4770      	bx	lr
 8101390:	10034cc4 	.word	0x10034cc4

08101394 <USB_checkUSB>:

uint8_t USB_checkUSB(void)
{
 8101394:	b480      	push	{r7}
 8101396:	af00      	add	r7, sp, #0
    return g_usbCheckEvt;
 8101398:	4b03      	ldr	r3, [pc, #12]	@ (81013a8 <USB_checkUSB+0x14>)
 810139a:	781b      	ldrb	r3, [r3, #0]
 810139c:	b2db      	uxtb	r3, r3
}
 810139e:	4618      	mov	r0, r3
 81013a0:	46bd      	mov	sp, r7
 81013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a6:	4770      	bx	lr
 81013a8:	10034cc5 	.word	0x10034cc5

081013ac <USB_setCheckFlag>:

void USB_setCheckFlag(uint8_t value)
{
 81013ac:	b480      	push	{r7}
 81013ae:	b083      	sub	sp, #12
 81013b0:	af00      	add	r7, sp, #0
 81013b2:	4603      	mov	r3, r0
 81013b4:	71fb      	strb	r3, [r7, #7]
    g_usbCheckEvt = value;
 81013b6:	4a04      	ldr	r2, [pc, #16]	@ (81013c8 <USB_setCheckFlag+0x1c>)
 81013b8:	79fb      	ldrb	r3, [r7, #7]
 81013ba:	7013      	strb	r3, [r2, #0]
}
 81013bc:	bf00      	nop
 81013be:	370c      	adds	r7, #12
 81013c0:	46bd      	mov	sp, r7
 81013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013c6:	4770      	bx	lr
 81013c8:	10034cc5 	.word	0x10034cc5

081013cc <CDC_SendString>:
{
    return RingBuffer_IsDataAvailable(&cdcTxRingBuffer);
}

_Bool CDC_SendString(const char *pStr, uint32_t len)
{
 81013cc:	b580      	push	{r7, lr}
 81013ce:	b084      	sub	sp, #16
 81013d0:	af00      	add	r7, sp, #0
 81013d2:	6078      	str	r0, [r7, #4]
 81013d4:	6039      	str	r1, [r7, #0]
    if (len == 0 || pStr == NULL)
 81013d6:	683b      	ldr	r3, [r7, #0]
 81013d8:	2b00      	cmp	r3, #0
 81013da:	d002      	beq.n	81013e2 <CDC_SendString+0x16>
 81013dc:	687b      	ldr	r3, [r7, #4]
 81013de:	2b00      	cmp	r3, #0
 81013e0:	d101      	bne.n	81013e6 <CDC_SendString+0x1a>
        return true;
 81013e2:	2301      	movs	r3, #1
 81013e4:	e00b      	b.n	81013fe <CDC_SendString+0x32>
    uint32_t written = CDC_TX_RingBuffer_PutBuffer((const uint8_t *)pStr, len);
 81013e6:	6839      	ldr	r1, [r7, #0]
 81013e8:	6878      	ldr	r0, [r7, #4]
 81013ea:	f7ff ff39 	bl	8101260 <CDC_TX_RingBuffer_PutBuffer>
 81013ee:	60f8      	str	r0, [r7, #12]
    return (written == len) ? true : false;
 81013f0:	68fa      	ldr	r2, [r7, #12]
 81013f2:	683b      	ldr	r3, [r7, #0]
 81013f4:	429a      	cmp	r2, r3
 81013f6:	bf0c      	ite	eq
 81013f8:	2301      	moveq	r3, #1
 81013fa:	2300      	movne	r3, #0
 81013fc:	b2db      	uxtb	r3, r3
}
 81013fe:	4618      	mov	r0, r3
 8101400:	3710      	adds	r7, #16
 8101402:	46bd      	mov	sp, r7
 8101404:	bd80      	pop	{r7, pc}

08101406 <CDC_SendChar>:

_Bool CDC_SendChar(char c)
{
 8101406:	b580      	push	{r7, lr}
 8101408:	b082      	sub	sp, #8
 810140a:	af00      	add	r7, sp, #0
 810140c:	4603      	mov	r3, r0
 810140e:	71fb      	strb	r3, [r7, #7]
    return CDC_TX_RingBuffer_Put((uint8_t)c);
 8101410:	79fb      	ldrb	r3, [r7, #7]
 8101412:	4618      	mov	r0, r3
 8101414:	f7ff ff00 	bl	8101218 <CDC_TX_RingBuffer_Put>
 8101418:	4603      	mov	r3, r0
}
 810141a:	4618      	mov	r0, r3
 810141c:	3708      	adds	r7, #8
 810141e:	46bd      	mov	sp, r7
 8101420:	bd80      	pop	{r7, pc}

08101422 <RingBuffer_Create>:

#include "ring_buffer.h"

void RingBuffer_Create(s_RingBufferType *rb, uint32_t id, const char *name,
                         RingBufElement *buffer, RingBufCtr max_size)
{
 8101422:	b580      	push	{r7, lr}
 8101424:	b088      	sub	sp, #32
 8101426:	af00      	add	r7, sp, #0
 8101428:	60f8      	str	r0, [r7, #12]
 810142a:	60b9      	str	r1, [r7, #8]
 810142c:	607a      	str	r2, [r7, #4]
 810142e:	603b      	str	r3, [r7, #0]
    rb->id = id;
 8101430:	68fb      	ldr	r3, [r7, #12]
 8101432:	68ba      	ldr	r2, [r7, #8]
 8101434:	601a      	str	r2, [r3, #0]

    strncpy(rb->name, name, RINGBUFFER_NAME_MAX_LEN - 1);
 8101436:	68fb      	ldr	r3, [r7, #12]
 8101438:	3304      	adds	r3, #4
 810143a:	221f      	movs	r2, #31
 810143c:	6879      	ldr	r1, [r7, #4]
 810143e:	4618      	mov	r0, r3
 8101440:	f00d fb66 	bl	810eb10 <strncpy>
    rb->name[RINGBUFFER_NAME_MAX_LEN - 1] = '\0';
 8101444:	68fb      	ldr	r3, [r7, #12]
 8101446:	2200      	movs	r2, #0
 8101448:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

    rb->buffer = buffer;
 810144c:	68fb      	ldr	r3, [r7, #12]
 810144e:	683a      	ldr	r2, [r7, #0]
 8101450:	625a      	str	r2, [r3, #36]	@ 0x24
    rb->max_size = max_size;
 8101452:	68fb      	ldr	r3, [r7, #12]
 8101454:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8101456:	851a      	strh	r2, [r3, #40]	@ 0x28

    atomic_store_explicit(&rb->head, 0U, memory_order_release);
 8101458:	68fb      	ldr	r3, [r7, #12]
 810145a:	332a      	adds	r3, #42	@ 0x2a
 810145c:	61fb      	str	r3, [r7, #28]
 810145e:	2300      	movs	r3, #0
 8101460:	82fb      	strh	r3, [r7, #22]
 8101462:	8afa      	ldrh	r2, [r7, #22]
 8101464:	69fb      	ldr	r3, [r7, #28]
 8101466:	f3bf 8f5b 	dmb	ish
 810146a:	801a      	strh	r2, [r3, #0]
    atomic_store_explicit(&rb->tail, 0U, memory_order_release);
 810146c:	68fb      	ldr	r3, [r7, #12]
 810146e:	332c      	adds	r3, #44	@ 0x2c
 8101470:	61bb      	str	r3, [r7, #24]
 8101472:	2300      	movs	r3, #0
 8101474:	82bb      	strh	r3, [r7, #20]
 8101476:	8aba      	ldrh	r2, [r7, #20]
 8101478:	69bb      	ldr	r3, [r7, #24]
 810147a:	f3bf 8f5b 	dmb	ish
 810147e:	801a      	strh	r2, [r3, #0]
}
 8101480:	bf00      	nop
 8101482:	3720      	adds	r7, #32
 8101484:	46bd      	mov	sp, r7
 8101486:	bd80      	pop	{r7, pc}

08101488 <RingBuffer_Put>:

_Bool RingBuffer_Put(s_RingBufferType * const rb, RingBufElement const el)
{
 8101488:	b480      	push	{r7}
 810148a:	b08b      	sub	sp, #44	@ 0x2c
 810148c:	af00      	add	r7, sp, #0
 810148e:	6078      	str	r0, [r7, #4]
 8101490:	460b      	mov	r3, r1
 8101492:	70fb      	strb	r3, [r7, #3]
//	__disable_irq();
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_relaxed) + 1U;
 8101494:	687b      	ldr	r3, [r7, #4]
 8101496:	332a      	adds	r3, #42	@ 0x2a
 8101498:	623b      	str	r3, [r7, #32]
 810149a:	6a3b      	ldr	r3, [r7, #32]
 810149c:	881b      	ldrh	r3, [r3, #0]
 810149e:	b29b      	uxth	r3, r3
 81014a0:	81fb      	strh	r3, [r7, #14]
 81014a2:	89fb      	ldrh	r3, [r7, #14]
 81014a4:	3301      	adds	r3, #1
 81014a6:	84fb      	strh	r3, [r7, #38]	@ 0x26
    if (head == rb->max_size)
 81014a8:	687b      	ldr	r3, [r7, #4]
 81014aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81014ac:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81014ae:	429a      	cmp	r2, r3
 81014b0:	d101      	bne.n	81014b6 <RingBuffer_Put+0x2e>
    {
        head = 0U;
 81014b2:	2300      	movs	r3, #0
 81014b4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    }

    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_acquire);
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	332c      	adds	r3, #44	@ 0x2c
 81014ba:	61fb      	str	r3, [r7, #28]
 81014bc:	69fb      	ldr	r3, [r7, #28]
 81014be:	881b      	ldrh	r3, [r3, #0]
 81014c0:	f3bf 8f5b 	dmb	ish
 81014c4:	b29b      	uxth	r3, r3
 81014c6:	81bb      	strh	r3, [r7, #12]
 81014c8:	89bb      	ldrh	r3, [r7, #12]
 81014ca:	837b      	strh	r3, [r7, #26]
    if (head != tail) // buffer NOT full?
 81014cc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 81014ce:	8b7b      	ldrh	r3, [r7, #26]
 81014d0:	429a      	cmp	r2, r3
 81014d2:	d018      	beq.n	8101506 <RingBuffer_Put+0x7e>
    {
        rb->buffer[atomic_load_explicit(&rb->head, memory_order_relaxed)] = el;
 81014d4:	687b      	ldr	r3, [r7, #4]
 81014d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81014d8:	687a      	ldr	r2, [r7, #4]
 81014da:	322a      	adds	r2, #42	@ 0x2a
 81014dc:	617a      	str	r2, [r7, #20]
 81014de:	697a      	ldr	r2, [r7, #20]
 81014e0:	8812      	ldrh	r2, [r2, #0]
 81014e2:	b292      	uxth	r2, r2
 81014e4:	817a      	strh	r2, [r7, #10]
 81014e6:	897a      	ldrh	r2, [r7, #10]
 81014e8:	4413      	add	r3, r2
 81014ea:	78fa      	ldrb	r2, [r7, #3]
 81014ec:	701a      	strb	r2, [r3, #0]
        atomic_store_explicit(&rb->head, head, memory_order_release);
 81014ee:	687b      	ldr	r3, [r7, #4]
 81014f0:	332a      	adds	r3, #42	@ 0x2a
 81014f2:	613b      	str	r3, [r7, #16]
 81014f4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 81014f6:	813b      	strh	r3, [r7, #8]
 81014f8:	893a      	ldrh	r2, [r7, #8]
 81014fa:	693b      	ldr	r3, [r7, #16]
 81014fc:	f3bf 8f5b 	dmb	ish
 8101500:	801a      	strh	r2, [r3, #0]
//        __enable_irq();
        return true;
 8101502:	2301      	movs	r3, #1
 8101504:	e000      	b.n	8101508 <RingBuffer_Put+0x80>
    }
    else
    {
//    	__enable_irq();
        return false;
 8101506:	2300      	movs	r3, #0
    }
}
 8101508:	4618      	mov	r0, r3
 810150a:	372c      	adds	r7, #44	@ 0x2c
 810150c:	46bd      	mov	sp, r7
 810150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101512:	4770      	bx	lr

08101514 <RingBuffer_Get>:

_Bool RingBuffer_Get(s_RingBufferType * const rb, RingBufElement *pel)
{
 8101514:	b480      	push	{r7}
 8101516:	b08b      	sub	sp, #44	@ 0x2c
 8101518:	af00      	add	r7, sp, #0
 810151a:	6078      	str	r0, [r7, #4]
 810151c:	6039      	str	r1, [r7, #0]
//	__disable_irq();
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 810151e:	687b      	ldr	r3, [r7, #4]
 8101520:	332c      	adds	r3, #44	@ 0x2c
 8101522:	623b      	str	r3, [r7, #32]
 8101524:	6a3b      	ldr	r3, [r7, #32]
 8101526:	881b      	ldrh	r3, [r3, #0]
 8101528:	b29b      	uxth	r3, r3
 810152a:	827b      	strh	r3, [r7, #18]
 810152c:	8a7b      	ldrh	r3, [r7, #18]
 810152e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 8101530:	687b      	ldr	r3, [r7, #4]
 8101532:	332a      	adds	r3, #42	@ 0x2a
 8101534:	61fb      	str	r3, [r7, #28]
 8101536:	69fb      	ldr	r3, [r7, #28]
 8101538:	881b      	ldrh	r3, [r3, #0]
 810153a:	f3bf 8f5b 	dmb	ish
 810153e:	b29b      	uxth	r3, r3
 8101540:	823b      	strh	r3, [r7, #16]
 8101542:	8a3b      	ldrh	r3, [r7, #16]
 8101544:	837b      	strh	r3, [r7, #26]
    if (head != tail)  // buffer NOT empty?
 8101546:	8b7a      	ldrh	r2, [r7, #26]
 8101548:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810154a:	429a      	cmp	r2, r3
 810154c:	d01c      	beq.n	8101588 <RingBuffer_Get+0x74>
    {
        *pel = rb->buffer[tail];
 810154e:	687b      	ldr	r3, [r7, #4]
 8101550:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8101552:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8101554:	4413      	add	r3, r2
 8101556:	781a      	ldrb	r2, [r3, #0]
 8101558:	683b      	ldr	r3, [r7, #0]
 810155a:	701a      	strb	r2, [r3, #0]
        ++tail;
 810155c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 810155e:	3301      	adds	r3, #1
 8101560:	84fb      	strh	r3, [r7, #38]	@ 0x26
        if (tail == rb->max_size)
 8101562:	687b      	ldr	r3, [r7, #4]
 8101564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8101566:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8101568:	429a      	cmp	r2, r3
 810156a:	d101      	bne.n	8101570 <RingBuffer_Get+0x5c>
        {
            tail = 0U;
 810156c:	2300      	movs	r3, #0
 810156e:	84fb      	strh	r3, [r7, #38]	@ 0x26
        }
        atomic_store_explicit(&rb->tail, tail, memory_order_release);
 8101570:	687b      	ldr	r3, [r7, #4]
 8101572:	332c      	adds	r3, #44	@ 0x2c
 8101574:	617b      	str	r3, [r7, #20]
 8101576:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8101578:	81fb      	strh	r3, [r7, #14]
 810157a:	89fa      	ldrh	r2, [r7, #14]
 810157c:	697b      	ldr	r3, [r7, #20]
 810157e:	f3bf 8f5b 	dmb	ish
 8101582:	801a      	strh	r2, [r3, #0]
//    	__enable_irq();
        return true;
 8101584:	2301      	movs	r3, #1
 8101586:	e000      	b.n	810158a <RingBuffer_Get+0x76>
    }
    else
    {
//    	__enable_irq();
        return false;
 8101588:	2300      	movs	r3, #0
    }
}
 810158a:	4618      	mov	r0, r3
 810158c:	372c      	adds	r7, #44	@ 0x2c
 810158e:	46bd      	mov	sp, r7
 8101590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101594:	4770      	bx	lr

08101596 <RingBuffer_IsDataAvailable>:
    }
    return rb->buffer[tail];
}

_Bool RingBuffer_IsDataAvailable(s_RingBufferType * const rb)
{
 8101596:	b480      	push	{r7}
 8101598:	b089      	sub	sp, #36	@ 0x24
 810159a:	af00      	add	r7, sp, #0
 810159c:	6078      	str	r0, [r7, #4]
    RingBufCtr head = atomic_load_explicit(&rb->head, memory_order_acquire);
 810159e:	687b      	ldr	r3, [r7, #4]
 81015a0:	332a      	adds	r3, #42	@ 0x2a
 81015a2:	61fb      	str	r3, [r7, #28]
 81015a4:	69fb      	ldr	r3, [r7, #28]
 81015a6:	881b      	ldrh	r3, [r3, #0]
 81015a8:	f3bf 8f5b 	dmb	ish
 81015ac:	b29b      	uxth	r3, r3
 81015ae:	823b      	strh	r3, [r7, #16]
 81015b0:	8a3b      	ldrh	r3, [r7, #16]
 81015b2:	837b      	strh	r3, [r7, #26]
    RingBufCtr tail = atomic_load_explicit(&rb->tail, memory_order_relaxed);
 81015b4:	687b      	ldr	r3, [r7, #4]
 81015b6:	332c      	adds	r3, #44	@ 0x2c
 81015b8:	617b      	str	r3, [r7, #20]
 81015ba:	697b      	ldr	r3, [r7, #20]
 81015bc:	881b      	ldrh	r3, [r3, #0]
 81015be:	b29b      	uxth	r3, r3
 81015c0:	81fb      	strh	r3, [r7, #14]
 81015c2:	89fb      	ldrh	r3, [r7, #14]
 81015c4:	827b      	strh	r3, [r7, #18]
    return (head != tail);
 81015c6:	8b7a      	ldrh	r2, [r7, #26]
 81015c8:	8a7b      	ldrh	r3, [r7, #18]
 81015ca:	429a      	cmp	r2, r3
 81015cc:	bf14      	ite	ne
 81015ce:	2301      	movne	r3, #1
 81015d0:	2300      	moveq	r3, #0
 81015d2:	b2db      	uxtb	r3, r3
}
 81015d4:	4618      	mov	r0, r3
 81015d6:	3724      	adds	r7, #36	@ 0x24
 81015d8:	46bd      	mov	sp, r7
 81015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015de:	4770      	bx	lr

081015e0 <LL_TIM_ClearFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_ClearFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
 81015e0:	b480      	push	{r7}
 81015e2:	b083      	sub	sp, #12
 81015e4:	af00      	add	r7, sp, #0
 81015e6:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 81015e8:	687b      	ldr	r3, [r7, #4]
 81015ea:	f06f 0201 	mvn.w	r2, #1
 81015ee:	611a      	str	r2, [r3, #16]
}
 81015f0:	bf00      	nop
 81015f2:	370c      	adds	r7, #12
 81015f4:	46bd      	mov	sp, r7
 81015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015fa:	4770      	bx	lr

081015fc <LL_TIM_IsActiveFlag_UPDATE>:
  * @rmtoll SR           UIF           LL_TIM_IsActiveFlag_UPDATE
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_UPDATE(const TIM_TypeDef *TIMx)
{
 81015fc:	b480      	push	{r7}
 81015fe:	b083      	sub	sp, #12
 8101600:	af00      	add	r7, sp, #0
 8101602:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8101604:	687b      	ldr	r3, [r7, #4]
 8101606:	691b      	ldr	r3, [r3, #16]
 8101608:	f003 0301 	and.w	r3, r3, #1
 810160c:	2b01      	cmp	r3, #1
 810160e:	d101      	bne.n	8101614 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8101610:	2301      	movs	r3, #1
 8101612:	e000      	b.n	8101616 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8101614:	2300      	movs	r3, #0
}
 8101616:	4618      	mov	r0, r3
 8101618:	370c      	adds	r7, #12
 810161a:	46bd      	mov	sp, r7
 810161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101620:	4770      	bx	lr
	...

08101624 <TickTimer_IRQHandler>:
#include "stm32h7xx.h"
#include "stm32h7xx_ll_tim.h"

volatile uint32_t LL_Tick = 0;

void TickTimer_IRQHandler(void) {
 8101624:	b580      	push	{r7, lr}
 8101626:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM2)) {
 8101628:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 810162c:	f7ff ffe6 	bl	81015fc <LL_TIM_IsActiveFlag_UPDATE>
 8101630:	4603      	mov	r3, r0
 8101632:	2b00      	cmp	r3, #0
 8101634:	d008      	beq.n	8101648 <TickTimer_IRQHandler+0x24>
        LL_TIM_ClearFlag_UPDATE(TIM2);
 8101636:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 810163a:	f7ff ffd1 	bl	81015e0 <LL_TIM_ClearFlag_UPDATE>
        LL_Tick++;
 810163e:	4b03      	ldr	r3, [pc, #12]	@ (810164c <TickTimer_IRQHandler+0x28>)
 8101640:	681b      	ldr	r3, [r3, #0]
 8101642:	3301      	adds	r3, #1
 8101644:	4a01      	ldr	r2, [pc, #4]	@ (810164c <TickTimer_IRQHandler+0x28>)
 8101646:	6013      	str	r3, [r2, #0]
    }
}
 8101648:	bf00      	nop
 810164a:	bd80      	pop	{r7, pc}
 810164c:	10034cc8 	.word	0x10034cc8

08101650 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8101650:	b480      	push	{r7}
 8101652:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8101654:	4b09      	ldr	r3, [pc, #36]	@ (810167c <SystemInit+0x2c>)
 8101656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810165a:	4a08      	ldr	r2, [pc, #32]	@ (810167c <SystemInit+0x2c>)
 810165c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8101660:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8101664:	4b05      	ldr	r3, [pc, #20]	@ (810167c <SystemInit+0x2c>)
 8101666:	691b      	ldr	r3, [r3, #16]
 8101668:	4a04      	ldr	r2, [pc, #16]	@ (810167c <SystemInit+0x2c>)
 810166a:	f043 0310 	orr.w	r3, r3, #16
 810166e:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8101670:	bf00      	nop
 8101672:	46bd      	mov	sp, r7
 8101674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101678:	4770      	bx	lr
 810167a:	bf00      	nop
 810167c:	e000ed00 	.word	0xe000ed00

08101680 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8101680:	b480      	push	{r7}
 8101682:	af00      	add	r7, sp, #0
#if defined(USE_PWR_LDO_SUPPLY)
  #if defined(SMPS)
    /* Exit Run* mode by disabling SMPS and enabling LDO */
    PWR->CR3 = (PWR->CR3 & ~PWR_CR3_SMPSEN) | PWR_CR3_LDOEN;
 8101684:	4b0a      	ldr	r3, [pc, #40]	@ (81016b0 <ExitRun0Mode+0x30>)
 8101686:	68db      	ldr	r3, [r3, #12]
 8101688:	f023 0306 	bic.w	r3, r3, #6
 810168c:	4a08      	ldr	r2, [pc, #32]	@ (81016b0 <ExitRun0Mode+0x30>)
 810168e:	f043 0302 	orr.w	r3, r3, #2
 8101692:	60d3      	str	r3, [r2, #12]
  #else
    /* Enable LDO mode */
    PWR->CR3 |= PWR_CR3_LDOEN;
  #endif /* SMPS */
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8101694:	bf00      	nop
 8101696:	4b06      	ldr	r3, [pc, #24]	@ (81016b0 <ExitRun0Mode+0x30>)
 8101698:	685b      	ldr	r3, [r3, #4]
 810169a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810169e:	2b00      	cmp	r3, #0
 81016a0:	d0f9      	beq.n	8101696 <ExitRun0Mode+0x16>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 81016a2:	bf00      	nop
 81016a4:	bf00      	nop
 81016a6:	46bd      	mov	sp, r7
 81016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ac:	4770      	bx	lr
 81016ae:	bf00      	nop
 81016b0:	58024800 	.word	0x58024800

081016b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81016b4:	b480      	push	{r7}
 81016b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81016b8:	4b04      	ldr	r3, [pc, #16]	@ (81016cc <__NVIC_GetPriorityGrouping+0x18>)
 81016ba:	68db      	ldr	r3, [r3, #12]
 81016bc:	0a1b      	lsrs	r3, r3, #8
 81016be:	f003 0307 	and.w	r3, r3, #7
}
 81016c2:	4618      	mov	r0, r3
 81016c4:	46bd      	mov	sp, r7
 81016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ca:	4770      	bx	lr
 81016cc:	e000ed00 	.word	0xe000ed00

081016d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81016d0:	b480      	push	{r7}
 81016d2:	b083      	sub	sp, #12
 81016d4:	af00      	add	r7, sp, #0
 81016d6:	4603      	mov	r3, r0
 81016d8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016de:	2b00      	cmp	r3, #0
 81016e0:	db0b      	blt.n	81016fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81016e2:	88fb      	ldrh	r3, [r7, #6]
 81016e4:	f003 021f 	and.w	r2, r3, #31
 81016e8:	4907      	ldr	r1, [pc, #28]	@ (8101708 <__NVIC_EnableIRQ+0x38>)
 81016ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016ee:	095b      	lsrs	r3, r3, #5
 81016f0:	2001      	movs	r0, #1
 81016f2:	fa00 f202 	lsl.w	r2, r0, r2
 81016f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81016fa:	bf00      	nop
 81016fc:	370c      	adds	r7, #12
 81016fe:	46bd      	mov	sp, r7
 8101700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101704:	4770      	bx	lr
 8101706:	bf00      	nop
 8101708:	e000e100 	.word	0xe000e100

0810170c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 810170c:	b480      	push	{r7}
 810170e:	b083      	sub	sp, #12
 8101710:	af00      	add	r7, sp, #0
 8101712:	4603      	mov	r3, r0
 8101714:	6039      	str	r1, [r7, #0]
 8101716:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810171c:	2b00      	cmp	r3, #0
 810171e:	db0a      	blt.n	8101736 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101720:	683b      	ldr	r3, [r7, #0]
 8101722:	b2da      	uxtb	r2, r3
 8101724:	490c      	ldr	r1, [pc, #48]	@ (8101758 <__NVIC_SetPriority+0x4c>)
 8101726:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810172a:	0112      	lsls	r2, r2, #4
 810172c:	b2d2      	uxtb	r2, r2
 810172e:	440b      	add	r3, r1
 8101730:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101734:	e00a      	b.n	810174c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101736:	683b      	ldr	r3, [r7, #0]
 8101738:	b2da      	uxtb	r2, r3
 810173a:	4908      	ldr	r1, [pc, #32]	@ (810175c <__NVIC_SetPriority+0x50>)
 810173c:	88fb      	ldrh	r3, [r7, #6]
 810173e:	f003 030f 	and.w	r3, r3, #15
 8101742:	3b04      	subs	r3, #4
 8101744:	0112      	lsls	r2, r2, #4
 8101746:	b2d2      	uxtb	r2, r2
 8101748:	440b      	add	r3, r1
 810174a:	761a      	strb	r2, [r3, #24]
}
 810174c:	bf00      	nop
 810174e:	370c      	adds	r7, #12
 8101750:	46bd      	mov	sp, r7
 8101752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101756:	4770      	bx	lr
 8101758:	e000e100 	.word	0xe000e100
 810175c:	e000ed00 	.word	0xe000ed00

08101760 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101760:	b480      	push	{r7}
 8101762:	b089      	sub	sp, #36	@ 0x24
 8101764:	af00      	add	r7, sp, #0
 8101766:	60f8      	str	r0, [r7, #12]
 8101768:	60b9      	str	r1, [r7, #8]
 810176a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810176c:	68fb      	ldr	r3, [r7, #12]
 810176e:	f003 0307 	and.w	r3, r3, #7
 8101772:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101774:	69fb      	ldr	r3, [r7, #28]
 8101776:	f1c3 0307 	rsb	r3, r3, #7
 810177a:	2b04      	cmp	r3, #4
 810177c:	bf28      	it	cs
 810177e:	2304      	movcs	r3, #4
 8101780:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101782:	69fb      	ldr	r3, [r7, #28]
 8101784:	3304      	adds	r3, #4
 8101786:	2b06      	cmp	r3, #6
 8101788:	d902      	bls.n	8101790 <NVIC_EncodePriority+0x30>
 810178a:	69fb      	ldr	r3, [r7, #28]
 810178c:	3b03      	subs	r3, #3
 810178e:	e000      	b.n	8101792 <NVIC_EncodePriority+0x32>
 8101790:	2300      	movs	r3, #0
 8101792:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101794:	f04f 32ff 	mov.w	r2, #4294967295
 8101798:	69bb      	ldr	r3, [r7, #24]
 810179a:	fa02 f303 	lsl.w	r3, r2, r3
 810179e:	43da      	mvns	r2, r3
 81017a0:	68bb      	ldr	r3, [r7, #8]
 81017a2:	401a      	ands	r2, r3
 81017a4:	697b      	ldr	r3, [r7, #20]
 81017a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 81017a8:	f04f 31ff 	mov.w	r1, #4294967295
 81017ac:	697b      	ldr	r3, [r7, #20]
 81017ae:	fa01 f303 	lsl.w	r3, r1, r3
 81017b2:	43d9      	mvns	r1, r3
 81017b4:	687b      	ldr	r3, [r7, #4]
 81017b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81017b8:	4313      	orrs	r3, r2
         );
}
 81017ba:	4618      	mov	r0, r3
 81017bc:	3724      	adds	r7, #36	@ 0x24
 81017be:	46bd      	mov	sp, r7
 81017c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017c4:	4770      	bx	lr

081017c6 <LL_TIM_EnableCounter>:
{
 81017c6:	b480      	push	{r7}
 81017c8:	b083      	sub	sp, #12
 81017ca:	af00      	add	r7, sp, #0
 81017cc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 81017ce:	687b      	ldr	r3, [r7, #4]
 81017d0:	681b      	ldr	r3, [r3, #0]
 81017d2:	f043 0201 	orr.w	r2, r3, #1
 81017d6:	687b      	ldr	r3, [r7, #4]
 81017d8:	601a      	str	r2, [r3, #0]
}
 81017da:	bf00      	nop
 81017dc:	370c      	adds	r7, #12
 81017de:	46bd      	mov	sp, r7
 81017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e4:	4770      	bx	lr

081017e6 <LL_TIM_EnableUpdateEvent>:
{
 81017e6:	b480      	push	{r7}
 81017e8:	b083      	sub	sp, #12
 81017ea:	af00      	add	r7, sp, #0
 81017ec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_UDIS);
 81017ee:	687b      	ldr	r3, [r7, #4]
 81017f0:	681b      	ldr	r3, [r3, #0]
 81017f2:	f023 0202 	bic.w	r2, r3, #2
 81017f6:	687b      	ldr	r3, [r7, #4]
 81017f8:	601a      	str	r2, [r3, #0]
}
 81017fa:	bf00      	nop
 81017fc:	370c      	adds	r7, #12
 81017fe:	46bd      	mov	sp, r7
 8101800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101804:	4770      	bx	lr

08101806 <LL_TIM_EnableARRPreload>:
{
 8101806:	b480      	push	{r7}
 8101808:	b083      	sub	sp, #12
 810180a:	af00      	add	r7, sp, #0
 810180c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_ARPE);
 810180e:	687b      	ldr	r3, [r7, #4]
 8101810:	681b      	ldr	r3, [r3, #0]
 8101812:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8101816:	687b      	ldr	r3, [r7, #4]
 8101818:	601a      	str	r2, [r3, #0]
}
 810181a:	bf00      	nop
 810181c:	370c      	adds	r7, #12
 810181e:	46bd      	mov	sp, r7
 8101820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101824:	4770      	bx	lr

08101826 <LL_TIM_SetClockSource>:
{
 8101826:	b480      	push	{r7}
 8101828:	b083      	sub	sp, #12
 810182a:	af00      	add	r7, sp, #0
 810182c:	6078      	str	r0, [r7, #4]
 810182e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8101830:	687b      	ldr	r3, [r7, #4]
 8101832:	689b      	ldr	r3, [r3, #8]
 8101834:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8101838:	f023 0307 	bic.w	r3, r3, #7
 810183c:	683a      	ldr	r2, [r7, #0]
 810183e:	431a      	orrs	r2, r3
 8101840:	687b      	ldr	r3, [r7, #4]
 8101842:	609a      	str	r2, [r3, #8]
}
 8101844:	bf00      	nop
 8101846:	370c      	adds	r7, #12
 8101848:	46bd      	mov	sp, r7
 810184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810184e:	4770      	bx	lr

08101850 <LL_TIM_SetTriggerOutput>:
{
 8101850:	b480      	push	{r7}
 8101852:	b083      	sub	sp, #12
 8101854:	af00      	add	r7, sp, #0
 8101856:	6078      	str	r0, [r7, #4]
 8101858:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 810185a:	687b      	ldr	r3, [r7, #4]
 810185c:	685b      	ldr	r3, [r3, #4]
 810185e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8101862:	683b      	ldr	r3, [r7, #0]
 8101864:	431a      	orrs	r2, r3
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	605a      	str	r2, [r3, #4]
}
 810186a:	bf00      	nop
 810186c:	370c      	adds	r7, #12
 810186e:	46bd      	mov	sp, r7
 8101870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101874:	4770      	bx	lr

08101876 <LL_TIM_DisableMasterSlaveMode>:
{
 8101876:	b480      	push	{r7}
 8101878:	b083      	sub	sp, #12
 810187a:	af00      	add	r7, sp, #0
 810187c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 810187e:	687b      	ldr	r3, [r7, #4]
 8101880:	689b      	ldr	r3, [r3, #8]
 8101882:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8101886:	687b      	ldr	r3, [r7, #4]
 8101888:	609a      	str	r2, [r3, #8]
}
 810188a:	bf00      	nop
 810188c:	370c      	adds	r7, #12
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr

08101896 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8101896:	b480      	push	{r7}
 8101898:	b083      	sub	sp, #12
 810189a:	af00      	add	r7, sp, #0
 810189c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 810189e:	687b      	ldr	r3, [r7, #4]
 81018a0:	68db      	ldr	r3, [r3, #12]
 81018a2:	f043 0201 	orr.w	r2, r3, #1
 81018a6:	687b      	ldr	r3, [r7, #4]
 81018a8:	60da      	str	r2, [r3, #12]
}
 81018aa:	bf00      	nop
 81018ac:	370c      	adds	r7, #12
 81018ae:	46bd      	mov	sp, r7
 81018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018b4:	4770      	bx	lr

081018b6 <LL_USART_Enable>:
{
 81018b6:	b480      	push	{r7}
 81018b8:	b083      	sub	sp, #12
 81018ba:	af00      	add	r7, sp, #0
 81018bc:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 81018be:	687b      	ldr	r3, [r7, #4]
 81018c0:	681b      	ldr	r3, [r3, #0]
 81018c2:	f043 0201 	orr.w	r2, r3, #1
 81018c6:	687b      	ldr	r3, [r7, #4]
 81018c8:	601a      	str	r2, [r3, #0]
}
 81018ca:	bf00      	nop
 81018cc:	370c      	adds	r7, #12
 81018ce:	46bd      	mov	sp, r7
 81018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018d4:	4770      	bx	lr

081018d6 <LL_USART_DisableFIFO>:
{
 81018d6:	b480      	push	{r7}
 81018d8:	b083      	sub	sp, #12
 81018da:	af00      	add	r7, sp, #0
 81018dc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 81018de:	687b      	ldr	r3, [r7, #4]
 81018e0:	681b      	ldr	r3, [r3, #0]
 81018e2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 81018e6:	687b      	ldr	r3, [r7, #4]
 81018e8:	601a      	str	r2, [r3, #0]
}
 81018ea:	bf00      	nop
 81018ec:	370c      	adds	r7, #12
 81018ee:	46bd      	mov	sp, r7
 81018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018f4:	4770      	bx	lr

081018f6 <LL_USART_SetTXFIFOThreshold>:
{
 81018f6:	b480      	push	{r7}
 81018f8:	b089      	sub	sp, #36	@ 0x24
 81018fa:	af00      	add	r7, sp, #0
 81018fc:	6078      	str	r0, [r7, #4]
 81018fe:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	3308      	adds	r3, #8
 8101904:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101906:	68fb      	ldr	r3, [r7, #12]
 8101908:	e853 3f00 	ldrex	r3, [r3]
 810190c:	60bb      	str	r3, [r7, #8]
   return(result);
 810190e:	68bb      	ldr	r3, [r7, #8]
 8101910:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8101914:	683b      	ldr	r3, [r7, #0]
 8101916:	075b      	lsls	r3, r3, #29
 8101918:	4313      	orrs	r3, r2
 810191a:	61fb      	str	r3, [r7, #28]
 810191c:	687b      	ldr	r3, [r7, #4]
 810191e:	3308      	adds	r3, #8
 8101920:	69fa      	ldr	r2, [r7, #28]
 8101922:	61ba      	str	r2, [r7, #24]
 8101924:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101926:	6979      	ldr	r1, [r7, #20]
 8101928:	69ba      	ldr	r2, [r7, #24]
 810192a:	e841 2300 	strex	r3, r2, [r1]
 810192e:	613b      	str	r3, [r7, #16]
   return(result);
 8101930:	693b      	ldr	r3, [r7, #16]
 8101932:	2b00      	cmp	r3, #0
 8101934:	d1e4      	bne.n	8101900 <LL_USART_SetTXFIFOThreshold+0xa>
}
 8101936:	bf00      	nop
 8101938:	bf00      	nop
 810193a:	3724      	adds	r7, #36	@ 0x24
 810193c:	46bd      	mov	sp, r7
 810193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101942:	4770      	bx	lr

08101944 <LL_USART_SetRXFIFOThreshold>:
{
 8101944:	b480      	push	{r7}
 8101946:	b089      	sub	sp, #36	@ 0x24
 8101948:	af00      	add	r7, sp, #0
 810194a:	6078      	str	r0, [r7, #4]
 810194c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 810194e:	687b      	ldr	r3, [r7, #4]
 8101950:	3308      	adds	r3, #8
 8101952:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101954:	68fb      	ldr	r3, [r7, #12]
 8101956:	e853 3f00 	ldrex	r3, [r3]
 810195a:	60bb      	str	r3, [r7, #8]
   return(result);
 810195c:	68bb      	ldr	r3, [r7, #8]
 810195e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8101962:	683b      	ldr	r3, [r7, #0]
 8101964:	065b      	lsls	r3, r3, #25
 8101966:	4313      	orrs	r3, r2
 8101968:	61fb      	str	r3, [r7, #28]
 810196a:	687b      	ldr	r3, [r7, #4]
 810196c:	3308      	adds	r3, #8
 810196e:	69fa      	ldr	r2, [r7, #28]
 8101970:	61ba      	str	r2, [r7, #24]
 8101972:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101974:	6979      	ldr	r1, [r7, #20]
 8101976:	69ba      	ldr	r2, [r7, #24]
 8101978:	e841 2300 	strex	r3, r2, [r1]
 810197c:	613b      	str	r3, [r7, #16]
   return(result);
 810197e:	693b      	ldr	r3, [r7, #16]
 8101980:	2b00      	cmp	r3, #0
 8101982:	d1e4      	bne.n	810194e <LL_USART_SetRXFIFOThreshold+0xa>
}
 8101984:	bf00      	nop
 8101986:	bf00      	nop
 8101988:	3724      	adds	r7, #36	@ 0x24
 810198a:	46bd      	mov	sp, r7
 810198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101990:	4770      	bx	lr

08101992 <LL_USART_ConfigAsyncMode>:
{
 8101992:	b480      	push	{r7}
 8101994:	b083      	sub	sp, #12
 8101996:	af00      	add	r7, sp, #0
 8101998:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 810199a:	687b      	ldr	r3, [r7, #4]
 810199c:	685b      	ldr	r3, [r3, #4]
 810199e:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 81019a2:	687b      	ldr	r3, [r7, #4]
 81019a4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 81019a6:	687b      	ldr	r3, [r7, #4]
 81019a8:	689b      	ldr	r3, [r3, #8]
 81019aa:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 81019ae:	687b      	ldr	r3, [r7, #4]
 81019b0:	609a      	str	r2, [r3, #8]
}
 81019b2:	bf00      	nop
 81019b4:	370c      	adds	r7, #12
 81019b6:	46bd      	mov	sp, r7
 81019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019bc:	4770      	bx	lr

081019be <LL_USART_IsActiveFlag_TEACK>:
{
 81019be:	b480      	push	{r7}
 81019c0:	b083      	sub	sp, #12
 81019c2:	af00      	add	r7, sp, #0
 81019c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 81019c6:	687b      	ldr	r3, [r7, #4]
 81019c8:	69db      	ldr	r3, [r3, #28]
 81019ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81019ce:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81019d2:	d101      	bne.n	81019d8 <LL_USART_IsActiveFlag_TEACK+0x1a>
 81019d4:	2301      	movs	r3, #1
 81019d6:	e000      	b.n	81019da <LL_USART_IsActiveFlag_TEACK+0x1c>
 81019d8:	2300      	movs	r3, #0
}
 81019da:	4618      	mov	r0, r3
 81019dc:	370c      	adds	r7, #12
 81019de:	46bd      	mov	sp, r7
 81019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019e4:	4770      	bx	lr

081019e6 <LL_USART_IsActiveFlag_REACK>:
{
 81019e6:	b480      	push	{r7}
 81019e8:	b083      	sub	sp, #12
 81019ea:	af00      	add	r7, sp, #0
 81019ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 81019ee:	687b      	ldr	r3, [r7, #4]
 81019f0:	69db      	ldr	r3, [r3, #28]
 81019f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81019f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81019fa:	d101      	bne.n	8101a00 <LL_USART_IsActiveFlag_REACK+0x1a>
 81019fc:	2301      	movs	r3, #1
 81019fe:	e000      	b.n	8101a02 <LL_USART_IsActiveFlag_REACK+0x1c>
 8101a00:	2300      	movs	r3, #0
}
 8101a02:	4618      	mov	r0, r3
 8101a04:	370c      	adds	r7, #12
 8101a06:	46bd      	mov	sp, r7
 8101a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a0c:	4770      	bx	lr

08101a0e <LL_GPIO_ResetOutputPin>:
{
 8101a0e:	b480      	push	{r7}
 8101a10:	b083      	sub	sp, #12
 8101a12:	af00      	add	r7, sp, #0
 8101a14:	6078      	str	r0, [r7, #4]
 8101a16:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8101a18:	683b      	ldr	r3, [r7, #0]
 8101a1a:	041a      	lsls	r2, r3, #16
 8101a1c:	687b      	ldr	r3, [r7, #4]
 8101a1e:	619a      	str	r2, [r3, #24]
}
 8101a20:	bf00      	nop
 8101a22:	370c      	adds	r7, #12
 8101a24:	46bd      	mov	sp, r7
 8101a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a2a:	4770      	bx	lr

08101a2c <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8101a2c:	b480      	push	{r7}
 8101a2e:	b085      	sub	sp, #20
 8101a30:	af00      	add	r7, sp, #0
 8101a32:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8101a34:	4b0a      	ldr	r3, [pc, #40]	@ (8101a60 <LL_AHB4_GRP1_EnableClock+0x34>)
 8101a36:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101a3a:	4909      	ldr	r1, [pc, #36]	@ (8101a60 <LL_AHB4_GRP1_EnableClock+0x34>)
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	4313      	orrs	r3, r2
 8101a40:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8101a44:	4b06      	ldr	r3, [pc, #24]	@ (8101a60 <LL_AHB4_GRP1_EnableClock+0x34>)
 8101a46:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8101a4a:	687b      	ldr	r3, [r7, #4]
 8101a4c:	4013      	ands	r3, r2
 8101a4e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101a50:	68fb      	ldr	r3, [r7, #12]
}
 8101a52:	bf00      	nop
 8101a54:	3714      	adds	r7, #20
 8101a56:	46bd      	mov	sp, r7
 8101a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a5c:	4770      	bx	lr
 8101a5e:	bf00      	nop
 8101a60:	58024400 	.word	0x58024400

08101a64 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8101a64:	b480      	push	{r7}
 8101a66:	b085      	sub	sp, #20
 8101a68:	af00      	add	r7, sp, #0
 8101a6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8101a6c:	4b0a      	ldr	r3, [pc, #40]	@ (8101a98 <LL_APB1_GRP1_EnableClock+0x34>)
 8101a6e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8101a72:	4909      	ldr	r1, [pc, #36]	@ (8101a98 <LL_APB1_GRP1_EnableClock+0x34>)
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	4313      	orrs	r3, r2
 8101a78:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8101a7c:	4b06      	ldr	r3, [pc, #24]	@ (8101a98 <LL_APB1_GRP1_EnableClock+0x34>)
 8101a7e:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8101a82:	687b      	ldr	r3, [r7, #4]
 8101a84:	4013      	ands	r3, r2
 8101a86:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101a88:	68fb      	ldr	r3, [r7, #12]
}
 8101a8a:	bf00      	nop
 8101a8c:	3714      	adds	r7, #20
 8101a8e:	46bd      	mov	sp, r7
 8101a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a94:	4770      	bx	lr
 8101a96:	bf00      	nop
 8101a98:	58024400 	.word	0x58024400

08101a9c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8101a9c:	b480      	push	{r7}
 8101a9e:	b085      	sub	sp, #20
 8101aa0:	af00      	add	r7, sp, #0
 8101aa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8101aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8101ad0 <LL_APB2_GRP1_EnableClock+0x34>)
 8101aa6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8101aaa:	4909      	ldr	r1, [pc, #36]	@ (8101ad0 <LL_APB2_GRP1_EnableClock+0x34>)
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	4313      	orrs	r3, r2
 8101ab0:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8101ab4:	4b06      	ldr	r3, [pc, #24]	@ (8101ad0 <LL_APB2_GRP1_EnableClock+0x34>)
 8101ab6:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8101aba:	687b      	ldr	r3, [r7, #4]
 8101abc:	4013      	ands	r3, r2
 8101abe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101ac0:	68fb      	ldr	r3, [r7, #12]
}
 8101ac2:	bf00      	nop
 8101ac4:	3714      	adds	r7, #20
 8101ac6:	46bd      	mov	sp, r7
 8101ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101acc:	4770      	bx	lr
 8101ace:	bf00      	nop
 8101ad0:	58024400 	.word	0x58024400

08101ad4 <LL_DMA_SetDataTransferDirection>:
{
 8101ad4:	b480      	push	{r7}
 8101ad6:	b087      	sub	sp, #28
 8101ad8:	af00      	add	r7, sp, #0
 8101ada:	60f8      	str	r0, [r7, #12]
 8101adc:	60b9      	str	r1, [r7, #8]
 8101ade:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101ae0:	68fb      	ldr	r3, [r7, #12]
 8101ae2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8101ae4:	4a0d      	ldr	r2, [pc, #52]	@ (8101b1c <LL_DMA_SetDataTransferDirection+0x48>)
 8101ae6:	68bb      	ldr	r3, [r7, #8]
 8101ae8:	4413      	add	r3, r2
 8101aea:	781b      	ldrb	r3, [r3, #0]
 8101aec:	461a      	mov	r2, r3
 8101aee:	697b      	ldr	r3, [r7, #20]
 8101af0:	4413      	add	r3, r2
 8101af2:	681b      	ldr	r3, [r3, #0]
 8101af4:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8101af8:	4908      	ldr	r1, [pc, #32]	@ (8101b1c <LL_DMA_SetDataTransferDirection+0x48>)
 8101afa:	68bb      	ldr	r3, [r7, #8]
 8101afc:	440b      	add	r3, r1
 8101afe:	781b      	ldrb	r3, [r3, #0]
 8101b00:	4619      	mov	r1, r3
 8101b02:	697b      	ldr	r3, [r7, #20]
 8101b04:	440b      	add	r3, r1
 8101b06:	4619      	mov	r1, r3
 8101b08:	687b      	ldr	r3, [r7, #4]
 8101b0a:	4313      	orrs	r3, r2
 8101b0c:	600b      	str	r3, [r1, #0]
}
 8101b0e:	bf00      	nop
 8101b10:	371c      	adds	r7, #28
 8101b12:	46bd      	mov	sp, r7
 8101b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b18:	4770      	bx	lr
 8101b1a:	bf00      	nop
 8101b1c:	0810ec50 	.word	0x0810ec50

08101b20 <LL_DMA_SetMode>:
{
 8101b20:	b480      	push	{r7}
 8101b22:	b087      	sub	sp, #28
 8101b24:	af00      	add	r7, sp, #0
 8101b26:	60f8      	str	r0, [r7, #12]
 8101b28:	60b9      	str	r1, [r7, #8]
 8101b2a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101b2c:	68fb      	ldr	r3, [r7, #12]
 8101b2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 8101b30:	4a0d      	ldr	r2, [pc, #52]	@ (8101b68 <LL_DMA_SetMode+0x48>)
 8101b32:	68bb      	ldr	r3, [r7, #8]
 8101b34:	4413      	add	r3, r2
 8101b36:	781b      	ldrb	r3, [r3, #0]
 8101b38:	461a      	mov	r2, r3
 8101b3a:	697b      	ldr	r3, [r7, #20]
 8101b3c:	4413      	add	r3, r2
 8101b3e:	681b      	ldr	r3, [r3, #0]
 8101b40:	f423 7290 	bic.w	r2, r3, #288	@ 0x120
 8101b44:	4908      	ldr	r1, [pc, #32]	@ (8101b68 <LL_DMA_SetMode+0x48>)
 8101b46:	68bb      	ldr	r3, [r7, #8]
 8101b48:	440b      	add	r3, r1
 8101b4a:	781b      	ldrb	r3, [r3, #0]
 8101b4c:	4619      	mov	r1, r3
 8101b4e:	697b      	ldr	r3, [r7, #20]
 8101b50:	440b      	add	r3, r1
 8101b52:	4619      	mov	r1, r3
 8101b54:	687b      	ldr	r3, [r7, #4]
 8101b56:	4313      	orrs	r3, r2
 8101b58:	600b      	str	r3, [r1, #0]
}
 8101b5a:	bf00      	nop
 8101b5c:	371c      	adds	r7, #28
 8101b5e:	46bd      	mov	sp, r7
 8101b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b64:	4770      	bx	lr
 8101b66:	bf00      	nop
 8101b68:	0810ec50 	.word	0x0810ec50

08101b6c <LL_DMA_SetPeriphIncMode>:
{
 8101b6c:	b480      	push	{r7}
 8101b6e:	b087      	sub	sp, #28
 8101b70:	af00      	add	r7, sp, #0
 8101b72:	60f8      	str	r0, [r7, #12]
 8101b74:	60b9      	str	r1, [r7, #8]
 8101b76:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101b78:	68fb      	ldr	r3, [r7, #12]
 8101b7a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8101b7c:	4a0d      	ldr	r2, [pc, #52]	@ (8101bb4 <LL_DMA_SetPeriphIncMode+0x48>)
 8101b7e:	68bb      	ldr	r3, [r7, #8]
 8101b80:	4413      	add	r3, r2
 8101b82:	781b      	ldrb	r3, [r3, #0]
 8101b84:	461a      	mov	r2, r3
 8101b86:	697b      	ldr	r3, [r7, #20]
 8101b88:	4413      	add	r3, r2
 8101b8a:	681b      	ldr	r3, [r3, #0]
 8101b8c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8101b90:	4908      	ldr	r1, [pc, #32]	@ (8101bb4 <LL_DMA_SetPeriphIncMode+0x48>)
 8101b92:	68bb      	ldr	r3, [r7, #8]
 8101b94:	440b      	add	r3, r1
 8101b96:	781b      	ldrb	r3, [r3, #0]
 8101b98:	4619      	mov	r1, r3
 8101b9a:	697b      	ldr	r3, [r7, #20]
 8101b9c:	440b      	add	r3, r1
 8101b9e:	4619      	mov	r1, r3
 8101ba0:	687b      	ldr	r3, [r7, #4]
 8101ba2:	4313      	orrs	r3, r2
 8101ba4:	600b      	str	r3, [r1, #0]
}
 8101ba6:	bf00      	nop
 8101ba8:	371c      	adds	r7, #28
 8101baa:	46bd      	mov	sp, r7
 8101bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bb0:	4770      	bx	lr
 8101bb2:	bf00      	nop
 8101bb4:	0810ec50 	.word	0x0810ec50

08101bb8 <LL_DMA_SetMemoryIncMode>:
{
 8101bb8:	b480      	push	{r7}
 8101bba:	b087      	sub	sp, #28
 8101bbc:	af00      	add	r7, sp, #0
 8101bbe:	60f8      	str	r0, [r7, #12]
 8101bc0:	60b9      	str	r1, [r7, #8]
 8101bc2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101bc4:	68fb      	ldr	r3, [r7, #12]
 8101bc6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8101bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8101c00 <LL_DMA_SetMemoryIncMode+0x48>)
 8101bca:	68bb      	ldr	r3, [r7, #8]
 8101bcc:	4413      	add	r3, r2
 8101bce:	781b      	ldrb	r3, [r3, #0]
 8101bd0:	461a      	mov	r2, r3
 8101bd2:	697b      	ldr	r3, [r7, #20]
 8101bd4:	4413      	add	r3, r2
 8101bd6:	681b      	ldr	r3, [r3, #0]
 8101bd8:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8101bdc:	4908      	ldr	r1, [pc, #32]	@ (8101c00 <LL_DMA_SetMemoryIncMode+0x48>)
 8101bde:	68bb      	ldr	r3, [r7, #8]
 8101be0:	440b      	add	r3, r1
 8101be2:	781b      	ldrb	r3, [r3, #0]
 8101be4:	4619      	mov	r1, r3
 8101be6:	697b      	ldr	r3, [r7, #20]
 8101be8:	440b      	add	r3, r1
 8101bea:	4619      	mov	r1, r3
 8101bec:	687b      	ldr	r3, [r7, #4]
 8101bee:	4313      	orrs	r3, r2
 8101bf0:	600b      	str	r3, [r1, #0]
}
 8101bf2:	bf00      	nop
 8101bf4:	371c      	adds	r7, #28
 8101bf6:	46bd      	mov	sp, r7
 8101bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bfc:	4770      	bx	lr
 8101bfe:	bf00      	nop
 8101c00:	0810ec50 	.word	0x0810ec50

08101c04 <LL_DMA_SetPeriphSize>:
{
 8101c04:	b480      	push	{r7}
 8101c06:	b087      	sub	sp, #28
 8101c08:	af00      	add	r7, sp, #0
 8101c0a:	60f8      	str	r0, [r7, #12]
 8101c0c:	60b9      	str	r1, [r7, #8]
 8101c0e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101c10:	68fb      	ldr	r3, [r7, #12]
 8101c12:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 8101c14:	4a0d      	ldr	r2, [pc, #52]	@ (8101c4c <LL_DMA_SetPeriphSize+0x48>)
 8101c16:	68bb      	ldr	r3, [r7, #8]
 8101c18:	4413      	add	r3, r2
 8101c1a:	781b      	ldrb	r3, [r3, #0]
 8101c1c:	461a      	mov	r2, r3
 8101c1e:	697b      	ldr	r3, [r7, #20]
 8101c20:	4413      	add	r3, r2
 8101c22:	681b      	ldr	r3, [r3, #0]
 8101c24:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 8101c28:	4908      	ldr	r1, [pc, #32]	@ (8101c4c <LL_DMA_SetPeriphSize+0x48>)
 8101c2a:	68bb      	ldr	r3, [r7, #8]
 8101c2c:	440b      	add	r3, r1
 8101c2e:	781b      	ldrb	r3, [r3, #0]
 8101c30:	4619      	mov	r1, r3
 8101c32:	697b      	ldr	r3, [r7, #20]
 8101c34:	440b      	add	r3, r1
 8101c36:	4619      	mov	r1, r3
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	4313      	orrs	r3, r2
 8101c3c:	600b      	str	r3, [r1, #0]
}
 8101c3e:	bf00      	nop
 8101c40:	371c      	adds	r7, #28
 8101c42:	46bd      	mov	sp, r7
 8101c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c48:	4770      	bx	lr
 8101c4a:	bf00      	nop
 8101c4c:	0810ec50 	.word	0x0810ec50

08101c50 <LL_DMA_SetMemorySize>:
{
 8101c50:	b480      	push	{r7}
 8101c52:	b087      	sub	sp, #28
 8101c54:	af00      	add	r7, sp, #0
 8101c56:	60f8      	str	r0, [r7, #12]
 8101c58:	60b9      	str	r1, [r7, #8]
 8101c5a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101c5c:	68fb      	ldr	r3, [r7, #12]
 8101c5e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8101c60:	4a0d      	ldr	r2, [pc, #52]	@ (8101c98 <LL_DMA_SetMemorySize+0x48>)
 8101c62:	68bb      	ldr	r3, [r7, #8]
 8101c64:	4413      	add	r3, r2
 8101c66:	781b      	ldrb	r3, [r3, #0]
 8101c68:	461a      	mov	r2, r3
 8101c6a:	697b      	ldr	r3, [r7, #20]
 8101c6c:	4413      	add	r3, r2
 8101c6e:	681b      	ldr	r3, [r3, #0]
 8101c70:	f423 42c0 	bic.w	r2, r3, #24576	@ 0x6000
 8101c74:	4908      	ldr	r1, [pc, #32]	@ (8101c98 <LL_DMA_SetMemorySize+0x48>)
 8101c76:	68bb      	ldr	r3, [r7, #8]
 8101c78:	440b      	add	r3, r1
 8101c7a:	781b      	ldrb	r3, [r3, #0]
 8101c7c:	4619      	mov	r1, r3
 8101c7e:	697b      	ldr	r3, [r7, #20]
 8101c80:	440b      	add	r3, r1
 8101c82:	4619      	mov	r1, r3
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	4313      	orrs	r3, r2
 8101c88:	600b      	str	r3, [r1, #0]
}
 8101c8a:	bf00      	nop
 8101c8c:	371c      	adds	r7, #28
 8101c8e:	46bd      	mov	sp, r7
 8101c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c94:	4770      	bx	lr
 8101c96:	bf00      	nop
 8101c98:	0810ec50 	.word	0x0810ec50

08101c9c <LL_DMA_SetStreamPriorityLevel>:
{
 8101c9c:	b480      	push	{r7}
 8101c9e:	b087      	sub	sp, #28
 8101ca0:	af00      	add	r7, sp, #0
 8101ca2:	60f8      	str	r0, [r7, #12]
 8101ca4:	60b9      	str	r1, [r7, #8]
 8101ca6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101ca8:	68fb      	ldr	r3, [r7, #12]
 8101caa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8101cac:	4a0d      	ldr	r2, [pc, #52]	@ (8101ce4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8101cae:	68bb      	ldr	r3, [r7, #8]
 8101cb0:	4413      	add	r3, r2
 8101cb2:	781b      	ldrb	r3, [r3, #0]
 8101cb4:	461a      	mov	r2, r3
 8101cb6:	697b      	ldr	r3, [r7, #20]
 8101cb8:	4413      	add	r3, r2
 8101cba:	681b      	ldr	r3, [r3, #0]
 8101cbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8101cc0:	4908      	ldr	r1, [pc, #32]	@ (8101ce4 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8101cc2:	68bb      	ldr	r3, [r7, #8]
 8101cc4:	440b      	add	r3, r1
 8101cc6:	781b      	ldrb	r3, [r3, #0]
 8101cc8:	4619      	mov	r1, r3
 8101cca:	697b      	ldr	r3, [r7, #20]
 8101ccc:	440b      	add	r3, r1
 8101cce:	4619      	mov	r1, r3
 8101cd0:	687b      	ldr	r3, [r7, #4]
 8101cd2:	4313      	orrs	r3, r2
 8101cd4:	600b      	str	r3, [r1, #0]
}
 8101cd6:	bf00      	nop
 8101cd8:	371c      	adds	r7, #28
 8101cda:	46bd      	mov	sp, r7
 8101cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ce0:	4770      	bx	lr
 8101ce2:	bf00      	nop
 8101ce4:	0810ec50 	.word	0x0810ec50

08101ce8 <LL_DMA_SetPeriphRequest>:
{
 8101ce8:	b480      	push	{r7}
 8101cea:	b085      	sub	sp, #20
 8101cec:	af00      	add	r7, sp, #0
 8101cee:	60f8      	str	r0, [r7, #12]
 8101cf0:	60b9      	str	r1, [r7, #8]
 8101cf2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8101cf4:	68bb      	ldr	r3, [r7, #8]
 8101cf6:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8101cfa:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8101cfe:	009b      	lsls	r3, r3, #2
 8101d00:	68fa      	ldr	r2, [r7, #12]
 8101d02:	4911      	ldr	r1, [pc, #68]	@ (8101d48 <LL_DMA_SetPeriphRequest+0x60>)
 8101d04:	428a      	cmp	r2, r1
 8101d06:	d101      	bne.n	8101d0c <LL_DMA_SetPeriphRequest+0x24>
 8101d08:	2200      	movs	r2, #0
 8101d0a:	e000      	b.n	8101d0e <LL_DMA_SetPeriphRequest+0x26>
 8101d0c:	2220      	movs	r2, #32
 8101d0e:	4413      	add	r3, r2
 8101d10:	681b      	ldr	r3, [r3, #0]
 8101d12:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8101d16:	68bb      	ldr	r3, [r7, #8]
 8101d18:	f103 5380 	add.w	r3, r3, #268435456	@ 0x10000000
 8101d1c:	f503 4302 	add.w	r3, r3, #33280	@ 0x8200
 8101d20:	009b      	lsls	r3, r3, #2
 8101d22:	68f9      	ldr	r1, [r7, #12]
 8101d24:	4808      	ldr	r0, [pc, #32]	@ (8101d48 <LL_DMA_SetPeriphRequest+0x60>)
 8101d26:	4281      	cmp	r1, r0
 8101d28:	d101      	bne.n	8101d2e <LL_DMA_SetPeriphRequest+0x46>
 8101d2a:	2100      	movs	r1, #0
 8101d2c:	e000      	b.n	8101d30 <LL_DMA_SetPeriphRequest+0x48>
 8101d2e:	2120      	movs	r1, #32
 8101d30:	440b      	add	r3, r1
 8101d32:	4619      	mov	r1, r3
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	4313      	orrs	r3, r2
 8101d38:	600b      	str	r3, [r1, #0]
}
 8101d3a:	bf00      	nop
 8101d3c:	3714      	adds	r7, #20
 8101d3e:	46bd      	mov	sp, r7
 8101d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d44:	4770      	bx	lr
 8101d46:	bf00      	nop
 8101d48:	40020000 	.word	0x40020000

08101d4c <LL_DMA_DisableFifoMode>:
{
 8101d4c:	b480      	push	{r7}
 8101d4e:	b085      	sub	sp, #20
 8101d50:	af00      	add	r7, sp, #0
 8101d52:	6078      	str	r0, [r7, #4]
 8101d54:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8101d5a:	4a0c      	ldr	r2, [pc, #48]	@ (8101d8c <LL_DMA_DisableFifoMode+0x40>)
 8101d5c:	683b      	ldr	r3, [r7, #0]
 8101d5e:	4413      	add	r3, r2
 8101d60:	781b      	ldrb	r3, [r3, #0]
 8101d62:	461a      	mov	r2, r3
 8101d64:	68fb      	ldr	r3, [r7, #12]
 8101d66:	4413      	add	r3, r2
 8101d68:	695b      	ldr	r3, [r3, #20]
 8101d6a:	4908      	ldr	r1, [pc, #32]	@ (8101d8c <LL_DMA_DisableFifoMode+0x40>)
 8101d6c:	683a      	ldr	r2, [r7, #0]
 8101d6e:	440a      	add	r2, r1
 8101d70:	7812      	ldrb	r2, [r2, #0]
 8101d72:	4611      	mov	r1, r2
 8101d74:	68fa      	ldr	r2, [r7, #12]
 8101d76:	440a      	add	r2, r1
 8101d78:	f023 0304 	bic.w	r3, r3, #4
 8101d7c:	6153      	str	r3, [r2, #20]
}
 8101d7e:	bf00      	nop
 8101d80:	3714      	adds	r7, #20
 8101d82:	46bd      	mov	sp, r7
 8101d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d88:	4770      	bx	lr
 8101d8a:	bf00      	nop
 8101d8c:	0810ec50 	.word	0x0810ec50

08101d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101d90:	b580      	push	{r7, lr}
 8101d92:	b082      	sub	sp, #8
 8101d94:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8101d96:	4b24      	ldr	r3, [pc, #144]	@ (8101e28 <main+0x98>)
 8101d98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101d9c:	4a22      	ldr	r2, [pc, #136]	@ (8101e28 <main+0x98>)
 8101d9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101da2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8101da6:	4b20      	ldr	r3, [pc, #128]	@ (8101e28 <main+0x98>)
 8101da8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101db0:	607b      	str	r3, [r7, #4]
 8101db2:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101db4:	2001      	movs	r0, #1
 8101db6:	f001 f8d7 	bl	8102f68 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8101dba:	f003 fdb1 	bl	8105920 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101dbe:	2201      	movs	r2, #1
 8101dc0:	2102      	movs	r1, #2
 8101dc2:	2000      	movs	r0, #0
 8101dc4:	f003 fd32 	bl	810582c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101dc8:	4b18      	ldr	r3, [pc, #96]	@ (8101e2c <main+0x9c>)
 8101dca:	681b      	ldr	r3, [r3, #0]
 8101dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8101dd0:	2b70      	cmp	r3, #112	@ 0x70
 8101dd2:	d108      	bne.n	8101de6 <main+0x56>
 8101dd4:	4b16      	ldr	r3, [pc, #88]	@ (8101e30 <main+0xa0>)
 8101dd6:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8101dda:	4a15      	ldr	r2, [pc, #84]	@ (8101e30 <main+0xa0>)
 8101ddc:	f043 0301 	orr.w	r3, r3, #1
 8101de0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8101de4:	e007      	b.n	8101df6 <main+0x66>
 8101de6:	4b12      	ldr	r3, [pc, #72]	@ (8101e30 <main+0xa0>)
 8101de8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8101dec:	4a10      	ldr	r2, [pc, #64]	@ (8101e30 <main+0xa0>)
 8101dee:	f043 0301 	orr.w	r3, r3, #1
 8101df2:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8101df6:	f000 fd73 	bl	81028e0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_MDMA_Init();
 8101dfa:	f000 f9af 	bl	810215c <MX_MDMA_Init>
  MX_DMA_Init();
 8101dfe:	f000 f975 	bl	81020ec <MX_DMA_Init>
  MX_BDMA_Init();
 8101e02:	f000 f959 	bl	81020b8 <MX_BDMA_Init>
  MX_GPIO_Init();
 8101e06:	f000 f9c3 	bl	8102190 <MX_GPIO_Init>
  MX_SDMMC2_MMC_Init();
 8101e0a:	f000 f813 	bl	8101e34 <MX_SDMMC2_MMC_Init>
  MX_USART6_UART_Init();
 8101e0e:	f000 f883 	bl	8101f18 <MX_USART6_UART_Init>
  MX_TIM2_Init();
 8101e12:	f000 f833 	bl	8101e7c <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 8101e16:	f00c f8cd 	bl	810dfb4 <MX_USB_DEVICE_Init>

  /* USER CODE BEGIN 2 */
  Mgmt_HardwareSystemPreparing();
 8101e1a:	f7fe fa5d 	bl	81002d8 <Mgmt_HardwareSystemPreparing>

  Mgmt_SystemStart();
 8101e1e:	f7fe fa63 	bl	81002e8 <Mgmt_SystemStart>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8101e22:	bf00      	nop
 8101e24:	e7fd      	b.n	8101e22 <main+0x92>
 8101e26:	bf00      	nop
 8101e28:	58024400 	.word	0x58024400
 8101e2c:	e000ed00 	.word	0xe000ed00
 8101e30:	58026400 	.word	0x58026400

08101e34 <MX_SDMMC2_MMC_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_MMC_Init(void)
{
 8101e34:	b580      	push	{r7, lr}
 8101e36:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hmmc2.Instance = SDMMC2;
 8101e38:	4b0e      	ldr	r3, [pc, #56]	@ (8101e74 <MX_SDMMC2_MMC_Init+0x40>)
 8101e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8101e78 <MX_SDMMC2_MMC_Init+0x44>)
 8101e3c:	601a      	str	r2, [r3, #0]
  hmmc2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8101e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8101e74 <MX_SDMMC2_MMC_Init+0x40>)
 8101e40:	2200      	movs	r2, #0
 8101e42:	605a      	str	r2, [r3, #4]
  hmmc2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8101e44:	4b0b      	ldr	r3, [pc, #44]	@ (8101e74 <MX_SDMMC2_MMC_Init+0x40>)
 8101e46:	2200      	movs	r2, #0
 8101e48:	609a      	str	r2, [r3, #8]
  hmmc2.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8101e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8101e74 <MX_SDMMC2_MMC_Init+0x40>)
 8101e4c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8101e50:	60da      	str	r2, [r3, #12]
  hmmc2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8101e52:	4b08      	ldr	r3, [pc, #32]	@ (8101e74 <MX_SDMMC2_MMC_Init+0x40>)
 8101e54:	2200      	movs	r2, #0
 8101e56:	611a      	str	r2, [r3, #16]
  hmmc2.Init.ClockDiv = 4;
 8101e58:	4b06      	ldr	r3, [pc, #24]	@ (8101e74 <MX_SDMMC2_MMC_Init+0x40>)
 8101e5a:	2204      	movs	r2, #4
 8101e5c:	615a      	str	r2, [r3, #20]
  if (HAL_MMC_Init(&hmmc2) != HAL_OK)
 8101e5e:	4805      	ldr	r0, [pc, #20]	@ (8101e74 <MX_SDMMC2_MMC_Init+0x40>)
 8101e60:	f001 f894 	bl	8102f8c <HAL_MMC_Init>
 8101e64:	4603      	mov	r3, r0
 8101e66:	2b00      	cmp	r3, #0
 8101e68:	d001      	beq.n	8101e6e <MX_SDMMC2_MMC_Init+0x3a>
  {
    Error_Handler();
 8101e6a:	f000 f9d9 	bl	8102220 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8101e6e:	bf00      	nop
 8101e70:	bd80      	pop	{r7, pc}
 8101e72:	bf00      	nop
 8101e74:	10034ccc 	.word	0x10034ccc
 8101e78:	48022400 	.word	0x48022400

08101e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8101e7c:	b580      	push	{r7, lr}
 8101e7e:	b086      	sub	sp, #24
 8101e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8101e82:	1d3b      	adds	r3, r7, #4
 8101e84:	2200      	movs	r2, #0
 8101e86:	601a      	str	r2, [r3, #0]
 8101e88:	605a      	str	r2, [r3, #4]
 8101e8a:	609a      	str	r2, [r3, #8]
 8101e8c:	60da      	str	r2, [r3, #12]
 8101e8e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8101e90:	2001      	movs	r0, #1
 8101e92:	f7ff fde7 	bl	8101a64 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8101e96:	f7ff fc0d 	bl	81016b4 <__NVIC_GetPriorityGrouping>
 8101e9a:	4603      	mov	r3, r0
 8101e9c:	2200      	movs	r2, #0
 8101e9e:	2100      	movs	r1, #0
 8101ea0:	4618      	mov	r0, r3
 8101ea2:	f7ff fc5d 	bl	8101760 <NVIC_EncodePriority>
 8101ea6:	4603      	mov	r3, r0
 8101ea8:	4619      	mov	r1, r3
 8101eaa:	201c      	movs	r0, #28
 8101eac:	f7ff fc2e 	bl	810170c <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8101eb0:	201c      	movs	r0, #28
 8101eb2:	f7ff fc0d 	bl	81016d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 119;
 8101eb6:	2377      	movs	r3, #119	@ 0x77
 8101eb8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8101eba:	2300      	movs	r3, #0
 8101ebc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 999;
 8101ebe:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8101ec2:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8101ec4:	2300      	movs	r3, #0
 8101ec6:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8101ec8:	1d3b      	adds	r3, r7, #4
 8101eca:	4619      	mov	r1, r3
 8101ecc:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101ed0:	f008 fb48 	bl	810a564 <LL_TIM_Init>
  LL_TIM_EnableARRPreload(TIM2);
 8101ed4:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101ed8:	f7ff fc95 	bl	8101806 <LL_TIM_EnableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8101edc:	2100      	movs	r1, #0
 8101ede:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101ee2:	f7ff fca0 	bl	8101826 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
 8101ee6:	2120      	movs	r1, #32
 8101ee8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101eec:	f7ff fcb0 	bl	8101850 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8101ef0:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101ef4:	f7ff fcbf 	bl	8101876 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */
  LL_TIM_EnableIT_UPDATE(TIM2);
 8101ef8:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101efc:	f7ff fccb 	bl	8101896 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_EnableUpdateEvent(TIM2);
 8101f00:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101f04:	f7ff fc6f 	bl	81017e6 <LL_TIM_EnableUpdateEvent>
  LL_TIM_EnableCounter(TIM2);
 8101f08:	f04f 4080 	mov.w	r0, #1073741824	@ 0x40000000
 8101f0c:	f7ff fc5b 	bl	81017c6 <LL_TIM_EnableCounter>
  /* USER CODE END TIM2_Init 2 */

}
 8101f10:	bf00      	nop
 8101f12:	3718      	adds	r7, #24
 8101f14:	46bd      	mov	sp, r7
 8101f16:	bd80      	pop	{r7, pc}

08101f18 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8101f18:	b580      	push	{r7, lr}
 8101f1a:	b0be      	sub	sp, #248	@ 0xf8
 8101f1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART6_Init 0 */

  /* USER CODE END USART6_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8101f1e:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8101f22:	2220      	movs	r2, #32
 8101f24:	2100      	movs	r1, #0
 8101f26:	4618      	mov	r0, r3
 8101f28:	f00c fdea 	bl	810eb00 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101f2c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101f30:	2200      	movs	r2, #0
 8101f32:	601a      	str	r2, [r3, #0]
 8101f34:	605a      	str	r2, [r3, #4]
 8101f36:	609a      	str	r2, [r3, #8]
 8101f38:	60da      	str	r2, [r3, #12]
 8101f3a:	611a      	str	r2, [r3, #16]
 8101f3c:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8101f3e:	463b      	mov	r3, r7
 8101f40:	22c0      	movs	r2, #192	@ 0xc0
 8101f42:	2100      	movs	r1, #0
 8101f44:	4618      	mov	r0, r3
 8101f46:	f00c fddb 	bl	810eb00 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8101f4a:	f04f 0201 	mov.w	r2, #1
 8101f4e:	f04f 0300 	mov.w	r3, #0
 8101f52:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8101f56:	2300      	movs	r3, #0
 8101f58:	67fb      	str	r3, [r7, #124]	@ 0x7c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101f5a:	463b      	mov	r3, r7
 8101f5c:	4618      	mov	r0, r3
 8101f5e:	f003 ff01 	bl	8105d64 <HAL_RCCEx_PeriphCLKConfig>
 8101f62:	4603      	mov	r3, r0
 8101f64:	2b00      	cmp	r3, #0
 8101f66:	d001      	beq.n	8101f6c <MX_USART6_UART_Init+0x54>
  {
    Error_Handler();
 8101f68:	f000 f95a 	bl	8102220 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART6);
 8101f6c:	2020      	movs	r0, #32
 8101f6e:	f7ff fd95 	bl	8101a9c <LL_APB2_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 8101f72:	2040      	movs	r0, #64	@ 0x40
 8101f74:	f7ff fd5a 	bl	8101a2c <LL_AHB4_GRP1_EnableClock>
  /**USART6 GPIO Configuration
  PG9   ------> USART6_RX
  PG14   ------> USART6_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_14;
 8101f78:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8101f7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8101f80:	2302      	movs	r3, #2
 8101f82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8101f86:	2300      	movs	r3, #0
 8101f88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8101f8c:	2300      	movs	r3, #0
 8101f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8101f92:	2300      	movs	r3, #0
 8101f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8101f98:	2307      	movs	r3, #7
 8101f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8101f9e:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8101fa2:	4619      	mov	r1, r3
 8101fa4:	4841      	ldr	r0, [pc, #260]	@ (81020ac <MX_USART6_UART_Init+0x194>)
 8101fa6:	f006 ff7d 	bl	8108ea4 <LL_GPIO_Init>

  /* USART6 DMA Init */

  /* USART6_RX Init */
  LL_DMA_SetPeriphRequest(DMA2, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_USART6_RX);
 8101faa:	2247      	movs	r2, #71	@ 0x47
 8101fac:	2100      	movs	r1, #0
 8101fae:	4840      	ldr	r0, [pc, #256]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8101fb0:	f7ff fe9a 	bl	8101ce8 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA2, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8101fb4:	2200      	movs	r2, #0
 8101fb6:	2100      	movs	r1, #0
 8101fb8:	483d      	ldr	r0, [pc, #244]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8101fba:	f7ff fd8b 	bl	8101ad4 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA2, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8101fbe:	2200      	movs	r2, #0
 8101fc0:	2100      	movs	r1, #0
 8101fc2:	483b      	ldr	r0, [pc, #236]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8101fc4:	f7ff fe6a 	bl	8101c9c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8101fc8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8101fcc:	2100      	movs	r1, #0
 8101fce:	4838      	ldr	r0, [pc, #224]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8101fd0:	f7ff fda6 	bl	8101b20 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8101fd4:	2200      	movs	r2, #0
 8101fd6:	2100      	movs	r1, #0
 8101fd8:	4835      	ldr	r0, [pc, #212]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8101fda:	f7ff fdc7 	bl	8101b6c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA2, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8101fde:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8101fe2:	2100      	movs	r1, #0
 8101fe4:	4832      	ldr	r0, [pc, #200]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8101fe6:	f7ff fde7 	bl	8101bb8 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA2, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_BYTE);
 8101fea:	2200      	movs	r2, #0
 8101fec:	2100      	movs	r1, #0
 8101fee:	4830      	ldr	r0, [pc, #192]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8101ff0:	f7ff fe08 	bl	8101c04 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA2, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_BYTE);
 8101ff4:	2200      	movs	r2, #0
 8101ff6:	2100      	movs	r1, #0
 8101ff8:	482d      	ldr	r0, [pc, #180]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8101ffa:	f7ff fe29 	bl	8101c50 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA2, LL_DMA_STREAM_0);
 8101ffe:	2100      	movs	r1, #0
 8102000:	482b      	ldr	r0, [pc, #172]	@ (81020b0 <MX_USART6_UART_Init+0x198>)
 8102002:	f7ff fea3 	bl	8101d4c <LL_DMA_DisableFifoMode>

  /* USART6 interrupt Init */
  NVIC_SetPriority(USART6_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8102006:	f7ff fb55 	bl	81016b4 <__NVIC_GetPriorityGrouping>
 810200a:	4603      	mov	r3, r0
 810200c:	2200      	movs	r2, #0
 810200e:	2100      	movs	r1, #0
 8102010:	4618      	mov	r0, r3
 8102012:	f7ff fba5 	bl	8101760 <NVIC_EncodePriority>
 8102016:	4603      	mov	r3, r0
 8102018:	4619      	mov	r1, r3
 810201a:	2047      	movs	r0, #71	@ 0x47
 810201c:	f7ff fb76 	bl	810170c <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART6_IRQn);
 8102020:	2047      	movs	r0, #71	@ 0x47
 8102022:	f7ff fb55 	bl	81016d0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8102026:	2300      	movs	r3, #0
 8102028:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 810202c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8102030:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8102034:	2300      	movs	r3, #0
 8102036:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 810203a:	2300      	movs	r3, #0
 810203c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8102040:	2300      	movs	r3, #0
 8102042:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8102046:	230c      	movs	r3, #12
 8102048:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 810204c:	2300      	movs	r3, #0
 810204e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8102052:	2300      	movs	r3, #0
 8102054:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART6, &USART_InitStruct);
 8102058:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 810205c:	4619      	mov	r1, r3
 810205e:	4815      	ldr	r0, [pc, #84]	@ (81020b4 <MX_USART6_UART_Init+0x19c>)
 8102060:	f008 fbb2 	bl	810a7c8 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 8102064:	2100      	movs	r1, #0
 8102066:	4813      	ldr	r0, [pc, #76]	@ (81020b4 <MX_USART6_UART_Init+0x19c>)
 8102068:	f7ff fc45 	bl	81018f6 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART6, LL_USART_FIFOTHRESHOLD_1_8);
 810206c:	2100      	movs	r1, #0
 810206e:	4811      	ldr	r0, [pc, #68]	@ (81020b4 <MX_USART6_UART_Init+0x19c>)
 8102070:	f7ff fc68 	bl	8101944 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART6);
 8102074:	480f      	ldr	r0, [pc, #60]	@ (81020b4 <MX_USART6_UART_Init+0x19c>)
 8102076:	f7ff fc2e 	bl	81018d6 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART6);
 810207a:	480e      	ldr	r0, [pc, #56]	@ (81020b4 <MX_USART6_UART_Init+0x19c>)
 810207c:	f7ff fc89 	bl	8101992 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType USART6 */

  /* USER CODE END WKUPType USART6 */

  LL_USART_Enable(USART6);
 8102080:	480c      	ldr	r0, [pc, #48]	@ (81020b4 <MX_USART6_UART_Init+0x19c>)
 8102082:	f7ff fc18 	bl	81018b6 <LL_USART_Enable>

  /* Polling USART6 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(USART6))) || (!(LL_USART_IsActiveFlag_REACK(USART6))))
 8102086:	bf00      	nop
 8102088:	480a      	ldr	r0, [pc, #40]	@ (81020b4 <MX_USART6_UART_Init+0x19c>)
 810208a:	f7ff fc98 	bl	81019be <LL_USART_IsActiveFlag_TEACK>
 810208e:	4603      	mov	r3, r0
 8102090:	2b00      	cmp	r3, #0
 8102092:	d0f9      	beq.n	8102088 <MX_USART6_UART_Init+0x170>
 8102094:	4807      	ldr	r0, [pc, #28]	@ (81020b4 <MX_USART6_UART_Init+0x19c>)
 8102096:	f7ff fca6 	bl	81019e6 <LL_USART_IsActiveFlag_REACK>
 810209a:	4603      	mov	r3, r0
 810209c:	2b00      	cmp	r3, #0
 810209e:	d0f3      	beq.n	8102088 <MX_USART6_UART_Init+0x170>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 81020a0:	bf00      	nop
 81020a2:	bf00      	nop
 81020a4:	37f8      	adds	r7, #248	@ 0xf8
 81020a6:	46bd      	mov	sp, r7
 81020a8:	bd80      	pop	{r7, pc}
 81020aa:	bf00      	nop
 81020ac:	58021800 	.word	0x58021800
 81020b0:	40020400 	.word	0x40020400
 81020b4:	40011400 	.word	0x40011400

081020b8 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 81020b8:	b480      	push	{r7}
 81020ba:	b083      	sub	sp, #12
 81020bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 81020be:	4b0a      	ldr	r3, [pc, #40]	@ (81020e8 <MX_BDMA_Init+0x30>)
 81020c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020c4:	4a08      	ldr	r2, [pc, #32]	@ (81020e8 <MX_BDMA_Init+0x30>)
 81020c6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81020ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81020ce:	4b06      	ldr	r3, [pc, #24]	@ (81020e8 <MX_BDMA_Init+0x30>)
 81020d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81020d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 81020d8:	607b      	str	r3, [r7, #4]
 81020da:	687b      	ldr	r3, [r7, #4]

}
 81020dc:	bf00      	nop
 81020de:	370c      	adds	r7, #12
 81020e0:	46bd      	mov	sp, r7
 81020e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020e6:	4770      	bx	lr
 81020e8:	58024400 	.word	0x58024400

081020ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 81020ec:	b580      	push	{r7, lr}
 81020ee:	b082      	sub	sp, #8
 81020f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 81020f2:	4b19      	ldr	r3, [pc, #100]	@ (8102158 <MX_DMA_Init+0x6c>)
 81020f4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81020f8:	4a17      	ldr	r2, [pc, #92]	@ (8102158 <MX_DMA_Init+0x6c>)
 81020fa:	f043 0302 	orr.w	r3, r3, #2
 81020fe:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102102:	4b15      	ldr	r3, [pc, #84]	@ (8102158 <MX_DMA_Init+0x6c>)
 8102104:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102108:	f003 0302 	and.w	r3, r3, #2
 810210c:	607b      	str	r3, [r7, #4]
 810210e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8102110:	4b11      	ldr	r3, [pc, #68]	@ (8102158 <MX_DMA_Init+0x6c>)
 8102112:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102116:	4a10      	ldr	r2, [pc, #64]	@ (8102158 <MX_DMA_Init+0x6c>)
 8102118:	f043 0301 	orr.w	r3, r3, #1
 810211c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8102120:	4b0d      	ldr	r3, [pc, #52]	@ (8102158 <MX_DMA_Init+0x6c>)
 8102122:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8102126:	f003 0301 	and.w	r3, r3, #1
 810212a:	603b      	str	r3, [r7, #0]
 810212c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA2_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 810212e:	f7ff fac1 	bl	81016b4 <__NVIC_GetPriorityGrouping>
 8102132:	4603      	mov	r3, r0
 8102134:	2200      	movs	r2, #0
 8102136:	2100      	movs	r1, #0
 8102138:	4618      	mov	r0, r3
 810213a:	f7ff fb11 	bl	8101760 <NVIC_EncodePriority>
 810213e:	4603      	mov	r3, r0
 8102140:	4619      	mov	r1, r3
 8102142:	2038      	movs	r0, #56	@ 0x38
 8102144:	f7ff fae2 	bl	810170c <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8102148:	2038      	movs	r0, #56	@ 0x38
 810214a:	f7ff fac1 	bl	81016d0 <__NVIC_EnableIRQ>

}
 810214e:	bf00      	nop
 8102150:	3708      	adds	r7, #8
 8102152:	46bd      	mov	sp, r7
 8102154:	bd80      	pop	{r7, pc}
 8102156:	bf00      	nop
 8102158:	58024400 	.word	0x58024400

0810215c <MX_MDMA_Init>:

/**
  * Enable MDMA controller clock
  */
static void MX_MDMA_Init(void)
{
 810215c:	b480      	push	{r7}
 810215e:	b083      	sub	sp, #12
 8102160:	af00      	add	r7, sp, #0

  /* MDMA controller clock enable */
  __HAL_RCC_MDMA_CLK_ENABLE();
 8102162:	4b0a      	ldr	r3, [pc, #40]	@ (810218c <MX_MDMA_Init+0x30>)
 8102164:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102168:	4a08      	ldr	r2, [pc, #32]	@ (810218c <MX_MDMA_Init+0x30>)
 810216a:	f043 0301 	orr.w	r3, r3, #1
 810216e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8102172:	4b06      	ldr	r3, [pc, #24]	@ (810218c <MX_MDMA_Init+0x30>)
 8102174:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8102178:	f003 0301 	and.w	r3, r3, #1
 810217c:	607b      	str	r3, [r7, #4]
 810217e:	687b      	ldr	r3, [r7, #4]
  /* Local variables */

}
 8102180:	bf00      	nop
 8102182:	370c      	adds	r7, #12
 8102184:	46bd      	mov	sp, r7
 8102186:	f85d 7b04 	ldr.w	r7, [sp], #4
 810218a:	4770      	bx	lr
 810218c:	58024400 	.word	0x58024400

08102190 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8102190:	b580      	push	{r7, lr}
 8102192:	b086      	sub	sp, #24
 8102194:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102196:	463b      	mov	r3, r7
 8102198:	2200      	movs	r2, #0
 810219a:	601a      	str	r2, [r3, #0]
 810219c:	605a      	str	r2, [r3, #4]
 810219e:	609a      	str	r2, [r3, #8]
 81021a0:	60da      	str	r2, [r3, #12]
 81021a2:	611a      	str	r2, [r3, #16]
 81021a4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 81021a6:	2004      	movs	r0, #4
 81021a8:	f7ff fc40 	bl	8101a2c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 81021ac:	2001      	movs	r0, #1
 81021ae:	f7ff fc3d 	bl	8101a2c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 81021b2:	2002      	movs	r0, #2
 81021b4:	f7ff fc3a 	bl	8101a2c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 81021b8:	2008      	movs	r0, #8
 81021ba:	f7ff fc37 	bl	8101a2c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOG);
 81021be:	2040      	movs	r0, #64	@ 0x40
 81021c0:	f7ff fc34 	bl	8101a2c <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, MCU_IO_DEBUG_LED2_Pin|MCU_IO_DEBUG_LED3_Pin);
 81021c4:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 81021c8:	480b      	ldr	r0, [pc, #44]	@ (81021f8 <MX_GPIO_Init+0x68>)
 81021ca:	f7ff fc20 	bl	8101a0e <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = MCU_IO_DEBUG_LED2_Pin|MCU_IO_DEBUG_LED3_Pin;
 81021ce:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 81021d2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 81021d4:	2301      	movs	r3, #1
 81021d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 81021d8:	2300      	movs	r3, #0
 81021da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 81021dc:	2300      	movs	r3, #0
 81021de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 81021e0:	2300      	movs	r3, #0
 81021e2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 81021e4:	463b      	mov	r3, r7
 81021e6:	4619      	mov	r1, r3
 81021e8:	4803      	ldr	r0, [pc, #12]	@ (81021f8 <MX_GPIO_Init+0x68>)
 81021ea:	f006 fe5b 	bl	8108ea4 <LL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 81021ee:	bf00      	nop
 81021f0:	3718      	adds	r7, #24
 81021f2:	46bd      	mov	sp, r7
 81021f4:	bd80      	pop	{r7, pc}
 81021f6:	bf00      	nop
 81021f8:	58020c00 	.word	0x58020c00

081021fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 81021fc:	b580      	push	{r7, lr}
 81021fe:	b082      	sub	sp, #8
 8102200:	af00      	add	r7, sp, #0
 8102202:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8102204:	687b      	ldr	r3, [r7, #4]
 8102206:	681b      	ldr	r3, [r3, #0]
 8102208:	4a04      	ldr	r2, [pc, #16]	@ (810221c <HAL_TIM_PeriodElapsedCallback+0x20>)
 810220a:	4293      	cmp	r3, r2
 810220c:	d101      	bne.n	8102212 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 810220e:	f000 fbc5 	bl	810299c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8102212:	bf00      	nop
 8102214:	3708      	adds	r7, #8
 8102216:	46bd      	mov	sp, r7
 8102218:	bd80      	pop	{r7, pc}
 810221a:	bf00      	nop
 810221c:	40000800 	.word	0x40000800

08102220 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8102220:	b480      	push	{r7}
 8102222:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8102224:	b672      	cpsid	i
}
 8102226:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8102228:	bf00      	nop
 810222a:	e7fd      	b.n	8102228 <Error_Handler+0x8>

0810222c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 810222c:	b480      	push	{r7}
 810222e:	b083      	sub	sp, #12
 8102230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102232:	4b0a      	ldr	r3, [pc, #40]	@ (810225c <HAL_MspInit+0x30>)
 8102234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102238:	4a08      	ldr	r2, [pc, #32]	@ (810225c <HAL_MspInit+0x30>)
 810223a:	f043 0302 	orr.w	r3, r3, #2
 810223e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102242:	4b06      	ldr	r3, [pc, #24]	@ (810225c <HAL_MspInit+0x30>)
 8102244:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102248:	f003 0302 	and.w	r3, r3, #2
 810224c:	607b      	str	r3, [r7, #4]
 810224e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8102250:	bf00      	nop
 8102252:	370c      	adds	r7, #12
 8102254:	46bd      	mov	sp, r7
 8102256:	f85d 7b04 	ldr.w	r7, [sp], #4
 810225a:	4770      	bx	lr
 810225c:	58024400 	.word	0x58024400

08102260 <HAL_MMC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hmmc: MMC handle pointer
  * @retval None
  */
void HAL_MMC_MspInit(MMC_HandleTypeDef* hmmc)
{
 8102260:	b580      	push	{r7, lr}
 8102262:	b0be      	sub	sp, #248	@ 0xf8
 8102264:	af00      	add	r7, sp, #0
 8102266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8102268:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810226c:	2200      	movs	r2, #0
 810226e:	601a      	str	r2, [r3, #0]
 8102270:	605a      	str	r2, [r3, #4]
 8102272:	609a      	str	r2, [r3, #8]
 8102274:	60da      	str	r2, [r3, #12]
 8102276:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8102278:	f107 0320 	add.w	r3, r7, #32
 810227c:	22c0      	movs	r2, #192	@ 0xc0
 810227e:	2100      	movs	r1, #0
 8102280:	4618      	mov	r0, r3
 8102282:	f00c fc3d 	bl	810eb00 <memset>
  if(hmmc->Instance==SDMMC2)
 8102286:	687b      	ldr	r3, [r7, #4]
 8102288:	681b      	ldr	r3, [r3, #0]
 810228a:	4a61      	ldr	r2, [pc, #388]	@ (8102410 <HAL_MMC_MspInit+0x1b0>)
 810228c:	4293      	cmp	r3, r2
 810228e:	f040 80bb 	bne.w	8102408 <HAL_MMC_MspInit+0x1a8>

    /* USER CODE END SDMMC2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC;
 8102292:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8102296:	f04f 0300 	mov.w	r3, #0
 810229a:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 810229e:	2300      	movs	r3, #0
 81022a0:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81022a2:	f107 0320 	add.w	r3, r7, #32
 81022a6:	4618      	mov	r0, r3
 81022a8:	f003 fd5c 	bl	8105d64 <HAL_RCCEx_PeriphCLKConfig>
 81022ac:	4603      	mov	r3, r0
 81022ae:	2b00      	cmp	r3, #0
 81022b0:	d001      	beq.n	81022b6 <HAL_MMC_MspInit+0x56>
    {
      Error_Handler();
 81022b2:	f7ff ffb5 	bl	8102220 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 81022b6:	4b57      	ldr	r3, [pc, #348]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 81022b8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81022bc:	4a55      	ldr	r2, [pc, #340]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 81022be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 81022c2:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 81022c6:	4b53      	ldr	r3, [pc, #332]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 81022c8:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 81022cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 81022d0:	61fb      	str	r3, [r7, #28]
 81022d2:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 81022d4:	4b4f      	ldr	r3, [pc, #316]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 81022d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022da:	4a4e      	ldr	r2, [pc, #312]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 81022dc:	f043 0304 	orr.w	r3, r3, #4
 81022e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81022e4:	4b4b      	ldr	r3, [pc, #300]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 81022e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022ea:	f003 0304 	and.w	r3, r3, #4
 81022ee:	61bb      	str	r3, [r7, #24]
 81022f0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 81022f2:	4b48      	ldr	r3, [pc, #288]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 81022f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81022f8:	4a46      	ldr	r2, [pc, #280]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 81022fa:	f043 0301 	orr.w	r3, r3, #1
 81022fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102302:	4b44      	ldr	r3, [pc, #272]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 8102304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102308:	f003 0301 	and.w	r3, r3, #1
 810230c:	617b      	str	r3, [r7, #20]
 810230e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8102310:	4b40      	ldr	r3, [pc, #256]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 8102312:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102316:	4a3f      	ldr	r2, [pc, #252]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 8102318:	f043 0302 	orr.w	r3, r3, #2
 810231c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8102320:	4b3c      	ldr	r3, [pc, #240]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 8102322:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102326:	f003 0302 	and.w	r3, r3, #2
 810232a:	613b      	str	r3, [r7, #16]
 810232c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 810232e:	4b39      	ldr	r3, [pc, #228]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 8102330:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102334:	4a37      	ldr	r2, [pc, #220]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 8102336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810233a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810233e:	4b35      	ldr	r3, [pc, #212]	@ (8102414 <HAL_MMC_MspInit+0x1b4>)
 8102340:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8102344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8102348:	60fb      	str	r3, [r7, #12]
 810234a:	68fb      	ldr	r3, [r7, #12]
    PB14     ------> SDMMC2_D0
    PB15     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PB4 (NJTRST)     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 810234c:	2302      	movs	r3, #2
 810234e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8102352:	2302      	movs	r3, #2
 8102354:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102358:	2300      	movs	r3, #0
 810235a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810235e:	2303      	movs	r3, #3
 8102360:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 8102364:	2309      	movs	r3, #9
 8102366:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 810236a:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 810236e:	4619      	mov	r1, r3
 8102370:	4829      	ldr	r0, [pc, #164]	@ (8102418 <HAL_MMC_MspInit+0x1b8>)
 8102372:	f000 fc49 	bl	8102c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8102376:	2301      	movs	r3, #1
 8102378:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810237c:	2302      	movs	r3, #2
 810237e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8102382:	2300      	movs	r3, #0
 8102384:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8102388:	2303      	movs	r3, #3
 810238a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 810238e:	2309      	movs	r3, #9
 8102390:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8102394:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8102398:	4619      	mov	r1, r3
 810239a:	4820      	ldr	r0, [pc, #128]	@ (810241c <HAL_MMC_MspInit+0x1bc>)
 810239c:	f000 fc34 	bl	8102c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_4;
 81023a0:	f24c 0310 	movw	r3, #49168	@ 0xc010
 81023a4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023a8:	2302      	movs	r3, #2
 81023aa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023ae:	2300      	movs	r3, #0
 81023b0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023b4:	2303      	movs	r3, #3
 81023b6:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF9_SDIO2;
 81023ba:	2309      	movs	r3, #9
 81023bc:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81023c0:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81023c4:	4619      	mov	r1, r3
 81023c6:	4816      	ldr	r0, [pc, #88]	@ (8102420 <HAL_MMC_MspInit+0x1c0>)
 81023c8:	f000 fc1e 	bl	8102c08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 81023cc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81023d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81023d4:	2302      	movs	r3, #2
 81023d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81023da:	2300      	movs	r3, #0
 81023dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 81023e0:	2303      	movs	r3, #3
 81023e2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF10_SDIO2;
 81023e6:	230a      	movs	r3, #10
 81023e8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 81023ec:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 81023f0:	4619      	mov	r1, r3
 81023f2:	480c      	ldr	r0, [pc, #48]	@ (8102424 <HAL_MMC_MspInit+0x1c4>)
 81023f4:	f000 fc08 	bl	8102c08 <HAL_GPIO_Init>

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 81023f8:	2200      	movs	r2, #0
 81023fa:	2100      	movs	r1, #0
 81023fc:	207c      	movs	r0, #124	@ 0x7c
 81023fe:	f000 fbc9 	bl	8102b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8102402:	207c      	movs	r0, #124	@ 0x7c
 8102404:	f000 fbe0 	bl	8102bc8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SDMMC2_MspInit 1 */

  }

}
 8102408:	bf00      	nop
 810240a:	37f8      	adds	r7, #248	@ 0xf8
 810240c:	46bd      	mov	sp, r7
 810240e:	bd80      	pop	{r7, pc}
 8102410:	48022400 	.word	0x48022400
 8102414:	58024400 	.word	0x58024400
 8102418:	58020800 	.word	0x58020800
 810241c:	58020000 	.word	0x58020000
 8102420:	58020400 	.word	0x58020400
 8102424:	58021800 	.word	0x58021800

08102428 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8102428:	b580      	push	{r7, lr}
 810242a:	b090      	sub	sp, #64	@ 0x40
 810242c:	af00      	add	r7, sp, #0
 810242e:	6078      	str	r0, [r7, #4]
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM4 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8102430:	687b      	ldr	r3, [r7, #4]
 8102432:	2b0f      	cmp	r3, #15
 8102434:	d827      	bhi.n	8102486 <HAL_InitTick+0x5e>
   {
     HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0);
 8102436:	2200      	movs	r2, #0
 8102438:	6879      	ldr	r1, [r7, #4]
 810243a:	201e      	movs	r0, #30
 810243c:	f000 fbaa 	bl	8102b94 <HAL_NVIC_SetPriority>

     /* Enable the TIM4 global Interrupt */
     HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8102440:	201e      	movs	r0, #30
 8102442:	f000 fbc1 	bl	8102bc8 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8102446:	4a29      	ldr	r2, [pc, #164]	@ (81024ec <HAL_InitTick+0xc4>)
 8102448:	687b      	ldr	r3, [r7, #4]
 810244a:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 810244c:	4b28      	ldr	r3, [pc, #160]	@ (81024f0 <HAL_InitTick+0xc8>)
 810244e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102452:	4a27      	ldr	r2, [pc, #156]	@ (81024f0 <HAL_InitTick+0xc8>)
 8102454:	f043 0304 	orr.w	r3, r3, #4
 8102458:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810245c:	4b24      	ldr	r3, [pc, #144]	@ (81024f0 <HAL_InitTick+0xc8>)
 810245e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8102462:	f003 0304 	and.w	r3, r3, #4
 8102466:	60fb      	str	r3, [r7, #12]
 8102468:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 810246a:	f107 0210 	add.w	r2, r7, #16
 810246e:	f107 0314 	add.w	r3, r7, #20
 8102472:	4611      	mov	r1, r2
 8102474:	4618      	mov	r0, r3
 8102476:	f003 fc33 	bl	8105ce0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 810247a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810247c:	63bb      	str	r3, [r7, #56]	@ 0x38
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 810247e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8102480:	2b00      	cmp	r3, #0
 8102482:	d106      	bne.n	8102492 <HAL_InitTick+0x6a>
 8102484:	e001      	b.n	810248a <HAL_InitTick+0x62>
    return HAL_ERROR;
 8102486:	2301      	movs	r3, #1
 8102488:	e02b      	b.n	81024e2 <HAL_InitTick+0xba>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 810248a:	f003 fc13 	bl	8105cb4 <HAL_RCC_GetPCLK1Freq>
 810248e:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8102490:	e004      	b.n	810249c <HAL_InitTick+0x74>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8102492:	f003 fc0f 	bl	8105cb4 <HAL_RCC_GetPCLK1Freq>
 8102496:	4603      	mov	r3, r0
 8102498:	005b      	lsls	r3, r3, #1
 810249a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 810249c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810249e:	4a15      	ldr	r2, [pc, #84]	@ (81024f4 <HAL_InitTick+0xcc>)
 81024a0:	fba2 2303 	umull	r2, r3, r2, r3
 81024a4:	0c9b      	lsrs	r3, r3, #18
 81024a6:	3b01      	subs	r3, #1
 81024a8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 81024aa:	4b13      	ldr	r3, [pc, #76]	@ (81024f8 <HAL_InitTick+0xd0>)
 81024ac:	4a13      	ldr	r2, [pc, #76]	@ (81024fc <HAL_InitTick+0xd4>)
 81024ae:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 81024b0:	4b11      	ldr	r3, [pc, #68]	@ (81024f8 <HAL_InitTick+0xd0>)
 81024b2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 81024b6:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 81024b8:	4a0f      	ldr	r2, [pc, #60]	@ (81024f8 <HAL_InitTick+0xd0>)
 81024ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81024bc:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 81024be:	4b0e      	ldr	r3, [pc, #56]	@ (81024f8 <HAL_InitTick+0xd0>)
 81024c0:	2200      	movs	r2, #0
 81024c2:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 81024c4:	4b0c      	ldr	r3, [pc, #48]	@ (81024f8 <HAL_InitTick+0xd0>)
 81024c6:	2200      	movs	r2, #0
 81024c8:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 81024ca:	480b      	ldr	r0, [pc, #44]	@ (81024f8 <HAL_InitTick+0xd0>)
 81024cc:	f006 f948 	bl	8108760 <HAL_TIM_Base_Init>
 81024d0:	4603      	mov	r3, r0
 81024d2:	2b00      	cmp	r3, #0
 81024d4:	d104      	bne.n	81024e0 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 81024d6:	4808      	ldr	r0, [pc, #32]	@ (81024f8 <HAL_InitTick+0xd0>)
 81024d8:	f006 f9a4 	bl	8108824 <HAL_TIM_Base_Start_IT>
 81024dc:	4603      	mov	r3, r0
 81024de:	e000      	b.n	81024e2 <HAL_InitTick+0xba>
  }

  /* Return function status */
  return HAL_ERROR;
 81024e0:	2301      	movs	r3, #1
}
 81024e2:	4618      	mov	r0, r3
 81024e4:	3740      	adds	r7, #64	@ 0x40
 81024e6:	46bd      	mov	sp, r7
 81024e8:	bd80      	pop	{r7, pc}
 81024ea:	bf00      	nop
 81024ec:	100320f8 	.word	0x100320f8
 81024f0:	58024400 	.word	0x58024400
 81024f4:	431bde83 	.word	0x431bde83
 81024f8:	10034f44 	.word	0x10034f44
 81024fc:	40000800 	.word	0x40000800

08102500 <LL_USART_IsActiveFlag_IDLE>:
{
 8102500:	b480      	push	{r7}
 8102502:	b083      	sub	sp, #12
 8102504:	af00      	add	r7, sp, #0
 8102506:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8102508:	687b      	ldr	r3, [r7, #4]
 810250a:	69db      	ldr	r3, [r3, #28]
 810250c:	f003 0310 	and.w	r3, r3, #16
 8102510:	2b10      	cmp	r3, #16
 8102512:	d101      	bne.n	8102518 <LL_USART_IsActiveFlag_IDLE+0x18>
 8102514:	2301      	movs	r3, #1
 8102516:	e000      	b.n	810251a <LL_USART_IsActiveFlag_IDLE+0x1a>
 8102518:	2300      	movs	r3, #0
}
 810251a:	4618      	mov	r0, r3
 810251c:	370c      	adds	r7, #12
 810251e:	46bd      	mov	sp, r7
 8102520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102524:	4770      	bx	lr

08102526 <LL_USART_ClearFlag_IDLE>:
{
 8102526:	b480      	push	{r7}
 8102528:	b083      	sub	sp, #12
 810252a:	af00      	add	r7, sp, #0
 810252c:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 810252e:	687b      	ldr	r3, [r7, #4]
 8102530:	2210      	movs	r2, #16
 8102532:	621a      	str	r2, [r3, #32]
}
 8102534:	bf00      	nop
 8102536:	370c      	adds	r7, #12
 8102538:	46bd      	mov	sp, r7
 810253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810253e:	4770      	bx	lr

08102540 <LL_USART_IsEnabledIT_IDLE>:
{
 8102540:	b480      	push	{r7}
 8102542:	b083      	sub	sp, #12
 8102544:	af00      	add	r7, sp, #0
 8102546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE)) ? 1UL : 0UL);
 8102548:	687b      	ldr	r3, [r7, #4]
 810254a:	681b      	ldr	r3, [r3, #0]
 810254c:	f003 0310 	and.w	r3, r3, #16
 8102550:	2b10      	cmp	r3, #16
 8102552:	d101      	bne.n	8102558 <LL_USART_IsEnabledIT_IDLE+0x18>
 8102554:	2301      	movs	r3, #1
 8102556:	e000      	b.n	810255a <LL_USART_IsEnabledIT_IDLE+0x1a>
 8102558:	2300      	movs	r3, #0
}
 810255a:	4618      	mov	r0, r3
 810255c:	370c      	adds	r7, #12
 810255e:	46bd      	mov	sp, r7
 8102560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102564:	4770      	bx	lr
	...

08102568 <LL_DMA_EnableStream>:
{
 8102568:	b480      	push	{r7}
 810256a:	b085      	sub	sp, #20
 810256c:	af00      	add	r7, sp, #0
 810256e:	6078      	str	r0, [r7, #4]
 8102570:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8102572:	687b      	ldr	r3, [r7, #4]
 8102574:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8102576:	4a0c      	ldr	r2, [pc, #48]	@ (81025a8 <LL_DMA_EnableStream+0x40>)
 8102578:	683b      	ldr	r3, [r7, #0]
 810257a:	4413      	add	r3, r2
 810257c:	781b      	ldrb	r3, [r3, #0]
 810257e:	461a      	mov	r2, r3
 8102580:	68fb      	ldr	r3, [r7, #12]
 8102582:	4413      	add	r3, r2
 8102584:	681b      	ldr	r3, [r3, #0]
 8102586:	4908      	ldr	r1, [pc, #32]	@ (81025a8 <LL_DMA_EnableStream+0x40>)
 8102588:	683a      	ldr	r2, [r7, #0]
 810258a:	440a      	add	r2, r1
 810258c:	7812      	ldrb	r2, [r2, #0]
 810258e:	4611      	mov	r1, r2
 8102590:	68fa      	ldr	r2, [r7, #12]
 8102592:	440a      	add	r2, r1
 8102594:	f043 0301 	orr.w	r3, r3, #1
 8102598:	6013      	str	r3, [r2, #0]
}
 810259a:	bf00      	nop
 810259c:	3714      	adds	r7, #20
 810259e:	46bd      	mov	sp, r7
 81025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025a4:	4770      	bx	lr
 81025a6:	bf00      	nop
 81025a8:	0810ec58 	.word	0x0810ec58

081025ac <LL_DMA_IsActiveFlag_HT0>:
{
 81025ac:	b480      	push	{r7}
 81025ae:	b083      	sub	sp, #12
 81025b0:	af00      	add	r7, sp, #0
 81025b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_HTIF0) == (DMA_LISR_HTIF0)) ? 1UL : 0UL);
 81025b4:	687b      	ldr	r3, [r7, #4]
 81025b6:	681b      	ldr	r3, [r3, #0]
 81025b8:	f003 0310 	and.w	r3, r3, #16
 81025bc:	2b10      	cmp	r3, #16
 81025be:	d101      	bne.n	81025c4 <LL_DMA_IsActiveFlag_HT0+0x18>
 81025c0:	2301      	movs	r3, #1
 81025c2:	e000      	b.n	81025c6 <LL_DMA_IsActiveFlag_HT0+0x1a>
 81025c4:	2300      	movs	r3, #0
}
 81025c6:	4618      	mov	r0, r3
 81025c8:	370c      	adds	r7, #12
 81025ca:	46bd      	mov	sp, r7
 81025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025d0:	4770      	bx	lr

081025d2 <LL_DMA_IsActiveFlag_TC0>:
{
 81025d2:	b480      	push	{r7}
 81025d4:	b083      	sub	sp, #12
 81025d6:	af00      	add	r7, sp, #0
 81025d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TCIF0) == (DMA_LISR_TCIF0)) ? 1UL : 0UL);
 81025da:	687b      	ldr	r3, [r7, #4]
 81025dc:	681b      	ldr	r3, [r3, #0]
 81025de:	f003 0320 	and.w	r3, r3, #32
 81025e2:	2b20      	cmp	r3, #32
 81025e4:	d101      	bne.n	81025ea <LL_DMA_IsActiveFlag_TC0+0x18>
 81025e6:	2301      	movs	r3, #1
 81025e8:	e000      	b.n	81025ec <LL_DMA_IsActiveFlag_TC0+0x1a>
 81025ea:	2300      	movs	r3, #0
}
 81025ec:	4618      	mov	r0, r3
 81025ee:	370c      	adds	r7, #12
 81025f0:	46bd      	mov	sp, r7
 81025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81025f6:	4770      	bx	lr

081025f8 <LL_DMA_IsActiveFlag_TE0>:
{
 81025f8:	b480      	push	{r7}
 81025fa:	b083      	sub	sp, #12
 81025fc:	af00      	add	r7, sp, #0
 81025fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->LISR, DMA_LISR_TEIF0) == (DMA_LISR_TEIF0)) ? 1UL : 0UL);
 8102600:	687b      	ldr	r3, [r7, #4]
 8102602:	681b      	ldr	r3, [r3, #0]
 8102604:	f003 0308 	and.w	r3, r3, #8
 8102608:	2b08      	cmp	r3, #8
 810260a:	d101      	bne.n	8102610 <LL_DMA_IsActiveFlag_TE0+0x18>
 810260c:	2301      	movs	r3, #1
 810260e:	e000      	b.n	8102612 <LL_DMA_IsActiveFlag_TE0+0x1a>
 8102610:	2300      	movs	r3, #0
}
 8102612:	4618      	mov	r0, r3
 8102614:	370c      	adds	r7, #12
 8102616:	46bd      	mov	sp, r7
 8102618:	f85d 7b04 	ldr.w	r7, [sp], #4
 810261c:	4770      	bx	lr

0810261e <LL_DMA_ClearFlag_HT0>:
{
 810261e:	b480      	push	{r7}
 8102620:	b083      	sub	sp, #12
 8102622:	af00      	add	r7, sp, #0
 8102624:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CHTIF0);
 8102626:	687b      	ldr	r3, [r7, #4]
 8102628:	2210      	movs	r2, #16
 810262a:	609a      	str	r2, [r3, #8]
}
 810262c:	bf00      	nop
 810262e:	370c      	adds	r7, #12
 8102630:	46bd      	mov	sp, r7
 8102632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102636:	4770      	bx	lr

08102638 <LL_DMA_ClearFlag_TC0>:
{
 8102638:	b480      	push	{r7}
 810263a:	b083      	sub	sp, #12
 810263c:	af00      	add	r7, sp, #0
 810263e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTCIF0);
 8102640:	687b      	ldr	r3, [r7, #4]
 8102642:	2220      	movs	r2, #32
 8102644:	609a      	str	r2, [r3, #8]
}
 8102646:	bf00      	nop
 8102648:	370c      	adds	r7, #12
 810264a:	46bd      	mov	sp, r7
 810264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102650:	4770      	bx	lr

08102652 <LL_DMA_ClearFlag_TE0>:
{
 8102652:	b480      	push	{r7}
 8102654:	b083      	sub	sp, #12
 8102656:	af00      	add	r7, sp, #0
 8102658:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->LIFCR, DMA_LIFCR_CTEIF0);
 810265a:	687b      	ldr	r3, [r7, #4]
 810265c:	2208      	movs	r2, #8
 810265e:	609a      	str	r2, [r3, #8]
}
 8102660:	bf00      	nop
 8102662:	370c      	adds	r7, #12
 8102664:	46bd      	mov	sp, r7
 8102666:	f85d 7b04 	ldr.w	r7, [sp], #4
 810266a:	4770      	bx	lr

0810266c <LL_DMA_IsEnabledIT_HT>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_HT(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 810266c:	b480      	push	{r7}
 810266e:	b085      	sub	sp, #20
 8102670:	af00      	add	r7, sp, #0
 8102672:	6078      	str	r0, [r7, #4]
 8102674:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8102676:	687b      	ldr	r3, [r7, #4]
 8102678:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_HTIE) == DMA_SxCR_HTIE) ? 1UL : 0UL);
 810267a:	4a0a      	ldr	r2, [pc, #40]	@ (81026a4 <LL_DMA_IsEnabledIT_HT+0x38>)
 810267c:	683b      	ldr	r3, [r7, #0]
 810267e:	4413      	add	r3, r2
 8102680:	781b      	ldrb	r3, [r3, #0]
 8102682:	461a      	mov	r2, r3
 8102684:	68fb      	ldr	r3, [r7, #12]
 8102686:	4413      	add	r3, r2
 8102688:	681b      	ldr	r3, [r3, #0]
 810268a:	f003 0308 	and.w	r3, r3, #8
 810268e:	2b08      	cmp	r3, #8
 8102690:	d101      	bne.n	8102696 <LL_DMA_IsEnabledIT_HT+0x2a>
 8102692:	2301      	movs	r3, #1
 8102694:	e000      	b.n	8102698 <LL_DMA_IsEnabledIT_HT+0x2c>
 8102696:	2300      	movs	r3, #0
}
 8102698:	4618      	mov	r0, r3
 810269a:	3714      	adds	r7, #20
 810269c:	46bd      	mov	sp, r7
 810269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026a2:	4770      	bx	lr
 81026a4:	0810ec58 	.word	0x0810ec58

081026a8 <LL_DMA_IsEnabledIT_TE>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TE(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 81026a8:	b480      	push	{r7}
 81026aa:	b085      	sub	sp, #20
 81026ac:	af00      	add	r7, sp, #0
 81026ae:	6078      	str	r0, [r7, #4]
 81026b0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 81026b2:	687b      	ldr	r3, [r7, #4]
 81026b4:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TEIE) == DMA_SxCR_TEIE) ? 1UL : 0UL);
 81026b6:	4a0a      	ldr	r2, [pc, #40]	@ (81026e0 <LL_DMA_IsEnabledIT_TE+0x38>)
 81026b8:	683b      	ldr	r3, [r7, #0]
 81026ba:	4413      	add	r3, r2
 81026bc:	781b      	ldrb	r3, [r3, #0]
 81026be:	461a      	mov	r2, r3
 81026c0:	68fb      	ldr	r3, [r7, #12]
 81026c2:	4413      	add	r3, r2
 81026c4:	681b      	ldr	r3, [r3, #0]
 81026c6:	f003 0304 	and.w	r3, r3, #4
 81026ca:	2b04      	cmp	r3, #4
 81026cc:	d101      	bne.n	81026d2 <LL_DMA_IsEnabledIT_TE+0x2a>
 81026ce:	2301      	movs	r3, #1
 81026d0:	e000      	b.n	81026d4 <LL_DMA_IsEnabledIT_TE+0x2c>
 81026d2:	2300      	movs	r3, #0
}
 81026d4:	4618      	mov	r0, r3
 81026d6:	3714      	adds	r7, #20
 81026d8:	46bd      	mov	sp, r7
 81026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81026de:	4770      	bx	lr
 81026e0:	0810ec58 	.word	0x0810ec58

081026e4 <LL_DMA_IsEnabledIT_TC>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsEnabledIT_TC(const DMA_TypeDef *DMAx, uint32_t Stream)
{
 81026e4:	b480      	push	{r7}
 81026e6:	b085      	sub	sp, #20
 81026e8:	af00      	add	r7, sp, #0
 81026ea:	6078      	str	r0, [r7, #4]
 81026ec:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 81026ee:	687b      	ldr	r3, [r7, #4]
 81026f0:	60fb      	str	r3, [r7, #12]

  return ((READ_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_TCIE) == DMA_SxCR_TCIE) ? 1UL : 0UL);
 81026f2:	4a0a      	ldr	r2, [pc, #40]	@ (810271c <LL_DMA_IsEnabledIT_TC+0x38>)
 81026f4:	683b      	ldr	r3, [r7, #0]
 81026f6:	4413      	add	r3, r2
 81026f8:	781b      	ldrb	r3, [r3, #0]
 81026fa:	461a      	mov	r2, r3
 81026fc:	68fb      	ldr	r3, [r7, #12]
 81026fe:	4413      	add	r3, r2
 8102700:	681b      	ldr	r3, [r3, #0]
 8102702:	f003 0310 	and.w	r3, r3, #16
 8102706:	2b10      	cmp	r3, #16
 8102708:	d101      	bne.n	810270e <LL_DMA_IsEnabledIT_TC+0x2a>
 810270a:	2301      	movs	r3, #1
 810270c:	e000      	b.n	8102710 <LL_DMA_IsEnabledIT_TC+0x2c>
 810270e:	2300      	movs	r3, #0
}
 8102710:	4618      	mov	r0, r3
 8102712:	3714      	adds	r7, #20
 8102714:	46bd      	mov	sp, r7
 8102716:	f85d 7b04 	ldr.w	r7, [sp], #4
 810271a:	4770      	bx	lr
 810271c:	0810ec58 	.word	0x0810ec58

08102720 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8102720:	b480      	push	{r7}
 8102722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8102724:	bf00      	nop
 8102726:	e7fd      	b.n	8102724 <NMI_Handler+0x4>

08102728 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8102728:	b480      	push	{r7}
 810272a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810272c:	bf00      	nop
 810272e:	e7fd      	b.n	810272c <HardFault_Handler+0x4>

08102730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8102730:	b480      	push	{r7}
 8102732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8102734:	bf00      	nop
 8102736:	e7fd      	b.n	8102734 <MemManage_Handler+0x4>

08102738 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8102738:	b480      	push	{r7}
 810273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810273c:	bf00      	nop
 810273e:	e7fd      	b.n	810273c <BusFault_Handler+0x4>

08102740 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8102740:	b480      	push	{r7}
 8102742:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8102744:	bf00      	nop
 8102746:	e7fd      	b.n	8102744 <UsageFault_Handler+0x4>

08102748 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8102748:	b480      	push	{r7}
 810274a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810274c:	bf00      	nop
 810274e:	46bd      	mov	sp, r7
 8102750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102754:	4770      	bx	lr

08102756 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8102756:	b480      	push	{r7}
 8102758:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810275a:	bf00      	nop
 810275c:	46bd      	mov	sp, r7
 810275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102762:	4770      	bx	lr

08102764 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8102764:	b480      	push	{r7}
 8102766:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8102768:	bf00      	nop
 810276a:	46bd      	mov	sp, r7
 810276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102770:	4770      	bx	lr

08102772 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8102772:	b480      	push	{r7}
 8102774:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8102776:	bf00      	nop
 8102778:	46bd      	mov	sp, r7
 810277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810277e:	4770      	bx	lr

08102780 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8102780:	b580      	push	{r7, lr}
 8102782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
  TickTimer_IRQHandler();
 8102784:	f7fe ff4e 	bl	8101624 <TickTimer_IRQHandler>
  SCH_RunSystemTickTimer();
 8102788:	f7fd fe46 	bl	8100418 <SCH_RunSystemTickTimer>
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810278c:	bf00      	nop
 810278e:	bd80      	pop	{r7, pc}

08102790 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8102790:	b580      	push	{r7, lr}
 8102792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8102794:	4802      	ldr	r0, [pc, #8]	@ (81027a0 <TIM4_IRQHandler+0x10>)
 8102796:	f006 f8bd 	bl	8108914 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 810279a:	bf00      	nop
 810279c:	bd80      	pop	{r7, pc}
 810279e:	bf00      	nop
 81027a0:	10034f44 	.word	0x10034f44

081027a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 81027a4:	b580      	push	{r7, lr}
 81027a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */
  if (LL_DMA_IsEnabledIT_HT(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_HT0(DMA2))
 81027a8:	2100      	movs	r1, #0
 81027aa:	481d      	ldr	r0, [pc, #116]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 81027ac:	f7ff ff5e 	bl	810266c <LL_DMA_IsEnabledIT_HT>
 81027b0:	4603      	mov	r3, r0
 81027b2:	2b00      	cmp	r3, #0
 81027b4:	d00b      	beq.n	81027ce <DMA2_Stream0_IRQHandler+0x2a>
 81027b6:	481a      	ldr	r0, [pc, #104]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 81027b8:	f7ff fef8 	bl	81025ac <LL_DMA_IsActiveFlag_HT0>
 81027bc:	4603      	mov	r3, r0
 81027be:	2b00      	cmp	r3, #0
 81027c0:	d005      	beq.n	81027ce <DMA2_Stream0_IRQHandler+0x2a>
  {
	  LL_DMA_ClearFlag_HT0(DMA2);
 81027c2:	4817      	ldr	r0, [pc, #92]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 81027c4:	f7ff ff2b 	bl	810261e <LL_DMA_ClearFlag_HT0>
	  UART_DMA_Rx_Check(USART6);
 81027c8:	4816      	ldr	r0, [pc, #88]	@ (8102824 <DMA2_Stream0_IRQHandler+0x80>)
 81027ca:	f7fe fc4f 	bl	810106c <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TC(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TC0(DMA2))
 81027ce:	2100      	movs	r1, #0
 81027d0:	4813      	ldr	r0, [pc, #76]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 81027d2:	f7ff ff87 	bl	81026e4 <LL_DMA_IsEnabledIT_TC>
 81027d6:	4603      	mov	r3, r0
 81027d8:	2b00      	cmp	r3, #0
 81027da:	d00b      	beq.n	81027f4 <DMA2_Stream0_IRQHandler+0x50>
 81027dc:	4810      	ldr	r0, [pc, #64]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 81027de:	f7ff fef8 	bl	81025d2 <LL_DMA_IsActiveFlag_TC0>
 81027e2:	4603      	mov	r3, r0
 81027e4:	2b00      	cmp	r3, #0
 81027e6:	d005      	beq.n	81027f4 <DMA2_Stream0_IRQHandler+0x50>
  {
	  LL_DMA_ClearFlag_TC0(DMA2);
 81027e8:	480d      	ldr	r0, [pc, #52]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 81027ea:	f7ff ff25 	bl	8102638 <LL_DMA_ClearFlag_TC0>
	  UART_DMA_Rx_Check(USART6);
 81027ee:	480d      	ldr	r0, [pc, #52]	@ (8102824 <DMA2_Stream0_IRQHandler+0x80>)
 81027f0:	f7fe fc3c 	bl	810106c <UART_DMA_Rx_Check>
  }

  if (LL_DMA_IsEnabledIT_TE(DMA2, LL_DMA_STREAM_0) && LL_DMA_IsActiveFlag_TE0(DMA2))
 81027f4:	2100      	movs	r1, #0
 81027f6:	480a      	ldr	r0, [pc, #40]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 81027f8:	f7ff ff56 	bl	81026a8 <LL_DMA_IsEnabledIT_TE>
 81027fc:	4603      	mov	r3, r0
 81027fe:	2b00      	cmp	r3, #0
 8102800:	d00c      	beq.n	810281c <DMA2_Stream0_IRQHandler+0x78>
 8102802:	4807      	ldr	r0, [pc, #28]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 8102804:	f7ff fef8 	bl	81025f8 <LL_DMA_IsActiveFlag_TE0>
 8102808:	4603      	mov	r3, r0
 810280a:	2b00      	cmp	r3, #0
 810280c:	d006      	beq.n	810281c <DMA2_Stream0_IRQHandler+0x78>
  {
	  LL_DMA_ClearFlag_TE0(DMA2);
 810280e:	4804      	ldr	r0, [pc, #16]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 8102810:	f7ff ff1f 	bl	8102652 <LL_DMA_ClearFlag_TE0>
	  LL_DMA_EnableStream(DMA2, LL_DMA_STREAM_0);
 8102814:	2100      	movs	r1, #0
 8102816:	4802      	ldr	r0, [pc, #8]	@ (8102820 <DMA2_Stream0_IRQHandler+0x7c>)
 8102818:	f7ff fea6 	bl	8102568 <LL_DMA_EnableStream>

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 810281c:	bf00      	nop
 810281e:	bd80      	pop	{r7, pc}
 8102820:	40020400 	.word	0x40020400
 8102824:	40011400 	.word	0x40011400

08102828 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8102828:	b580      	push	{r7, lr}
 810282a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  if (LL_USART_IsEnabledIT_IDLE(USART6) && LL_USART_IsActiveFlag_IDLE(USART6))
 810282c:	480b      	ldr	r0, [pc, #44]	@ (810285c <USART6_IRQHandler+0x34>)
 810282e:	f7ff fe87 	bl	8102540 <LL_USART_IsEnabledIT_IDLE>
 8102832:	4603      	mov	r3, r0
 8102834:	2b00      	cmp	r3, #0
 8102836:	d00b      	beq.n	8102850 <USART6_IRQHandler+0x28>
 8102838:	4808      	ldr	r0, [pc, #32]	@ (810285c <USART6_IRQHandler+0x34>)
 810283a:	f7ff fe61 	bl	8102500 <LL_USART_IsActiveFlag_IDLE>
 810283e:	4603      	mov	r3, r0
 8102840:	2b00      	cmp	r3, #0
 8102842:	d005      	beq.n	8102850 <USART6_IRQHandler+0x28>
  {
	  LL_USART_ClearFlag_IDLE(USART6);
 8102844:	4805      	ldr	r0, [pc, #20]	@ (810285c <USART6_IRQHandler+0x34>)
 8102846:	f7ff fe6e 	bl	8102526 <LL_USART_ClearFlag_IDLE>
	  UART_DMA_Rx_Check(USART6);
 810284a:	4804      	ldr	r0, [pc, #16]	@ (810285c <USART6_IRQHandler+0x34>)
 810284c:	f7fe fc0e 	bl	810106c <UART_DMA_Rx_Check>
  }
  /* USER CODE END USART6_IRQn 0 */
  /* USER CODE BEGIN USART6_IRQn 1 */
  UART_Driver_TX_ISR(USART6);
 8102850:	4802      	ldr	r0, [pc, #8]	@ (810285c <USART6_IRQHandler+0x34>)
 8102852:	f7fe fbdb 	bl	810100c <UART_Driver_TX_ISR>
  /* USER CODE END USART6_IRQn 1 */
}
 8102856:	bf00      	nop
 8102858:	bd80      	pop	{r7, pc}
 810285a:	bf00      	nop
 810285c:	40011400 	.word	0x40011400

08102860 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8102860:	b580      	push	{r7, lr}
 8102862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8102864:	4802      	ldr	r0, [pc, #8]	@ (8102870 <OTG_FS_IRQHandler+0x10>)
 8102866:	f001 fe82 	bl	810456e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 810286a:	bf00      	nop
 810286c:	bd80      	pop	{r7, pc}
 810286e:	bf00      	nop
 8102870:	10036478 	.word	0x10036478

08102874 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8102874:	b580      	push	{r7, lr}
 8102876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_MMC_IRQHandler(&hmmc2);
 8102878:	4802      	ldr	r0, [pc, #8]	@ (8102884 <SDMMC2_IRQHandler+0x10>)
 810287a:	f000 fc63 	bl	8103144 <HAL_MMC_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 810287e:	bf00      	nop
 8102880:	bd80      	pop	{r7, pc}
 8102882:	bf00      	nop
 8102884:	10034ccc 	.word	0x10034ccc

08102888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8102888:	f8df d038 	ldr.w	sp, [pc, #56]	@ 81028c4 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 810288c:	f7fe fef8 	bl	8101680 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8102890:	f7fe fede 	bl	8101650 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8102894:	480c      	ldr	r0, [pc, #48]	@ (81028c8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8102896:	490d      	ldr	r1, [pc, #52]	@ (81028cc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8102898:	4a0d      	ldr	r2, [pc, #52]	@ (81028d0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810289a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810289c:	e002      	b.n	81028a4 <LoopCopyDataInit>

0810289e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810289e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81028a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81028a2:	3304      	adds	r3, #4

081028a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 81028a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 81028a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 81028a8:	d3f9      	bcc.n	810289e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 81028aa:	4a0a      	ldr	r2, [pc, #40]	@ (81028d4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 81028ac:	4c0a      	ldr	r4, [pc, #40]	@ (81028d8 <LoopFillZerobss+0x22>)
  movs r3, #0
 81028ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 81028b0:	e001      	b.n	81028b6 <LoopFillZerobss>

081028b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 81028b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 81028b4:	3204      	adds	r2, #4

081028b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 81028b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 81028b8:	d3fb      	bcc.n	81028b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 81028ba:	f00c f93d 	bl	810eb38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 81028be:	f7ff fa67 	bl	8101d90 <main>
  bx  lr
 81028c2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 81028c4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 81028c8:	10032000 	.word	0x10032000
  ldr r1, =_edata
 81028cc:	100321fc 	.word	0x100321fc
  ldr r2, =_sidata
 81028d0:	0810eca8 	.word	0x0810eca8
  ldr r2, =_sbss
 81028d4:	100321fc 	.word	0x100321fc
  ldr r4, =_ebss
 81028d8:	10036b7c 	.word	0x10036b7c

081028dc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81028dc:	e7fe      	b.n	81028dc <ADC3_IRQHandler>
	...

081028e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81028e0:	b580      	push	{r7, lr}
 81028e2:	b082      	sub	sp, #8
 81028e4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81028e6:	4b28      	ldr	r3, [pc, #160]	@ (8102988 <HAL_Init+0xa8>)
 81028e8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81028ec:	4a26      	ldr	r2, [pc, #152]	@ (8102988 <HAL_Init+0xa8>)
 81028ee:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81028f2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81028f6:	4b24      	ldr	r3, [pc, #144]	@ (8102988 <HAL_Init+0xa8>)
 81028f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81028fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8102900:	603b      	str	r3, [r7, #0]
 8102902:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8102904:	4b21      	ldr	r3, [pc, #132]	@ (810298c <HAL_Init+0xac>)
 8102906:	681b      	ldr	r3, [r3, #0]
 8102908:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 810290c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8102910:	4a1e      	ldr	r2, [pc, #120]	@ (810298c <HAL_Init+0xac>)
 8102912:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8102916:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8102918:	4b1c      	ldr	r3, [pc, #112]	@ (810298c <HAL_Init+0xac>)
 810291a:	681b      	ldr	r3, [r3, #0]
 810291c:	4a1b      	ldr	r2, [pc, #108]	@ (810298c <HAL_Init+0xac>)
 810291e:	f043 0301 	orr.w	r3, r3, #1
 8102922:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8102924:	2003      	movs	r0, #3
 8102926:	f000 f92a 	bl	8102b7e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 810292a:	f003 f817 	bl	810595c <HAL_RCC_GetSysClockFreq>
 810292e:	4602      	mov	r2, r0
 8102930:	4b15      	ldr	r3, [pc, #84]	@ (8102988 <HAL_Init+0xa8>)
 8102932:	699b      	ldr	r3, [r3, #24]
 8102934:	0a1b      	lsrs	r3, r3, #8
 8102936:	f003 030f 	and.w	r3, r3, #15
 810293a:	4915      	ldr	r1, [pc, #84]	@ (8102990 <HAL_Init+0xb0>)
 810293c:	5ccb      	ldrb	r3, [r1, r3]
 810293e:	f003 031f 	and.w	r3, r3, #31
 8102942:	fa22 f303 	lsr.w	r3, r2, r3
 8102946:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8102948:	4b0f      	ldr	r3, [pc, #60]	@ (8102988 <HAL_Init+0xa8>)
 810294a:	699b      	ldr	r3, [r3, #24]
 810294c:	f003 030f 	and.w	r3, r3, #15
 8102950:	4a0f      	ldr	r2, [pc, #60]	@ (8102990 <HAL_Init+0xb0>)
 8102952:	5cd3      	ldrb	r3, [r2, r3]
 8102954:	f003 031f 	and.w	r3, r3, #31
 8102958:	687a      	ldr	r2, [r7, #4]
 810295a:	fa22 f303 	lsr.w	r3, r2, r3
 810295e:	4a0d      	ldr	r2, [pc, #52]	@ (8102994 <HAL_Init+0xb4>)
 8102960:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8102962:	4b0c      	ldr	r3, [pc, #48]	@ (8102994 <HAL_Init+0xb4>)
 8102964:	681b      	ldr	r3, [r3, #0]
 8102966:	4a0c      	ldr	r2, [pc, #48]	@ (8102998 <HAL_Init+0xb8>)
 8102968:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 810296a:	200f      	movs	r0, #15
 810296c:	f7ff fd5c 	bl	8102428 <HAL_InitTick>
 8102970:	4603      	mov	r3, r0
 8102972:	2b00      	cmp	r3, #0
 8102974:	d001      	beq.n	810297a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8102976:	2301      	movs	r3, #1
 8102978:	e002      	b.n	8102980 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810297a:	f7ff fc57 	bl	810222c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810297e:	2300      	movs	r3, #0
}
 8102980:	4618      	mov	r0, r3
 8102982:	3708      	adds	r7, #8
 8102984:	46bd      	mov	sp, r7
 8102986:	bd80      	pop	{r7, pc}
 8102988:	58024400 	.word	0x58024400
 810298c:	40024400 	.word	0x40024400
 8102990:	0810ec40 	.word	0x0810ec40
 8102994:	100320f4 	.word	0x100320f4
 8102998:	100320f0 	.word	0x100320f0

0810299c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810299c:	b480      	push	{r7}
 810299e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81029a0:	4b06      	ldr	r3, [pc, #24]	@ (81029bc <HAL_IncTick+0x20>)
 81029a2:	781b      	ldrb	r3, [r3, #0]
 81029a4:	461a      	mov	r2, r3
 81029a6:	4b06      	ldr	r3, [pc, #24]	@ (81029c0 <HAL_IncTick+0x24>)
 81029a8:	681b      	ldr	r3, [r3, #0]
 81029aa:	4413      	add	r3, r2
 81029ac:	4a04      	ldr	r2, [pc, #16]	@ (81029c0 <HAL_IncTick+0x24>)
 81029ae:	6013      	str	r3, [r2, #0]
}
 81029b0:	bf00      	nop
 81029b2:	46bd      	mov	sp, r7
 81029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029b8:	4770      	bx	lr
 81029ba:	bf00      	nop
 81029bc:	100320fc 	.word	0x100320fc
 81029c0:	10034f90 	.word	0x10034f90

081029c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81029c4:	b480      	push	{r7}
 81029c6:	af00      	add	r7, sp, #0
  return uwTick;
 81029c8:	4b03      	ldr	r3, [pc, #12]	@ (81029d8 <HAL_GetTick+0x14>)
 81029ca:	681b      	ldr	r3, [r3, #0]
}
 81029cc:	4618      	mov	r0, r3
 81029ce:	46bd      	mov	sp, r7
 81029d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81029d4:	4770      	bx	lr
 81029d6:	bf00      	nop
 81029d8:	10034f90 	.word	0x10034f90

081029dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81029dc:	b580      	push	{r7, lr}
 81029de:	b084      	sub	sp, #16
 81029e0:	af00      	add	r7, sp, #0
 81029e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81029e4:	f7ff ffee 	bl	81029c4 <HAL_GetTick>
 81029e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81029ea:	687b      	ldr	r3, [r7, #4]
 81029ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81029ee:	68fb      	ldr	r3, [r7, #12]
 81029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81029f4:	d005      	beq.n	8102a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81029f6:	4b0a      	ldr	r3, [pc, #40]	@ (8102a20 <HAL_Delay+0x44>)
 81029f8:	781b      	ldrb	r3, [r3, #0]
 81029fa:	461a      	mov	r2, r3
 81029fc:	68fb      	ldr	r3, [r7, #12]
 81029fe:	4413      	add	r3, r2
 8102a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8102a02:	bf00      	nop
 8102a04:	f7ff ffde 	bl	81029c4 <HAL_GetTick>
 8102a08:	4602      	mov	r2, r0
 8102a0a:	68bb      	ldr	r3, [r7, #8]
 8102a0c:	1ad3      	subs	r3, r2, r3
 8102a0e:	68fa      	ldr	r2, [r7, #12]
 8102a10:	429a      	cmp	r2, r3
 8102a12:	d8f7      	bhi.n	8102a04 <HAL_Delay+0x28>
  {
  }
}
 8102a14:	bf00      	nop
 8102a16:	bf00      	nop
 8102a18:	3710      	adds	r7, #16
 8102a1a:	46bd      	mov	sp, r7
 8102a1c:	bd80      	pop	{r7, pc}
 8102a1e:	bf00      	nop
 8102a20:	100320fc 	.word	0x100320fc

08102a24 <__NVIC_SetPriorityGrouping>:
{
 8102a24:	b480      	push	{r7}
 8102a26:	b085      	sub	sp, #20
 8102a28:	af00      	add	r7, sp, #0
 8102a2a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8102a2c:	687b      	ldr	r3, [r7, #4]
 8102a2e:	f003 0307 	and.w	r3, r3, #7
 8102a32:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8102a34:	4b0c      	ldr	r3, [pc, #48]	@ (8102a68 <__NVIC_SetPriorityGrouping+0x44>)
 8102a36:	68db      	ldr	r3, [r3, #12]
 8102a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8102a3a:	68ba      	ldr	r2, [r7, #8]
 8102a3c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8102a40:	4013      	ands	r3, r2
 8102a42:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8102a44:	68fb      	ldr	r3, [r7, #12]
 8102a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8102a48:	68bb      	ldr	r3, [r7, #8]
 8102a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8102a4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8102a50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8102a56:	4a04      	ldr	r2, [pc, #16]	@ (8102a68 <__NVIC_SetPriorityGrouping+0x44>)
 8102a58:	68bb      	ldr	r3, [r7, #8]
 8102a5a:	60d3      	str	r3, [r2, #12]
}
 8102a5c:	bf00      	nop
 8102a5e:	3714      	adds	r7, #20
 8102a60:	46bd      	mov	sp, r7
 8102a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a66:	4770      	bx	lr
 8102a68:	e000ed00 	.word	0xe000ed00

08102a6c <__NVIC_GetPriorityGrouping>:
{
 8102a6c:	b480      	push	{r7}
 8102a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8102a70:	4b04      	ldr	r3, [pc, #16]	@ (8102a84 <__NVIC_GetPriorityGrouping+0x18>)
 8102a72:	68db      	ldr	r3, [r3, #12]
 8102a74:	0a1b      	lsrs	r3, r3, #8
 8102a76:	f003 0307 	and.w	r3, r3, #7
}
 8102a7a:	4618      	mov	r0, r3
 8102a7c:	46bd      	mov	sp, r7
 8102a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102a82:	4770      	bx	lr
 8102a84:	e000ed00 	.word	0xe000ed00

08102a88 <__NVIC_EnableIRQ>:
{
 8102a88:	b480      	push	{r7}
 8102a8a:	b083      	sub	sp, #12
 8102a8c:	af00      	add	r7, sp, #0
 8102a8e:	4603      	mov	r3, r0
 8102a90:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102a92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102a96:	2b00      	cmp	r3, #0
 8102a98:	db0b      	blt.n	8102ab2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8102a9a:	88fb      	ldrh	r3, [r7, #6]
 8102a9c:	f003 021f 	and.w	r2, r3, #31
 8102aa0:	4907      	ldr	r1, [pc, #28]	@ (8102ac0 <__NVIC_EnableIRQ+0x38>)
 8102aa2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102aa6:	095b      	lsrs	r3, r3, #5
 8102aa8:	2001      	movs	r0, #1
 8102aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8102aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8102ab2:	bf00      	nop
 8102ab4:	370c      	adds	r7, #12
 8102ab6:	46bd      	mov	sp, r7
 8102ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102abc:	4770      	bx	lr
 8102abe:	bf00      	nop
 8102ac0:	e000e100 	.word	0xe000e100

08102ac4 <__NVIC_SetPriority>:
{
 8102ac4:	b480      	push	{r7}
 8102ac6:	b083      	sub	sp, #12
 8102ac8:	af00      	add	r7, sp, #0
 8102aca:	4603      	mov	r3, r0
 8102acc:	6039      	str	r1, [r7, #0]
 8102ace:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8102ad0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ad4:	2b00      	cmp	r3, #0
 8102ad6:	db0a      	blt.n	8102aee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102ad8:	683b      	ldr	r3, [r7, #0]
 8102ada:	b2da      	uxtb	r2, r3
 8102adc:	490c      	ldr	r1, [pc, #48]	@ (8102b10 <__NVIC_SetPriority+0x4c>)
 8102ade:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102ae2:	0112      	lsls	r2, r2, #4
 8102ae4:	b2d2      	uxtb	r2, r2
 8102ae6:	440b      	add	r3, r1
 8102ae8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8102aec:	e00a      	b.n	8102b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8102aee:	683b      	ldr	r3, [r7, #0]
 8102af0:	b2da      	uxtb	r2, r3
 8102af2:	4908      	ldr	r1, [pc, #32]	@ (8102b14 <__NVIC_SetPriority+0x50>)
 8102af4:	88fb      	ldrh	r3, [r7, #6]
 8102af6:	f003 030f 	and.w	r3, r3, #15
 8102afa:	3b04      	subs	r3, #4
 8102afc:	0112      	lsls	r2, r2, #4
 8102afe:	b2d2      	uxtb	r2, r2
 8102b00:	440b      	add	r3, r1
 8102b02:	761a      	strb	r2, [r3, #24]
}
 8102b04:	bf00      	nop
 8102b06:	370c      	adds	r7, #12
 8102b08:	46bd      	mov	sp, r7
 8102b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b0e:	4770      	bx	lr
 8102b10:	e000e100 	.word	0xe000e100
 8102b14:	e000ed00 	.word	0xe000ed00

08102b18 <NVIC_EncodePriority>:
{
 8102b18:	b480      	push	{r7}
 8102b1a:	b089      	sub	sp, #36	@ 0x24
 8102b1c:	af00      	add	r7, sp, #0
 8102b1e:	60f8      	str	r0, [r7, #12]
 8102b20:	60b9      	str	r1, [r7, #8]
 8102b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8102b24:	68fb      	ldr	r3, [r7, #12]
 8102b26:	f003 0307 	and.w	r3, r3, #7
 8102b2a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8102b2c:	69fb      	ldr	r3, [r7, #28]
 8102b2e:	f1c3 0307 	rsb	r3, r3, #7
 8102b32:	2b04      	cmp	r3, #4
 8102b34:	bf28      	it	cs
 8102b36:	2304      	movcs	r3, #4
 8102b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8102b3a:	69fb      	ldr	r3, [r7, #28]
 8102b3c:	3304      	adds	r3, #4
 8102b3e:	2b06      	cmp	r3, #6
 8102b40:	d902      	bls.n	8102b48 <NVIC_EncodePriority+0x30>
 8102b42:	69fb      	ldr	r3, [r7, #28]
 8102b44:	3b03      	subs	r3, #3
 8102b46:	e000      	b.n	8102b4a <NVIC_EncodePriority+0x32>
 8102b48:	2300      	movs	r3, #0
 8102b4a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8102b50:	69bb      	ldr	r3, [r7, #24]
 8102b52:	fa02 f303 	lsl.w	r3, r2, r3
 8102b56:	43da      	mvns	r2, r3
 8102b58:	68bb      	ldr	r3, [r7, #8]
 8102b5a:	401a      	ands	r2, r3
 8102b5c:	697b      	ldr	r3, [r7, #20]
 8102b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8102b60:	f04f 31ff 	mov.w	r1, #4294967295
 8102b64:	697b      	ldr	r3, [r7, #20]
 8102b66:	fa01 f303 	lsl.w	r3, r1, r3
 8102b6a:	43d9      	mvns	r1, r3
 8102b6c:	687b      	ldr	r3, [r7, #4]
 8102b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8102b70:	4313      	orrs	r3, r2
}
 8102b72:	4618      	mov	r0, r3
 8102b74:	3724      	adds	r7, #36	@ 0x24
 8102b76:	46bd      	mov	sp, r7
 8102b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102b7c:	4770      	bx	lr

08102b7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8102b7e:	b580      	push	{r7, lr}
 8102b80:	b082      	sub	sp, #8
 8102b82:	af00      	add	r7, sp, #0
 8102b84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8102b86:	6878      	ldr	r0, [r7, #4]
 8102b88:	f7ff ff4c 	bl	8102a24 <__NVIC_SetPriorityGrouping>
}
 8102b8c:	bf00      	nop
 8102b8e:	3708      	adds	r7, #8
 8102b90:	46bd      	mov	sp, r7
 8102b92:	bd80      	pop	{r7, pc}

08102b94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8102b94:	b580      	push	{r7, lr}
 8102b96:	b086      	sub	sp, #24
 8102b98:	af00      	add	r7, sp, #0
 8102b9a:	4603      	mov	r3, r0
 8102b9c:	60b9      	str	r1, [r7, #8]
 8102b9e:	607a      	str	r2, [r7, #4]
 8102ba0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8102ba2:	f7ff ff63 	bl	8102a6c <__NVIC_GetPriorityGrouping>
 8102ba6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8102ba8:	687a      	ldr	r2, [r7, #4]
 8102baa:	68b9      	ldr	r1, [r7, #8]
 8102bac:	6978      	ldr	r0, [r7, #20]
 8102bae:	f7ff ffb3 	bl	8102b18 <NVIC_EncodePriority>
 8102bb2:	4602      	mov	r2, r0
 8102bb4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8102bb8:	4611      	mov	r1, r2
 8102bba:	4618      	mov	r0, r3
 8102bbc:	f7ff ff82 	bl	8102ac4 <__NVIC_SetPriority>
}
 8102bc0:	bf00      	nop
 8102bc2:	3718      	adds	r7, #24
 8102bc4:	46bd      	mov	sp, r7
 8102bc6:	bd80      	pop	{r7, pc}

08102bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8102bc8:	b580      	push	{r7, lr}
 8102bca:	b082      	sub	sp, #8
 8102bcc:	af00      	add	r7, sp, #0
 8102bce:	4603      	mov	r3, r0
 8102bd0:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8102bd2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8102bd6:	4618      	mov	r0, r3
 8102bd8:	f7ff ff56 	bl	8102a88 <__NVIC_EnableIRQ>
}
 8102bdc:	bf00      	nop
 8102bde:	3708      	adds	r7, #8
 8102be0:	46bd      	mov	sp, r7
 8102be2:	bd80      	pop	{r7, pc}

08102be4 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102be4:	b480      	push	{r7}
 8102be6:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8102be8:	4b06      	ldr	r3, [pc, #24]	@ (8102c04 <HAL_GetCurrentCPUID+0x20>)
 8102bea:	681b      	ldr	r3, [r3, #0]
 8102bec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8102bf0:	2b70      	cmp	r3, #112	@ 0x70
 8102bf2:	d101      	bne.n	8102bf8 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8102bf4:	2303      	movs	r3, #3
 8102bf6:	e000      	b.n	8102bfa <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8102bf8:	2301      	movs	r3, #1
  }
}
 8102bfa:	4618      	mov	r0, r3
 8102bfc:	46bd      	mov	sp, r7
 8102bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c02:	4770      	bx	lr
 8102c04:	e000ed00 	.word	0xe000ed00

08102c08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8102c08:	b480      	push	{r7}
 8102c0a:	b089      	sub	sp, #36	@ 0x24
 8102c0c:	af00      	add	r7, sp, #0
 8102c0e:	6078      	str	r0, [r7, #4]
 8102c10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8102c12:	2300      	movs	r3, #0
 8102c14:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8102c16:	4b89      	ldr	r3, [pc, #548]	@ (8102e3c <HAL_GPIO_Init+0x234>)
 8102c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102c1a:	e194      	b.n	8102f46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102c1c:	683b      	ldr	r3, [r7, #0]
 8102c1e:	681a      	ldr	r2, [r3, #0]
 8102c20:	2101      	movs	r1, #1
 8102c22:	69fb      	ldr	r3, [r7, #28]
 8102c24:	fa01 f303 	lsl.w	r3, r1, r3
 8102c28:	4013      	ands	r3, r2
 8102c2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102c2c:	693b      	ldr	r3, [r7, #16]
 8102c2e:	2b00      	cmp	r3, #0
 8102c30:	f000 8186 	beq.w	8102f40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8102c34:	683b      	ldr	r3, [r7, #0]
 8102c36:	685b      	ldr	r3, [r3, #4]
 8102c38:	f003 0303 	and.w	r3, r3, #3
 8102c3c:	2b01      	cmp	r3, #1
 8102c3e:	d005      	beq.n	8102c4c <HAL_GPIO_Init+0x44>
 8102c40:	683b      	ldr	r3, [r7, #0]
 8102c42:	685b      	ldr	r3, [r3, #4]
 8102c44:	f003 0303 	and.w	r3, r3, #3
 8102c48:	2b02      	cmp	r3, #2
 8102c4a:	d130      	bne.n	8102cae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102c4c:	687b      	ldr	r3, [r7, #4]
 8102c4e:	689b      	ldr	r3, [r3, #8]
 8102c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8102c52:	69fb      	ldr	r3, [r7, #28]
 8102c54:	005b      	lsls	r3, r3, #1
 8102c56:	2203      	movs	r2, #3
 8102c58:	fa02 f303 	lsl.w	r3, r2, r3
 8102c5c:	43db      	mvns	r3, r3
 8102c5e:	69ba      	ldr	r2, [r7, #24]
 8102c60:	4013      	ands	r3, r2
 8102c62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8102c64:	683b      	ldr	r3, [r7, #0]
 8102c66:	68da      	ldr	r2, [r3, #12]
 8102c68:	69fb      	ldr	r3, [r7, #28]
 8102c6a:	005b      	lsls	r3, r3, #1
 8102c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8102c70:	69ba      	ldr	r2, [r7, #24]
 8102c72:	4313      	orrs	r3, r2
 8102c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8102c76:	687b      	ldr	r3, [r7, #4]
 8102c78:	69ba      	ldr	r2, [r7, #24]
 8102c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8102c7c:	687b      	ldr	r3, [r7, #4]
 8102c7e:	685b      	ldr	r3, [r3, #4]
 8102c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8102c82:	2201      	movs	r2, #1
 8102c84:	69fb      	ldr	r3, [r7, #28]
 8102c86:	fa02 f303 	lsl.w	r3, r2, r3
 8102c8a:	43db      	mvns	r3, r3
 8102c8c:	69ba      	ldr	r2, [r7, #24]
 8102c8e:	4013      	ands	r3, r2
 8102c90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8102c92:	683b      	ldr	r3, [r7, #0]
 8102c94:	685b      	ldr	r3, [r3, #4]
 8102c96:	091b      	lsrs	r3, r3, #4
 8102c98:	f003 0201 	and.w	r2, r3, #1
 8102c9c:	69fb      	ldr	r3, [r7, #28]
 8102c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8102ca2:	69ba      	ldr	r2, [r7, #24]
 8102ca4:	4313      	orrs	r3, r2
 8102ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	69ba      	ldr	r2, [r7, #24]
 8102cac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8102cae:	683b      	ldr	r3, [r7, #0]
 8102cb0:	685b      	ldr	r3, [r3, #4]
 8102cb2:	f003 0303 	and.w	r3, r3, #3
 8102cb6:	2b03      	cmp	r3, #3
 8102cb8:	d017      	beq.n	8102cea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8102cba:	687b      	ldr	r3, [r7, #4]
 8102cbc:	68db      	ldr	r3, [r3, #12]
 8102cbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8102cc0:	69fb      	ldr	r3, [r7, #28]
 8102cc2:	005b      	lsls	r3, r3, #1
 8102cc4:	2203      	movs	r2, #3
 8102cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8102cca:	43db      	mvns	r3, r3
 8102ccc:	69ba      	ldr	r2, [r7, #24]
 8102cce:	4013      	ands	r3, r2
 8102cd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8102cd2:	683b      	ldr	r3, [r7, #0]
 8102cd4:	689a      	ldr	r2, [r3, #8]
 8102cd6:	69fb      	ldr	r3, [r7, #28]
 8102cd8:	005b      	lsls	r3, r3, #1
 8102cda:	fa02 f303 	lsl.w	r3, r2, r3
 8102cde:	69ba      	ldr	r2, [r7, #24]
 8102ce0:	4313      	orrs	r3, r2
 8102ce2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8102ce4:	687b      	ldr	r3, [r7, #4]
 8102ce6:	69ba      	ldr	r2, [r7, #24]
 8102ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102cea:	683b      	ldr	r3, [r7, #0]
 8102cec:	685b      	ldr	r3, [r3, #4]
 8102cee:	f003 0303 	and.w	r3, r3, #3
 8102cf2:	2b02      	cmp	r3, #2
 8102cf4:	d123      	bne.n	8102d3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8102cf6:	69fb      	ldr	r3, [r7, #28]
 8102cf8:	08da      	lsrs	r2, r3, #3
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	3208      	adds	r2, #8
 8102cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8102d04:	69fb      	ldr	r3, [r7, #28]
 8102d06:	f003 0307 	and.w	r3, r3, #7
 8102d0a:	009b      	lsls	r3, r3, #2
 8102d0c:	220f      	movs	r2, #15
 8102d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8102d12:	43db      	mvns	r3, r3
 8102d14:	69ba      	ldr	r2, [r7, #24]
 8102d16:	4013      	ands	r3, r2
 8102d18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102d1a:	683b      	ldr	r3, [r7, #0]
 8102d1c:	691a      	ldr	r2, [r3, #16]
 8102d1e:	69fb      	ldr	r3, [r7, #28]
 8102d20:	f003 0307 	and.w	r3, r3, #7
 8102d24:	009b      	lsls	r3, r3, #2
 8102d26:	fa02 f303 	lsl.w	r3, r2, r3
 8102d2a:	69ba      	ldr	r2, [r7, #24]
 8102d2c:	4313      	orrs	r3, r2
 8102d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102d30:	69fb      	ldr	r3, [r7, #28]
 8102d32:	08da      	lsrs	r2, r3, #3
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	3208      	adds	r2, #8
 8102d38:	69b9      	ldr	r1, [r7, #24]
 8102d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8102d44:	69fb      	ldr	r3, [r7, #28]
 8102d46:	005b      	lsls	r3, r3, #1
 8102d48:	2203      	movs	r2, #3
 8102d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8102d4e:	43db      	mvns	r3, r3
 8102d50:	69ba      	ldr	r2, [r7, #24]
 8102d52:	4013      	ands	r3, r2
 8102d54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8102d56:	683b      	ldr	r3, [r7, #0]
 8102d58:	685b      	ldr	r3, [r3, #4]
 8102d5a:	f003 0203 	and.w	r2, r3, #3
 8102d5e:	69fb      	ldr	r3, [r7, #28]
 8102d60:	005b      	lsls	r3, r3, #1
 8102d62:	fa02 f303 	lsl.w	r3, r2, r3
 8102d66:	69ba      	ldr	r2, [r7, #24]
 8102d68:	4313      	orrs	r3, r2
 8102d6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102d6c:	687b      	ldr	r3, [r7, #4]
 8102d6e:	69ba      	ldr	r2, [r7, #24]
 8102d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8102d72:	683b      	ldr	r3, [r7, #0]
 8102d74:	685b      	ldr	r3, [r3, #4]
 8102d76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8102d7a:	2b00      	cmp	r3, #0
 8102d7c:	f000 80e0 	beq.w	8102f40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8102d80:	4b2f      	ldr	r3, [pc, #188]	@ (8102e40 <HAL_GPIO_Init+0x238>)
 8102d82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102d86:	4a2e      	ldr	r2, [pc, #184]	@ (8102e40 <HAL_GPIO_Init+0x238>)
 8102d88:	f043 0302 	orr.w	r3, r3, #2
 8102d8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8102d90:	4b2b      	ldr	r3, [pc, #172]	@ (8102e40 <HAL_GPIO_Init+0x238>)
 8102d92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8102d96:	f003 0302 	and.w	r3, r3, #2
 8102d9a:	60fb      	str	r3, [r7, #12]
 8102d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8102d9e:	4a29      	ldr	r2, [pc, #164]	@ (8102e44 <HAL_GPIO_Init+0x23c>)
 8102da0:	69fb      	ldr	r3, [r7, #28]
 8102da2:	089b      	lsrs	r3, r3, #2
 8102da4:	3302      	adds	r3, #2
 8102da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8102daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8102dac:	69fb      	ldr	r3, [r7, #28]
 8102dae:	f003 0303 	and.w	r3, r3, #3
 8102db2:	009b      	lsls	r3, r3, #2
 8102db4:	220f      	movs	r2, #15
 8102db6:	fa02 f303 	lsl.w	r3, r2, r3
 8102dba:	43db      	mvns	r3, r3
 8102dbc:	69ba      	ldr	r2, [r7, #24]
 8102dbe:	4013      	ands	r3, r2
 8102dc0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8102dc2:	687b      	ldr	r3, [r7, #4]
 8102dc4:	4a20      	ldr	r2, [pc, #128]	@ (8102e48 <HAL_GPIO_Init+0x240>)
 8102dc6:	4293      	cmp	r3, r2
 8102dc8:	d052      	beq.n	8102e70 <HAL_GPIO_Init+0x268>
 8102dca:	687b      	ldr	r3, [r7, #4]
 8102dcc:	4a1f      	ldr	r2, [pc, #124]	@ (8102e4c <HAL_GPIO_Init+0x244>)
 8102dce:	4293      	cmp	r3, r2
 8102dd0:	d031      	beq.n	8102e36 <HAL_GPIO_Init+0x22e>
 8102dd2:	687b      	ldr	r3, [r7, #4]
 8102dd4:	4a1e      	ldr	r2, [pc, #120]	@ (8102e50 <HAL_GPIO_Init+0x248>)
 8102dd6:	4293      	cmp	r3, r2
 8102dd8:	d02b      	beq.n	8102e32 <HAL_GPIO_Init+0x22a>
 8102dda:	687b      	ldr	r3, [r7, #4]
 8102ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8102e54 <HAL_GPIO_Init+0x24c>)
 8102dde:	4293      	cmp	r3, r2
 8102de0:	d025      	beq.n	8102e2e <HAL_GPIO_Init+0x226>
 8102de2:	687b      	ldr	r3, [r7, #4]
 8102de4:	4a1c      	ldr	r2, [pc, #112]	@ (8102e58 <HAL_GPIO_Init+0x250>)
 8102de6:	4293      	cmp	r3, r2
 8102de8:	d01f      	beq.n	8102e2a <HAL_GPIO_Init+0x222>
 8102dea:	687b      	ldr	r3, [r7, #4]
 8102dec:	4a1b      	ldr	r2, [pc, #108]	@ (8102e5c <HAL_GPIO_Init+0x254>)
 8102dee:	4293      	cmp	r3, r2
 8102df0:	d019      	beq.n	8102e26 <HAL_GPIO_Init+0x21e>
 8102df2:	687b      	ldr	r3, [r7, #4]
 8102df4:	4a1a      	ldr	r2, [pc, #104]	@ (8102e60 <HAL_GPIO_Init+0x258>)
 8102df6:	4293      	cmp	r3, r2
 8102df8:	d013      	beq.n	8102e22 <HAL_GPIO_Init+0x21a>
 8102dfa:	687b      	ldr	r3, [r7, #4]
 8102dfc:	4a19      	ldr	r2, [pc, #100]	@ (8102e64 <HAL_GPIO_Init+0x25c>)
 8102dfe:	4293      	cmp	r3, r2
 8102e00:	d00d      	beq.n	8102e1e <HAL_GPIO_Init+0x216>
 8102e02:	687b      	ldr	r3, [r7, #4]
 8102e04:	4a18      	ldr	r2, [pc, #96]	@ (8102e68 <HAL_GPIO_Init+0x260>)
 8102e06:	4293      	cmp	r3, r2
 8102e08:	d007      	beq.n	8102e1a <HAL_GPIO_Init+0x212>
 8102e0a:	687b      	ldr	r3, [r7, #4]
 8102e0c:	4a17      	ldr	r2, [pc, #92]	@ (8102e6c <HAL_GPIO_Init+0x264>)
 8102e0e:	4293      	cmp	r3, r2
 8102e10:	d101      	bne.n	8102e16 <HAL_GPIO_Init+0x20e>
 8102e12:	2309      	movs	r3, #9
 8102e14:	e02d      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e16:	230a      	movs	r3, #10
 8102e18:	e02b      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e1a:	2308      	movs	r3, #8
 8102e1c:	e029      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e1e:	2307      	movs	r3, #7
 8102e20:	e027      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e22:	2306      	movs	r3, #6
 8102e24:	e025      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e26:	2305      	movs	r3, #5
 8102e28:	e023      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e2a:	2304      	movs	r3, #4
 8102e2c:	e021      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e2e:	2303      	movs	r3, #3
 8102e30:	e01f      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e32:	2302      	movs	r3, #2
 8102e34:	e01d      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e36:	2301      	movs	r3, #1
 8102e38:	e01b      	b.n	8102e72 <HAL_GPIO_Init+0x26a>
 8102e3a:	bf00      	nop
 8102e3c:	580000c0 	.word	0x580000c0
 8102e40:	58024400 	.word	0x58024400
 8102e44:	58000400 	.word	0x58000400
 8102e48:	58020000 	.word	0x58020000
 8102e4c:	58020400 	.word	0x58020400
 8102e50:	58020800 	.word	0x58020800
 8102e54:	58020c00 	.word	0x58020c00
 8102e58:	58021000 	.word	0x58021000
 8102e5c:	58021400 	.word	0x58021400
 8102e60:	58021800 	.word	0x58021800
 8102e64:	58021c00 	.word	0x58021c00
 8102e68:	58022000 	.word	0x58022000
 8102e6c:	58022400 	.word	0x58022400
 8102e70:	2300      	movs	r3, #0
 8102e72:	69fa      	ldr	r2, [r7, #28]
 8102e74:	f002 0203 	and.w	r2, r2, #3
 8102e78:	0092      	lsls	r2, r2, #2
 8102e7a:	4093      	lsls	r3, r2
 8102e7c:	69ba      	ldr	r2, [r7, #24]
 8102e7e:	4313      	orrs	r3, r2
 8102e80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8102e82:	4938      	ldr	r1, [pc, #224]	@ (8102f64 <HAL_GPIO_Init+0x35c>)
 8102e84:	69fb      	ldr	r3, [r7, #28]
 8102e86:	089b      	lsrs	r3, r3, #2
 8102e88:	3302      	adds	r3, #2
 8102e8a:	69ba      	ldr	r2, [r7, #24]
 8102e8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8102e90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102e94:	681b      	ldr	r3, [r3, #0]
 8102e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102e98:	693b      	ldr	r3, [r7, #16]
 8102e9a:	43db      	mvns	r3, r3
 8102e9c:	69ba      	ldr	r2, [r7, #24]
 8102e9e:	4013      	ands	r3, r2
 8102ea0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8102ea2:	683b      	ldr	r3, [r7, #0]
 8102ea4:	685b      	ldr	r3, [r3, #4]
 8102ea6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8102eaa:	2b00      	cmp	r3, #0
 8102eac:	d003      	beq.n	8102eb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8102eae:	69ba      	ldr	r2, [r7, #24]
 8102eb0:	693b      	ldr	r3, [r7, #16]
 8102eb2:	4313      	orrs	r3, r2
 8102eb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8102eb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102eba:	69bb      	ldr	r3, [r7, #24]
 8102ebc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8102ebe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8102ec2:	685b      	ldr	r3, [r3, #4]
 8102ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ec6:	693b      	ldr	r3, [r7, #16]
 8102ec8:	43db      	mvns	r3, r3
 8102eca:	69ba      	ldr	r2, [r7, #24]
 8102ecc:	4013      	ands	r3, r2
 8102ece:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8102ed0:	683b      	ldr	r3, [r7, #0]
 8102ed2:	685b      	ldr	r3, [r3, #4]
 8102ed4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102ed8:	2b00      	cmp	r3, #0
 8102eda:	d003      	beq.n	8102ee4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102edc:	69ba      	ldr	r2, [r7, #24]
 8102ede:	693b      	ldr	r3, [r7, #16]
 8102ee0:	4313      	orrs	r3, r2
 8102ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8102ee4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102ee8:	69bb      	ldr	r3, [r7, #24]
 8102eea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102eec:	697b      	ldr	r3, [r7, #20]
 8102eee:	685b      	ldr	r3, [r3, #4]
 8102ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102ef2:	693b      	ldr	r3, [r7, #16]
 8102ef4:	43db      	mvns	r3, r3
 8102ef6:	69ba      	ldr	r2, [r7, #24]
 8102ef8:	4013      	ands	r3, r2
 8102efa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102efc:	683b      	ldr	r3, [r7, #0]
 8102efe:	685b      	ldr	r3, [r3, #4]
 8102f00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8102f04:	2b00      	cmp	r3, #0
 8102f06:	d003      	beq.n	8102f10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102f08:	69ba      	ldr	r2, [r7, #24]
 8102f0a:	693b      	ldr	r3, [r7, #16]
 8102f0c:	4313      	orrs	r3, r2
 8102f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102f10:	697b      	ldr	r3, [r7, #20]
 8102f12:	69ba      	ldr	r2, [r7, #24]
 8102f14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8102f16:	697b      	ldr	r3, [r7, #20]
 8102f18:	681b      	ldr	r3, [r3, #0]
 8102f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102f1c:	693b      	ldr	r3, [r7, #16]
 8102f1e:	43db      	mvns	r3, r3
 8102f20:	69ba      	ldr	r2, [r7, #24]
 8102f22:	4013      	ands	r3, r2
 8102f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8102f26:	683b      	ldr	r3, [r7, #0]
 8102f28:	685b      	ldr	r3, [r3, #4]
 8102f2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102f2e:	2b00      	cmp	r3, #0
 8102f30:	d003      	beq.n	8102f3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8102f32:	69ba      	ldr	r2, [r7, #24]
 8102f34:	693b      	ldr	r3, [r7, #16]
 8102f36:	4313      	orrs	r3, r2
 8102f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102f3a:	697b      	ldr	r3, [r7, #20]
 8102f3c:	69ba      	ldr	r2, [r7, #24]
 8102f3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102f40:	69fb      	ldr	r3, [r7, #28]
 8102f42:	3301      	adds	r3, #1
 8102f44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102f46:	683b      	ldr	r3, [r7, #0]
 8102f48:	681a      	ldr	r2, [r3, #0]
 8102f4a:	69fb      	ldr	r3, [r7, #28]
 8102f4c:	fa22 f303 	lsr.w	r3, r2, r3
 8102f50:	2b00      	cmp	r3, #0
 8102f52:	f47f ae63 	bne.w	8102c1c <HAL_GPIO_Init+0x14>
  }
}
 8102f56:	bf00      	nop
 8102f58:	bf00      	nop
 8102f5a:	3724      	adds	r7, #36	@ 0x24
 8102f5c:	46bd      	mov	sp, r7
 8102f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f62:	4770      	bx	lr
 8102f64:	58000400 	.word	0x58000400

08102f68 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102f68:	b480      	push	{r7}
 8102f6a:	b083      	sub	sp, #12
 8102f6c:	af00      	add	r7, sp, #0
 8102f6e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102f70:	4b05      	ldr	r3, [pc, #20]	@ (8102f88 <HAL_HSEM_ActivateNotification+0x20>)
 8102f72:	681a      	ldr	r2, [r3, #0]
 8102f74:	4904      	ldr	r1, [pc, #16]	@ (8102f88 <HAL_HSEM_ActivateNotification+0x20>)
 8102f76:	687b      	ldr	r3, [r7, #4]
 8102f78:	4313      	orrs	r3, r2
 8102f7a:	600b      	str	r3, [r1, #0]
#endif
}
 8102f7c:	bf00      	nop
 8102f7e:	370c      	adds	r7, #12
 8102f80:	46bd      	mov	sp, r7
 8102f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102f86:	4770      	bx	lr
 8102f88:	58026510 	.word	0x58026510

08102f8c <HAL_MMC_Init>:
            MMC_HandleTypeDef and create the associated handle.
  * @param  hmmc: Pointer to the MMC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_Init(MMC_HandleTypeDef *hmmc)
{
 8102f8c:	b580      	push	{r7, lr}
 8102f8e:	b082      	sub	sp, #8
 8102f90:	af00      	add	r7, sp, #0
 8102f92:	6078      	str	r0, [r7, #4]
  /* Check the MMC handle allocation */
  if (hmmc == NULL)
 8102f94:	687b      	ldr	r3, [r7, #4]
 8102f96:	2b00      	cmp	r3, #0
 8102f98:	d101      	bne.n	8102f9e <HAL_MMC_Init+0x12>
  {
    return HAL_ERROR;
 8102f9a:	2301      	movs	r3, #1
 8102f9c:	e031      	b.n	8103002 <HAL_MMC_Init+0x76>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hmmc->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hmmc->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hmmc->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hmmc->Init.ClockDiv));

  if (hmmc->State == HAL_MMC_STATE_RESET)
 8102f9e:	687b      	ldr	r3, [r7, #4]
 8102fa0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8102fa4:	b2db      	uxtb	r3, r3
 8102fa6:	2b00      	cmp	r3, #0
 8102fa8:	d105      	bne.n	8102fb6 <HAL_MMC_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hmmc->Lock = HAL_UNLOCKED;
 8102faa:	687b      	ldr	r3, [r7, #4]
 8102fac:	2200      	movs	r2, #0
 8102fae:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hmmc->MspInitCallback(hmmc);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_MMC_MspInit(hmmc);
 8102fb0:	6878      	ldr	r0, [r7, #4]
 8102fb2:	f7ff f955 	bl	8102260 <HAL_MMC_MspInit>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
  }

  hmmc->State = HAL_MMC_STATE_BUSY;
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	2203      	movs	r2, #3
 8102fba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_MMC_InitCard(hmmc) == HAL_ERROR)
 8102fbe:	6878      	ldr	r0, [r7, #4]
 8102fc0:	f000 f824 	bl	810300c <HAL_MMC_InitCard>
 8102fc4:	4603      	mov	r3, r0
 8102fc6:	2b01      	cmp	r3, #1
 8102fc8:	d101      	bne.n	8102fce <HAL_MMC_Init+0x42>
  {
    return HAL_ERROR;
 8102fca:	2301      	movs	r3, #1
 8102fcc:	e019      	b.n	8103002 <HAL_MMC_Init+0x76>
  }

  /* Initialize the error code */
  hmmc->ErrorCode = HAL_DMA_ERROR_NONE;
 8102fce:	687b      	ldr	r3, [r7, #4]
 8102fd0:	2200      	movs	r2, #0
 8102fd2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the MMC operation */
  hmmc->Context = MMC_CONTEXT_NONE;
 8102fd4:	687b      	ldr	r3, [r7, #4]
 8102fd6:	2200      	movs	r2, #0
 8102fd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the MMC state */
  hmmc->State = HAL_MMC_STATE_READY;
 8102fda:	687b      	ldr	r3, [r7, #4]
 8102fdc:	2201      	movs	r2, #1
 8102fde:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Configure bus width */
  if (hmmc->Init.BusWide != SDMMC_BUS_WIDE_1B)
 8102fe2:	687b      	ldr	r3, [r7, #4]
 8102fe4:	68db      	ldr	r3, [r3, #12]
 8102fe6:	2b00      	cmp	r3, #0
 8102fe8:	d00a      	beq.n	8103000 <HAL_MMC_Init+0x74>
  {
    if (HAL_MMC_ConfigWideBusOperation(hmmc, hmmc->Init.BusWide) != HAL_OK)
 8102fea:	687b      	ldr	r3, [r7, #4]
 8102fec:	68db      	ldr	r3, [r3, #12]
 8102fee:	4619      	mov	r1, r3
 8102ff0:	6878      	ldr	r0, [r7, #4]
 8102ff2:	f000 fd15 	bl	8103a20 <HAL_MMC_ConfigWideBusOperation>
 8102ff6:	4603      	mov	r3, r0
 8102ff8:	2b00      	cmp	r3, #0
 8102ffa:	d001      	beq.n	8103000 <HAL_MMC_Init+0x74>
    {
      return HAL_ERROR;
 8102ffc:	2301      	movs	r3, #1
 8102ffe:	e000      	b.n	8103002 <HAL_MMC_Init+0x76>
    }
  }

  return HAL_OK;
 8103000:	2300      	movs	r3, #0
}
 8103002:	4618      	mov	r0, r3
 8103004:	3708      	adds	r7, #8
 8103006:	46bd      	mov	sp, r7
 8103008:	bd80      	pop	{r7, pc}
	...

0810300c <HAL_MMC_InitCard>:
  * @note   This function initializes the MMC card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 810300c:	b590      	push	{r4, r7, lr}
 810300e:	b08d      	sub	sp, #52	@ 0x34
 8103010:	af02      	add	r7, sp, #8
 8103012:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  MMC_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for MMC card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8103014:	2300      	movs	r3, #0
 8103016:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8103018:	2300      	movs	r3, #0
 810301a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 810301c:	2300      	movs	r3, #0
 810301e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8103020:	2300      	movs	r3, #0
 8103022:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8103024:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 8103028:	f04f 0100 	mov.w	r1, #0
 810302c:	f004 f8a4 	bl	8107178 <HAL_RCCEx_GetPeriphCLKFreq>
 8103030:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 8103032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103034:	2b00      	cmp	r3, #0
 8103036:	d109      	bne.n	810304c <HAL_MMC_InitCard+0x40>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 8103038:	687b      	ldr	r3, [r7, #4]
 810303a:	2201      	movs	r2, #1
 810303c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 8103040:	687b      	ldr	r3, [r7, #4]
 8103042:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8103046:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103048:	2301      	movs	r3, #1
 810304a:	e070      	b.n	810312e <HAL_MMC_InitCard+0x122>
  }
  Init.ClockDiv = sdmmc_clk / (2U * MMC_INIT_FREQ);
 810304c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810304e:	0a1b      	lsrs	r3, r3, #8
 8103050:	4a39      	ldr	r2, [pc, #228]	@ (8103138 <HAL_MMC_InitCard+0x12c>)
 8103052:	fba2 2303 	umull	r2, r3, r2, r3
 8103056:	091b      	lsrs	r3, r3, #4
 8103058:	61fb      	str	r3, [r7, #28]
#if (USE_SD_TRANSCEIVER != 0U)
  Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
#endif /* USE_SD_TRANSCEIVER */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hmmc->Instance, Init);
 810305a:	687b      	ldr	r3, [r7, #4]
 810305c:	681c      	ldr	r4, [r3, #0]
 810305e:	466a      	mov	r2, sp
 8103060:	f107 0318 	add.w	r3, r7, #24
 8103064:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103068:	e882 0003 	stmia.w	r2, {r0, r1}
 810306c:	f107 030c 	add.w	r3, r7, #12
 8103070:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103072:	4620      	mov	r0, r4
 8103074:	f006 fe26 	bl	8109cc4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hmmc->Instance);
 8103078:	687b      	ldr	r3, [r7, #4]
 810307a:	681b      	ldr	r3, [r3, #0]
 810307c:	4618      	mov	r0, r3
 810307e:	f006 fe69 	bl	8109d54 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the MMC initialization sequence */
  if (Init.ClockDiv != 0U)
 8103082:	69fb      	ldr	r3, [r7, #28]
 8103084:	2b00      	cmp	r3, #0
 8103086:	d005      	beq.n	8103094 <HAL_MMC_InitCard+0x88>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 8103088:	69fb      	ldr	r3, [r7, #28]
 810308a:	005b      	lsls	r3, r3, #1
 810308c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8103092:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 8103094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103096:	2b00      	cmp	r3, #0
 8103098:	d007      	beq.n	81030aa <HAL_MMC_InitCard+0x9e>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 810309a:	4a28      	ldr	r2, [pc, #160]	@ (810313c <HAL_MMC_InitCard+0x130>)
 810309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810309e:	fbb2 f3f3 	udiv	r3, r2, r3
 81030a2:	3301      	adds	r3, #1
 81030a4:	4618      	mov	r0, r3
 81030a6:	f7ff fc99 	bl	81029dc <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = MMC_PowerON(hmmc);
 81030aa:	6878      	ldr	r0, [r7, #4]
 81030ac:	f000 fe82 	bl	8103db4 <MMC_PowerON>
 81030b0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 81030b2:	6a3b      	ldr	r3, [r7, #32]
 81030b4:	2b00      	cmp	r3, #0
 81030b6:	d00b      	beq.n	81030d0 <HAL_MMC_InitCard+0xc4>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 81030b8:	687b      	ldr	r3, [r7, #4]
 81030ba:	2201      	movs	r2, #1
 81030bc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 81030c0:	687b      	ldr	r3, [r7, #4]
 81030c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81030c4:	6a3b      	ldr	r3, [r7, #32]
 81030c6:	431a      	orrs	r2, r3
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81030cc:	2301      	movs	r3, #1
 81030ce:	e02e      	b.n	810312e <HAL_MMC_InitCard+0x122>
  }

  /* Card initialization */
  errorstate = MMC_InitCard(hmmc);
 81030d0:	6878      	ldr	r0, [r7, #4]
 81030d2:	f000 fd71 	bl	8103bb8 <MMC_InitCard>
 81030d6:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 81030d8:	6a3b      	ldr	r3, [r7, #32]
 81030da:	2b00      	cmp	r3, #0
 81030dc:	d00b      	beq.n	81030f6 <HAL_MMC_InitCard+0xea>
  {
    hmmc->State = HAL_MMC_STATE_READY;
 81030de:	687b      	ldr	r3, [r7, #4]
 81030e0:	2201      	movs	r2, #1
 81030e2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hmmc->ErrorCode |= errorstate;
 81030e6:	687b      	ldr	r3, [r7, #4]
 81030e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81030ea:	6a3b      	ldr	r3, [r7, #32]
 81030ec:	431a      	orrs	r2, r3
 81030ee:	687b      	ldr	r3, [r7, #4]
 81030f0:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 81030f2:	2301      	movs	r3, #1
 81030f4:	e01b      	b.n	810312e <HAL_MMC_InitCard+0x122>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hmmc->Instance, MMC_BLOCKSIZE);
 81030f6:	687b      	ldr	r3, [r7, #4]
 81030f8:	681b      	ldr	r3, [r3, #0]
 81030fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 81030fe:	4618      	mov	r0, r3
 8103100:	f006 febe 	bl	8109e80 <SDMMC_CmdBlockLength>
 8103104:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103106:	6a3b      	ldr	r3, [r7, #32]
 8103108:	2b00      	cmp	r3, #0
 810310a:	d00f      	beq.n	810312c <HAL_MMC_InitCard+0x120>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 810310c:	687b      	ldr	r3, [r7, #4]
 810310e:	681b      	ldr	r3, [r3, #0]
 8103110:	4a0b      	ldr	r2, [pc, #44]	@ (8103140 <HAL_MMC_InitCard+0x134>)
 8103112:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103114:	687b      	ldr	r3, [r7, #4]
 8103116:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103118:	6a3b      	ldr	r3, [r7, #32]
 810311a:	431a      	orrs	r2, r3
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103120:	687b      	ldr	r3, [r7, #4]
 8103122:	2201      	movs	r2, #1
 8103124:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103128:	2301      	movs	r3, #1
 810312a:	e000      	b.n	810312e <HAL_MMC_InitCard+0x122>
  }

  return HAL_OK;
 810312c:	2300      	movs	r3, #0
}
 810312e:	4618      	mov	r0, r3
 8103130:	372c      	adds	r7, #44	@ 0x2c
 8103132:	46bd      	mov	sp, r7
 8103134:	bd90      	pop	{r4, r7, pc}
 8103136:	bf00      	nop
 8103138:	014f8b59 	.word	0x014f8b59
 810313c:	00012110 	.word	0x00012110
 8103140:	1fe00fff 	.word	0x1fe00fff

08103144 <HAL_MMC_IRQHandler>:
  * @brief  This function handles MMC card interrupt request.
  * @param  hmmc: Pointer to MMC handle
  * @retval None
  */
void HAL_MMC_IRQHandler(MMC_HandleTypeDef *hmmc)
{
 8103144:	b580      	push	{r7, lr}
 8103146:	b084      	sub	sp, #16
 8103148:	af00      	add	r7, sp, #0
 810314a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hmmc->Context;
 810314c:	687b      	ldr	r3, [r7, #4]
 810314e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103150:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103158:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810315c:	2b00      	cmp	r3, #0
 810315e:	d008      	beq.n	8103172 <HAL_MMC_IRQHandler+0x2e>
 8103160:	68fb      	ldr	r3, [r7, #12]
 8103162:	f003 0308 	and.w	r3, r3, #8
 8103166:	2b00      	cmp	r3, #0
 8103168:	d003      	beq.n	8103172 <HAL_MMC_IRQHandler+0x2e>
  {
    MMC_Read_IT(hmmc);
 810316a:	6878      	ldr	r0, [r7, #4]
 810316c:	f000 ff66 	bl	810403c <MMC_Read_IT>
 8103170:	e194      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
  }

  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DATAEND) != RESET)
 8103172:	687b      	ldr	r3, [r7, #4]
 8103174:	681b      	ldr	r3, [r3, #0]
 8103176:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810317c:	2b00      	cmp	r3, #0
 810317e:	f000 80ac 	beq.w	81032da <HAL_MMC_IRQHandler+0x196>
  {
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DATAEND);
 8103182:	687b      	ldr	r3, [r7, #4]
 8103184:	681b      	ldr	r3, [r3, #0]
 8103186:	f44f 7280 	mov.w	r2, #256	@ 0x100
 810318a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810318c:	687b      	ldr	r3, [r7, #4]
 810318e:	681b      	ldr	r3, [r3, #0]
 8103190:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8103192:	687a      	ldr	r2, [r7, #4]
 8103194:	6812      	ldr	r2, [r2, #0]
 8103196:	f423 4341 	bic.w	r3, r3, #49408	@ 0xc100
 810319a:	f023 033a 	bic.w	r3, r3, #58	@ 0x3a
 810319e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                         SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                         SDMMC_IT_RXFIFOHF);

    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 81031a0:	687b      	ldr	r3, [r7, #4]
 81031a2:	681b      	ldr	r3, [r3, #0]
 81031a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 81031a6:	687b      	ldr	r3, [r7, #4]
 81031a8:	681b      	ldr	r3, [r3, #0]
 81031aa:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 81031ae:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 81031b0:	687b      	ldr	r3, [r7, #4]
 81031b2:	681b      	ldr	r3, [r3, #0]
 81031b4:	68da      	ldr	r2, [r3, #12]
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	681b      	ldr	r3, [r3, #0]
 81031ba:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 81031be:	60da      	str	r2, [r3, #12]

    if ((context & MMC_CONTEXT_DMA) != 0U)
 81031c0:	68fb      	ldr	r3, [r7, #12]
 81031c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81031c6:	2b00      	cmp	r3, #0
 81031c8:	d04b      	beq.n	8103262 <HAL_MMC_IRQHandler+0x11e>
    {
      hmmc->Instance->DLEN = 0;
 81031ca:	687b      	ldr	r3, [r7, #4]
 81031cc:	681b      	ldr	r3, [r3, #0]
 81031ce:	2200      	movs	r2, #0
 81031d0:	629a      	str	r2, [r3, #40]	@ 0x28
      hmmc->Instance->DCTRL = 0;
 81031d2:	687b      	ldr	r3, [r7, #4]
 81031d4:	681b      	ldr	r3, [r3, #0]
 81031d6:	2200      	movs	r2, #0
 81031d8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA ;
 81031da:	687b      	ldr	r3, [r7, #4]
 81031dc:	681b      	ldr	r3, [r3, #0]
 81031de:	2200      	movs	r2, #0
 81031e0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Stop Transfer for Write Multi blocks or Read Multi blocks */
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 81031e2:	68fb      	ldr	r3, [r7, #12]
 81031e4:	f003 0302 	and.w	r3, r3, #2
 81031e8:	2b00      	cmp	r3, #0
 81031ea:	d104      	bne.n	81031f6 <HAL_MMC_IRQHandler+0xb2>
 81031ec:	68fb      	ldr	r3, [r7, #12]
 81031ee:	f003 0320 	and.w	r3, r3, #32
 81031f2:	2b00      	cmp	r3, #0
 81031f4:	d011      	beq.n	810321a <HAL_MMC_IRQHandler+0xd6>
      {
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 81031f6:	687b      	ldr	r3, [r7, #4]
 81031f8:	681b      	ldr	r3, [r3, #0]
 81031fa:	4618      	mov	r0, r3
 81031fc:	f006 fe64 	bl	8109ec8 <SDMMC_CmdStopTransfer>
 8103200:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8103202:	68bb      	ldr	r3, [r7, #8]
 8103204:	2b00      	cmp	r3, #0
 8103206:	d008      	beq.n	810321a <HAL_MMC_IRQHandler+0xd6>
        {
          hmmc->ErrorCode |= errorstate;
 8103208:	687b      	ldr	r3, [r7, #4]
 810320a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810320c:	68bb      	ldr	r3, [r7, #8]
 810320e:	431a      	orrs	r2, r3
 8103210:	687b      	ldr	r3, [r7, #4]
 8103212:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
          hmmc->ErrorCallback(hmmc);
#else
          HAL_MMC_ErrorCallback(hmmc);
 8103214:	6878      	ldr	r0, [r7, #4]
 8103216:	f000 f959 	bl	81034cc <HAL_MMC_ErrorCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	681b      	ldr	r3, [r3, #0]
 810321e:	4a9c      	ldr	r2, [pc, #624]	@ (8103490 <HAL_MMC_IRQHandler+0x34c>)
 8103220:	639a      	str	r2, [r3, #56]	@ 0x38

      hmmc->State = HAL_MMC_STATE_READY;
 8103222:	687b      	ldr	r3, [r7, #4]
 8103224:	2201      	movs	r2, #1
 8103226:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810322a:	68fb      	ldr	r3, [r7, #12]
 810322c:	f003 0310 	and.w	r3, r3, #16
 8103230:	2b00      	cmp	r3, #0
 8103232:	d104      	bne.n	810323e <HAL_MMC_IRQHandler+0xfa>
 8103234:	68fb      	ldr	r3, [r7, #12]
 8103236:	f003 0320 	and.w	r3, r3, #32
 810323a:	2b00      	cmp	r3, #0
 810323c:	d002      	beq.n	8103244 <HAL_MMC_IRQHandler+0x100>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->TxCpltCallback(hmmc);
#else
        HAL_MMC_TxCpltCallback(hmmc);
 810323e:	6878      	ldr	r0, [r7, #4]
 8103240:	f000 f930 	bl	81034a4 <HAL_MMC_TxCpltCallback>
#endif /* USE_HAL_MMC_REGISTER_CALLBACKS */
      }
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8103244:	68fb      	ldr	r3, [r7, #12]
 8103246:	f003 0301 	and.w	r3, r3, #1
 810324a:	2b00      	cmp	r3, #0
 810324c:	d105      	bne.n	810325a <HAL_MMC_IRQHandler+0x116>
 810324e:	68fb      	ldr	r3, [r7, #12]
 8103250:	f003 0302 	and.w	r3, r3, #2
 8103254:	2b00      	cmp	r3, #0
 8103256:	f000 8121 	beq.w	810349c <HAL_MMC_IRQHandler+0x358>
      {
#if defined (USE_HAL_MMC_REGISTER_CALLBACKS) && (USE_HAL_MMC_REGISTER_CALLBACKS == 1U)
        hmmc->RxCpltCallback(hmmc);
#else
        HAL_MMC_RxCpltCallback(hmmc);
 810325a:	6878      	ldr	r0, [r7, #4]
 810325c:	f000 f92c 	bl	81034b8 <HAL_MMC_RxCpltCallback>

  else
  {
    /* Nothing to do */
  }
}
 8103260:	e11c      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_IT) != 0U)
 8103262:	68fb      	ldr	r3, [r7, #12]
 8103264:	f003 0308 	and.w	r3, r3, #8
 8103268:	2b00      	cmp	r3, #0
 810326a:	f000 8117 	beq.w	810349c <HAL_MMC_IRQHandler+0x358>
      if (((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 810326e:	68fb      	ldr	r3, [r7, #12]
 8103270:	f003 0302 	and.w	r3, r3, #2
 8103274:	2b00      	cmp	r3, #0
 8103276:	d104      	bne.n	8103282 <HAL_MMC_IRQHandler+0x13e>
 8103278:	68fb      	ldr	r3, [r7, #12]
 810327a:	f003 0320 	and.w	r3, r3, #32
 810327e:	2b00      	cmp	r3, #0
 8103280:	d011      	beq.n	81032a6 <HAL_MMC_IRQHandler+0x162>
        errorstate = SDMMC_CmdStopTransfer(hmmc->Instance);
 8103282:	687b      	ldr	r3, [r7, #4]
 8103284:	681b      	ldr	r3, [r3, #0]
 8103286:	4618      	mov	r0, r3
 8103288:	f006 fe1e 	bl	8109ec8 <SDMMC_CmdStopTransfer>
 810328c:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_MMC_ERROR_NONE)
 810328e:	68bb      	ldr	r3, [r7, #8]
 8103290:	2b00      	cmp	r3, #0
 8103292:	d008      	beq.n	81032a6 <HAL_MMC_IRQHandler+0x162>
          hmmc->ErrorCode |= errorstate;
 8103294:	687b      	ldr	r3, [r7, #4]
 8103296:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103298:	68bb      	ldr	r3, [r7, #8]
 810329a:	431a      	orrs	r2, r3
 810329c:	687b      	ldr	r3, [r7, #4]
 810329e:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_MMC_ErrorCallback(hmmc);
 81032a0:	6878      	ldr	r0, [r7, #4]
 81032a2:	f000 f913 	bl	81034cc <HAL_MMC_ErrorCallback>
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81032a6:	687b      	ldr	r3, [r7, #4]
 81032a8:	681b      	ldr	r3, [r3, #0]
 81032aa:	4a79      	ldr	r2, [pc, #484]	@ (8103490 <HAL_MMC_IRQHandler+0x34c>)
 81032ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->State = HAL_MMC_STATE_READY;
 81032ae:	687b      	ldr	r3, [r7, #4]
 81032b0:	2201      	movs	r2, #1
 81032b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      if (((context & MMC_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & MMC_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 81032b6:	68fb      	ldr	r3, [r7, #12]
 81032b8:	f003 0301 	and.w	r3, r3, #1
 81032bc:	2b00      	cmp	r3, #0
 81032be:	d104      	bne.n	81032ca <HAL_MMC_IRQHandler+0x186>
 81032c0:	68fb      	ldr	r3, [r7, #12]
 81032c2:	f003 0302 	and.w	r3, r3, #2
 81032c6:	2b00      	cmp	r3, #0
 81032c8:	d003      	beq.n	81032d2 <HAL_MMC_IRQHandler+0x18e>
        HAL_MMC_RxCpltCallback(hmmc);
 81032ca:	6878      	ldr	r0, [r7, #4]
 81032cc:	f000 f8f4 	bl	81034b8 <HAL_MMC_RxCpltCallback>
 81032d0:	e0e4      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
        HAL_MMC_TxCpltCallback(hmmc);
 81032d2:	6878      	ldr	r0, [r7, #4]
 81032d4:	f000 f8e6 	bl	81034a4 <HAL_MMC_TxCpltCallback>
}
 81032d8:	e0e0      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
  else if ((__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & MMC_CONTEXT_IT) != 0U))
 81032da:	687b      	ldr	r3, [r7, #4]
 81032dc:	681b      	ldr	r3, [r3, #0]
 81032de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81032e0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81032e4:	2b00      	cmp	r3, #0
 81032e6:	d008      	beq.n	81032fa <HAL_MMC_IRQHandler+0x1b6>
 81032e8:	68fb      	ldr	r3, [r7, #12]
 81032ea:	f003 0308 	and.w	r3, r3, #8
 81032ee:	2b00      	cmp	r3, #0
 81032f0:	d003      	beq.n	81032fa <HAL_MMC_IRQHandler+0x1b6>
    MMC_Write_IT(hmmc);
 81032f2:	6878      	ldr	r0, [r7, #4]
 81032f4:	f000 fee8 	bl	81040c8 <MMC_Write_IT>
 81032f8:	e0d0      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL |
 81032fa:	687b      	ldr	r3, [r7, #4]
 81032fc:	681b      	ldr	r3, [r3, #0]
 81032fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103300:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 8103304:	2b00      	cmp	r3, #0
 8103306:	f000 809a 	beq.w	810343e <HAL_MMC_IRQHandler+0x2fa>
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DCRCFAIL) != RESET)
 810330a:	687b      	ldr	r3, [r7, #4]
 810330c:	681b      	ldr	r3, [r3, #0]
 810330e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103310:	f003 0302 	and.w	r3, r3, #2
 8103314:	2b00      	cmp	r3, #0
 8103316:	d005      	beq.n	8103324 <HAL_MMC_IRQHandler+0x1e0>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810331c:	f043 0202 	orr.w	r2, r3, #2
 8103320:	687b      	ldr	r3, [r7, #4]
 8103322:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_DTIMEOUT) != RESET)
 8103324:	687b      	ldr	r3, [r7, #4]
 8103326:	681b      	ldr	r3, [r3, #0]
 8103328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810332a:	f003 0308 	and.w	r3, r3, #8
 810332e:	2b00      	cmp	r3, #0
 8103330:	d005      	beq.n	810333e <HAL_MMC_IRQHandler+0x1fa>
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103332:	687b      	ldr	r3, [r7, #4]
 8103334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103336:	f043 0208 	orr.w	r2, r3, #8
 810333a:	687b      	ldr	r3, [r7, #4]
 810333c:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_RXOVERR) != RESET)
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103344:	f003 0320 	and.w	r3, r3, #32
 8103348:	2b00      	cmp	r3, #0
 810334a:	d005      	beq.n	8103358 <HAL_MMC_IRQHandler+0x214>
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 810334c:	687b      	ldr	r3, [r7, #4]
 810334e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103350:	f043 0220 	orr.w	r2, r3, #32
 8103354:	687b      	ldr	r3, [r7, #4]
 8103356:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_IT_TXUNDERR) != RESET)
 8103358:	687b      	ldr	r3, [r7, #4]
 810335a:	681b      	ldr	r3, [r3, #0]
 810335c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810335e:	f003 0310 	and.w	r3, r3, #16
 8103362:	2b00      	cmp	r3, #0
 8103364:	d005      	beq.n	8103372 <HAL_MMC_IRQHandler+0x22e>
      hmmc->ErrorCode |= HAL_MMC_ERROR_TX_UNDERRUN;
 8103366:	687b      	ldr	r3, [r7, #4]
 8103368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810336a:	f043 0210 	orr.w	r2, r3, #16
 810336e:	687b      	ldr	r3, [r7, #4]
 8103370:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8103372:	687b      	ldr	r3, [r7, #4]
 8103374:	681b      	ldr	r3, [r3, #0]
 8103376:	4a46      	ldr	r2, [pc, #280]	@ (8103490 <HAL_MMC_IRQHandler+0x34c>)
 8103378:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 810337a:	687b      	ldr	r3, [r7, #4]
 810337c:	681b      	ldr	r3, [r3, #0]
 810337e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	681b      	ldr	r3, [r3, #0]
 8103384:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8103388:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 810338a:	687b      	ldr	r3, [r7, #4]
 810338c:	681b      	ldr	r3, [r3, #0]
 810338e:	68da      	ldr	r2, [r3, #12]
 8103390:	687b      	ldr	r3, [r7, #4]
 8103392:	681b      	ldr	r3, [r3, #0]
 8103394:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8103398:	60da      	str	r2, [r3, #12]
    hmmc->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 810339a:	687b      	ldr	r3, [r7, #4]
 810339c:	681b      	ldr	r3, [r3, #0]
 810339e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 81033a0:	687b      	ldr	r3, [r7, #4]
 81033a2:	681b      	ldr	r3, [r3, #0]
 81033a4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 81033a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hmmc->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 81033aa:	687b      	ldr	r3, [r7, #4]
 81033ac:	681b      	ldr	r3, [r3, #0]
 81033ae:	68da      	ldr	r2, [r3, #12]
 81033b0:	687b      	ldr	r3, [r7, #4]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 81033b8:	60da      	str	r2, [r3, #12]
    hmmc->ErrorCode |= SDMMC_CmdStopTransfer(hmmc->Instance);
 81033ba:	687b      	ldr	r3, [r7, #4]
 81033bc:	681b      	ldr	r3, [r3, #0]
 81033be:	4618      	mov	r0, r3
 81033c0:	f006 fd82 	bl	8109ec8 <SDMMC_CmdStopTransfer>
 81033c4:	4602      	mov	r2, r0
 81033c6:	687b      	ldr	r3, [r7, #4]
 81033c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81033ca:	431a      	orrs	r2, r3
 81033cc:	687b      	ldr	r3, [r7, #4]
 81033ce:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	68da      	ldr	r2, [r3, #12]
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 81033de:	60da      	str	r2, [r3, #12]
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_FLAG_DABORT);
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	681b      	ldr	r3, [r3, #0]
 81033e4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 81033e8:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & MMC_CONTEXT_IT) != 0U)
 81033ea:	68fb      	ldr	r3, [r7, #12]
 81033ec:	f003 0308 	and.w	r3, r3, #8
 81033f0:	2b00      	cmp	r3, #0
 81033f2:	d007      	beq.n	8103404 <HAL_MMC_IRQHandler+0x2c0>
      hmmc->State = HAL_MMC_STATE_READY;
 81033f4:	687b      	ldr	r3, [r7, #4]
 81033f6:	2201      	movs	r2, #1
 81033f8:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      HAL_MMC_ErrorCallback(hmmc);
 81033fc:	6878      	ldr	r0, [r7, #4]
 81033fe:	f000 f865 	bl	81034cc <HAL_MMC_ErrorCallback>
}
 8103402:	e04b      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
    else if ((context & MMC_CONTEXT_DMA) != 0U)
 8103404:	68fb      	ldr	r3, [r7, #12]
 8103406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810340a:	2b00      	cmp	r3, #0
 810340c:	d046      	beq.n	810349c <HAL_MMC_IRQHandler+0x358>
      if (hmmc->ErrorCode != HAL_MMC_ERROR_NONE)
 810340e:	687b      	ldr	r3, [r7, #4]
 8103410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103412:	2b00      	cmp	r3, #0
 8103414:	d042      	beq.n	810349c <HAL_MMC_IRQHandler+0x358>
        __HAL_MMC_DISABLE_IT(hmmc, SDMMC_IT_IDMABTC);
 8103416:	687b      	ldr	r3, [r7, #4]
 8103418:	681b      	ldr	r3, [r3, #0]
 810341a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810341c:	687b      	ldr	r3, [r7, #4]
 810341e:	681b      	ldr	r3, [r3, #0]
 8103420:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8103424:	63da      	str	r2, [r3, #60]	@ 0x3c
        hmmc->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8103426:	687b      	ldr	r3, [r7, #4]
 8103428:	681b      	ldr	r3, [r3, #0]
 810342a:	2200      	movs	r2, #0
 810342c:	651a      	str	r2, [r3, #80]	@ 0x50
        hmmc->State = HAL_MMC_STATE_READY;
 810342e:	687b      	ldr	r3, [r7, #4]
 8103430:	2201      	movs	r2, #1
 8103432:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_MMC_ErrorCallback(hmmc);
 8103436:	6878      	ldr	r0, [r7, #4]
 8103438:	f000 f848 	bl	81034cc <HAL_MMC_ErrorCallback>
}
 810343c:	e02e      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_IDMABTC) != RESET)
 810343e:	687b      	ldr	r3, [r7, #4]
 8103440:	681b      	ldr	r3, [r3, #0]
 8103442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103444:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8103448:	2b00      	cmp	r3, #0
 810344a:	d027      	beq.n	810349c <HAL_MMC_IRQHandler+0x358>
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_IT_IDMABTC);
 810344c:	687b      	ldr	r3, [r7, #4]
 810344e:	681b      	ldr	r3, [r3, #0]
 8103450:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8103454:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hmmc->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8103456:	687b      	ldr	r3, [r7, #4]
 8103458:	681b      	ldr	r3, [r3, #0]
 810345a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810345c:	f003 0304 	and.w	r3, r3, #4
 8103460:	2b00      	cmp	r3, #0
 8103462:	d10c      	bne.n	810347e <HAL_MMC_IRQHandler+0x33a>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8103464:	68fb      	ldr	r3, [r7, #12]
 8103466:	f003 0320 	and.w	r3, r3, #32
 810346a:	2b00      	cmp	r3, #0
 810346c:	d003      	beq.n	8103476 <HAL_MMC_IRQHandler+0x332>
        HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(hmmc);
 810346e:	6878      	ldr	r0, [r7, #4]
 8103470:	f000 ff32 	bl	81042d8 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>
}
 8103474:	e012      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
        HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(hmmc);
 8103476:	6878      	ldr	r0, [r7, #4]
 8103478:	f000 ff1a 	bl	81042b0 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>
}
 810347c:	e00e      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
      if ((context & MMC_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 810347e:	68fb      	ldr	r3, [r7, #12]
 8103480:	f003 0320 	and.w	r3, r3, #32
 8103484:	2b00      	cmp	r3, #0
 8103486:	d005      	beq.n	8103494 <HAL_MMC_IRQHandler+0x350>
        HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(hmmc);
 8103488:	6878      	ldr	r0, [r7, #4]
 810348a:	f000 ff1b 	bl	81042c4 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>
}
 810348e:	e005      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
 8103490:	18000f3a 	.word	0x18000f3a
        HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(hmmc);
 8103494:	6878      	ldr	r0, [r7, #4]
 8103496:	f000 ff01 	bl	810429c <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>
}
 810349a:	e7ff      	b.n	810349c <HAL_MMC_IRQHandler+0x358>
 810349c:	bf00      	nop
 810349e:	3710      	adds	r7, #16
 81034a0:	46bd      	mov	sp, r7
 81034a2:	bd80      	pop	{r7, pc}

081034a4 <HAL_MMC_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hmmc: Pointer to MMC handle
  * @retval None
  */
__weak void HAL_MMC_TxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 81034a4:	b480      	push	{r7}
 81034a6:	b083      	sub	sp, #12
 81034a8:	af00      	add	r7, sp, #0
 81034aa:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_TxCpltCallback can be implemented in the user file
   */
}
 81034ac:	bf00      	nop
 81034ae:	370c      	adds	r7, #12
 81034b0:	46bd      	mov	sp, r7
 81034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034b6:	4770      	bx	lr

081034b8 <HAL_MMC_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_RxCpltCallback(MMC_HandleTypeDef *hmmc)
{
 81034b8:	b480      	push	{r7}
 81034ba:	b083      	sub	sp, #12
 81034bc:	af00      	add	r7, sp, #0
 81034be:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_RxCpltCallback can be implemented in the user file
   */
}
 81034c0:	bf00      	nop
 81034c2:	370c      	adds	r7, #12
 81034c4:	46bd      	mov	sp, r7
 81034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034ca:	4770      	bx	lr

081034cc <HAL_MMC_ErrorCallback>:
  * @brief MMC error callbacks
  * @param hmmc: Pointer MMC handle
  * @retval None
  */
__weak void HAL_MMC_ErrorCallback(MMC_HandleTypeDef *hmmc)
{
 81034cc:	b480      	push	{r7}
 81034ce:	b083      	sub	sp, #12
 81034d0:	af00      	add	r7, sp, #0
 81034d2:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMC_ErrorCallback can be implemented in the user file
   */
}
 81034d4:	bf00      	nop
 81034d6:	370c      	adds	r7, #12
 81034d8:	46bd      	mov	sp, r7
 81034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 81034de:	4770      	bx	lr

081034e0 <HAL_MMC_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_MMC_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardCSD(MMC_HandleTypeDef *hmmc, HAL_MMC_CardCSDTypeDef *pCSD)
{
 81034e0:	b580      	push	{r7, lr}
 81034e2:	b084      	sub	sp, #16
 81034e4:	af00      	add	r7, sp, #0
 81034e6:	6078      	str	r0, [r7, #4]
 81034e8:	6039      	str	r1, [r7, #0]
  uint32_t block_nbr = 0;
 81034ea:	2300      	movs	r3, #0
 81034ec:	60fb      	str	r3, [r7, #12]

  pCSD->CSDStruct = (uint8_t)((hmmc->CSD[0] & 0xC0000000U) >> 30U);
 81034ee:	687b      	ldr	r3, [r7, #4]
 81034f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81034f2:	0f9b      	lsrs	r3, r3, #30
 81034f4:	b2da      	uxtb	r2, r3
 81034f6:	683b      	ldr	r3, [r7, #0]
 81034f8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hmmc->CSD[0] & 0x3C000000U) >> 26U);
 81034fa:	687b      	ldr	r3, [r7, #4]
 81034fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81034fe:	0e9b      	lsrs	r3, r3, #26
 8103500:	b2db      	uxtb	r3, r3
 8103502:	f003 030f 	and.w	r3, r3, #15
 8103506:	b2da      	uxtb	r2, r3
 8103508:	683b      	ldr	r3, [r7, #0]
 810350a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hmmc->CSD[0] & 0x03000000U) >> 24U);
 810350c:	687b      	ldr	r3, [r7, #4]
 810350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103510:	0e1b      	lsrs	r3, r3, #24
 8103512:	b2db      	uxtb	r3, r3
 8103514:	f003 0303 	and.w	r3, r3, #3
 8103518:	b2da      	uxtb	r2, r3
 810351a:	683b      	ldr	r3, [r7, #0]
 810351c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hmmc->CSD[0] & 0x00FF0000U) >> 16U);
 810351e:	687b      	ldr	r3, [r7, #4]
 8103520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103522:	0c1b      	lsrs	r3, r3, #16
 8103524:	b2da      	uxtb	r2, r3
 8103526:	683b      	ldr	r3, [r7, #0]
 8103528:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hmmc->CSD[0] & 0x0000FF00U) >> 8U);
 810352a:	687b      	ldr	r3, [r7, #4]
 810352c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810352e:	0a1b      	lsrs	r3, r3, #8
 8103530:	b2da      	uxtb	r2, r3
 8103532:	683b      	ldr	r3, [r7, #0]
 8103534:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hmmc->CSD[0] & 0x000000FFU);
 8103536:	687b      	ldr	r3, [r7, #4]
 8103538:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810353a:	b2da      	uxtb	r2, r3
 810353c:	683b      	ldr	r3, [r7, #0]
 810353e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hmmc->CSD[1] & 0xFFF00000U) >> 20U);
 8103540:	687b      	ldr	r3, [r7, #4]
 8103542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103544:	0d1b      	lsrs	r3, r3, #20
 8103546:	b29a      	uxth	r2, r3
 8103548:	683b      	ldr	r3, [r7, #0]
 810354a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hmmc->CSD[1] & 0x000F0000U) >> 16U);
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103550:	0c1b      	lsrs	r3, r3, #16
 8103552:	b2db      	uxtb	r3, r3
 8103554:	f003 030f 	and.w	r3, r3, #15
 8103558:	b2da      	uxtb	r2, r3
 810355a:	683b      	ldr	r3, [r7, #0]
 810355c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hmmc->CSD[1] & 0x00008000U) >> 15U);
 810355e:	687b      	ldr	r3, [r7, #4]
 8103560:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103562:	0bdb      	lsrs	r3, r3, #15
 8103564:	b2db      	uxtb	r3, r3
 8103566:	f003 0301 	and.w	r3, r3, #1
 810356a:	b2da      	uxtb	r2, r3
 810356c:	683b      	ldr	r3, [r7, #0]
 810356e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00004000U) >> 14U);
 8103570:	687b      	ldr	r3, [r7, #4]
 8103572:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103574:	0b9b      	lsrs	r3, r3, #14
 8103576:	b2db      	uxtb	r3, r3
 8103578:	f003 0301 	and.w	r3, r3, #1
 810357c:	b2da      	uxtb	r2, r3
 810357e:	683b      	ldr	r3, [r7, #0]
 8103580:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hmmc->CSD[1] & 0x00002000U) >> 13U);
 8103582:	687b      	ldr	r3, [r7, #4]
 8103584:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103586:	0b5b      	lsrs	r3, r3, #13
 8103588:	b2db      	uxtb	r3, r3
 810358a:	f003 0301 	and.w	r3, r3, #1
 810358e:	b2da      	uxtb	r2, r3
 8103590:	683b      	ldr	r3, [r7, #0]
 8103592:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hmmc->CSD[1] & 0x00001000U) >> 12U);
 8103594:	687b      	ldr	r3, [r7, #4]
 8103596:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103598:	0b1b      	lsrs	r3, r3, #12
 810359a:	b2db      	uxtb	r3, r3
 810359c:	f003 0301 	and.w	r3, r3, #1
 81035a0:	b2da      	uxtb	r2, r3
 81035a2:	683b      	ldr	r3, [r7, #0]
 81035a4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 81035a6:	683b      	ldr	r3, [r7, #0]
 81035a8:	2200      	movs	r2, #0
 81035aa:	735a      	strb	r2, [r3, #13]

  if (MMC_ReadExtCSD(hmmc, &block_nbr, 212, 0x0FFFFFFFU) != HAL_OK) /* Field SEC_COUNT [215:212] */
 81035ac:	f107 010c 	add.w	r1, r7, #12
 81035b0:	f06f 4370 	mvn.w	r3, #4026531840	@ 0xf0000000
 81035b4:	22d4      	movs	r2, #212	@ 0xd4
 81035b6:	6878      	ldr	r0, [r7, #4]
 81035b8:	f000 fc4c 	bl	8103e54 <MMC_ReadExtCSD>
 81035bc:	4603      	mov	r3, r0
 81035be:	2b00      	cmp	r3, #0
 81035c0:	d001      	beq.n	81035c6 <HAL_MMC_GetCardCSD+0xe6>
  {
    return HAL_ERROR;
 81035c2:	2301      	movs	r3, #1
 81035c4:	e129      	b.n	810381a <HAL_MMC_GetCardCSD+0x33a>
  }

  if (hmmc->MmcCard.CardType == MMC_LOW_CAPACITY_CARD)
 81035c6:	687b      	ldr	r3, [r7, #4]
 81035c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81035ca:	2b00      	cmp	r3, #0
 81035cc:	d163      	bne.n	8103696 <HAL_MMC_GetCardCSD+0x1b6>
  {
    pCSD->DeviceSize = (((hmmc->CSD[1] & 0x000003FFU) << 2U) | ((hmmc->CSD[2] & 0xC0000000U) >> 30U));
 81035ce:	687b      	ldr	r3, [r7, #4]
 81035d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81035d2:	009a      	lsls	r2, r3, #2
 81035d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 81035d8:	4013      	ands	r3, r2
 81035da:	687a      	ldr	r2, [r7, #4]
 81035dc:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 81035de:	0f92      	lsrs	r2, r2, #30
 81035e0:	431a      	orrs	r2, r3
 81035e2:	683b      	ldr	r3, [r7, #0]
 81035e4:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x38000000U) >> 27U);
 81035e6:	687b      	ldr	r3, [r7, #4]
 81035e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81035ea:	0edb      	lsrs	r3, r3, #27
 81035ec:	b2db      	uxtb	r3, r3
 81035ee:	f003 0307 	and.w	r3, r3, #7
 81035f2:	b2da      	uxtb	r2, r3
 81035f4:	683b      	ldr	r3, [r7, #0]
 81035f6:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x07000000U) >> 24U);
 81035f8:	687b      	ldr	r3, [r7, #4]
 81035fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81035fc:	0e1b      	lsrs	r3, r3, #24
 81035fe:	b2db      	uxtb	r3, r3
 8103600:	f003 0307 	and.w	r3, r3, #7
 8103604:	b2da      	uxtb	r2, r3
 8103606:	683b      	ldr	r3, [r7, #0]
 8103608:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hmmc->CSD[2] & 0x00E00000U) >> 21U);
 810360a:	687b      	ldr	r3, [r7, #4]
 810360c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810360e:	0d5b      	lsrs	r3, r3, #21
 8103610:	b2db      	uxtb	r3, r3
 8103612:	f003 0307 	and.w	r3, r3, #7
 8103616:	b2da      	uxtb	r2, r3
 8103618:	683b      	ldr	r3, [r7, #0]
 810361a:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hmmc->CSD[2] & 0x001C0000U) >> 18U);
 810361c:	687b      	ldr	r3, [r7, #4]
 810361e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103620:	0c9b      	lsrs	r3, r3, #18
 8103622:	b2db      	uxtb	r3, r3
 8103624:	f003 0307 	and.w	r3, r3, #7
 8103628:	b2da      	uxtb	r2, r3
 810362a:	683b      	ldr	r3, [r7, #0]
 810362c:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hmmc->CSD[2] & 0x00038000U) >> 15U);
 810362e:	687b      	ldr	r3, [r7, #4]
 8103630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103632:	0bdb      	lsrs	r3, r3, #15
 8103634:	b2db      	uxtb	r3, r3
 8103636:	f003 0307 	and.w	r3, r3, #7
 810363a:	b2da      	uxtb	r2, r3
 810363c:	683b      	ldr	r3, [r7, #0]
 810363e:	761a      	strb	r2, [r3, #24]

    hmmc->MmcCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8103640:	683b      	ldr	r3, [r7, #0]
 8103642:	691b      	ldr	r3, [r3, #16]
 8103644:	1c5a      	adds	r2, r3, #1
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 810364a:	683b      	ldr	r3, [r7, #0]
 810364c:	7e1b      	ldrb	r3, [r3, #24]
 810364e:	b2db      	uxtb	r3, r3
 8103650:	f003 0307 	and.w	r3, r3, #7
 8103654:	3302      	adds	r3, #2
 8103656:	2201      	movs	r2, #1
 8103658:	fa02 f303 	lsl.w	r3, r2, r3
 810365c:	687a      	ldr	r2, [r7, #4]
 810365e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8103660:	fb03 f202 	mul.w	r2, r3, r2
 8103664:	687b      	ldr	r3, [r7, #4]
 8103666:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8103668:	683b      	ldr	r3, [r7, #0]
 810366a:	7a1b      	ldrb	r3, [r3, #8]
 810366c:	b2db      	uxtb	r3, r3
 810366e:	f003 030f 	and.w	r3, r3, #15
 8103672:	2201      	movs	r2, #1
 8103674:	409a      	lsls	r2, r3
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	64da      	str	r2, [r3, #76]	@ 0x4c

    hmmc->MmcCard.LogBlockNbr = (hmmc->MmcCard.BlockNbr) * ((hmmc->MmcCard.BlockSize) / MMC_BLOCKSIZE);
 810367a:	687b      	ldr	r3, [r7, #4]
 810367c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 810367e:	687a      	ldr	r2, [r7, #4]
 8103680:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8103682:	0a52      	lsrs	r2, r2, #9
 8103684:	fb03 f202 	mul.w	r2, r3, r2
 8103688:	687b      	ldr	r3, [r7, #4]
 810368a:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.LogBlockSize = MMC_BLOCKSIZE;
 810368c:	687b      	ldr	r3, [r7, #4]
 810368e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103692:	655a      	str	r2, [r3, #84]	@ 0x54
 8103694:	e023      	b.n	81036de <HAL_MMC_GetCardCSD+0x1fe>
  }
  else if (hmmc->MmcCard.CardType == MMC_HIGH_CAPACITY_CARD)
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810369a:	2b01      	cmp	r3, #1
 810369c:	d10f      	bne.n	81036be <HAL_MMC_GetCardCSD+0x1de>
  {
    hmmc->MmcCard.BlockNbr = block_nbr;
 810369e:	68fa      	ldr	r2, [r7, #12]
 81036a0:	687b      	ldr	r3, [r7, #4]
 81036a2:	649a      	str	r2, [r3, #72]	@ 0x48
    hmmc->MmcCard.LogBlockNbr = hmmc->MmcCard.BlockNbr;
 81036a4:	687b      	ldr	r3, [r7, #4]
 81036a6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 81036a8:	687b      	ldr	r3, [r7, #4]
 81036aa:	651a      	str	r2, [r3, #80]	@ 0x50
    hmmc->MmcCard.BlockSize = MMC_BLOCKSIZE;
 81036ac:	687b      	ldr	r3, [r7, #4]
 81036ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 81036b2:	64da      	str	r2, [r3, #76]	@ 0x4c
    hmmc->MmcCard.LogBlockSize = hmmc->MmcCard.BlockSize;
 81036b4:	687b      	ldr	r3, [r7, #4]
 81036b6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 81036b8:	687b      	ldr	r3, [r7, #4]
 81036ba:	655a      	str	r2, [r3, #84]	@ 0x54
 81036bc:	e00f      	b.n	81036de <HAL_MMC_GetCardCSD+0x1fe>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81036be:	687b      	ldr	r3, [r7, #4]
 81036c0:	681b      	ldr	r3, [r3, #0]
 81036c2:	4a58      	ldr	r2, [pc, #352]	@ (8103824 <HAL_MMC_GetCardCSD+0x344>)
 81036c4:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 81036c6:	687b      	ldr	r3, [r7, #4]
 81036c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81036ca:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 81036ce:	687b      	ldr	r3, [r7, #4]
 81036d0:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 81036d2:	687b      	ldr	r3, [r7, #4]
 81036d4:	2201      	movs	r2, #1
 81036d6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 81036da:	2301      	movs	r3, #1
 81036dc:	e09d      	b.n	810381a <HAL_MMC_GetCardCSD+0x33a>
  }

  pCSD->EraseGrSize = (uint8_t)((hmmc->CSD[2] & 0x00004000U) >> 14U);
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81036e2:	0b9b      	lsrs	r3, r3, #14
 81036e4:	b2db      	uxtb	r3, r3
 81036e6:	f003 0301 	and.w	r3, r3, #1
 81036ea:	b2da      	uxtb	r2, r3
 81036ec:	683b      	ldr	r3, [r7, #0]
 81036ee:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hmmc->CSD[2] & 0x00003F80U) >> 7U);
 81036f0:	687b      	ldr	r3, [r7, #4]
 81036f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81036f4:	09db      	lsrs	r3, r3, #7
 81036f6:	b2db      	uxtb	r3, r3
 81036f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81036fc:	b2da      	uxtb	r2, r3
 81036fe:	683b      	ldr	r3, [r7, #0]
 8103700:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hmmc->CSD[2] & 0x0000007FU);
 8103702:	687b      	ldr	r3, [r7, #4]
 8103704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103706:	b2db      	uxtb	r3, r3
 8103708:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810370c:	b2da      	uxtb	r2, r3
 810370e:	683b      	ldr	r3, [r7, #0]
 8103710:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hmmc->CSD[3] & 0x80000000U) >> 31U);
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103716:	0fdb      	lsrs	r3, r3, #31
 8103718:	b2da      	uxtb	r2, r3
 810371a:	683b      	ldr	r3, [r7, #0]
 810371c:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hmmc->CSD[3] & 0x60000000U) >> 29U);
 810371e:	687b      	ldr	r3, [r7, #4]
 8103720:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103722:	0f5b      	lsrs	r3, r3, #29
 8103724:	b2db      	uxtb	r3, r3
 8103726:	f003 0303 	and.w	r3, r3, #3
 810372a:	b2da      	uxtb	r2, r3
 810372c:	683b      	ldr	r3, [r7, #0]
 810372e:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hmmc->CSD[3] & 0x1C000000U) >> 26U);
 8103730:	687b      	ldr	r3, [r7, #4]
 8103732:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103734:	0e9b      	lsrs	r3, r3, #26
 8103736:	b2db      	uxtb	r3, r3
 8103738:	f003 0307 	and.w	r3, r3, #7
 810373c:	b2da      	uxtb	r2, r3
 810373e:	683b      	ldr	r3, [r7, #0]
 8103740:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hmmc->CSD[3] & 0x03C00000U) >> 22U);
 8103742:	687b      	ldr	r3, [r7, #4]
 8103744:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103746:	0d9b      	lsrs	r3, r3, #22
 8103748:	b2db      	uxtb	r3, r3
 810374a:	f003 030f 	and.w	r3, r3, #15
 810374e:	b2da      	uxtb	r2, r3
 8103750:	683b      	ldr	r3, [r7, #0]
 8103752:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hmmc->CSD[3] & 0x00200000U) >> 21U);
 8103754:	687b      	ldr	r3, [r7, #4]
 8103756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103758:	0d5b      	lsrs	r3, r3, #21
 810375a:	b2db      	uxtb	r3, r3
 810375c:	f003 0301 	and.w	r3, r3, #1
 8103760:	b2da      	uxtb	r2, r3
 8103762:	683b      	ldr	r3, [r7, #0]
 8103764:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8103768:	683b      	ldr	r3, [r7, #0]
 810376a:	2200      	movs	r2, #0
 810376c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hmmc->CSD[3] & 0x00010000U) >> 16U);
 8103770:	687b      	ldr	r3, [r7, #4]
 8103772:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103774:	0c1b      	lsrs	r3, r3, #16
 8103776:	b2db      	uxtb	r3, r3
 8103778:	f003 0301 	and.w	r3, r3, #1
 810377c:	b2da      	uxtb	r2, r3
 810377e:	683b      	ldr	r3, [r7, #0]
 8103780:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hmmc->CSD[3] & 0x00008000U) >> 15U);
 8103784:	687b      	ldr	r3, [r7, #4]
 8103786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103788:	0bdb      	lsrs	r3, r3, #15
 810378a:	b2db      	uxtb	r3, r3
 810378c:	f003 0301 	and.w	r3, r3, #1
 8103790:	b2da      	uxtb	r2, r3
 8103792:	683b      	ldr	r3, [r7, #0]
 8103794:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hmmc->CSD[3] & 0x00004000U) >> 14U);
 8103798:	687b      	ldr	r3, [r7, #4]
 810379a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810379c:	0b9b      	lsrs	r3, r3, #14
 810379e:	b2db      	uxtb	r3, r3
 81037a0:	f003 0301 	and.w	r3, r3, #1
 81037a4:	b2da      	uxtb	r2, r3
 81037a6:	683b      	ldr	r3, [r7, #0]
 81037a8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00002000U) >> 13U);
 81037ac:	687b      	ldr	r3, [r7, #4]
 81037ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81037b0:	0b5b      	lsrs	r3, r3, #13
 81037b2:	b2db      	uxtb	r3, r3
 81037b4:	f003 0301 	and.w	r3, r3, #1
 81037b8:	b2da      	uxtb	r2, r3
 81037ba:	683b      	ldr	r3, [r7, #0]
 81037bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hmmc->CSD[3] & 0x00001000U) >> 12U);
 81037c0:	687b      	ldr	r3, [r7, #4]
 81037c2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81037c4:	0b1b      	lsrs	r3, r3, #12
 81037c6:	b2db      	uxtb	r3, r3
 81037c8:	f003 0301 	and.w	r3, r3, #1
 81037cc:	b2da      	uxtb	r2, r3
 81037ce:	683b      	ldr	r3, [r7, #0]
 81037d0:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hmmc->CSD[3] & 0x00000C00U) >> 10U);
 81037d4:	687b      	ldr	r3, [r7, #4]
 81037d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81037d8:	0a9b      	lsrs	r3, r3, #10
 81037da:	b2db      	uxtb	r3, r3
 81037dc:	f003 0303 	and.w	r3, r3, #3
 81037e0:	b2da      	uxtb	r2, r3
 81037e2:	683b      	ldr	r3, [r7, #0]
 81037e4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hmmc->CSD[3] & 0x00000300U) >> 8U);
 81037e8:	687b      	ldr	r3, [r7, #4]
 81037ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81037ec:	0a1b      	lsrs	r3, r3, #8
 81037ee:	b2db      	uxtb	r3, r3
 81037f0:	f003 0303 	and.w	r3, r3, #3
 81037f4:	b2da      	uxtb	r2, r3
 81037f6:	683b      	ldr	r3, [r7, #0]
 81037f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hmmc->CSD[3] & 0x000000FEU) >> 1U);
 81037fc:	687b      	ldr	r3, [r7, #4]
 81037fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103800:	085b      	lsrs	r3, r3, #1
 8103802:	b2db      	uxtb	r3, r3
 8103804:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8103808:	b2da      	uxtb	r2, r3
 810380a:	683b      	ldr	r3, [r7, #0]
 810380c:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 8103810:	683b      	ldr	r3, [r7, #0]
 8103812:	2201      	movs	r2, #1
 8103814:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 8103818:	2300      	movs	r3, #0
}
 810381a:	4618      	mov	r0, r3
 810381c:	3710      	adds	r7, #16
 810381e:	46bd      	mov	sp, r7
 8103820:	bd80      	pop	{r7, pc}
 8103822:	bf00      	nop
 8103824:	1fe00fff 	.word	0x1fe00fff

08103828 <HAL_MMC_GetCardExtCSD>:
  *         Extended CSD register parameters
  * @param  Timeout Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_GetCardExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pExtCSD, uint32_t Timeout)
{
 8103828:	b580      	push	{r7, lr}
 810382a:	b08e      	sub	sp, #56	@ 0x38
 810382c:	af00      	add	r7, sp, #0
 810382e:	60f8      	str	r0, [r7, #12]
 8103830:	60b9      	str	r1, [r7, #8]
 8103832:	607a      	str	r2, [r7, #4]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103834:	f7ff f8c6 	bl	81029c4 <HAL_GetTick>
 8103838:	62f8      	str	r0, [r7, #44]	@ 0x2c
  uint32_t count;
  uint32_t *tmp_buf;

  if (NULL == pExtCSD)
 810383a:	68bb      	ldr	r3, [r7, #8]
 810383c:	2b00      	cmp	r3, #0
 810383e:	d107      	bne.n	8103850 <HAL_MMC_GetCardExtCSD+0x28>
  {
    hmmc->ErrorCode |= HAL_MMC_ERROR_PARAM;
 8103840:	68fb      	ldr	r3, [r7, #12]
 8103842:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103844:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8103848:	68fb      	ldr	r3, [r7, #12]
 810384a:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 810384c:	2301      	movs	r3, #1
 810384e:	e0de      	b.n	8103a0e <HAL_MMC_GetCardExtCSD+0x1e6>
  }

  if (hmmc->State == HAL_MMC_STATE_READY)
 8103850:	68fb      	ldr	r3, [r7, #12]
 8103852:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8103856:	b2db      	uxtb	r3, r3
 8103858:	2b01      	cmp	r3, #1
 810385a:	f040 80d7 	bne.w	8103a0c <HAL_MMC_GetCardExtCSD+0x1e4>
  {
    hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 810385e:	68fb      	ldr	r3, [r7, #12]
 8103860:	2200      	movs	r2, #0
 8103862:	635a      	str	r2, [r3, #52]	@ 0x34

    hmmc->State = HAL_MMC_STATE_BUSY;
 8103864:	68fb      	ldr	r3, [r7, #12]
 8103866:	2203      	movs	r2, #3
 8103868:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hmmc->Instance->DCTRL = 0;
 810386c:	68fb      	ldr	r3, [r7, #12]
 810386e:	681b      	ldr	r3, [r3, #0]
 8103870:	2200      	movs	r2, #0
 8103872:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Initiaize the destination pointer */
    tmp_buf = pExtCSD;
 8103874:	68bb      	ldr	r3, [r7, #8]
 8103876:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Configure the MMC DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103878:	f04f 33ff 	mov.w	r3, #4294967295
 810387c:	613b      	str	r3, [r7, #16]
    config.DataLength    = MMC_BLOCKSIZE;
 810387e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103882:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103884:	2390      	movs	r3, #144	@ 0x90
 8103886:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103888:	2302      	movs	r3, #2
 810388a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 810388c:	2300      	movs	r3, #0
 810388e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8103890:	2300      	movs	r3, #0
 8103892:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103894:	68fb      	ldr	r3, [r7, #12]
 8103896:	681b      	ldr	r3, [r3, #0]
 8103898:	f107 0210 	add.w	r2, r7, #16
 810389c:	4611      	mov	r1, r2
 810389e:	4618      	mov	r0, r3
 81038a0:	f006 fac2 	bl	8109e28 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hmmc->Instance);
 81038a4:	68fb      	ldr	r3, [r7, #12]
 81038a6:	681b      	ldr	r3, [r3, #0]
 81038a8:	68da      	ldr	r2, [r3, #12]
 81038aa:	68fb      	ldr	r3, [r7, #12]
 81038ac:	681b      	ldr	r3, [r3, #0]
 81038ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 81038b2:	60da      	str	r2, [r3, #12]

    /* Send ExtCSD Read command to Card */
    errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 81038b4:	68fb      	ldr	r3, [r7, #12]
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	2100      	movs	r1, #0
 81038ba:	4618      	mov	r0, r3
 81038bc:	f006 fc4b 	bl	810a156 <SDMMC_CmdSendEXTCSD>
 81038c0:	62b8      	str	r0, [r7, #40]	@ 0x28
    if (errorstate != HAL_MMC_ERROR_NONE)
 81038c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81038c4:	2b00      	cmp	r3, #0
 81038c6:	d045      	beq.n	8103954 <HAL_MMC_GetCardExtCSD+0x12c>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81038c8:	68fb      	ldr	r3, [r7, #12]
 81038ca:	681b      	ldr	r3, [r3, #0]
 81038cc:	4a52      	ldr	r2, [pc, #328]	@ (8103a18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 81038ce:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= errorstate;
 81038d0:	68fb      	ldr	r3, [r7, #12]
 81038d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81038d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81038d6:	431a      	orrs	r2, r3
 81038d8:	68fb      	ldr	r3, [r7, #12]
 81038da:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81038dc:	68fb      	ldr	r3, [r7, #12]
 81038de:	2201      	movs	r2, #1
 81038e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 81038e4:	2301      	movs	r3, #1
 81038e6:	e092      	b.n	8103a0e <HAL_MMC_GetCardExtCSD+0x1e6>

    /* Poll on SDMMC flags */
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
                               SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
    {
      if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 81038e8:	68fb      	ldr	r3, [r7, #12]
 81038ea:	681b      	ldr	r3, [r3, #0]
 81038ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81038ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81038f2:	2b00      	cmp	r3, #0
 81038f4:	d013      	beq.n	810391e <HAL_MMC_GetCardExtCSD+0xf6>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81038f6:	2300      	movs	r3, #0
 81038f8:	637b      	str	r3, [r7, #52]	@ 0x34
 81038fa:	e00d      	b.n	8103918 <HAL_MMC_GetCardExtCSD+0xf0>
        {
          *tmp_buf = SDMMC_ReadFIFO(hmmc->Instance);
 81038fc:	68fb      	ldr	r3, [r7, #12]
 81038fe:	681b      	ldr	r3, [r3, #0]
 8103900:	4618      	mov	r0, r3
 8103902:	f006 fa09 	bl	8109d18 <SDMMC_ReadFIFO>
 8103906:	4602      	mov	r2, r0
 8103908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810390a:	601a      	str	r2, [r3, #0]
          tmp_buf++;
 810390c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810390e:	3304      	adds	r3, #4
 8103910:	633b      	str	r3, [r7, #48]	@ 0x30
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103914:	3301      	adds	r3, #1
 8103916:	637b      	str	r3, [r7, #52]	@ 0x34
 8103918:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810391a:	2b07      	cmp	r3, #7
 810391c:	d9ee      	bls.n	81038fc <HAL_MMC_GetCardExtCSD+0xd4>
        }
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 810391e:	f7ff f851 	bl	81029c4 <HAL_GetTick>
 8103922:	4602      	mov	r2, r0
 8103924:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8103926:	1ad3      	subs	r3, r2, r3
 8103928:	687a      	ldr	r2, [r7, #4]
 810392a:	429a      	cmp	r2, r3
 810392c:	d902      	bls.n	8103934 <HAL_MMC_GetCardExtCSD+0x10c>
 810392e:	687b      	ldr	r3, [r7, #4]
 8103930:	2b00      	cmp	r3, #0
 8103932:	d10f      	bne.n	8103954 <HAL_MMC_GetCardExtCSD+0x12c>
      {
        /* Clear all the static flags */
        __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103934:	68fb      	ldr	r3, [r7, #12]
 8103936:	681b      	ldr	r3, [r3, #0]
 8103938:	4a37      	ldr	r2, [pc, #220]	@ (8103a18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 810393a:	639a      	str	r2, [r3, #56]	@ 0x38
        hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 810393c:	68fb      	ldr	r3, [r7, #12]
 810393e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103940:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8103944:	68fb      	ldr	r3, [r7, #12]
 8103946:	635a      	str	r2, [r3, #52]	@ 0x34
        hmmc->State = HAL_MMC_STATE_READY;
 8103948:	68fb      	ldr	r3, [r7, #12]
 810394a:	2201      	movs	r2, #1
 810394c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_TIMEOUT;
 8103950:	2303      	movs	r3, #3
 8103952:	e05c      	b.n	8103a0e <HAL_MMC_GetCardExtCSD+0x1e6>
    while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR |
 8103954:	68fb      	ldr	r3, [r7, #12]
 8103956:	681b      	ldr	r3, [r3, #0]
 8103958:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810395a:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 810395e:	2b00      	cmp	r3, #0
 8103960:	d0c2      	beq.n	81038e8 <HAL_MMC_GetCardExtCSD+0xc0>
      }
    }

    __SDMMC_CMDTRANS_DISABLE(hmmc->Instance);
 8103962:	68fb      	ldr	r3, [r7, #12]
 8103964:	681b      	ldr	r3, [r3, #0]
 8103966:	68da      	ldr	r2, [r3, #12]
 8103968:	68fb      	ldr	r3, [r7, #12]
 810396a:	681b      	ldr	r3, [r3, #0]
 810396c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8103970:	60da      	str	r2, [r3, #12]

    /* Get error state */
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103972:	68fb      	ldr	r3, [r7, #12]
 8103974:	681b      	ldr	r3, [r3, #0]
 8103976:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103978:	f003 0308 	and.w	r3, r3, #8
 810397c:	2b00      	cmp	r3, #0
 810397e:	d00f      	beq.n	81039a0 <HAL_MMC_GetCardExtCSD+0x178>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103980:	68fb      	ldr	r3, [r7, #12]
 8103982:	681b      	ldr	r3, [r3, #0]
 8103984:	4a24      	ldr	r2, [pc, #144]	@ (8103a18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 8103986:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103988:	68fb      	ldr	r3, [r7, #12]
 810398a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810398c:	f043 0208 	orr.w	r2, r3, #8
 8103990:	68fb      	ldr	r3, [r7, #12]
 8103992:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103994:	68fb      	ldr	r3, [r7, #12]
 8103996:	2201      	movs	r2, #1
 8103998:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 810399c:	2301      	movs	r3, #1
 810399e:	e036      	b.n	8103a0e <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 81039a0:	68fb      	ldr	r3, [r7, #12]
 81039a2:	681b      	ldr	r3, [r3, #0]
 81039a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81039a6:	f003 0302 	and.w	r3, r3, #2
 81039aa:	2b00      	cmp	r3, #0
 81039ac:	d00f      	beq.n	81039ce <HAL_MMC_GetCardExtCSD+0x1a6>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81039ae:	68fb      	ldr	r3, [r7, #12]
 81039b0:	681b      	ldr	r3, [r3, #0]
 81039b2:	4a19      	ldr	r2, [pc, #100]	@ (8103a18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 81039b4:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 81039b6:	68fb      	ldr	r3, [r7, #12]
 81039b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81039ba:	f043 0202 	orr.w	r2, r3, #2
 81039be:	68fb      	ldr	r3, [r7, #12]
 81039c0:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81039c2:	68fb      	ldr	r3, [r7, #12]
 81039c4:	2201      	movs	r2, #1
 81039c6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 81039ca:	2301      	movs	r3, #1
 81039cc:	e01f      	b.n	8103a0e <HAL_MMC_GetCardExtCSD+0x1e6>
    }
    else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 81039ce:	68fb      	ldr	r3, [r7, #12]
 81039d0:	681b      	ldr	r3, [r3, #0]
 81039d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81039d4:	f003 0320 	and.w	r3, r3, #32
 81039d8:	2b00      	cmp	r3, #0
 81039da:	d00f      	beq.n	81039fc <HAL_MMC_GetCardExtCSD+0x1d4>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 81039dc:	68fb      	ldr	r3, [r7, #12]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	4a0d      	ldr	r2, [pc, #52]	@ (8103a18 <HAL_MMC_GetCardExtCSD+0x1f0>)
 81039e2:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 81039e4:	68fb      	ldr	r3, [r7, #12]
 81039e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81039e8:	f043 0220 	orr.w	r2, r3, #32
 81039ec:	68fb      	ldr	r3, [r7, #12]
 81039ee:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 81039f0:	68fb      	ldr	r3, [r7, #12]
 81039f2:	2201      	movs	r2, #1
 81039f4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 81039f8:	2301      	movs	r3, #1
 81039fa:	e008      	b.n	8103a0e <HAL_MMC_GetCardExtCSD+0x1e6>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 81039fc:	68fb      	ldr	r3, [r7, #12]
 81039fe:	681b      	ldr	r3, [r3, #0]
 8103a00:	4a06      	ldr	r2, [pc, #24]	@ (8103a1c <HAL_MMC_GetCardExtCSD+0x1f4>)
 8103a02:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->State = HAL_MMC_STATE_READY;
 8103a04:	68fb      	ldr	r3, [r7, #12]
 8103a06:	2201      	movs	r2, #1
 8103a08:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  }

  return HAL_OK;
 8103a0c:	2300      	movs	r3, #0
}
 8103a0e:	4618      	mov	r0, r3
 8103a10:	3738      	adds	r7, #56	@ 0x38
 8103a12:	46bd      	mov	sp, r7
 8103a14:	bd80      	pop	{r7, pc}
 8103a16:	bf00      	nop
 8103a18:	1fe00fff 	.word	0x1fe00fff
 8103a1c:	18000f3a 	.word	0x18000f3a

08103a20 <HAL_MMC_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MMC_ConfigWideBusOperation(MMC_HandleTypeDef *hmmc, uint32_t WideMode)
{
 8103a20:	b5b0      	push	{r4, r5, r7, lr}
 8103a22:	b08c      	sub	sp, #48	@ 0x30
 8103a24:	af02      	add	r7, sp, #8
 8103a26:	6078      	str	r0, [r7, #4]
 8103a28:	6039      	str	r1, [r7, #0]
  uint32_t count;
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t response = 0U;
 8103a2a:	2300      	movs	r3, #0
 8103a2c:	61fb      	str	r3, [r7, #28]

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hmmc->State = HAL_MMC_STATE_BUSY;
 8103a2e:	687b      	ldr	r3, [r7, #4]
 8103a30:	2203      	movs	r2, #3
 8103a32:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Check and update the power class if needed */
  if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_BUSSPEED) != 0U)
 8103a36:	687b      	ldr	r3, [r7, #4]
 8103a38:	681b      	ldr	r3, [r3, #0]
 8103a3a:	685b      	ldr	r3, [r3, #4]
 8103a3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8103a40:	2b00      	cmp	r3, #0
 8103a42:	d014      	beq.n	8103a6e <HAL_MMC_ConfigWideBusOperation+0x4e>
  {
    if ((hmmc->Instance->CLKCR & SDMMC_CLKCR_DDR) != 0U)
 8103a44:	687b      	ldr	r3, [r7, #4]
 8103a46:	681b      	ldr	r3, [r3, #0]
 8103a48:	685b      	ldr	r3, [r3, #4]
 8103a4a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8103a4e:	2b00      	cmp	r3, #0
 8103a50:	d006      	beq.n	8103a60 <HAL_MMC_ConfigWideBusOperation+0x40>
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DDR);
 8103a52:	2204      	movs	r2, #4
 8103a54:	6839      	ldr	r1, [r7, #0]
 8103a56:	6878      	ldr	r0, [r7, #4]
 8103a58:	f000 fb80 	bl	810415c <MMC_PwrClassUpdate>
 8103a5c:	6238      	str	r0, [r7, #32]
 8103a5e:	e00c      	b.n	8103a7a <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
    else
    {
      errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_HIGH);
 8103a60:	2202      	movs	r2, #2
 8103a62:	6839      	ldr	r1, [r7, #0]
 8103a64:	6878      	ldr	r0, [r7, #4]
 8103a66:	f000 fb79 	bl	810415c <MMC_PwrClassUpdate>
 8103a6a:	6238      	str	r0, [r7, #32]
 8103a6c:	e005      	b.n	8103a7a <HAL_MMC_ConfigWideBusOperation+0x5a>
    }
  }
  else
  {
    errorstate = MMC_PwrClassUpdate(hmmc, WideMode, SDMMC_SPEED_MODE_DEFAULT);
 8103a6e:	2201      	movs	r2, #1
 8103a70:	6839      	ldr	r1, [r7, #0]
 8103a72:	6878      	ldr	r0, [r7, #4]
 8103a74:	f000 fb72 	bl	810415c <MMC_PwrClassUpdate>
 8103a78:	6238      	str	r0, [r7, #32]
  }

  if (errorstate == HAL_MMC_ERROR_NONE)
 8103a7a:	6a3b      	ldr	r3, [r7, #32]
 8103a7c:	2b00      	cmp	r3, #0
 8103a7e:	d17b      	bne.n	8103b78 <HAL_MMC_ConfigWideBusOperation+0x158>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8103a80:	683b      	ldr	r3, [r7, #0]
 8103a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103a86:	d107      	bne.n	8103a98 <HAL_MMC_ConfigWideBusOperation+0x78>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70200U);
 8103a88:	687b      	ldr	r3, [r7, #4]
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	4946      	ldr	r1, [pc, #280]	@ (8103ba8 <HAL_MMC_ConfigWideBusOperation+0x188>)
 8103a8e:	4618      	mov	r0, r3
 8103a90:	f006 fb3e 	bl	810a110 <SDMMC_CmdSwitch>
 8103a94:	6238      	str	r0, [r7, #32]
 8103a96:	e019      	b.n	8103acc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8103a98:	683b      	ldr	r3, [r7, #0]
 8103a9a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103a9e:	d107      	bne.n	8103ab0 <HAL_MMC_ConfigWideBusOperation+0x90>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70100U);
 8103aa0:	687b      	ldr	r3, [r7, #4]
 8103aa2:	681b      	ldr	r3, [r3, #0]
 8103aa4:	4941      	ldr	r1, [pc, #260]	@ (8103bac <HAL_MMC_ConfigWideBusOperation+0x18c>)
 8103aa6:	4618      	mov	r0, r3
 8103aa8:	f006 fb32 	bl	810a110 <SDMMC_CmdSwitch>
 8103aac:	6238      	str	r0, [r7, #32]
 8103aae:	e00d      	b.n	8103acc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8103ab0:	683b      	ldr	r3, [r7, #0]
 8103ab2:	2b00      	cmp	r3, #0
 8103ab4:	d107      	bne.n	8103ac6 <HAL_MMC_ConfigWideBusOperation+0xa6>
    {
      errorstate = SDMMC_CmdSwitch(hmmc->Instance, 0x03B70000U);
 8103ab6:	687b      	ldr	r3, [r7, #4]
 8103ab8:	681b      	ldr	r3, [r3, #0]
 8103aba:	493d      	ldr	r1, [pc, #244]	@ (8103bb0 <HAL_MMC_ConfigWideBusOperation+0x190>)
 8103abc:	4618      	mov	r0, r3
 8103abe:	f006 fb27 	bl	810a110 <SDMMC_CmdSwitch>
 8103ac2:	6238      	str	r0, [r7, #32]
 8103ac4:	e002      	b.n	8103acc <HAL_MMC_ConfigWideBusOperation+0xac>
    }
    else
    {
      /* WideMode is not a valid argument*/
      errorstate = HAL_MMC_ERROR_PARAM;
 8103ac6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8103aca:	623b      	str	r3, [r7, #32]
    }

    /* Check for switch error and violation of the trial number of sending CMD 13 */
    if (errorstate == HAL_MMC_ERROR_NONE)
 8103acc:	6a3b      	ldr	r3, [r7, #32]
 8103ace:	2b00      	cmp	r3, #0
 8103ad0:	d152      	bne.n	8103b78 <HAL_MMC_ConfigWideBusOperation+0x158>
    {
      /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
      count = SDMMC_MAX_TRIAL;
 8103ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8103ad6:	627b      	str	r3, [r7, #36]	@ 0x24
      do
      {
        errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103ad8:	687b      	ldr	r3, [r7, #4]
 8103ada:	681a      	ldr	r2, [r3, #0]
 8103adc:	687b      	ldr	r3, [r7, #4]
 8103ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103ae0:	041b      	lsls	r3, r3, #16
 8103ae2:	4619      	mov	r1, r3
 8103ae4:	4610      	mov	r0, r2
 8103ae6:	f006 fad0 	bl	810a08a <SDMMC_CmdSendStatus>
 8103aea:	6238      	str	r0, [r7, #32]
        if (errorstate != HAL_MMC_ERROR_NONE)
 8103aec:	6a3b      	ldr	r3, [r7, #32]
 8103aee:	2b00      	cmp	r3, #0
 8103af0:	d112      	bne.n	8103b18 <HAL_MMC_ConfigWideBusOperation+0xf8>
        {
          break;
        }

        /* Get command response */
        response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103af2:	687b      	ldr	r3, [r7, #4]
 8103af4:	681b      	ldr	r3, [r3, #0]
 8103af6:	2100      	movs	r1, #0
 8103af8:	4618      	mov	r0, r3
 8103afa:	f006 f982 	bl	8109e02 <SDMMC_GetResponse>
 8103afe:	61f8      	str	r0, [r7, #28]
        count--;
 8103b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103b02:	3b01      	subs	r3, #1
 8103b04:	627b      	str	r3, [r7, #36]	@ 0x24
      } while (((response & 0x100U) == 0U) && (count != 0U));
 8103b06:	69fb      	ldr	r3, [r7, #28]
 8103b08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8103b0c:	2b00      	cmp	r3, #0
 8103b0e:	d104      	bne.n	8103b1a <HAL_MMC_ConfigWideBusOperation+0xfa>
 8103b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103b12:	2b00      	cmp	r3, #0
 8103b14:	d1e0      	bne.n	8103ad8 <HAL_MMC_ConfigWideBusOperation+0xb8>
 8103b16:	e000      	b.n	8103b1a <HAL_MMC_ConfigWideBusOperation+0xfa>
          break;
 8103b18:	bf00      	nop

      /* Check the status after the switch command execution */
      if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8103b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103b1c:	2b00      	cmp	r3, #0
 8103b1e:	d025      	beq.n	8103b6c <HAL_MMC_ConfigWideBusOperation+0x14c>
 8103b20:	6a3b      	ldr	r3, [r7, #32]
 8103b22:	2b00      	cmp	r3, #0
 8103b24:	d122      	bne.n	8103b6c <HAL_MMC_ConfigWideBusOperation+0x14c>
      {
        /* Check the bit SWITCH_ERROR of the device status */
        if ((response & 0x80U) != 0U)
 8103b26:	69fb      	ldr	r3, [r7, #28]
 8103b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103b2c:	2b00      	cmp	r3, #0
 8103b2e:	d003      	beq.n	8103b38 <HAL_MMC_ConfigWideBusOperation+0x118>
        {
          errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8103b30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8103b34:	623b      	str	r3, [r7, #32]
        if ((response & 0x80U) != 0U)
 8103b36:	e01f      	b.n	8103b78 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
        else
        {
          /* Configure the SDMMC peripheral */
          Init = hmmc->Init;
 8103b38:	687b      	ldr	r3, [r7, #4]
 8103b3a:	f107 0408 	add.w	r4, r7, #8
 8103b3e:	1d1d      	adds	r5, r3, #4
 8103b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103b44:	682b      	ldr	r3, [r5, #0]
 8103b46:	6023      	str	r3, [r4, #0]
          Init.BusWide = WideMode;
 8103b48:	683b      	ldr	r3, [r7, #0]
 8103b4a:	613b      	str	r3, [r7, #16]
          (void)SDMMC_Init(hmmc->Instance, Init);
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681c      	ldr	r4, [r3, #0]
 8103b50:	466a      	mov	r2, sp
 8103b52:	f107 0314 	add.w	r3, r7, #20
 8103b56:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103b5a:	e882 0003 	stmia.w	r2, {r0, r1}
 8103b5e:	f107 0308 	add.w	r3, r7, #8
 8103b62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103b64:	4620      	mov	r0, r4
 8103b66:	f006 f8ad 	bl	8109cc4 <SDMMC_Init>
        if ((response & 0x80U) != 0U)
 8103b6a:	e005      	b.n	8103b78 <HAL_MMC_ConfigWideBusOperation+0x158>
        }
      }
      else if (count == 0U)
 8103b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103b6e:	2b00      	cmp	r3, #0
 8103b70:	d102      	bne.n	8103b78 <HAL_MMC_ConfigWideBusOperation+0x158>
      {
        errorstate = SDMMC_ERROR_TIMEOUT;
 8103b72:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8103b76:	623b      	str	r3, [r7, #32]
      }
    }
  }

  /* Change State */
  hmmc->State = HAL_MMC_STATE_READY;
 8103b78:	687b      	ldr	r3, [r7, #4]
 8103b7a:	2201      	movs	r2, #1
 8103b7c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (errorstate != HAL_MMC_ERROR_NONE)
 8103b80:	6a3b      	ldr	r3, [r7, #32]
 8103b82:	2b00      	cmp	r3, #0
 8103b84:	d00b      	beq.n	8103b9e <HAL_MMC_ConfigWideBusOperation+0x17e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	681b      	ldr	r3, [r3, #0]
 8103b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8103bb4 <HAL_MMC_ConfigWideBusOperation+0x194>)
 8103b8c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103b8e:	687b      	ldr	r3, [r7, #4]
 8103b90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103b92:	6a3b      	ldr	r3, [r7, #32]
 8103b94:	431a      	orrs	r2, r3
 8103b96:	687b      	ldr	r3, [r7, #4]
 8103b98:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 8103b9a:	2301      	movs	r3, #1
 8103b9c:	e000      	b.n	8103ba0 <HAL_MMC_ConfigWideBusOperation+0x180>
  }

  return HAL_OK;
 8103b9e:	2300      	movs	r3, #0
}
 8103ba0:	4618      	mov	r0, r3
 8103ba2:	3728      	adds	r7, #40	@ 0x28
 8103ba4:	46bd      	mov	sp, r7
 8103ba6:	bdb0      	pop	{r4, r5, r7, pc}
 8103ba8:	03b70200 	.word	0x03b70200
 8103bac:	03b70100 	.word	0x03b70100
 8103bb0:	03b70000 	.word	0x03b70000
 8103bb4:	1fe00fff 	.word	0x1fe00fff

08103bb8 <MMC_InitCard>:
  * @brief  Initializes the mmc card.
  * @param  hmmc: Pointer to MMC handle
  * @retval MMC Card error state
  */
static uint32_t MMC_InitCard(MMC_HandleTypeDef *hmmc)
{
 8103bb8:	b5b0      	push	{r4, r5, r7, lr}
 8103bba:	b096      	sub	sp, #88	@ 0x58
 8103bbc:	af02      	add	r7, sp, #8
 8103bbe:	6078      	str	r0, [r7, #4]
  HAL_MMC_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t mmc_rca = 2U;
 8103bc0:	2302      	movs	r3, #2
 8103bc2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  MMC_InitTypeDef Init;

  /* Check the power State */
  if (SDMMC_GetPowerState(hmmc->Instance) == 0U)
 8103bc6:	687b      	ldr	r3, [r7, #4]
 8103bc8:	681b      	ldr	r3, [r3, #0]
 8103bca:	4618      	mov	r0, r3
 8103bcc:	f006 f8d3 	bl	8109d76 <SDMMC_GetPowerState>
 8103bd0:	4603      	mov	r3, r0
 8103bd2:	2b00      	cmp	r3, #0
 8103bd4:	d102      	bne.n	8103bdc <MMC_InitCard+0x24>
  {
    /* Power off */
    return HAL_MMC_ERROR_REQUEST_NOT_APPLICABLE;
 8103bd6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8103bda:	e0e6      	b.n	8103daa <MMC_InitCard+0x1f2>
  }

  /* Send CMD2 ALL_SEND_CID */
  errorstate = SDMMC_CmdSendCID(hmmc->Instance);
 8103bdc:	687b      	ldr	r3, [r7, #4]
 8103bde:	681b      	ldr	r3, [r3, #0]
 8103be0:	4618      	mov	r0, r3
 8103be2:	f006 f9ee 	bl	8109fc2 <SDMMC_CmdSendCID>
 8103be6:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103be8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103bea:	2b00      	cmp	r3, #0
 8103bec:	d001      	beq.n	8103bf2 <MMC_InitCard+0x3a>
  {
    return errorstate;
 8103bee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103bf0:	e0db      	b.n	8103daa <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card identification number data */
    hmmc->CID[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103bf2:	687b      	ldr	r3, [r7, #4]
 8103bf4:	681b      	ldr	r3, [r3, #0]
 8103bf6:	2100      	movs	r1, #0
 8103bf8:	4618      	mov	r0, r3
 8103bfa:	f006 f902 	bl	8109e02 <SDMMC_GetResponse>
 8103bfe:	4602      	mov	r2, r0
 8103c00:	687b      	ldr	r3, [r7, #4]
 8103c02:	669a      	str	r2, [r3, #104]	@ 0x68
    hmmc->CID[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8103c04:	687b      	ldr	r3, [r7, #4]
 8103c06:	681b      	ldr	r3, [r3, #0]
 8103c08:	2104      	movs	r1, #4
 8103c0a:	4618      	mov	r0, r3
 8103c0c:	f006 f8f9 	bl	8109e02 <SDMMC_GetResponse>
 8103c10:	4602      	mov	r2, r0
 8103c12:	687b      	ldr	r3, [r7, #4]
 8103c14:	66da      	str	r2, [r3, #108]	@ 0x6c
    hmmc->CID[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8103c16:	687b      	ldr	r3, [r7, #4]
 8103c18:	681b      	ldr	r3, [r3, #0]
 8103c1a:	2108      	movs	r1, #8
 8103c1c:	4618      	mov	r0, r3
 8103c1e:	f006 f8f0 	bl	8109e02 <SDMMC_GetResponse>
 8103c22:	4602      	mov	r2, r0
 8103c24:	687b      	ldr	r3, [r7, #4]
 8103c26:	671a      	str	r2, [r3, #112]	@ 0x70
    hmmc->CID[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8103c28:	687b      	ldr	r3, [r7, #4]
 8103c2a:	681b      	ldr	r3, [r3, #0]
 8103c2c:	210c      	movs	r1, #12
 8103c2e:	4618      	mov	r0, r3
 8103c30:	f006 f8e7 	bl	8109e02 <SDMMC_GetResponse>
 8103c34:	4602      	mov	r2, r0
 8103c36:	687b      	ldr	r3, [r7, #4]
 8103c38:	675a      	str	r2, [r3, #116]	@ 0x74
  }

  /* Send CMD3 SET_REL_ADDR with RCA = 2 (should be greater than 1) */
  /* MMC Card publishes its RCA. */
  errorstate = SDMMC_CmdSetRelAddMmc(hmmc->Instance, mmc_rca);
 8103c3a:	687b      	ldr	r3, [r7, #4]
 8103c3c:	681b      	ldr	r3, [r3, #0]
 8103c3e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8103c42:	4611      	mov	r1, r2
 8103c44:	4618      	mov	r0, r3
 8103c46:	f006 f9fb 	bl	810a040 <SDMMC_CmdSetRelAddMmc>
 8103c4a:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c4e:	2b00      	cmp	r3, #0
 8103c50:	d001      	beq.n	8103c56 <MMC_InitCard+0x9e>
  {
    return errorstate;
 8103c52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c54:	e0a9      	b.n	8103daa <MMC_InitCard+0x1f2>
  }

  /* Get the MMC card RCA */
  hmmc->MmcCard.RelCardAdd = mmc_rca;
 8103c56:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8103c5a:	687b      	ldr	r3, [r7, #4]
 8103c5c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Send CMD9 SEND_CSD with argument as card's RCA */
  errorstate = SDMMC_CmdSendCSD(hmmc->Instance, (uint32_t)(hmmc->MmcCard.RelCardAdd << 16U));
 8103c5e:	687b      	ldr	r3, [r7, #4]
 8103c60:	681a      	ldr	r2, [r3, #0]
 8103c62:	687b      	ldr	r3, [r7, #4]
 8103c64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103c66:	041b      	lsls	r3, r3, #16
 8103c68:	4619      	mov	r1, r3
 8103c6a:	4610      	mov	r0, r2
 8103c6c:	f006 f9c8 	bl	810a000 <SDMMC_CmdSendCSD>
 8103c70:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103c72:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c74:	2b00      	cmp	r3, #0
 8103c76:	d001      	beq.n	8103c7c <MMC_InitCard+0xc4>
  {
    return errorstate;
 8103c78:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103c7a:	e096      	b.n	8103daa <MMC_InitCard+0x1f2>
  }
  else
  {
    /* Get Card Specific Data */
    hmmc->CSD[0U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103c7c:	687b      	ldr	r3, [r7, #4]
 8103c7e:	681b      	ldr	r3, [r3, #0]
 8103c80:	2100      	movs	r1, #0
 8103c82:	4618      	mov	r0, r3
 8103c84:	f006 f8bd 	bl	8109e02 <SDMMC_GetResponse>
 8103c88:	4602      	mov	r2, r0
 8103c8a:	687b      	ldr	r3, [r7, #4]
 8103c8c:	659a      	str	r2, [r3, #88]	@ 0x58
    hmmc->CSD[1U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2);
 8103c8e:	687b      	ldr	r3, [r7, #4]
 8103c90:	681b      	ldr	r3, [r3, #0]
 8103c92:	2104      	movs	r1, #4
 8103c94:	4618      	mov	r0, r3
 8103c96:	f006 f8b4 	bl	8109e02 <SDMMC_GetResponse>
 8103c9a:	4602      	mov	r2, r0
 8103c9c:	687b      	ldr	r3, [r7, #4]
 8103c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
    hmmc->CSD[2U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP3);
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	2108      	movs	r1, #8
 8103ca6:	4618      	mov	r0, r3
 8103ca8:	f006 f8ab 	bl	8109e02 <SDMMC_GetResponse>
 8103cac:	4602      	mov	r2, r0
 8103cae:	687b      	ldr	r3, [r7, #4]
 8103cb0:	661a      	str	r2, [r3, #96]	@ 0x60
    hmmc->CSD[3U] = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP4);
 8103cb2:	687b      	ldr	r3, [r7, #4]
 8103cb4:	681b      	ldr	r3, [r3, #0]
 8103cb6:	210c      	movs	r1, #12
 8103cb8:	4618      	mov	r0, r3
 8103cba:	f006 f8a2 	bl	8109e02 <SDMMC_GetResponse>
 8103cbe:	4602      	mov	r2, r0
 8103cc0:	687b      	ldr	r3, [r7, #4]
 8103cc2:	665a      	str	r2, [r3, #100]	@ 0x64
  }

  /* Get the Card Class */
  hmmc->MmcCard.Class = (SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP2) >> 20U);
 8103cc4:	687b      	ldr	r3, [r7, #4]
 8103cc6:	681b      	ldr	r3, [r3, #0]
 8103cc8:	2104      	movs	r1, #4
 8103cca:	4618      	mov	r0, r3
 8103ccc:	f006 f899 	bl	8109e02 <SDMMC_GetResponse>
 8103cd0:	4603      	mov	r3, r0
 8103cd2:	0d1a      	lsrs	r2, r3, #20
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103cd8:	687b      	ldr	r3, [r7, #4]
 8103cda:	681a      	ldr	r2, [r3, #0]
 8103cdc:	687b      	ldr	r3, [r7, #4]
 8103cde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103ce0:	041b      	lsls	r3, r3, #16
 8103ce2:	4619      	mov	r1, r3
 8103ce4:	4610      	mov	r0, r2
 8103ce6:	f006 f92b 	bl	8109f40 <SDMMC_CmdSelDesel>
 8103cea:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103cec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103cee:	2b00      	cmp	r3, #0
 8103cf0:	d001      	beq.n	8103cf6 <MMC_InitCard+0x13e>
  {
    return errorstate;
 8103cf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103cf4:	e059      	b.n	8103daa <MMC_InitCard+0x1f2>
  }

  /* Get CSD parameters */
  if (HAL_MMC_GetCardCSD(hmmc, &CSD) != HAL_OK)
 8103cf6:	f107 031c 	add.w	r3, r7, #28
 8103cfa:	4619      	mov	r1, r3
 8103cfc:	6878      	ldr	r0, [r7, #4]
 8103cfe:	f7ff fbef 	bl	81034e0 <HAL_MMC_GetCardCSD>
 8103d02:	4603      	mov	r3, r0
 8103d04:	2b00      	cmp	r3, #0
 8103d06:	d002      	beq.n	8103d0e <MMC_InitCard+0x156>
  {
    return hmmc->ErrorCode;
 8103d08:	687b      	ldr	r3, [r7, #4]
 8103d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103d0c:	e04d      	b.n	8103daa <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103d0e:	687b      	ldr	r3, [r7, #4]
 8103d10:	681a      	ldr	r2, [r3, #0]
 8103d12:	687b      	ldr	r3, [r7, #4]
 8103d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103d16:	041b      	lsls	r3, r3, #16
 8103d18:	4619      	mov	r1, r3
 8103d1a:	4610      	mov	r0, r2
 8103d1c:	f006 f9b5 	bl	810a08a <SDMMC_CmdSendStatus>
 8103d20:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103d22:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103d24:	2b00      	cmp	r3, #0
 8103d26:	d005      	beq.n	8103d34 <MMC_InitCard+0x17c>
  {
    hmmc->ErrorCode |= errorstate;
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103d2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103d2e:	431a      	orrs	r2, r3
 8103d30:	687b      	ldr	r3, [r7, #4]
 8103d32:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Get Extended CSD parameters */
  if (HAL_MMC_GetCardExtCSD(hmmc, hmmc->Ext_CSD, SDMMC_DATATIMEOUT) != HAL_OK)
 8103d34:	687b      	ldr	r3, [r7, #4]
 8103d36:	3378      	adds	r3, #120	@ 0x78
 8103d38:	f04f 32ff 	mov.w	r2, #4294967295
 8103d3c:	4619      	mov	r1, r3
 8103d3e:	6878      	ldr	r0, [r7, #4]
 8103d40:	f7ff fd72 	bl	8103828 <HAL_MMC_GetCardExtCSD>
 8103d44:	4603      	mov	r3, r0
 8103d46:	2b00      	cmp	r3, #0
 8103d48:	d002      	beq.n	8103d50 <MMC_InitCard+0x198>
  {
    return hmmc->ErrorCode;
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103d4e:	e02c      	b.n	8103daa <MMC_InitCard+0x1f2>
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	681a      	ldr	r2, [r3, #0]
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103d58:	041b      	lsls	r3, r3, #16
 8103d5a:	4619      	mov	r1, r3
 8103d5c:	4610      	mov	r0, r2
 8103d5e:	f006 f994 	bl	810a08a <SDMMC_CmdSendStatus>
 8103d62:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103d64:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103d66:	2b00      	cmp	r3, #0
 8103d68:	d005      	beq.n	8103d76 <MMC_InitCard+0x1be>
  {
    hmmc->ErrorCode |= errorstate;
 8103d6a:	687b      	ldr	r3, [r7, #4]
 8103d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8103d70:	431a      	orrs	r2, r3
 8103d72:	687b      	ldr	r3, [r7, #4]
 8103d74:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Configure the SDMMC peripheral */
  Init = hmmc->Init;
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	f107 0408 	add.w	r4, r7, #8
 8103d7c:	1d1d      	adds	r5, r3, #4
 8103d7e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8103d80:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8103d82:	682b      	ldr	r3, [r5, #0]
 8103d84:	6023      	str	r3, [r4, #0]
  Init.BusWide = SDMMC_BUS_WIDE_1B;
 8103d86:	2300      	movs	r3, #0
 8103d88:	613b      	str	r3, [r7, #16]
  (void)SDMMC_Init(hmmc->Instance, Init);
 8103d8a:	687b      	ldr	r3, [r7, #4]
 8103d8c:	681c      	ldr	r4, [r3, #0]
 8103d8e:	466a      	mov	r2, sp
 8103d90:	f107 0314 	add.w	r3, r7, #20
 8103d94:	e893 0003 	ldmia.w	r3, {r0, r1}
 8103d98:	e882 0003 	stmia.w	r2, {r0, r1}
 8103d9c:	f107 0308 	add.w	r3, r7, #8
 8103da0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8103da2:	4620      	mov	r0, r4
 8103da4:	f005 ff8e 	bl	8109cc4 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_MMC_ERROR_NONE;
 8103da8:	2300      	movs	r3, #0
}
 8103daa:	4618      	mov	r0, r3
 8103dac:	3750      	adds	r7, #80	@ 0x50
 8103dae:	46bd      	mov	sp, r7
 8103db0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08103db4 <MMC_PowerON>:
  *         in the MMC handle.
  * @param  hmmc: Pointer to MMC handle
  * @retval error state
  */
static uint32_t MMC_PowerON(MMC_HandleTypeDef *hmmc)
{
 8103db4:	b580      	push	{r7, lr}
 8103db6:	b086      	sub	sp, #24
 8103db8:	af00      	add	r7, sp, #0
 8103dba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8103dbc:	2300      	movs	r3, #0
 8103dbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8103dc0:	2300      	movs	r3, #0
 8103dc2:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8103dc4:	2300      	movs	r3, #0
 8103dc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hmmc->Instance);
 8103dc8:	687b      	ldr	r3, [r7, #4]
 8103dca:	681b      	ldr	r3, [r3, #0]
 8103dcc:	4618      	mov	r0, r3
 8103dce:	f006 f8da 	bl	8109f86 <SDMMC_CmdGoIdleState>
 8103dd2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103dd4:	68fb      	ldr	r3, [r7, #12]
 8103dd6:	2b00      	cmp	r3, #0
 8103dd8:	d027      	beq.n	8103e2a <MMC_PowerON+0x76>
  {
    return errorstate;
 8103dda:	68fb      	ldr	r3, [r7, #12]
 8103ddc:	e034      	b.n	8103e48 <MMC_PowerON+0x94>
  }

  while (validvoltage == 0U)
  {
    if (count++ == SDMMC_MAX_VOLT_TRIAL)
 8103dde:	68bb      	ldr	r3, [r7, #8]
 8103de0:	1c5a      	adds	r2, r3, #1
 8103de2:	60ba      	str	r2, [r7, #8]
 8103de4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8103de8:	4293      	cmp	r3, r2
 8103dea:	d102      	bne.n	8103df2 <MMC_PowerON+0x3e>
    {
      return HAL_MMC_ERROR_INVALID_VOLTRANGE;
 8103dec:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8103df0:	e02a      	b.n	8103e48 <MMC_PowerON+0x94>
    }

    /* SEND CMD1 APP_CMD with voltage range as argument */
    errorstate = SDMMC_CmdOpCondition(hmmc->Instance, MMC_VOLTAGE_RANGE);
 8103df2:	687b      	ldr	r3, [r7, #4]
 8103df4:	681b      	ldr	r3, [r3, #0]
 8103df6:	4916      	ldr	r1, [pc, #88]	@ (8103e50 <MMC_PowerON+0x9c>)
 8103df8:	4618      	mov	r0, r3
 8103dfa:	f006 f969 	bl	810a0d0 <SDMMC_CmdOpCondition>
 8103dfe:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_MMC_ERROR_NONE)
 8103e00:	68fb      	ldr	r3, [r7, #12]
 8103e02:	2b00      	cmp	r3, #0
 8103e04:	d002      	beq.n	8103e0c <MMC_PowerON+0x58>
    {
      return HAL_MMC_ERROR_UNSUPPORTED_FEATURE;
 8103e06:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8103e0a:	e01d      	b.n	8103e48 <MMC_PowerON+0x94>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	2100      	movs	r1, #0
 8103e12:	4618      	mov	r0, r3
 8103e14:	f005 fff5 	bl	8109e02 <SDMMC_GetResponse>
 8103e18:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8103e1a:	697b      	ldr	r3, [r7, #20]
 8103e1c:	0fdb      	lsrs	r3, r3, #31
 8103e1e:	2b01      	cmp	r3, #1
 8103e20:	d101      	bne.n	8103e26 <MMC_PowerON+0x72>
 8103e22:	2301      	movs	r3, #1
 8103e24:	e000      	b.n	8103e28 <MMC_PowerON+0x74>
 8103e26:	2300      	movs	r3, #0
 8103e28:	613b      	str	r3, [r7, #16]
  while (validvoltage == 0U)
 8103e2a:	693b      	ldr	r3, [r7, #16]
 8103e2c:	2b00      	cmp	r3, #0
 8103e2e:	d0d6      	beq.n	8103dde <MMC_PowerON+0x2a>
  }

  /* When power routine is finished and command returns valid voltage */
  if (((response & (0xFF000000U)) >> 24) == 0xC0U)
 8103e30:	697b      	ldr	r3, [r7, #20]
 8103e32:	0e1b      	lsrs	r3, r3, #24
 8103e34:	2bc0      	cmp	r3, #192	@ 0xc0
 8103e36:	d103      	bne.n	8103e40 <MMC_PowerON+0x8c>
  {
    hmmc->MmcCard.CardType = MMC_HIGH_CAPACITY_CARD;
 8103e38:	687b      	ldr	r3, [r7, #4]
 8103e3a:	2201      	movs	r2, #1
 8103e3c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8103e3e:	e002      	b.n	8103e46 <MMC_PowerON+0x92>
  }
  else
  {
    hmmc->MmcCard.CardType = MMC_LOW_CAPACITY_CARD;
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	2200      	movs	r2, #0
 8103e44:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return HAL_MMC_ERROR_NONE;
 8103e46:	2300      	movs	r3, #0
}
 8103e48:	4618      	mov	r0, r3
 8103e4a:	3718      	adds	r7, #24
 8103e4c:	46bd      	mov	sp, r7
 8103e4e:	bd80      	pop	{r7, pc}
 8103e50:	c0ff8000 	.word	0xc0ff8000

08103e54 <MMC_ReadExtCSD>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
static HAL_StatusTypeDef MMC_ReadExtCSD(MMC_HandleTypeDef *hmmc, uint32_t *pFieldData,
                                        uint16_t FieldIndex, uint32_t Timeout)
{
 8103e54:	b580      	push	{r7, lr}
 8103e56:	b090      	sub	sp, #64	@ 0x40
 8103e58:	af00      	add	r7, sp, #0
 8103e5a:	60f8      	str	r0, [r7, #12]
 8103e5c:	60b9      	str	r1, [r7, #8]
 8103e5e:	603b      	str	r3, [r7, #0]
 8103e60:	4613      	mov	r3, r2
 8103e62:	80fb      	strh	r3, [r7, #6]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8103e64:	f7fe fdae 	bl	81029c4 <HAL_GetTick>
 8103e68:	6378      	str	r0, [r7, #52]	@ 0x34
  uint32_t count;
  uint32_t i = 0;
 8103e6a:	2300      	movs	r3, #0
 8103e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t tmp_data;

  hmmc->ErrorCode = HAL_MMC_ERROR_NONE;
 8103e6e:	68fb      	ldr	r3, [r7, #12]
 8103e70:	2200      	movs	r2, #0
 8103e72:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize data control register */
  hmmc->Instance->DCTRL = 0;
 8103e74:	68fb      	ldr	r3, [r7, #12]
 8103e76:	681b      	ldr	r3, [r3, #0]
 8103e78:	2200      	movs	r2, #0
 8103e7a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Configure the MMC DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8103e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8103e80:	617b      	str	r3, [r7, #20]
  config.DataLength    = MMC_BLOCKSIZE;
 8103e82:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8103e86:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8103e88:	2390      	movs	r3, #144	@ 0x90
 8103e8a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8103e8c:	2302      	movs	r3, #2
 8103e8e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8103e90:	2300      	movs	r3, #0
 8103e92:	627b      	str	r3, [r7, #36]	@ 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8103e94:	2301      	movs	r3, #1
 8103e96:	62bb      	str	r3, [r7, #40]	@ 0x28
  (void)SDMMC_ConfigData(hmmc->Instance, &config);
 8103e98:	68fb      	ldr	r3, [r7, #12]
 8103e9a:	681b      	ldr	r3, [r3, #0]
 8103e9c:	f107 0214 	add.w	r2, r7, #20
 8103ea0:	4611      	mov	r1, r2
 8103ea2:	4618      	mov	r0, r3
 8103ea4:	f005 ffc0 	bl	8109e28 <SDMMC_ConfigData>

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdSendEXTCSD(hmmc->Instance, 0);
 8103ea8:	68fb      	ldr	r3, [r7, #12]
 8103eaa:	681b      	ldr	r3, [r3, #0]
 8103eac:	2100      	movs	r1, #0
 8103eae:	4618      	mov	r0, r3
 8103eb0:	f006 f951 	bl	810a156 <SDMMC_CmdSendEXTCSD>
 8103eb4:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8103eb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103eb8:	2b00      	cmp	r3, #0
 8103eba:	d04e      	beq.n	8103f5a <MMC_ReadExtCSD+0x106>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103ebc:	68fb      	ldr	r3, [r7, #12]
 8103ebe:	681b      	ldr	r3, [r3, #0]
 8103ec0:	4a5c      	ldr	r2, [pc, #368]	@ (8104034 <MMC_ReadExtCSD+0x1e0>)
 8103ec2:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= errorstate;
 8103ec4:	68fb      	ldr	r3, [r7, #12]
 8103ec6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103ec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103eca:	431a      	orrs	r2, r3
 8103ecc:	68fb      	ldr	r3, [r7, #12]
 8103ece:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103ed0:	68fb      	ldr	r3, [r7, #12]
 8103ed2:	2201      	movs	r2, #1
 8103ed4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103ed8:	2301      	movs	r3, #1
 8103eda:	e0a6      	b.n	810402a <MMC_ReadExtCSD+0x1d6>

  /* Poll on SDMMC flags */
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
                             SDMMC_FLAG_DATAEND))
  {
    if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXFIFOHF))
 8103edc:	68fb      	ldr	r3, [r7, #12]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103ee2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d01c      	beq.n	8103f24 <MMC_ReadExtCSD+0xd0>
    {
      /* Read data from SDMMC Rx FIFO */
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103eea:	2300      	movs	r3, #0
 8103eec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103eee:	e013      	b.n	8103f18 <MMC_ReadExtCSD+0xc4>
      {
        tmp_data = SDMMC_ReadFIFO(hmmc->Instance);
 8103ef0:	68fb      	ldr	r3, [r7, #12]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	4618      	mov	r0, r3
 8103ef6:	f005 ff0f 	bl	8109d18 <SDMMC_ReadFIFO>
 8103efa:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* eg : SEC_COUNT   : FieldIndex = 212 => i+count = 53 */
        /*      DEVICE_TYPE : FieldIndex = 196 => i+count = 49 */
        if ((i + count) == ((uint32_t)FieldIndex / 4U))
 8103efc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8103efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103f00:	4413      	add	r3, r2
 8103f02:	88fa      	ldrh	r2, [r7, #6]
 8103f04:	0892      	lsrs	r2, r2, #2
 8103f06:	b292      	uxth	r2, r2
 8103f08:	4293      	cmp	r3, r2
 8103f0a:	d102      	bne.n	8103f12 <MMC_ReadExtCSD+0xbe>
        {
          *pFieldData = tmp_data;
 8103f0c:	68bb      	ldr	r3, [r7, #8]
 8103f0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103f10:	601a      	str	r2, [r3, #0]
      for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8103f12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103f14:	3301      	adds	r3, #1
 8103f16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103f18:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103f1a:	2b07      	cmp	r3, #7
 8103f1c:	d9e8      	bls.n	8103ef0 <MMC_ReadExtCSD+0x9c>
        }
      }
      i += 8U;
 8103f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103f20:	3308      	adds	r3, #8
 8103f22:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 8103f24:	f7fe fd4e 	bl	81029c4 <HAL_GetTick>
 8103f28:	4602      	mov	r2, r0
 8103f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103f2c:	1ad3      	subs	r3, r2, r3
 8103f2e:	683a      	ldr	r2, [r7, #0]
 8103f30:	429a      	cmp	r2, r3
 8103f32:	d902      	bls.n	8103f3a <MMC_ReadExtCSD+0xe6>
 8103f34:	683b      	ldr	r3, [r7, #0]
 8103f36:	2b00      	cmp	r3, #0
 8103f38:	d10f      	bne.n	8103f5a <MMC_ReadExtCSD+0x106>
    {
      /* Clear all the static flags */
      __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103f3a:	68fb      	ldr	r3, [r7, #12]
 8103f3c:	681b      	ldr	r3, [r3, #0]
 8103f3e:	4a3d      	ldr	r2, [pc, #244]	@ (8104034 <MMC_ReadExtCSD+0x1e0>)
 8103f40:	639a      	str	r2, [r3, #56]	@ 0x38
      hmmc->ErrorCode |= HAL_MMC_ERROR_TIMEOUT;
 8103f42:	68fb      	ldr	r3, [r7, #12]
 8103f44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f46:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8103f4a:	68fb      	ldr	r3, [r7, #12]
 8103f4c:	635a      	str	r2, [r3, #52]	@ 0x34
      hmmc->State = HAL_MMC_STATE_READY;
 8103f4e:	68fb      	ldr	r3, [r7, #12]
 8103f50:	2201      	movs	r2, #1
 8103f52:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 8103f56:	2303      	movs	r3, #3
 8103f58:	e067      	b.n	810402a <MMC_ReadExtCSD+0x1d6>
  while (!__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 8103f5a:	68fb      	ldr	r3, [r7, #12]
 8103f5c:	681b      	ldr	r3, [r3, #0]
 8103f5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f60:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8103f64:	2b00      	cmp	r3, #0
 8103f66:	d0b9      	beq.n	8103edc <MMC_ReadExtCSD+0x88>
    }
  }

  /* Get error state */
  if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DTIMEOUT))
 8103f68:	68fb      	ldr	r3, [r7, #12]
 8103f6a:	681b      	ldr	r3, [r3, #0]
 8103f6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f6e:	f003 0308 	and.w	r3, r3, #8
 8103f72:	2b00      	cmp	r3, #0
 8103f74:	d00f      	beq.n	8103f96 <MMC_ReadExtCSD+0x142>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103f76:	68fb      	ldr	r3, [r7, #12]
 8103f78:	681b      	ldr	r3, [r3, #0]
 8103f7a:	4a2e      	ldr	r2, [pc, #184]	@ (8104034 <MMC_ReadExtCSD+0x1e0>)
 8103f7c:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_TIMEOUT;
 8103f7e:	68fb      	ldr	r3, [r7, #12]
 8103f80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f82:	f043 0208 	orr.w	r2, r3, #8
 8103f86:	68fb      	ldr	r3, [r7, #12]
 8103f88:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103f8a:	68fb      	ldr	r3, [r7, #12]
 8103f8c:	2201      	movs	r2, #1
 8103f8e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103f92:	2301      	movs	r3, #1
 8103f94:	e049      	b.n	810402a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_DCRCFAIL))
 8103f96:	68fb      	ldr	r3, [r7, #12]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103f9c:	f003 0302 	and.w	r3, r3, #2
 8103fa0:	2b00      	cmp	r3, #0
 8103fa2:	d00f      	beq.n	8103fc4 <MMC_ReadExtCSD+0x170>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103fa4:	68fb      	ldr	r3, [r7, #12]
 8103fa6:	681b      	ldr	r3, [r3, #0]
 8103fa8:	4a22      	ldr	r2, [pc, #136]	@ (8104034 <MMC_ReadExtCSD+0x1e0>)
 8103faa:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_DATA_CRC_FAIL;
 8103fac:	68fb      	ldr	r3, [r7, #12]
 8103fae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103fb0:	f043 0202 	orr.w	r2, r3, #2
 8103fb4:	68fb      	ldr	r3, [r7, #12]
 8103fb6:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103fb8:	68fb      	ldr	r3, [r7, #12]
 8103fba:	2201      	movs	r2, #1
 8103fbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103fc0:	2301      	movs	r3, #1
 8103fc2:	e032      	b.n	810402a <MMC_ReadExtCSD+0x1d6>
  }
  else if (__HAL_MMC_GET_FLAG(hmmc, SDMMC_FLAG_RXOVERR))
 8103fc4:	68fb      	ldr	r3, [r7, #12]
 8103fc6:	681b      	ldr	r3, [r3, #0]
 8103fc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103fca:	f003 0320 	and.w	r3, r3, #32
 8103fce:	2b00      	cmp	r3, #0
 8103fd0:	d00f      	beq.n	8103ff2 <MMC_ReadExtCSD+0x19e>
  {
    /* Clear all the static flags */
    __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_FLAGS);
 8103fd2:	68fb      	ldr	r3, [r7, #12]
 8103fd4:	681b      	ldr	r3, [r3, #0]
 8103fd6:	4a17      	ldr	r2, [pc, #92]	@ (8104034 <MMC_ReadExtCSD+0x1e0>)
 8103fd8:	639a      	str	r2, [r3, #56]	@ 0x38
    hmmc->ErrorCode |= HAL_MMC_ERROR_RX_OVERRUN;
 8103fda:	68fb      	ldr	r3, [r7, #12]
 8103fdc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8103fde:	f043 0220 	orr.w	r2, r3, #32
 8103fe2:	68fb      	ldr	r3, [r7, #12]
 8103fe4:	635a      	str	r2, [r3, #52]	@ 0x34
    hmmc->State = HAL_MMC_STATE_READY;
 8103fe6:	68fb      	ldr	r3, [r7, #12]
 8103fe8:	2201      	movs	r2, #1
 8103fea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 8103fee:	2301      	movs	r3, #1
 8103ff0:	e01b      	b.n	810402a <MMC_ReadExtCSD+0x1d6>
  {
    /* Nothing to do */
  }

  /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
  errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16));
 8103ff2:	68fb      	ldr	r3, [r7, #12]
 8103ff4:	681a      	ldr	r2, [r3, #0]
 8103ff6:	68fb      	ldr	r3, [r7, #12]
 8103ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103ffa:	041b      	lsls	r3, r3, #16
 8103ffc:	4619      	mov	r1, r3
 8103ffe:	4610      	mov	r0, r2
 8104000:	f006 f843 	bl	810a08a <SDMMC_CmdSendStatus>
 8104004:	6338      	str	r0, [r7, #48]	@ 0x30
  if (errorstate != HAL_MMC_ERROR_NONE)
 8104006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104008:	2b00      	cmp	r3, #0
 810400a:	d005      	beq.n	8104018 <MMC_ReadExtCSD+0x1c4>
  {
    hmmc->ErrorCode |= errorstate;
 810400c:	68fb      	ldr	r3, [r7, #12]
 810400e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8104012:	431a      	orrs	r2, r3
 8104014:	68fb      	ldr	r3, [r7, #12]
 8104016:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Clear all the static flags */
  __HAL_MMC_CLEAR_FLAG(hmmc, SDMMC_STATIC_DATA_FLAGS);
 8104018:	68fb      	ldr	r3, [r7, #12]
 810401a:	681b      	ldr	r3, [r3, #0]
 810401c:	4a06      	ldr	r2, [pc, #24]	@ (8104038 <MMC_ReadExtCSD+0x1e4>)
 810401e:	639a      	str	r2, [r3, #56]	@ 0x38

  hmmc->State = HAL_MMC_STATE_READY;
 8104020:	68fb      	ldr	r3, [r7, #12]
 8104022:	2201      	movs	r2, #1
 8104024:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8104028:	2300      	movs	r3, #0
}
 810402a:	4618      	mov	r0, r3
 810402c:	3740      	adds	r7, #64	@ 0x40
 810402e:	46bd      	mov	sp, r7
 8104030:	bd80      	pop	{r7, pc}
 8104032:	bf00      	nop
 8104034:	1fe00fff 	.word	0x1fe00fff
 8104038:	18000f3a 	.word	0x18000f3a

0810403c <MMC_Read_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Read_IT(MMC_HandleTypeDef *hmmc)
{
 810403c:	b580      	push	{r7, lr}
 810403e:	b086      	sub	sp, #24
 8104040:	af00      	add	r7, sp, #0
 8104042:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hmmc->pRxBuffPtr;
 8104044:	687b      	ldr	r3, [r7, #4]
 8104046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8104048:	613b      	str	r3, [r7, #16]

  if (hmmc->RxXferSize >= SDMMC_FIFO_SIZE)
 810404a:	687b      	ldr	r3, [r7, #4]
 810404c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810404e:	2b1f      	cmp	r3, #31
 8104050:	d936      	bls.n	81040c0 <MMC_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8104052:	2300      	movs	r3, #0
 8104054:	617b      	str	r3, [r7, #20]
 8104056:	e027      	b.n	81040a8 <MMC_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hmmc->Instance);
 8104058:	687b      	ldr	r3, [r7, #4]
 810405a:	681b      	ldr	r3, [r3, #0]
 810405c:	4618      	mov	r0, r3
 810405e:	f005 fe5b 	bl	8109d18 <SDMMC_ReadFIFO>
 8104062:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8104064:	68fb      	ldr	r3, [r7, #12]
 8104066:	b2da      	uxtb	r2, r3
 8104068:	693b      	ldr	r3, [r7, #16]
 810406a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810406c:	693b      	ldr	r3, [r7, #16]
 810406e:	3301      	adds	r3, #1
 8104070:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8104072:	68fb      	ldr	r3, [r7, #12]
 8104074:	0a1b      	lsrs	r3, r3, #8
 8104076:	b2da      	uxtb	r2, r3
 8104078:	693b      	ldr	r3, [r7, #16]
 810407a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810407c:	693b      	ldr	r3, [r7, #16]
 810407e:	3301      	adds	r3, #1
 8104080:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8104082:	68fb      	ldr	r3, [r7, #12]
 8104084:	0c1b      	lsrs	r3, r3, #16
 8104086:	b2da      	uxtb	r2, r3
 8104088:	693b      	ldr	r3, [r7, #16]
 810408a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810408c:	693b      	ldr	r3, [r7, #16]
 810408e:	3301      	adds	r3, #1
 8104090:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8104092:	68fb      	ldr	r3, [r7, #12]
 8104094:	0e1b      	lsrs	r3, r3, #24
 8104096:	b2da      	uxtb	r2, r3
 8104098:	693b      	ldr	r3, [r7, #16]
 810409a:	701a      	strb	r2, [r3, #0]
      tmp++;
 810409c:	693b      	ldr	r3, [r7, #16]
 810409e:	3301      	adds	r3, #1
 81040a0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81040a2:	697b      	ldr	r3, [r7, #20]
 81040a4:	3301      	adds	r3, #1
 81040a6:	617b      	str	r3, [r7, #20]
 81040a8:	697b      	ldr	r3, [r7, #20]
 81040aa:	2b07      	cmp	r3, #7
 81040ac:	d9d4      	bls.n	8104058 <MMC_Read_IT+0x1c>
    }

    hmmc->pRxBuffPtr = tmp;
 81040ae:	687b      	ldr	r3, [r7, #4]
 81040b0:	693a      	ldr	r2, [r7, #16]
 81040b2:	625a      	str	r2, [r3, #36]	@ 0x24
    hmmc->RxXferSize -= SDMMC_FIFO_SIZE;
 81040b4:	687b      	ldr	r3, [r7, #4]
 81040b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81040b8:	f1a3 0220 	sub.w	r2, r3, #32
 81040bc:	687b      	ldr	r3, [r7, #4]
 81040be:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 81040c0:	bf00      	nop
 81040c2:	3718      	adds	r7, #24
 81040c4:	46bd      	mov	sp, r7
 81040c6:	bd80      	pop	{r7, pc}

081040c8 <MMC_Write_IT>:
  * @param  hmmc: pointer to a MMC_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void MMC_Write_IT(MMC_HandleTypeDef *hmmc)
{
 81040c8:	b580      	push	{r7, lr}
 81040ca:	b086      	sub	sp, #24
 81040cc:	af00      	add	r7, sp, #0
 81040ce:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hmmc->pTxBuffPtr;
 81040d0:	687b      	ldr	r3, [r7, #4]
 81040d2:	69db      	ldr	r3, [r3, #28]
 81040d4:	613b      	str	r3, [r7, #16]

  if (hmmc->TxXferSize >= SDMMC_FIFO_SIZE)
 81040d6:	687b      	ldr	r3, [r7, #4]
 81040d8:	6a1b      	ldr	r3, [r3, #32]
 81040da:	2b1f      	cmp	r3, #31
 81040dc:	d93a      	bls.n	8104154 <MMC_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 81040de:	2300      	movs	r3, #0
 81040e0:	617b      	str	r3, [r7, #20]
 81040e2:	e02b      	b.n	810413c <MMC_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 81040e4:	693b      	ldr	r3, [r7, #16]
 81040e6:	781b      	ldrb	r3, [r3, #0]
 81040e8:	60fb      	str	r3, [r7, #12]
      tmp++;
 81040ea:	693b      	ldr	r3, [r7, #16]
 81040ec:	3301      	adds	r3, #1
 81040ee:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 81040f0:	693b      	ldr	r3, [r7, #16]
 81040f2:	781b      	ldrb	r3, [r3, #0]
 81040f4:	021a      	lsls	r2, r3, #8
 81040f6:	68fb      	ldr	r3, [r7, #12]
 81040f8:	4313      	orrs	r3, r2
 81040fa:	60fb      	str	r3, [r7, #12]
      tmp++;
 81040fc:	693b      	ldr	r3, [r7, #16]
 81040fe:	3301      	adds	r3, #1
 8104100:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8104102:	693b      	ldr	r3, [r7, #16]
 8104104:	781b      	ldrb	r3, [r3, #0]
 8104106:	041a      	lsls	r2, r3, #16
 8104108:	68fb      	ldr	r3, [r7, #12]
 810410a:	4313      	orrs	r3, r2
 810410c:	60fb      	str	r3, [r7, #12]
      tmp++;
 810410e:	693b      	ldr	r3, [r7, #16]
 8104110:	3301      	adds	r3, #1
 8104112:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8104114:	693b      	ldr	r3, [r7, #16]
 8104116:	781b      	ldrb	r3, [r3, #0]
 8104118:	061a      	lsls	r2, r3, #24
 810411a:	68fb      	ldr	r3, [r7, #12]
 810411c:	4313      	orrs	r3, r2
 810411e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8104120:	693b      	ldr	r3, [r7, #16]
 8104122:	3301      	adds	r3, #1
 8104124:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hmmc->Instance, &data);
 8104126:	687b      	ldr	r3, [r7, #4]
 8104128:	681b      	ldr	r3, [r3, #0]
 810412a:	f107 020c 	add.w	r2, r7, #12
 810412e:	4611      	mov	r1, r2
 8104130:	4618      	mov	r0, r3
 8104132:	f005 fdfe 	bl	8109d32 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8104136:	697b      	ldr	r3, [r7, #20]
 8104138:	3301      	adds	r3, #1
 810413a:	617b      	str	r3, [r7, #20]
 810413c:	697b      	ldr	r3, [r7, #20]
 810413e:	2b07      	cmp	r3, #7
 8104140:	d9d0      	bls.n	81040e4 <MMC_Write_IT+0x1c>
    }

    hmmc->pTxBuffPtr = tmp;
 8104142:	687b      	ldr	r3, [r7, #4]
 8104144:	693a      	ldr	r2, [r7, #16]
 8104146:	61da      	str	r2, [r3, #28]
    hmmc->TxXferSize -= SDMMC_FIFO_SIZE;
 8104148:	687b      	ldr	r3, [r7, #4]
 810414a:	6a1b      	ldr	r3, [r3, #32]
 810414c:	f1a3 0220 	sub.w	r2, r3, #32
 8104150:	687b      	ldr	r3, [r7, #4]
 8104152:	621a      	str	r2, [r3, #32]
  }
}
 8104154:	bf00      	nop
 8104156:	3718      	adds	r7, #24
 8104158:	46bd      	mov	sp, r7
 810415a:	bd80      	pop	{r7, pc}

0810415c <MMC_PwrClassUpdate>:
  * @param  Wide Wide of MMC bus
  * @param  Speed Speed of the MMC bus
  * @retval MMC Card error state
  */
static uint32_t MMC_PwrClassUpdate(MMC_HandleTypeDef *hmmc, uint32_t Wide, uint32_t Speed)
{
 810415c:	b580      	push	{r7, lr}
 810415e:	b08a      	sub	sp, #40	@ 0x28
 8104160:	af00      	add	r7, sp, #0
 8104162:	60f8      	str	r0, [r7, #12]
 8104164:	60b9      	str	r1, [r7, #8]
 8104166:	607a      	str	r2, [r7, #4]
  uint32_t count;
  uint32_t response = 0U;
 8104168:	2300      	movs	r3, #0
 810416a:	623b      	str	r3, [r7, #32]
  uint32_t errorstate = HAL_MMC_ERROR_NONE;
 810416c:	2300      	movs	r3, #0
 810416e:	61fb      	str	r3, [r7, #28]
  uint32_t power_class;
  uint32_t supported_pwr_class;

  if ((Wide == SDMMC_BUS_WIDE_8B) || (Wide == SDMMC_BUS_WIDE_4B))
 8104170:	68bb      	ldr	r3, [r7, #8]
 8104172:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104176:	d004      	beq.n	8104182 <MMC_PwrClassUpdate+0x26>
 8104178:	68bb      	ldr	r3, [r7, #8]
 810417a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810417e:	f040 8088 	bne.w	8104292 <MMC_PwrClassUpdate+0x136>
  {
    power_class = 0U; /* Default value after power-on or software reset */
 8104182:	2300      	movs	r3, #0
 8104184:	617b      	str	r3, [r7, #20]

    /* Read the PowerClass field of the Extended CSD register */
    if (MMC_ReadExtCSD(hmmc, &power_class, 187, SDMMC_DATATIMEOUT) != HAL_OK) /* Field POWER_CLASS [187] */
 8104186:	f107 0114 	add.w	r1, r7, #20
 810418a:	f04f 33ff 	mov.w	r3, #4294967295
 810418e:	22bb      	movs	r2, #187	@ 0xbb
 8104190:	68f8      	ldr	r0, [r7, #12]
 8104192:	f7ff fe5f 	bl	8103e54 <MMC_ReadExtCSD>
 8104196:	4603      	mov	r3, r0
 8104198:	2b00      	cmp	r3, #0
 810419a:	d003      	beq.n	81041a4 <MMC_PwrClassUpdate+0x48>
    {
      errorstate = SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810419c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 81041a0:	61fb      	str	r3, [r7, #28]
 81041a2:	e002      	b.n	81041aa <MMC_PwrClassUpdate+0x4e>
    }
    else
    {
      power_class = ((power_class >> 24U) & 0x000000FFU);
 81041a4:	697b      	ldr	r3, [r7, #20]
 81041a6:	0e1b      	lsrs	r3, r3, #24
 81041a8:	617b      	str	r3, [r7, #20]
    }

    /* Get the supported PowerClass field of the Extended CSD register */
    if (Speed == SDMMC_SPEED_MODE_DDR)
 81041aa:	687b      	ldr	r3, [r7, #4]
 81041ac:	2b04      	cmp	r3, #4
 81041ae:	d105      	bne.n	81041bc <MMC_PwrClassUpdate+0x60>
    {
      /* Field PWR_CL_DDR_52_xxx [238 or 239] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_DDR_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_DDR_52_POS) &
 81041b0:	68fb      	ldr	r3, [r7, #12]
 81041b2:	f8d3 3164 	ldr.w	r3, [r3, #356]	@ 0x164
 81041b6:	0e1b      	lsrs	r3, r3, #24
 81041b8:	61bb      	str	r3, [r7, #24]
 81041ba:	e00e      	b.n	81041da <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else if (Speed == SDMMC_SPEED_MODE_HIGH)
 81041bc:	687b      	ldr	r3, [r7, #4]
 81041be:	2b02      	cmp	r3, #2
 81041c0:	d106      	bne.n	81041d0 <MMC_PwrClassUpdate+0x74>
    {
      /* Field PWR_CL_52_xxx [200 or 202] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_52_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_52_POS) &
 81041c2:	68fb      	ldr	r3, [r7, #12]
 81041c4:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 81041c8:	0c1b      	lsrs	r3, r3, #16
 81041ca:	b2db      	uxtb	r3, r3
 81041cc:	61bb      	str	r3, [r7, #24]
 81041ce:	e004      	b.n	81041da <MMC_PwrClassUpdate+0x7e>
                             0x000000FFU);
    }
    else
    {
      /* Field PWR_CL_26_xxx [201 or 203] */
      supported_pwr_class = ((hmmc->Ext_CSD[(MMC_EXT_CSD_PWR_CL_26_INDEX / 4)] >> MMC_EXT_CSD_PWR_CL_26_POS) &
 81041d0:	68fb      	ldr	r3, [r7, #12]
 81041d2:	f8d3 3140 	ldr.w	r3, [r3, #320]	@ 0x140
 81041d6:	0e1b      	lsrs	r3, r3, #24
 81041d8:	61bb      	str	r3, [r7, #24]
                             0x000000FFU);
    }

    if (errorstate == HAL_MMC_ERROR_NONE)
 81041da:	69fb      	ldr	r3, [r7, #28]
 81041dc:	2b00      	cmp	r3, #0
 81041de:	d158      	bne.n	8104292 <MMC_PwrClassUpdate+0x136>
    {
      if (Wide == SDMMC_BUS_WIDE_8B)
 81041e0:	68bb      	ldr	r3, [r7, #8]
 81041e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81041e6:	d102      	bne.n	81041ee <MMC_PwrClassUpdate+0x92>
      {
        /* Bit [7:4]: power class for 8-bits bus configuration - Bit [3:0]: power class for 4-bits bus configuration */
        supported_pwr_class = (supported_pwr_class >> 4U);
 81041e8:	69bb      	ldr	r3, [r7, #24]
 81041ea:	091b      	lsrs	r3, r3, #4
 81041ec:	61bb      	str	r3, [r7, #24]
      }

      if ((power_class & 0x0FU) != (supported_pwr_class & 0x0FU))
 81041ee:	697a      	ldr	r2, [r7, #20]
 81041f0:	69bb      	ldr	r3, [r7, #24]
 81041f2:	4053      	eors	r3, r2
 81041f4:	f003 030f 	and.w	r3, r3, #15
 81041f8:	2b00      	cmp	r3, #0
 81041fa:	d04a      	beq.n	8104292 <MMC_PwrClassUpdate+0x136>
      {
        /* Need to change current power class */
        errorstate = SDMMC_CmdSwitch(hmmc->Instance, (0x03BB0000U | ((supported_pwr_class & 0x0FU) << 8U)));
 81041fc:	68fb      	ldr	r3, [r7, #12]
 81041fe:	681a      	ldr	r2, [r3, #0]
 8104200:	69bb      	ldr	r3, [r7, #24]
 8104202:	021b      	lsls	r3, r3, #8
 8104204:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8104208:	f043 736e 	orr.w	r3, r3, #62390272	@ 0x3b80000
 810420c:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 8104210:	4619      	mov	r1, r3
 8104212:	4610      	mov	r0, r2
 8104214:	f005 ff7c 	bl	810a110 <SDMMC_CmdSwitch>
 8104218:	61f8      	str	r0, [r7, #28]

        if (errorstate == HAL_MMC_ERROR_NONE)
 810421a:	69fb      	ldr	r3, [r7, #28]
 810421c:	2b00      	cmp	r3, #0
 810421e:	d138      	bne.n	8104292 <MMC_PwrClassUpdate+0x136>
        {
          /* While card is not ready for data and trial number for sending CMD13 is not exceeded */
          count = SDMMC_MAX_TRIAL;
 8104220:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8104224:	627b      	str	r3, [r7, #36]	@ 0x24
          do
          {
            errorstate = SDMMC_CmdSendStatus(hmmc->Instance, (uint32_t)(((uint32_t)hmmc->MmcCard.RelCardAdd) << 16U));
 8104226:	68fb      	ldr	r3, [r7, #12]
 8104228:	681a      	ldr	r2, [r3, #0]
 810422a:	68fb      	ldr	r3, [r7, #12]
 810422c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810422e:	041b      	lsls	r3, r3, #16
 8104230:	4619      	mov	r1, r3
 8104232:	4610      	mov	r0, r2
 8104234:	f005 ff29 	bl	810a08a <SDMMC_CmdSendStatus>
 8104238:	61f8      	str	r0, [r7, #28]
            if (errorstate != HAL_MMC_ERROR_NONE)
 810423a:	69fb      	ldr	r3, [r7, #28]
 810423c:	2b00      	cmp	r3, #0
 810423e:	d112      	bne.n	8104266 <MMC_PwrClassUpdate+0x10a>
            {
              break;
            }

            /* Get command response */
            response = SDMMC_GetResponse(hmmc->Instance, SDMMC_RESP1);
 8104240:	68fb      	ldr	r3, [r7, #12]
 8104242:	681b      	ldr	r3, [r3, #0]
 8104244:	2100      	movs	r1, #0
 8104246:	4618      	mov	r0, r3
 8104248:	f005 fddb 	bl	8109e02 <SDMMC_GetResponse>
 810424c:	6238      	str	r0, [r7, #32]
            count--;
 810424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104250:	3b01      	subs	r3, #1
 8104252:	627b      	str	r3, [r7, #36]	@ 0x24
          } while (((response & 0x100U) == 0U) && (count != 0U));
 8104254:	6a3b      	ldr	r3, [r7, #32]
 8104256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810425a:	2b00      	cmp	r3, #0
 810425c:	d104      	bne.n	8104268 <MMC_PwrClassUpdate+0x10c>
 810425e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104260:	2b00      	cmp	r3, #0
 8104262:	d1e0      	bne.n	8104226 <MMC_PwrClassUpdate+0xca>
 8104264:	e000      	b.n	8104268 <MMC_PwrClassUpdate+0x10c>
              break;
 8104266:	bf00      	nop

          /* Check the status after the switch command execution */
          if ((count != 0U) && (errorstate == HAL_MMC_ERROR_NONE))
 8104268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810426a:	2b00      	cmp	r3, #0
 810426c:	d00b      	beq.n	8104286 <MMC_PwrClassUpdate+0x12a>
 810426e:	69fb      	ldr	r3, [r7, #28]
 8104270:	2b00      	cmp	r3, #0
 8104272:	d108      	bne.n	8104286 <MMC_PwrClassUpdate+0x12a>
          {
            /* Check the bit SWITCH_ERROR of the device status */
            if ((response & 0x80U) != 0U)
 8104274:	6a3b      	ldr	r3, [r7, #32]
 8104276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810427a:	2b00      	cmp	r3, #0
 810427c:	d009      	beq.n	8104292 <MMC_PwrClassUpdate+0x136>
            {
              errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 810427e:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8104282:	61fb      	str	r3, [r7, #28]
            if ((response & 0x80U) != 0U)
 8104284:	e005      	b.n	8104292 <MMC_PwrClassUpdate+0x136>
            }
          }
          else if (count == 0U)
 8104286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104288:	2b00      	cmp	r3, #0
 810428a:	d102      	bne.n	8104292 <MMC_PwrClassUpdate+0x136>
          {
            errorstate = SDMMC_ERROR_TIMEOUT;
 810428c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8104290:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return errorstate;
 8104292:	69fb      	ldr	r3, [r7, #28]
}
 8104294:	4618      	mov	r0, r3
 8104296:	3728      	adds	r7, #40	@ 0x28
 8104298:	46bd      	mov	sp, r7
 810429a:	bd80      	pop	{r7, pc}

0810429c <HAL_MMCEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 810429c:	b480      	push	{r7}
 810429e:	b083      	sub	sp, #12
 81042a0:	af00      	add	r7, sp, #0
 81042a2:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 81042a4:	bf00      	nop
 81042a6:	370c      	adds	r7, #12
 81042a8:	46bd      	mov	sp, r7
 81042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042ae:	4770      	bx	lr

081042b0 <HAL_MMCEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Read_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 81042b0:	b480      	push	{r7}
 81042b2:	b083      	sub	sp, #12
 81042b4:	af00      	add	r7, sp, #0
 81042b6:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 81042b8:	bf00      	nop
 81042ba:	370c      	adds	r7, #12
 81042bc:	46bd      	mov	sp, r7
 81042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042c2:	4770      	bx	lr

081042c4 <HAL_MMCEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf0CpltCallback(MMC_HandleTypeDef *hmmc)
{
 81042c4:	b480      	push	{r7}
 81042c6:	b083      	sub	sp, #12
 81042c8:	af00      	add	r7, sp, #0
 81042ca:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 81042cc:	bf00      	nop
 81042ce:	370c      	adds	r7, #12
 81042d0:	46bd      	mov	sp, r7
 81042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042d6:	4770      	bx	lr

081042d8 <HAL_MMCEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hmmc: MMC handle
  * @retval None
  */
__weak void HAL_MMCEx_Write_DMADoubleBuf1CpltCallback(MMC_HandleTypeDef *hmmc)
{
 81042d8:	b480      	push	{r7}
 81042da:	b083      	sub	sp, #12
 81042dc:	af00      	add	r7, sp, #0
 81042de:	6078      	str	r0, [r7, #4]
  UNUSED(hmmc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MMCEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 81042e0:	bf00      	nop
 81042e2:	370c      	adds	r7, #12
 81042e4:	46bd      	mov	sp, r7
 81042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81042ea:	4770      	bx	lr

081042ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 81042ec:	b580      	push	{r7, lr}
 81042ee:	b086      	sub	sp, #24
 81042f0:	af02      	add	r7, sp, #8
 81042f2:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 81042f4:	687b      	ldr	r3, [r7, #4]
 81042f6:	2b00      	cmp	r3, #0
 81042f8:	d101      	bne.n	81042fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 81042fa:	2301      	movs	r3, #1
 81042fc:	e0fe      	b.n	81044fc <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 81042fe:	687b      	ldr	r3, [r7, #4]
 8104300:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8104304:	b2db      	uxtb	r3, r3
 8104306:	2b00      	cmp	r3, #0
 8104308:	d106      	bne.n	8104318 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 810430a:	687b      	ldr	r3, [r7, #4]
 810430c:	2200      	movs	r2, #0
 810430e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8104312:	6878      	ldr	r0, [r7, #4]
 8104314:	f00a f8ac 	bl	810e470 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8104318:	687b      	ldr	r3, [r7, #4]
 810431a:	2203      	movs	r2, #3
 810431c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8104320:	687b      	ldr	r3, [r7, #4]
 8104322:	681b      	ldr	r3, [r3, #0]
 8104324:	4618      	mov	r0, r3
 8104326:	f006 fc1e 	bl	810ab66 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 810432a:	687b      	ldr	r3, [r7, #4]
 810432c:	6818      	ldr	r0, [r3, #0]
 810432e:	687b      	ldr	r3, [r7, #4]
 8104330:	7c1a      	ldrb	r2, [r3, #16]
 8104332:	f88d 2000 	strb.w	r2, [sp]
 8104336:	3304      	adds	r3, #4
 8104338:	cb0e      	ldmia	r3, {r1, r2, r3}
 810433a:	f006 faef 	bl	810a91c <USB_CoreInit>
 810433e:	4603      	mov	r3, r0
 8104340:	2b00      	cmp	r3, #0
 8104342:	d005      	beq.n	8104350 <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104344:	687b      	ldr	r3, [r7, #4]
 8104346:	2202      	movs	r2, #2
 8104348:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810434c:	2301      	movs	r3, #1
 810434e:	e0d5      	b.n	81044fc <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8104350:	687b      	ldr	r3, [r7, #4]
 8104352:	681b      	ldr	r3, [r3, #0]
 8104354:	2100      	movs	r1, #0
 8104356:	4618      	mov	r0, r3
 8104358:	f006 fc16 	bl	810ab88 <USB_SetCurrentMode>
 810435c:	4603      	mov	r3, r0
 810435e:	2b00      	cmp	r3, #0
 8104360:	d005      	beq.n	810436e <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8104362:	687b      	ldr	r3, [r7, #4]
 8104364:	2202      	movs	r2, #2
 8104366:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 810436a:	2301      	movs	r3, #1
 810436c:	e0c6      	b.n	81044fc <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810436e:	2300      	movs	r3, #0
 8104370:	73fb      	strb	r3, [r7, #15]
 8104372:	e04a      	b.n	810440a <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8104374:	7bfa      	ldrb	r2, [r7, #15]
 8104376:	6879      	ldr	r1, [r7, #4]
 8104378:	4613      	mov	r3, r2
 810437a:	00db      	lsls	r3, r3, #3
 810437c:	4413      	add	r3, r2
 810437e:	009b      	lsls	r3, r3, #2
 8104380:	440b      	add	r3, r1
 8104382:	3315      	adds	r3, #21
 8104384:	2201      	movs	r2, #1
 8104386:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8104388:	7bfa      	ldrb	r2, [r7, #15]
 810438a:	6879      	ldr	r1, [r7, #4]
 810438c:	4613      	mov	r3, r2
 810438e:	00db      	lsls	r3, r3, #3
 8104390:	4413      	add	r3, r2
 8104392:	009b      	lsls	r3, r3, #2
 8104394:	440b      	add	r3, r1
 8104396:	3314      	adds	r3, #20
 8104398:	7bfa      	ldrb	r2, [r7, #15]
 810439a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 810439c:	7bfa      	ldrb	r2, [r7, #15]
 810439e:	7bfb      	ldrb	r3, [r7, #15]
 81043a0:	b298      	uxth	r0, r3
 81043a2:	6879      	ldr	r1, [r7, #4]
 81043a4:	4613      	mov	r3, r2
 81043a6:	00db      	lsls	r3, r3, #3
 81043a8:	4413      	add	r3, r2
 81043aa:	009b      	lsls	r3, r3, #2
 81043ac:	440b      	add	r3, r1
 81043ae:	332e      	adds	r3, #46	@ 0x2e
 81043b0:	4602      	mov	r2, r0
 81043b2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 81043b4:	7bfa      	ldrb	r2, [r7, #15]
 81043b6:	6879      	ldr	r1, [r7, #4]
 81043b8:	4613      	mov	r3, r2
 81043ba:	00db      	lsls	r3, r3, #3
 81043bc:	4413      	add	r3, r2
 81043be:	009b      	lsls	r3, r3, #2
 81043c0:	440b      	add	r3, r1
 81043c2:	3318      	adds	r3, #24
 81043c4:	2200      	movs	r2, #0
 81043c6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 81043c8:	7bfa      	ldrb	r2, [r7, #15]
 81043ca:	6879      	ldr	r1, [r7, #4]
 81043cc:	4613      	mov	r3, r2
 81043ce:	00db      	lsls	r3, r3, #3
 81043d0:	4413      	add	r3, r2
 81043d2:	009b      	lsls	r3, r3, #2
 81043d4:	440b      	add	r3, r1
 81043d6:	331c      	adds	r3, #28
 81043d8:	2200      	movs	r2, #0
 81043da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 81043dc:	7bfa      	ldrb	r2, [r7, #15]
 81043de:	6879      	ldr	r1, [r7, #4]
 81043e0:	4613      	mov	r3, r2
 81043e2:	00db      	lsls	r3, r3, #3
 81043e4:	4413      	add	r3, r2
 81043e6:	009b      	lsls	r3, r3, #2
 81043e8:	440b      	add	r3, r1
 81043ea:	3320      	adds	r3, #32
 81043ec:	2200      	movs	r2, #0
 81043ee:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 81043f0:	7bfa      	ldrb	r2, [r7, #15]
 81043f2:	6879      	ldr	r1, [r7, #4]
 81043f4:	4613      	mov	r3, r2
 81043f6:	00db      	lsls	r3, r3, #3
 81043f8:	4413      	add	r3, r2
 81043fa:	009b      	lsls	r3, r3, #2
 81043fc:	440b      	add	r3, r1
 81043fe:	3324      	adds	r3, #36	@ 0x24
 8104400:	2200      	movs	r2, #0
 8104402:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104404:	7bfb      	ldrb	r3, [r7, #15]
 8104406:	3301      	adds	r3, #1
 8104408:	73fb      	strb	r3, [r7, #15]
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	791b      	ldrb	r3, [r3, #4]
 810440e:	7bfa      	ldrb	r2, [r7, #15]
 8104410:	429a      	cmp	r2, r3
 8104412:	d3af      	bcc.n	8104374 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104414:	2300      	movs	r3, #0
 8104416:	73fb      	strb	r3, [r7, #15]
 8104418:	e044      	b.n	81044a4 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 810441a:	7bfa      	ldrb	r2, [r7, #15]
 810441c:	6879      	ldr	r1, [r7, #4]
 810441e:	4613      	mov	r3, r2
 8104420:	00db      	lsls	r3, r3, #3
 8104422:	4413      	add	r3, r2
 8104424:	009b      	lsls	r3, r3, #2
 8104426:	440b      	add	r3, r1
 8104428:	f203 2355 	addw	r3, r3, #597	@ 0x255
 810442c:	2200      	movs	r2, #0
 810442e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8104430:	7bfa      	ldrb	r2, [r7, #15]
 8104432:	6879      	ldr	r1, [r7, #4]
 8104434:	4613      	mov	r3, r2
 8104436:	00db      	lsls	r3, r3, #3
 8104438:	4413      	add	r3, r2
 810443a:	009b      	lsls	r3, r3, #2
 810443c:	440b      	add	r3, r1
 810443e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8104442:	7bfa      	ldrb	r2, [r7, #15]
 8104444:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8104446:	7bfa      	ldrb	r2, [r7, #15]
 8104448:	6879      	ldr	r1, [r7, #4]
 810444a:	4613      	mov	r3, r2
 810444c:	00db      	lsls	r3, r3, #3
 810444e:	4413      	add	r3, r2
 8104450:	009b      	lsls	r3, r3, #2
 8104452:	440b      	add	r3, r1
 8104454:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8104458:	2200      	movs	r2, #0
 810445a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 810445c:	7bfa      	ldrb	r2, [r7, #15]
 810445e:	6879      	ldr	r1, [r7, #4]
 8104460:	4613      	mov	r3, r2
 8104462:	00db      	lsls	r3, r3, #3
 8104464:	4413      	add	r3, r2
 8104466:	009b      	lsls	r3, r3, #2
 8104468:	440b      	add	r3, r1
 810446a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 810446e:	2200      	movs	r2, #0
 8104470:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8104472:	7bfa      	ldrb	r2, [r7, #15]
 8104474:	6879      	ldr	r1, [r7, #4]
 8104476:	4613      	mov	r3, r2
 8104478:	00db      	lsls	r3, r3, #3
 810447a:	4413      	add	r3, r2
 810447c:	009b      	lsls	r3, r3, #2
 810447e:	440b      	add	r3, r1
 8104480:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8104484:	2200      	movs	r2, #0
 8104486:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8104488:	7bfa      	ldrb	r2, [r7, #15]
 810448a:	6879      	ldr	r1, [r7, #4]
 810448c:	4613      	mov	r3, r2
 810448e:	00db      	lsls	r3, r3, #3
 8104490:	4413      	add	r3, r2
 8104492:	009b      	lsls	r3, r3, #2
 8104494:	440b      	add	r3, r1
 8104496:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 810449a:	2200      	movs	r2, #0
 810449c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 810449e:	7bfb      	ldrb	r3, [r7, #15]
 81044a0:	3301      	adds	r3, #1
 81044a2:	73fb      	strb	r3, [r7, #15]
 81044a4:	687b      	ldr	r3, [r7, #4]
 81044a6:	791b      	ldrb	r3, [r3, #4]
 81044a8:	7bfa      	ldrb	r2, [r7, #15]
 81044aa:	429a      	cmp	r2, r3
 81044ac:	d3b5      	bcc.n	810441a <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 81044ae:	687b      	ldr	r3, [r7, #4]
 81044b0:	6818      	ldr	r0, [r3, #0]
 81044b2:	687b      	ldr	r3, [r7, #4]
 81044b4:	7c1a      	ldrb	r2, [r3, #16]
 81044b6:	f88d 2000 	strb.w	r2, [sp]
 81044ba:	3304      	adds	r3, #4
 81044bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 81044be:	f006 fbaf 	bl	810ac20 <USB_DevInit>
 81044c2:	4603      	mov	r3, r0
 81044c4:	2b00      	cmp	r3, #0
 81044c6:	d005      	beq.n	81044d4 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 81044c8:	687b      	ldr	r3, [r7, #4]
 81044ca:	2202      	movs	r2, #2
 81044cc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 81044d0:	2301      	movs	r3, #1
 81044d2:	e013      	b.n	81044fc <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	2200      	movs	r2, #0
 81044d8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 81044da:	687b      	ldr	r3, [r7, #4]
 81044dc:	2201      	movs	r2, #1
 81044de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	7b1b      	ldrb	r3, [r3, #12]
 81044e6:	2b01      	cmp	r3, #1
 81044e8:	d102      	bne.n	81044f0 <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 81044ea:	6878      	ldr	r0, [r7, #4]
 81044ec:	f001 f96e 	bl	81057cc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 81044f0:	687b      	ldr	r3, [r7, #4]
 81044f2:	681b      	ldr	r3, [r3, #0]
 81044f4:	4618      	mov	r0, r3
 81044f6:	f007 fbec 	bl	810bcd2 <USB_DevDisconnect>

  return HAL_OK;
 81044fa:	2300      	movs	r3, #0
}
 81044fc:	4618      	mov	r0, r3
 81044fe:	3710      	adds	r7, #16
 8104500:	46bd      	mov	sp, r7
 8104502:	bd80      	pop	{r7, pc}

08104504 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8104504:	b580      	push	{r7, lr}
 8104506:	b084      	sub	sp, #16
 8104508:	af00      	add	r7, sp, #0
 810450a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810450c:	687b      	ldr	r3, [r7, #4]
 810450e:	681b      	ldr	r3, [r3, #0]
 8104510:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8104512:	687b      	ldr	r3, [r7, #4]
 8104514:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8104518:	2b01      	cmp	r3, #1
 810451a:	d101      	bne.n	8104520 <HAL_PCD_Start+0x1c>
 810451c:	2302      	movs	r3, #2
 810451e:	e022      	b.n	8104566 <HAL_PCD_Start+0x62>
 8104520:	687b      	ldr	r3, [r7, #4]
 8104522:	2201      	movs	r2, #1
 8104524:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8104528:	68fb      	ldr	r3, [r7, #12]
 810452a:	68db      	ldr	r3, [r3, #12]
 810452c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8104530:	2b00      	cmp	r3, #0
 8104532:	d009      	beq.n	8104548 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8104534:	687b      	ldr	r3, [r7, #4]
 8104536:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8104538:	2b01      	cmp	r3, #1
 810453a:	d105      	bne.n	8104548 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810453c:	68fb      	ldr	r3, [r7, #12]
 810453e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8104540:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8104544:	68fb      	ldr	r3, [r7, #12]
 8104546:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	681b      	ldr	r3, [r3, #0]
 810454c:	4618      	mov	r0, r3
 810454e:	f006 faf9 	bl	810ab44 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8104552:	687b      	ldr	r3, [r7, #4]
 8104554:	681b      	ldr	r3, [r3, #0]
 8104556:	4618      	mov	r0, r3
 8104558:	f007 fb9a 	bl	810bc90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 810455c:	687b      	ldr	r3, [r7, #4]
 810455e:	2200      	movs	r2, #0
 8104560:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8104564:	2300      	movs	r3, #0
}
 8104566:	4618      	mov	r0, r3
 8104568:	3710      	adds	r7, #16
 810456a:	46bd      	mov	sp, r7
 810456c:	bd80      	pop	{r7, pc}

0810456e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 810456e:	b590      	push	{r4, r7, lr}
 8104570:	b08d      	sub	sp, #52	@ 0x34
 8104572:	af00      	add	r7, sp, #0
 8104574:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8104576:	687b      	ldr	r3, [r7, #4]
 8104578:	681b      	ldr	r3, [r3, #0]
 810457a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810457c:	6a3b      	ldr	r3, [r7, #32]
 810457e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8104580:	687b      	ldr	r3, [r7, #4]
 8104582:	681b      	ldr	r3, [r3, #0]
 8104584:	4618      	mov	r0, r3
 8104586:	f007 fc58 	bl	810be3a <USB_GetMode>
 810458a:	4603      	mov	r3, r0
 810458c:	2b00      	cmp	r3, #0
 810458e:	f040 84b9 	bne.w	8104f04 <HAL_PCD_IRQHandler+0x996>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8104592:	687b      	ldr	r3, [r7, #4]
 8104594:	681b      	ldr	r3, [r3, #0]
 8104596:	4618      	mov	r0, r3
 8104598:	f007 fbbc 	bl	810bd14 <USB_ReadInterrupts>
 810459c:	4603      	mov	r3, r0
 810459e:	2b00      	cmp	r3, #0
 81045a0:	f000 84af 	beq.w	8104f02 <HAL_PCD_IRQHandler+0x994>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 81045a4:	69fb      	ldr	r3, [r7, #28]
 81045a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81045aa:	689b      	ldr	r3, [r3, #8]
 81045ac:	0a1b      	lsrs	r3, r3, #8
 81045ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 81045b2:	687b      	ldr	r3, [r7, #4]
 81045b4:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	681b      	ldr	r3, [r3, #0]
 81045bc:	4618      	mov	r0, r3
 81045be:	f007 fba9 	bl	810bd14 <USB_ReadInterrupts>
 81045c2:	4603      	mov	r3, r0
 81045c4:	f003 0302 	and.w	r3, r3, #2
 81045c8:	2b02      	cmp	r3, #2
 81045ca:	d107      	bne.n	81045dc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 81045cc:	687b      	ldr	r3, [r7, #4]
 81045ce:	681b      	ldr	r3, [r3, #0]
 81045d0:	695a      	ldr	r2, [r3, #20]
 81045d2:	687b      	ldr	r3, [r7, #4]
 81045d4:	681b      	ldr	r3, [r3, #0]
 81045d6:	f002 0202 	and.w	r2, r2, #2
 81045da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 81045dc:	687b      	ldr	r3, [r7, #4]
 81045de:	681b      	ldr	r3, [r3, #0]
 81045e0:	4618      	mov	r0, r3
 81045e2:	f007 fb97 	bl	810bd14 <USB_ReadInterrupts>
 81045e6:	4603      	mov	r3, r0
 81045e8:	f003 0310 	and.w	r3, r3, #16
 81045ec:	2b10      	cmp	r3, #16
 81045ee:	d161      	bne.n	81046b4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 81045f0:	687b      	ldr	r3, [r7, #4]
 81045f2:	681b      	ldr	r3, [r3, #0]
 81045f4:	699a      	ldr	r2, [r3, #24]
 81045f6:	687b      	ldr	r3, [r7, #4]
 81045f8:	681b      	ldr	r3, [r3, #0]
 81045fa:	f022 0210 	bic.w	r2, r2, #16
 81045fe:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8104600:	6a3b      	ldr	r3, [r7, #32]
 8104602:	6a1b      	ldr	r3, [r3, #32]
 8104604:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8104606:	69bb      	ldr	r3, [r7, #24]
 8104608:	f003 020f 	and.w	r2, r3, #15
 810460c:	4613      	mov	r3, r2
 810460e:	00db      	lsls	r3, r3, #3
 8104610:	4413      	add	r3, r2
 8104612:	009b      	lsls	r3, r3, #2
 8104614:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8104618:	687a      	ldr	r2, [r7, #4]
 810461a:	4413      	add	r3, r2
 810461c:	3304      	adds	r3, #4
 810461e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8104620:	69bb      	ldr	r3, [r7, #24]
 8104622:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8104626:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810462a:	d124      	bne.n	8104676 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 810462c:	69ba      	ldr	r2, [r7, #24]
 810462e:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8104632:	4013      	ands	r3, r2
 8104634:	2b00      	cmp	r3, #0
 8104636:	d035      	beq.n	81046a4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8104638:	697b      	ldr	r3, [r7, #20]
 810463a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 810463c:	69bb      	ldr	r3, [r7, #24]
 810463e:	091b      	lsrs	r3, r3, #4
 8104640:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8104642:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8104646:	b29b      	uxth	r3, r3
 8104648:	461a      	mov	r2, r3
 810464a:	6a38      	ldr	r0, [r7, #32]
 810464c:	f007 f9ce 	bl	810b9ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8104650:	697b      	ldr	r3, [r7, #20]
 8104652:	68da      	ldr	r2, [r3, #12]
 8104654:	69bb      	ldr	r3, [r7, #24]
 8104656:	091b      	lsrs	r3, r3, #4
 8104658:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810465c:	441a      	add	r2, r3
 810465e:	697b      	ldr	r3, [r7, #20]
 8104660:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8104662:	697b      	ldr	r3, [r7, #20]
 8104664:	695a      	ldr	r2, [r3, #20]
 8104666:	69bb      	ldr	r3, [r7, #24]
 8104668:	091b      	lsrs	r3, r3, #4
 810466a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810466e:	441a      	add	r2, r3
 8104670:	697b      	ldr	r3, [r7, #20]
 8104672:	615a      	str	r2, [r3, #20]
 8104674:	e016      	b.n	81046a4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8104676:	69bb      	ldr	r3, [r7, #24]
 8104678:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 810467c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8104680:	d110      	bne.n	81046a4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8104682:	687b      	ldr	r3, [r7, #4]
 8104684:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8104688:	2208      	movs	r2, #8
 810468a:	4619      	mov	r1, r3
 810468c:	6a38      	ldr	r0, [r7, #32]
 810468e:	f007 f9ad 	bl	810b9ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8104692:	697b      	ldr	r3, [r7, #20]
 8104694:	695a      	ldr	r2, [r3, #20]
 8104696:	69bb      	ldr	r3, [r7, #24]
 8104698:	091b      	lsrs	r3, r3, #4
 810469a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 810469e:	441a      	add	r2, r3
 81046a0:	697b      	ldr	r3, [r7, #20]
 81046a2:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 81046a4:	687b      	ldr	r3, [r7, #4]
 81046a6:	681b      	ldr	r3, [r3, #0]
 81046a8:	699a      	ldr	r2, [r3, #24]
 81046aa:	687b      	ldr	r3, [r7, #4]
 81046ac:	681b      	ldr	r3, [r3, #0]
 81046ae:	f042 0210 	orr.w	r2, r2, #16
 81046b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 81046b4:	687b      	ldr	r3, [r7, #4]
 81046b6:	681b      	ldr	r3, [r3, #0]
 81046b8:	4618      	mov	r0, r3
 81046ba:	f007 fb2b 	bl	810bd14 <USB_ReadInterrupts>
 81046be:	4603      	mov	r3, r0
 81046c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81046c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81046c8:	f040 80a7 	bne.w	810481a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 81046cc:	2300      	movs	r3, #0
 81046ce:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	681b      	ldr	r3, [r3, #0]
 81046d4:	4618      	mov	r0, r3
 81046d6:	f007 fb30 	bl	810bd3a <USB_ReadDevAllOutEpInterrupt>
 81046da:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 81046dc:	e099      	b.n	8104812 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 81046de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81046e0:	f003 0301 	and.w	r3, r3, #1
 81046e4:	2b00      	cmp	r3, #0
 81046e6:	f000 808e 	beq.w	8104806 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 81046ea:	687b      	ldr	r3, [r7, #4]
 81046ec:	681b      	ldr	r3, [r3, #0]
 81046ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81046f0:	b2d2      	uxtb	r2, r2
 81046f2:	4611      	mov	r1, r2
 81046f4:	4618      	mov	r0, r3
 81046f6:	f007 fb54 	bl	810bda2 <USB_ReadDevOutEPInterrupt>
 81046fa:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 81046fc:	693b      	ldr	r3, [r7, #16]
 81046fe:	f003 0301 	and.w	r3, r3, #1
 8104702:	2b00      	cmp	r3, #0
 8104704:	d00c      	beq.n	8104720 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8104706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104708:	015a      	lsls	r2, r3, #5
 810470a:	69fb      	ldr	r3, [r7, #28]
 810470c:	4413      	add	r3, r2
 810470e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104712:	461a      	mov	r2, r3
 8104714:	2301      	movs	r3, #1
 8104716:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8104718:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810471a:	6878      	ldr	r0, [r7, #4]
 810471c:	f000 fed0 	bl	81054c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8104720:	693b      	ldr	r3, [r7, #16]
 8104722:	f003 0308 	and.w	r3, r3, #8
 8104726:	2b00      	cmp	r3, #0
 8104728:	d00c      	beq.n	8104744 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 810472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810472c:	015a      	lsls	r2, r3, #5
 810472e:	69fb      	ldr	r3, [r7, #28]
 8104730:	4413      	add	r3, r2
 8104732:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104736:	461a      	mov	r2, r3
 8104738:	2308      	movs	r3, #8
 810473a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 810473c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810473e:	6878      	ldr	r0, [r7, #4]
 8104740:	f000 ffa6 	bl	8105690 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8104744:	693b      	ldr	r3, [r7, #16]
 8104746:	f003 0310 	and.w	r3, r3, #16
 810474a:	2b00      	cmp	r3, #0
 810474c:	d008      	beq.n	8104760 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 810474e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104750:	015a      	lsls	r2, r3, #5
 8104752:	69fb      	ldr	r3, [r7, #28]
 8104754:	4413      	add	r3, r2
 8104756:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810475a:	461a      	mov	r2, r3
 810475c:	2310      	movs	r3, #16
 810475e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8104760:	693b      	ldr	r3, [r7, #16]
 8104762:	f003 0302 	and.w	r3, r3, #2
 8104766:	2b00      	cmp	r3, #0
 8104768:	d030      	beq.n	81047cc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 810476a:	6a3b      	ldr	r3, [r7, #32]
 810476c:	695b      	ldr	r3, [r3, #20]
 810476e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104772:	2b80      	cmp	r3, #128	@ 0x80
 8104774:	d109      	bne.n	810478a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8104776:	69fb      	ldr	r3, [r7, #28]
 8104778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810477c:	685b      	ldr	r3, [r3, #4]
 810477e:	69fa      	ldr	r2, [r7, #28]
 8104780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104784:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8104788:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 810478a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 810478c:	4613      	mov	r3, r2
 810478e:	00db      	lsls	r3, r3, #3
 8104790:	4413      	add	r3, r2
 8104792:	009b      	lsls	r3, r3, #2
 8104794:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8104798:	687a      	ldr	r2, [r7, #4]
 810479a:	4413      	add	r3, r2
 810479c:	3304      	adds	r3, #4
 810479e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 81047a0:	697b      	ldr	r3, [r7, #20]
 81047a2:	78db      	ldrb	r3, [r3, #3]
 81047a4:	2b01      	cmp	r3, #1
 81047a6:	d108      	bne.n	81047ba <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 81047a8:	697b      	ldr	r3, [r7, #20]
 81047aa:	2200      	movs	r2, #0
 81047ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 81047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047b0:	b2db      	uxtb	r3, r3
 81047b2:	4619      	mov	r1, r3
 81047b4:	6878      	ldr	r0, [r7, #4]
 81047b6:	f009 ff91 	bl	810e6dc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 81047ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047bc:	015a      	lsls	r2, r3, #5
 81047be:	69fb      	ldr	r3, [r7, #28]
 81047c0:	4413      	add	r3, r2
 81047c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81047c6:	461a      	mov	r2, r3
 81047c8:	2302      	movs	r3, #2
 81047ca:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 81047cc:	693b      	ldr	r3, [r7, #16]
 81047ce:	f003 0320 	and.w	r3, r3, #32
 81047d2:	2b00      	cmp	r3, #0
 81047d4:	d008      	beq.n	81047e8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 81047d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047d8:	015a      	lsls	r2, r3, #5
 81047da:	69fb      	ldr	r3, [r7, #28]
 81047dc:	4413      	add	r3, r2
 81047de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81047e2:	461a      	mov	r2, r3
 81047e4:	2320      	movs	r3, #32
 81047e6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 81047e8:	693b      	ldr	r3, [r7, #16]
 81047ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	d009      	beq.n	8104806 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 81047f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81047f4:	015a      	lsls	r2, r3, #5
 81047f6:	69fb      	ldr	r3, [r7, #28]
 81047f8:	4413      	add	r3, r2
 81047fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81047fe:	461a      	mov	r2, r3
 8104800:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8104804:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8104806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104808:	3301      	adds	r3, #1
 810480a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 810480c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810480e:	085b      	lsrs	r3, r3, #1
 8104810:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8104812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104814:	2b00      	cmp	r3, #0
 8104816:	f47f af62 	bne.w	81046de <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 810481a:	687b      	ldr	r3, [r7, #4]
 810481c:	681b      	ldr	r3, [r3, #0]
 810481e:	4618      	mov	r0, r3
 8104820:	f007 fa78 	bl	810bd14 <USB_ReadInterrupts>
 8104824:	4603      	mov	r3, r0
 8104826:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810482a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810482e:	f040 80db 	bne.w	81049e8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8104832:	687b      	ldr	r3, [r7, #4]
 8104834:	681b      	ldr	r3, [r3, #0]
 8104836:	4618      	mov	r0, r3
 8104838:	f007 fa99 	bl	810bd6e <USB_ReadDevAllInEpInterrupt>
 810483c:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 810483e:	2300      	movs	r3, #0
 8104840:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8104842:	e0cd      	b.n	81049e0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8104844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8104846:	f003 0301 	and.w	r3, r3, #1
 810484a:	2b00      	cmp	r3, #0
 810484c:	f000 80c2 	beq.w	81049d4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8104850:	687b      	ldr	r3, [r7, #4]
 8104852:	681b      	ldr	r3, [r3, #0]
 8104854:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104856:	b2d2      	uxtb	r2, r2
 8104858:	4611      	mov	r1, r2
 810485a:	4618      	mov	r0, r3
 810485c:	f007 fabf 	bl	810bdde <USB_ReadDevInEPInterrupt>
 8104860:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8104862:	693b      	ldr	r3, [r7, #16]
 8104864:	f003 0301 	and.w	r3, r3, #1
 8104868:	2b00      	cmp	r3, #0
 810486a:	d057      	beq.n	810491c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 810486c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810486e:	f003 030f 	and.w	r3, r3, #15
 8104872:	2201      	movs	r2, #1
 8104874:	fa02 f303 	lsl.w	r3, r2, r3
 8104878:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 810487a:	69fb      	ldr	r3, [r7, #28]
 810487c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104880:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8104882:	68fb      	ldr	r3, [r7, #12]
 8104884:	43db      	mvns	r3, r3
 8104886:	69f9      	ldr	r1, [r7, #28]
 8104888:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810488c:	4013      	ands	r3, r2
 810488e:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8104890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104892:	015a      	lsls	r2, r3, #5
 8104894:	69fb      	ldr	r3, [r7, #28]
 8104896:	4413      	add	r3, r2
 8104898:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810489c:	461a      	mov	r2, r3
 810489e:	2301      	movs	r3, #1
 81048a0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 81048a2:	687b      	ldr	r3, [r7, #4]
 81048a4:	799b      	ldrb	r3, [r3, #6]
 81048a6:	2b01      	cmp	r3, #1
 81048a8:	d132      	bne.n	8104910 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 81048aa:	6879      	ldr	r1, [r7, #4]
 81048ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048ae:	4613      	mov	r3, r2
 81048b0:	00db      	lsls	r3, r3, #3
 81048b2:	4413      	add	r3, r2
 81048b4:	009b      	lsls	r3, r3, #2
 81048b6:	440b      	add	r3, r1
 81048b8:	3320      	adds	r3, #32
 81048ba:	6819      	ldr	r1, [r3, #0]
 81048bc:	6878      	ldr	r0, [r7, #4]
 81048be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048c0:	4613      	mov	r3, r2
 81048c2:	00db      	lsls	r3, r3, #3
 81048c4:	4413      	add	r3, r2
 81048c6:	009b      	lsls	r3, r3, #2
 81048c8:	4403      	add	r3, r0
 81048ca:	331c      	adds	r3, #28
 81048cc:	681b      	ldr	r3, [r3, #0]
 81048ce:	4419      	add	r1, r3
 81048d0:	6878      	ldr	r0, [r7, #4]
 81048d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048d4:	4613      	mov	r3, r2
 81048d6:	00db      	lsls	r3, r3, #3
 81048d8:	4413      	add	r3, r2
 81048da:	009b      	lsls	r3, r3, #2
 81048dc:	4403      	add	r3, r0
 81048de:	3320      	adds	r3, #32
 81048e0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 81048e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81048e4:	2b00      	cmp	r3, #0
 81048e6:	d113      	bne.n	8104910 <HAL_PCD_IRQHandler+0x3a2>
 81048e8:	6879      	ldr	r1, [r7, #4]
 81048ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 81048ec:	4613      	mov	r3, r2
 81048ee:	00db      	lsls	r3, r3, #3
 81048f0:	4413      	add	r3, r2
 81048f2:	009b      	lsls	r3, r3, #2
 81048f4:	440b      	add	r3, r1
 81048f6:	3324      	adds	r3, #36	@ 0x24
 81048f8:	681b      	ldr	r3, [r3, #0]
 81048fa:	2b00      	cmp	r3, #0
 81048fc:	d108      	bne.n	8104910 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 81048fe:	687b      	ldr	r3, [r7, #4]
 8104900:	6818      	ldr	r0, [r3, #0]
 8104902:	687b      	ldr	r3, [r7, #4]
 8104904:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8104908:	461a      	mov	r2, r3
 810490a:	2101      	movs	r1, #1
 810490c:	f007 fac6 	bl	810be9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8104910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104912:	b2db      	uxtb	r3, r3
 8104914:	4619      	mov	r1, r3
 8104916:	6878      	ldr	r0, [r7, #4]
 8104918:	f009 fe5b 	bl	810e5d2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 810491c:	693b      	ldr	r3, [r7, #16]
 810491e:	f003 0308 	and.w	r3, r3, #8
 8104922:	2b00      	cmp	r3, #0
 8104924:	d008      	beq.n	8104938 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8104926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104928:	015a      	lsls	r2, r3, #5
 810492a:	69fb      	ldr	r3, [r7, #28]
 810492c:	4413      	add	r3, r2
 810492e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8104932:	461a      	mov	r2, r3
 8104934:	2308      	movs	r3, #8
 8104936:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8104938:	693b      	ldr	r3, [r7, #16]
 810493a:	f003 0310 	and.w	r3, r3, #16
 810493e:	2b00      	cmp	r3, #0
 8104940:	d008      	beq.n	8104954 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8104942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104944:	015a      	lsls	r2, r3, #5
 8104946:	69fb      	ldr	r3, [r7, #28]
 8104948:	4413      	add	r3, r2
 810494a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810494e:	461a      	mov	r2, r3
 8104950:	2310      	movs	r3, #16
 8104952:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8104954:	693b      	ldr	r3, [r7, #16]
 8104956:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 810495a:	2b00      	cmp	r3, #0
 810495c:	d008      	beq.n	8104970 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 810495e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104960:	015a      	lsls	r2, r3, #5
 8104962:	69fb      	ldr	r3, [r7, #28]
 8104964:	4413      	add	r3, r2
 8104966:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810496a:	461a      	mov	r2, r3
 810496c:	2340      	movs	r3, #64	@ 0x40
 810496e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8104970:	693b      	ldr	r3, [r7, #16]
 8104972:	f003 0302 	and.w	r3, r3, #2
 8104976:	2b00      	cmp	r3, #0
 8104978:	d023      	beq.n	81049c2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 810497a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 810497c:	6a38      	ldr	r0, [r7, #32]
 810497e:	f006 faad 	bl	810aedc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8104982:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104984:	4613      	mov	r3, r2
 8104986:	00db      	lsls	r3, r3, #3
 8104988:	4413      	add	r3, r2
 810498a:	009b      	lsls	r3, r3, #2
 810498c:	3310      	adds	r3, #16
 810498e:	687a      	ldr	r2, [r7, #4]
 8104990:	4413      	add	r3, r2
 8104992:	3304      	adds	r3, #4
 8104994:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8104996:	697b      	ldr	r3, [r7, #20]
 8104998:	78db      	ldrb	r3, [r3, #3]
 810499a:	2b01      	cmp	r3, #1
 810499c:	d108      	bne.n	81049b0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 810499e:	697b      	ldr	r3, [r7, #20]
 81049a0:	2200      	movs	r2, #0
 81049a2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 81049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81049a6:	b2db      	uxtb	r3, r3
 81049a8:	4619      	mov	r1, r3
 81049aa:	6878      	ldr	r0, [r7, #4]
 81049ac:	f009 fea8 	bl	810e700 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 81049b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81049b2:	015a      	lsls	r2, r3, #5
 81049b4:	69fb      	ldr	r3, [r7, #28]
 81049b6:	4413      	add	r3, r2
 81049b8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 81049bc:	461a      	mov	r2, r3
 81049be:	2302      	movs	r3, #2
 81049c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 81049c2:	693b      	ldr	r3, [r7, #16]
 81049c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 81049c8:	2b00      	cmp	r3, #0
 81049ca:	d003      	beq.n	81049d4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 81049cc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 81049ce:	6878      	ldr	r0, [r7, #4]
 81049d0:	f000 fcea 	bl	81053a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 81049d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81049d6:	3301      	adds	r3, #1
 81049d8:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 81049da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81049dc:	085b      	lsrs	r3, r3, #1
 81049de:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 81049e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81049e2:	2b00      	cmp	r3, #0
 81049e4:	f47f af2e 	bne.w	8104844 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 81049e8:	687b      	ldr	r3, [r7, #4]
 81049ea:	681b      	ldr	r3, [r3, #0]
 81049ec:	4618      	mov	r0, r3
 81049ee:	f007 f991 	bl	810bd14 <USB_ReadInterrupts>
 81049f2:	4603      	mov	r3, r0
 81049f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 81049f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 81049fc:	d122      	bne.n	8104a44 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 81049fe:	69fb      	ldr	r3, [r7, #28]
 8104a00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104a04:	685b      	ldr	r3, [r3, #4]
 8104a06:	69fa      	ldr	r2, [r7, #28]
 8104a08:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104a0c:	f023 0301 	bic.w	r3, r3, #1
 8104a10:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8104a12:	687b      	ldr	r3, [r7, #4]
 8104a14:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8104a18:	2b01      	cmp	r3, #1
 8104a1a:	d108      	bne.n	8104a2e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8104a1c:	687b      	ldr	r3, [r7, #4]
 8104a1e:	2200      	movs	r2, #0
 8104a20:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8104a24:	2100      	movs	r1, #0
 8104a26:	6878      	ldr	r0, [r7, #4]
 8104a28:	f000 fef4 	bl	8105814 <HAL_PCDEx_LPM_Callback>
 8104a2c:	e002      	b.n	8104a34 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8104a2e:	6878      	ldr	r0, [r7, #4]
 8104a30:	f009 fe46 	bl	810e6c0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8104a34:	687b      	ldr	r3, [r7, #4]
 8104a36:	681b      	ldr	r3, [r3, #0]
 8104a38:	695a      	ldr	r2, [r3, #20]
 8104a3a:	687b      	ldr	r3, [r7, #4]
 8104a3c:	681b      	ldr	r3, [r3, #0]
 8104a3e:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8104a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8104a44:	687b      	ldr	r3, [r7, #4]
 8104a46:	681b      	ldr	r3, [r3, #0]
 8104a48:	4618      	mov	r0, r3
 8104a4a:	f007 f963 	bl	810bd14 <USB_ReadInterrupts>
 8104a4e:	4603      	mov	r3, r0
 8104a50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104a54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104a58:	d112      	bne.n	8104a80 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8104a5a:	69fb      	ldr	r3, [r7, #28]
 8104a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104a60:	689b      	ldr	r3, [r3, #8]
 8104a62:	f003 0301 	and.w	r3, r3, #1
 8104a66:	2b01      	cmp	r3, #1
 8104a68:	d102      	bne.n	8104a70 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8104a6a:	6878      	ldr	r0, [r7, #4]
 8104a6c:	f009 fe02 	bl	810e674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8104a70:	687b      	ldr	r3, [r7, #4]
 8104a72:	681b      	ldr	r3, [r3, #0]
 8104a74:	695a      	ldr	r2, [r3, #20]
 8104a76:	687b      	ldr	r3, [r7, #4]
 8104a78:	681b      	ldr	r3, [r3, #0]
 8104a7a:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8104a7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8104a80:	687b      	ldr	r3, [r7, #4]
 8104a82:	681b      	ldr	r3, [r3, #0]
 8104a84:	4618      	mov	r0, r3
 8104a86:	f007 f945 	bl	810bd14 <USB_ReadInterrupts>
 8104a8a:	4603      	mov	r3, r0
 8104a8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104a90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8104a94:	d121      	bne.n	8104ada <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8104a96:	687b      	ldr	r3, [r7, #4]
 8104a98:	681b      	ldr	r3, [r3, #0]
 8104a9a:	695a      	ldr	r2, [r3, #20]
 8104a9c:	687b      	ldr	r3, [r7, #4]
 8104a9e:	681b      	ldr	r3, [r3, #0]
 8104aa0:	f002 6200 	and.w	r2, r2, #134217728	@ 0x8000000
 8104aa4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8104aa6:	687b      	ldr	r3, [r7, #4]
 8104aa8:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8104aac:	2b00      	cmp	r3, #0
 8104aae:	d111      	bne.n	8104ad4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8104ab0:	687b      	ldr	r3, [r7, #4]
 8104ab2:	2201      	movs	r2, #1
 8104ab4:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8104ab8:	687b      	ldr	r3, [r7, #4]
 8104aba:	681b      	ldr	r3, [r3, #0]
 8104abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104abe:	089b      	lsrs	r3, r3, #2
 8104ac0:	f003 020f 	and.w	r2, r3, #15
 8104ac4:	687b      	ldr	r3, [r7, #4]
 8104ac6:	f8c3 24d0 	str.w	r2, [r3, #1232]	@ 0x4d0

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8104aca:	2101      	movs	r1, #1
 8104acc:	6878      	ldr	r0, [r7, #4]
 8104ace:	f000 fea1 	bl	8105814 <HAL_PCDEx_LPM_Callback>
 8104ad2:	e002      	b.n	8104ada <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8104ad4:	6878      	ldr	r0, [r7, #4]
 8104ad6:	f009 fdcd 	bl	810e674 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8104ada:	687b      	ldr	r3, [r7, #4]
 8104adc:	681b      	ldr	r3, [r3, #0]
 8104ade:	4618      	mov	r0, r3
 8104ae0:	f007 f918 	bl	810bd14 <USB_ReadInterrupts>
 8104ae4:	4603      	mov	r3, r0
 8104ae6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8104aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104aee:	f040 80b7 	bne.w	8104c60 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8104af2:	69fb      	ldr	r3, [r7, #28]
 8104af4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104af8:	685b      	ldr	r3, [r3, #4]
 8104afa:	69fa      	ldr	r2, [r7, #28]
 8104afc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104b00:	f023 0301 	bic.w	r3, r3, #1
 8104b04:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8104b06:	687b      	ldr	r3, [r7, #4]
 8104b08:	681b      	ldr	r3, [r3, #0]
 8104b0a:	2110      	movs	r1, #16
 8104b0c:	4618      	mov	r0, r3
 8104b0e:	f006 f9e5 	bl	810aedc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104b12:	2300      	movs	r3, #0
 8104b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104b16:	e046      	b.n	8104ba6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8104b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b1a:	015a      	lsls	r2, r3, #5
 8104b1c:	69fb      	ldr	r3, [r7, #28]
 8104b1e:	4413      	add	r3, r2
 8104b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8104b24:	461a      	mov	r2, r3
 8104b26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8104b2a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8104b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b2e:	015a      	lsls	r2, r3, #5
 8104b30:	69fb      	ldr	r3, [r7, #28]
 8104b32:	4413      	add	r3, r2
 8104b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8104b38:	681b      	ldr	r3, [r3, #0]
 8104b3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104b3c:	0151      	lsls	r1, r2, #5
 8104b3e:	69fa      	ldr	r2, [r7, #28]
 8104b40:	440a      	add	r2, r1
 8104b42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8104b46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8104b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8104b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b4e:	015a      	lsls	r2, r3, #5
 8104b50:	69fb      	ldr	r3, [r7, #28]
 8104b52:	4413      	add	r3, r2
 8104b54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104b58:	461a      	mov	r2, r3
 8104b5a:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8104b5e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8104b60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b62:	015a      	lsls	r2, r3, #5
 8104b64:	69fb      	ldr	r3, [r7, #28]
 8104b66:	4413      	add	r3, r2
 8104b68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104b6c:	681b      	ldr	r3, [r3, #0]
 8104b6e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104b70:	0151      	lsls	r1, r2, #5
 8104b72:	69fa      	ldr	r2, [r7, #28]
 8104b74:	440a      	add	r2, r1
 8104b76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8104b7a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8104b7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8104b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104b82:	015a      	lsls	r2, r3, #5
 8104b84:	69fb      	ldr	r3, [r7, #28]
 8104b86:	4413      	add	r3, r2
 8104b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104b8c:	681b      	ldr	r3, [r3, #0]
 8104b8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8104b90:	0151      	lsls	r1, r2, #5
 8104b92:	69fa      	ldr	r2, [r7, #28]
 8104b94:	440a      	add	r2, r1
 8104b96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8104b9a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8104b9e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8104ba0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104ba2:	3301      	adds	r3, #1
 8104ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104ba6:	687b      	ldr	r3, [r7, #4]
 8104ba8:	791b      	ldrb	r3, [r3, #4]
 8104baa:	461a      	mov	r2, r3
 8104bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8104bae:	4293      	cmp	r3, r2
 8104bb0:	d3b2      	bcc.n	8104b18 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8104bb2:	69fb      	ldr	r3, [r7, #28]
 8104bb4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104bb8:	69db      	ldr	r3, [r3, #28]
 8104bba:	69fa      	ldr	r2, [r7, #28]
 8104bbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104bc0:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8104bc4:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8104bc6:	687b      	ldr	r3, [r7, #4]
 8104bc8:	7bdb      	ldrb	r3, [r3, #15]
 8104bca:	2b00      	cmp	r3, #0
 8104bcc:	d016      	beq.n	8104bfc <HAL_PCD_IRQHandler+0x68e>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8104bce:	69fb      	ldr	r3, [r7, #28]
 8104bd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104bd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104bd8:	69fa      	ldr	r2, [r7, #28]
 8104bda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104bde:	f043 030b 	orr.w	r3, r3, #11
 8104be2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8104be6:	69fb      	ldr	r3, [r7, #28]
 8104be8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104bee:	69fa      	ldr	r2, [r7, #28]
 8104bf0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104bf4:	f043 030b 	orr.w	r3, r3, #11
 8104bf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8104bfa:	e015      	b.n	8104c28 <HAL_PCD_IRQHandler+0x6ba>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8104bfc:	69fb      	ldr	r3, [r7, #28]
 8104bfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104c02:	695b      	ldr	r3, [r3, #20]
 8104c04:	69fa      	ldr	r2, [r7, #28]
 8104c06:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104c0a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8104c0e:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8104c12:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8104c14:	69fb      	ldr	r3, [r7, #28]
 8104c16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104c1a:	691b      	ldr	r3, [r3, #16]
 8104c1c:	69fa      	ldr	r2, [r7, #28]
 8104c1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104c22:	f043 030b 	orr.w	r3, r3, #11
 8104c26:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8104c28:	69fb      	ldr	r3, [r7, #28]
 8104c2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	69fa      	ldr	r2, [r7, #28]
 8104c32:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104c36:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8104c3a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8104c3c:	687b      	ldr	r3, [r7, #4]
 8104c3e:	6818      	ldr	r0, [r3, #0]
 8104c40:	687b      	ldr	r3, [r7, #4]
 8104c42:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8104c44:	687b      	ldr	r3, [r7, #4]
 8104c46:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8104c4a:	461a      	mov	r2, r3
 8104c4c:	f007 f926 	bl	810be9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8104c50:	687b      	ldr	r3, [r7, #4]
 8104c52:	681b      	ldr	r3, [r3, #0]
 8104c54:	695a      	ldr	r2, [r3, #20]
 8104c56:	687b      	ldr	r3, [r7, #4]
 8104c58:	681b      	ldr	r3, [r3, #0]
 8104c5a:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8104c5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8104c60:	687b      	ldr	r3, [r7, #4]
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	4618      	mov	r0, r3
 8104c66:	f007 f855 	bl	810bd14 <USB_ReadInterrupts>
 8104c6a:	4603      	mov	r3, r0
 8104c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8104c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8104c74:	d123      	bne.n	8104cbe <HAL_PCD_IRQHandler+0x750>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8104c76:	687b      	ldr	r3, [r7, #4]
 8104c78:	681b      	ldr	r3, [r3, #0]
 8104c7a:	4618      	mov	r0, r3
 8104c7c:	f007 f8eb 	bl	810be56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	681b      	ldr	r3, [r3, #0]
 8104c84:	4618      	mov	r0, r3
 8104c86:	f006 f9a2 	bl	810afce <USB_GetDevSpeed>
 8104c8a:	4603      	mov	r3, r0
 8104c8c:	461a      	mov	r2, r3
 8104c8e:	687b      	ldr	r3, [r7, #4]
 8104c90:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8104c92:	687b      	ldr	r3, [r7, #4]
 8104c94:	681c      	ldr	r4, [r3, #0]
 8104c96:	f000 ffdb 	bl	8105c50 <HAL_RCC_GetHCLKFreq>
 8104c9a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8104c9c:	687b      	ldr	r3, [r7, #4]
 8104c9e:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8104ca0:	461a      	mov	r2, r3
 8104ca2:	4620      	mov	r0, r4
 8104ca4:	f005 feac 	bl	810aa00 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8104ca8:	6878      	ldr	r0, [r7, #4]
 8104caa:	f009 fcba 	bl	810e622 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8104cae:	687b      	ldr	r3, [r7, #4]
 8104cb0:	681b      	ldr	r3, [r3, #0]
 8104cb2:	695a      	ldr	r2, [r3, #20]
 8104cb4:	687b      	ldr	r3, [r7, #4]
 8104cb6:	681b      	ldr	r3, [r3, #0]
 8104cb8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8104cbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	681b      	ldr	r3, [r3, #0]
 8104cc2:	4618      	mov	r0, r3
 8104cc4:	f007 f826 	bl	810bd14 <USB_ReadInterrupts>
 8104cc8:	4603      	mov	r3, r0
 8104cca:	f003 0308 	and.w	r3, r3, #8
 8104cce:	2b08      	cmp	r3, #8
 8104cd0:	d10a      	bne.n	8104ce8 <HAL_PCD_IRQHandler+0x77a>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8104cd2:	6878      	ldr	r0, [r7, #4]
 8104cd4:	f009 fc97 	bl	810e606 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8104cd8:	687b      	ldr	r3, [r7, #4]
 8104cda:	681b      	ldr	r3, [r3, #0]
 8104cdc:	695a      	ldr	r2, [r3, #20]
 8104cde:	687b      	ldr	r3, [r7, #4]
 8104ce0:	681b      	ldr	r3, [r3, #0]
 8104ce2:	f002 0208 	and.w	r2, r2, #8
 8104ce6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8104ce8:	687b      	ldr	r3, [r7, #4]
 8104cea:	681b      	ldr	r3, [r3, #0]
 8104cec:	4618      	mov	r0, r3
 8104cee:	f007 f811 	bl	810bd14 <USB_ReadInterrupts>
 8104cf2:	4603      	mov	r3, r0
 8104cf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104cf8:	2b80      	cmp	r3, #128	@ 0x80
 8104cfa:	d123      	bne.n	8104d44 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8104cfc:	6a3b      	ldr	r3, [r7, #32]
 8104cfe:	699b      	ldr	r3, [r3, #24]
 8104d00:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8104d04:	6a3b      	ldr	r3, [r7, #32]
 8104d06:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104d08:	2301      	movs	r3, #1
 8104d0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8104d0c:	e014      	b.n	8104d38 <HAL_PCD_IRQHandler+0x7ca>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8104d0e:	6879      	ldr	r1, [r7, #4]
 8104d10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104d12:	4613      	mov	r3, r2
 8104d14:	00db      	lsls	r3, r3, #3
 8104d16:	4413      	add	r3, r2
 8104d18:	009b      	lsls	r3, r3, #2
 8104d1a:	440b      	add	r3, r1
 8104d1c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8104d20:	781b      	ldrb	r3, [r3, #0]
 8104d22:	2b01      	cmp	r3, #1
 8104d24:	d105      	bne.n	8104d32 <HAL_PCD_IRQHandler+0x7c4>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8104d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d28:	b2db      	uxtb	r3, r3
 8104d2a:	4619      	mov	r1, r3
 8104d2c:	6878      	ldr	r0, [r7, #4]
 8104d2e:	f000 fb0a 	bl	8105346 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d34:	3301      	adds	r3, #1
 8104d36:	627b      	str	r3, [r7, #36]	@ 0x24
 8104d38:	687b      	ldr	r3, [r7, #4]
 8104d3a:	791b      	ldrb	r3, [r3, #4]
 8104d3c:	461a      	mov	r2, r3
 8104d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d40:	4293      	cmp	r3, r2
 8104d42:	d3e4      	bcc.n	8104d0e <HAL_PCD_IRQHandler+0x7a0>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8104d44:	687b      	ldr	r3, [r7, #4]
 8104d46:	681b      	ldr	r3, [r3, #0]
 8104d48:	4618      	mov	r0, r3
 8104d4a:	f006 ffe3 	bl	810bd14 <USB_ReadInterrupts>
 8104d4e:	4603      	mov	r3, r0
 8104d50:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8104d54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8104d58:	d13c      	bne.n	8104dd4 <HAL_PCD_IRQHandler+0x866>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104d5a:	2301      	movs	r3, #1
 8104d5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8104d5e:	e02b      	b.n	8104db8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8104d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104d62:	015a      	lsls	r2, r3, #5
 8104d64:	69fb      	ldr	r3, [r7, #28]
 8104d66:	4413      	add	r3, r2
 8104d68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8104d6c:	681b      	ldr	r3, [r3, #0]
 8104d6e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8104d70:	6879      	ldr	r1, [r7, #4]
 8104d72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104d74:	4613      	mov	r3, r2
 8104d76:	00db      	lsls	r3, r3, #3
 8104d78:	4413      	add	r3, r2
 8104d7a:	009b      	lsls	r3, r3, #2
 8104d7c:	440b      	add	r3, r1
 8104d7e:	3318      	adds	r3, #24
 8104d80:	781b      	ldrb	r3, [r3, #0]
 8104d82:	2b01      	cmp	r3, #1
 8104d84:	d115      	bne.n	8104db2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8104d86:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8104d88:	2b00      	cmp	r3, #0
 8104d8a:	da12      	bge.n	8104db2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8104d8c:	6879      	ldr	r1, [r7, #4]
 8104d8e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104d90:	4613      	mov	r3, r2
 8104d92:	00db      	lsls	r3, r3, #3
 8104d94:	4413      	add	r3, r2
 8104d96:	009b      	lsls	r3, r3, #2
 8104d98:	440b      	add	r3, r1
 8104d9a:	3317      	adds	r3, #23
 8104d9c:	2201      	movs	r2, #1
 8104d9e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8104da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104da2:	b2db      	uxtb	r3, r3
 8104da4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8104da8:	b2db      	uxtb	r3, r3
 8104daa:	4619      	mov	r1, r3
 8104dac:	6878      	ldr	r0, [r7, #4]
 8104dae:	f000 faca 	bl	8105346 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104db4:	3301      	adds	r3, #1
 8104db6:	627b      	str	r3, [r7, #36]	@ 0x24
 8104db8:	687b      	ldr	r3, [r7, #4]
 8104dba:	791b      	ldrb	r3, [r3, #4]
 8104dbc:	461a      	mov	r2, r3
 8104dbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104dc0:	4293      	cmp	r3, r2
 8104dc2:	d3cd      	bcc.n	8104d60 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8104dc4:	687b      	ldr	r3, [r7, #4]
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	695a      	ldr	r2, [r3, #20]
 8104dca:	687b      	ldr	r3, [r7, #4]
 8104dcc:	681b      	ldr	r3, [r3, #0]
 8104dce:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8104dd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8104dd4:	687b      	ldr	r3, [r7, #4]
 8104dd6:	681b      	ldr	r3, [r3, #0]
 8104dd8:	4618      	mov	r0, r3
 8104dda:	f006 ff9b 	bl	810bd14 <USB_ReadInterrupts>
 8104dde:	4603      	mov	r3, r0
 8104de0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8104de4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8104de8:	d156      	bne.n	8104e98 <HAL_PCD_IRQHandler+0x92a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104dea:	2301      	movs	r3, #1
 8104dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8104dee:	e045      	b.n	8104e7c <HAL_PCD_IRQHandler+0x90e>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8104df0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104df2:	015a      	lsls	r2, r3, #5
 8104df4:	69fb      	ldr	r3, [r7, #28]
 8104df6:	4413      	add	r3, r2
 8104df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8104dfc:	681b      	ldr	r3, [r3, #0]
 8104dfe:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8104e00:	6879      	ldr	r1, [r7, #4]
 8104e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104e04:	4613      	mov	r3, r2
 8104e06:	00db      	lsls	r3, r3, #3
 8104e08:	4413      	add	r3, r2
 8104e0a:	009b      	lsls	r3, r3, #2
 8104e0c:	440b      	add	r3, r1
 8104e0e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8104e12:	781b      	ldrb	r3, [r3, #0]
 8104e14:	2b01      	cmp	r3, #1
 8104e16:	d12e      	bne.n	8104e76 <HAL_PCD_IRQHandler+0x908>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8104e18:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8104e1a:	2b00      	cmp	r3, #0
 8104e1c:	da2b      	bge.n	8104e76 <HAL_PCD_IRQHandler+0x908>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8104e1e:	69bb      	ldr	r3, [r7, #24]
 8104e20:	0c1a      	lsrs	r2, r3, #16
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8104e28:	4053      	eors	r3, r2
 8104e2a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8104e2e:	2b00      	cmp	r3, #0
 8104e30:	d121      	bne.n	8104e76 <HAL_PCD_IRQHandler+0x908>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8104e32:	6879      	ldr	r1, [r7, #4]
 8104e34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8104e36:	4613      	mov	r3, r2
 8104e38:	00db      	lsls	r3, r3, #3
 8104e3a:	4413      	add	r3, r2
 8104e3c:	009b      	lsls	r3, r3, #2
 8104e3e:	440b      	add	r3, r1
 8104e40:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8104e44:	2201      	movs	r2, #1
 8104e46:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8104e48:	6a3b      	ldr	r3, [r7, #32]
 8104e4a:	699b      	ldr	r3, [r3, #24]
 8104e4c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8104e50:	6a3b      	ldr	r3, [r7, #32]
 8104e52:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8104e54:	6a3b      	ldr	r3, [r7, #32]
 8104e56:	695b      	ldr	r3, [r3, #20]
 8104e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8104e5c:	2b00      	cmp	r3, #0
 8104e5e:	d10a      	bne.n	8104e76 <HAL_PCD_IRQHandler+0x908>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8104e60:	69fb      	ldr	r3, [r7, #28]
 8104e62:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8104e66:	685b      	ldr	r3, [r3, #4]
 8104e68:	69fa      	ldr	r2, [r7, #28]
 8104e6a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8104e6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8104e72:	6053      	str	r3, [r2, #4]
            break;
 8104e74:	e008      	b.n	8104e88 <HAL_PCD_IRQHandler+0x91a>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8104e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104e78:	3301      	adds	r3, #1
 8104e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8104e7c:	687b      	ldr	r3, [r7, #4]
 8104e7e:	791b      	ldrb	r3, [r3, #4]
 8104e80:	461a      	mov	r2, r3
 8104e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8104e84:	4293      	cmp	r3, r2
 8104e86:	d3b3      	bcc.n	8104df0 <HAL_PCD_IRQHandler+0x882>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8104e88:	687b      	ldr	r3, [r7, #4]
 8104e8a:	681b      	ldr	r3, [r3, #0]
 8104e8c:	695a      	ldr	r2, [r3, #20]
 8104e8e:	687b      	ldr	r3, [r7, #4]
 8104e90:	681b      	ldr	r3, [r3, #0]
 8104e92:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8104e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8104e98:	687b      	ldr	r3, [r7, #4]
 8104e9a:	681b      	ldr	r3, [r3, #0]
 8104e9c:	4618      	mov	r0, r3
 8104e9e:	f006 ff39 	bl	810bd14 <USB_ReadInterrupts>
 8104ea2:	4603      	mov	r3, r0
 8104ea4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8104ea8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8104eac:	d10a      	bne.n	8104ec4 <HAL_PCD_IRQHandler+0x956>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8104eae:	6878      	ldr	r0, [r7, #4]
 8104eb0:	f009 fc38 	bl	810e724 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8104eb4:	687b      	ldr	r3, [r7, #4]
 8104eb6:	681b      	ldr	r3, [r3, #0]
 8104eb8:	695a      	ldr	r2, [r3, #20]
 8104eba:	687b      	ldr	r3, [r7, #4]
 8104ebc:	681b      	ldr	r3, [r3, #0]
 8104ebe:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8104ec2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8104ec4:	687b      	ldr	r3, [r7, #4]
 8104ec6:	681b      	ldr	r3, [r3, #0]
 8104ec8:	4618      	mov	r0, r3
 8104eca:	f006 ff23 	bl	810bd14 <USB_ReadInterrupts>
 8104ece:	4603      	mov	r3, r0
 8104ed0:	f003 0304 	and.w	r3, r3, #4
 8104ed4:	2b04      	cmp	r3, #4
 8104ed6:	d115      	bne.n	8104f04 <HAL_PCD_IRQHandler+0x996>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8104ed8:	687b      	ldr	r3, [r7, #4]
 8104eda:	681b      	ldr	r3, [r3, #0]
 8104edc:	685b      	ldr	r3, [r3, #4]
 8104ede:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8104ee0:	69bb      	ldr	r3, [r7, #24]
 8104ee2:	f003 0304 	and.w	r3, r3, #4
 8104ee6:	2b00      	cmp	r3, #0
 8104ee8:	d002      	beq.n	8104ef0 <HAL_PCD_IRQHandler+0x982>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8104eea:	6878      	ldr	r0, [r7, #4]
 8104eec:	f009 fc28 	bl	810e740 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8104ef0:	687b      	ldr	r3, [r7, #4]
 8104ef2:	681b      	ldr	r3, [r3, #0]
 8104ef4:	6859      	ldr	r1, [r3, #4]
 8104ef6:	687b      	ldr	r3, [r7, #4]
 8104ef8:	681b      	ldr	r3, [r3, #0]
 8104efa:	69ba      	ldr	r2, [r7, #24]
 8104efc:	430a      	orrs	r2, r1
 8104efe:	605a      	str	r2, [r3, #4]
 8104f00:	e000      	b.n	8104f04 <HAL_PCD_IRQHandler+0x996>
      return;
 8104f02:	bf00      	nop
    }
  }
}
 8104f04:	3734      	adds	r7, #52	@ 0x34
 8104f06:	46bd      	mov	sp, r7
 8104f08:	bd90      	pop	{r4, r7, pc}

08104f0a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8104f0a:	b580      	push	{r7, lr}
 8104f0c:	b082      	sub	sp, #8
 8104f0e:	af00      	add	r7, sp, #0
 8104f10:	6078      	str	r0, [r7, #4]
 8104f12:	460b      	mov	r3, r1
 8104f14:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8104f16:	687b      	ldr	r3, [r7, #4]
 8104f18:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8104f1c:	2b01      	cmp	r3, #1
 8104f1e:	d101      	bne.n	8104f24 <HAL_PCD_SetAddress+0x1a>
 8104f20:	2302      	movs	r3, #2
 8104f22:	e012      	b.n	8104f4a <HAL_PCD_SetAddress+0x40>
 8104f24:	687b      	ldr	r3, [r7, #4]
 8104f26:	2201      	movs	r2, #1
 8104f28:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8104f2c:	687b      	ldr	r3, [r7, #4]
 8104f2e:	78fa      	ldrb	r2, [r7, #3]
 8104f30:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8104f32:	687b      	ldr	r3, [r7, #4]
 8104f34:	681b      	ldr	r3, [r3, #0]
 8104f36:	78fa      	ldrb	r2, [r7, #3]
 8104f38:	4611      	mov	r1, r2
 8104f3a:	4618      	mov	r0, r3
 8104f3c:	f006 fe82 	bl	810bc44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8104f40:	687b      	ldr	r3, [r7, #4]
 8104f42:	2200      	movs	r2, #0
 8104f44:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8104f48:	2300      	movs	r3, #0
}
 8104f4a:	4618      	mov	r0, r3
 8104f4c:	3708      	adds	r7, #8
 8104f4e:	46bd      	mov	sp, r7
 8104f50:	bd80      	pop	{r7, pc}

08104f52 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8104f52:	b580      	push	{r7, lr}
 8104f54:	b084      	sub	sp, #16
 8104f56:	af00      	add	r7, sp, #0
 8104f58:	6078      	str	r0, [r7, #4]
 8104f5a:	4608      	mov	r0, r1
 8104f5c:	4611      	mov	r1, r2
 8104f5e:	461a      	mov	r2, r3
 8104f60:	4603      	mov	r3, r0
 8104f62:	70fb      	strb	r3, [r7, #3]
 8104f64:	460b      	mov	r3, r1
 8104f66:	803b      	strh	r3, [r7, #0]
 8104f68:	4613      	mov	r3, r2
 8104f6a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8104f6c:	2300      	movs	r3, #0
 8104f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8104f70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8104f74:	2b00      	cmp	r3, #0
 8104f76:	da0f      	bge.n	8104f98 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8104f78:	78fb      	ldrb	r3, [r7, #3]
 8104f7a:	f003 020f 	and.w	r2, r3, #15
 8104f7e:	4613      	mov	r3, r2
 8104f80:	00db      	lsls	r3, r3, #3
 8104f82:	4413      	add	r3, r2
 8104f84:	009b      	lsls	r3, r3, #2
 8104f86:	3310      	adds	r3, #16
 8104f88:	687a      	ldr	r2, [r7, #4]
 8104f8a:	4413      	add	r3, r2
 8104f8c:	3304      	adds	r3, #4
 8104f8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8104f90:	68fb      	ldr	r3, [r7, #12]
 8104f92:	2201      	movs	r2, #1
 8104f94:	705a      	strb	r2, [r3, #1]
 8104f96:	e00f      	b.n	8104fb8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8104f98:	78fb      	ldrb	r3, [r7, #3]
 8104f9a:	f003 020f 	and.w	r2, r3, #15
 8104f9e:	4613      	mov	r3, r2
 8104fa0:	00db      	lsls	r3, r3, #3
 8104fa2:	4413      	add	r3, r2
 8104fa4:	009b      	lsls	r3, r3, #2
 8104fa6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8104faa:	687a      	ldr	r2, [r7, #4]
 8104fac:	4413      	add	r3, r2
 8104fae:	3304      	adds	r3, #4
 8104fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8104fb2:	68fb      	ldr	r3, [r7, #12]
 8104fb4:	2200      	movs	r2, #0
 8104fb6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8104fb8:	78fb      	ldrb	r3, [r7, #3]
 8104fba:	f003 030f 	and.w	r3, r3, #15
 8104fbe:	b2da      	uxtb	r2, r3
 8104fc0:	68fb      	ldr	r3, [r7, #12]
 8104fc2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8104fc4:	883b      	ldrh	r3, [r7, #0]
 8104fc6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8104fca:	68fb      	ldr	r3, [r7, #12]
 8104fcc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8104fce:	68fb      	ldr	r3, [r7, #12]
 8104fd0:	78ba      	ldrb	r2, [r7, #2]
 8104fd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8104fd4:	68fb      	ldr	r3, [r7, #12]
 8104fd6:	785b      	ldrb	r3, [r3, #1]
 8104fd8:	2b00      	cmp	r3, #0
 8104fda:	d004      	beq.n	8104fe6 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8104fdc:	68fb      	ldr	r3, [r7, #12]
 8104fde:	781b      	ldrb	r3, [r3, #0]
 8104fe0:	461a      	mov	r2, r3
 8104fe2:	68fb      	ldr	r3, [r7, #12]
 8104fe4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8104fe6:	78bb      	ldrb	r3, [r7, #2]
 8104fe8:	2b02      	cmp	r3, #2
 8104fea:	d102      	bne.n	8104ff2 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8104fec:	68fb      	ldr	r3, [r7, #12]
 8104fee:	2200      	movs	r2, #0
 8104ff0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8104ff2:	687b      	ldr	r3, [r7, #4]
 8104ff4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8104ff8:	2b01      	cmp	r3, #1
 8104ffa:	d101      	bne.n	8105000 <HAL_PCD_EP_Open+0xae>
 8104ffc:	2302      	movs	r3, #2
 8104ffe:	e00e      	b.n	810501e <HAL_PCD_EP_Open+0xcc>
 8105000:	687b      	ldr	r3, [r7, #4]
 8105002:	2201      	movs	r2, #1
 8105004:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8105008:	687b      	ldr	r3, [r7, #4]
 810500a:	681b      	ldr	r3, [r3, #0]
 810500c:	68f9      	ldr	r1, [r7, #12]
 810500e:	4618      	mov	r0, r3
 8105010:	f006 f802 	bl	810b018 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8105014:	687b      	ldr	r3, [r7, #4]
 8105016:	2200      	movs	r2, #0
 8105018:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 810501c:	7afb      	ldrb	r3, [r7, #11]
}
 810501e:	4618      	mov	r0, r3
 8105020:	3710      	adds	r7, #16
 8105022:	46bd      	mov	sp, r7
 8105024:	bd80      	pop	{r7, pc}

08105026 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8105026:	b580      	push	{r7, lr}
 8105028:	b084      	sub	sp, #16
 810502a:	af00      	add	r7, sp, #0
 810502c:	6078      	str	r0, [r7, #4]
 810502e:	460b      	mov	r3, r1
 8105030:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8105032:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8105036:	2b00      	cmp	r3, #0
 8105038:	da0f      	bge.n	810505a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 810503a:	78fb      	ldrb	r3, [r7, #3]
 810503c:	f003 020f 	and.w	r2, r3, #15
 8105040:	4613      	mov	r3, r2
 8105042:	00db      	lsls	r3, r3, #3
 8105044:	4413      	add	r3, r2
 8105046:	009b      	lsls	r3, r3, #2
 8105048:	3310      	adds	r3, #16
 810504a:	687a      	ldr	r2, [r7, #4]
 810504c:	4413      	add	r3, r2
 810504e:	3304      	adds	r3, #4
 8105050:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8105052:	68fb      	ldr	r3, [r7, #12]
 8105054:	2201      	movs	r2, #1
 8105056:	705a      	strb	r2, [r3, #1]
 8105058:	e00f      	b.n	810507a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 810505a:	78fb      	ldrb	r3, [r7, #3]
 810505c:	f003 020f 	and.w	r2, r3, #15
 8105060:	4613      	mov	r3, r2
 8105062:	00db      	lsls	r3, r3, #3
 8105064:	4413      	add	r3, r2
 8105066:	009b      	lsls	r3, r3, #2
 8105068:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 810506c:	687a      	ldr	r2, [r7, #4]
 810506e:	4413      	add	r3, r2
 8105070:	3304      	adds	r3, #4
 8105072:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8105074:	68fb      	ldr	r3, [r7, #12]
 8105076:	2200      	movs	r2, #0
 8105078:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 810507a:	78fb      	ldrb	r3, [r7, #3]
 810507c:	f003 030f 	and.w	r3, r3, #15
 8105080:	b2da      	uxtb	r2, r3
 8105082:	68fb      	ldr	r3, [r7, #12]
 8105084:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8105086:	687b      	ldr	r3, [r7, #4]
 8105088:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 810508c:	2b01      	cmp	r3, #1
 810508e:	d101      	bne.n	8105094 <HAL_PCD_EP_Close+0x6e>
 8105090:	2302      	movs	r3, #2
 8105092:	e00e      	b.n	81050b2 <HAL_PCD_EP_Close+0x8c>
 8105094:	687b      	ldr	r3, [r7, #4]
 8105096:	2201      	movs	r2, #1
 8105098:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 810509c:	687b      	ldr	r3, [r7, #4]
 810509e:	681b      	ldr	r3, [r3, #0]
 81050a0:	68f9      	ldr	r1, [r7, #12]
 81050a2:	4618      	mov	r0, r3
 81050a4:	f006 f840 	bl	810b128 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 81050a8:	687b      	ldr	r3, [r7, #4]
 81050aa:	2200      	movs	r2, #0
 81050ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 81050b0:	2300      	movs	r3, #0
}
 81050b2:	4618      	mov	r0, r3
 81050b4:	3710      	adds	r7, #16
 81050b6:	46bd      	mov	sp, r7
 81050b8:	bd80      	pop	{r7, pc}

081050ba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 81050ba:	b580      	push	{r7, lr}
 81050bc:	b086      	sub	sp, #24
 81050be:	af00      	add	r7, sp, #0
 81050c0:	60f8      	str	r0, [r7, #12]
 81050c2:	607a      	str	r2, [r7, #4]
 81050c4:	603b      	str	r3, [r7, #0]
 81050c6:	460b      	mov	r3, r1
 81050c8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 81050ca:	7afb      	ldrb	r3, [r7, #11]
 81050cc:	f003 020f 	and.w	r2, r3, #15
 81050d0:	4613      	mov	r3, r2
 81050d2:	00db      	lsls	r3, r3, #3
 81050d4:	4413      	add	r3, r2
 81050d6:	009b      	lsls	r3, r3, #2
 81050d8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 81050dc:	68fa      	ldr	r2, [r7, #12]
 81050de:	4413      	add	r3, r2
 81050e0:	3304      	adds	r3, #4
 81050e2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 81050e4:	697b      	ldr	r3, [r7, #20]
 81050e6:	687a      	ldr	r2, [r7, #4]
 81050e8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 81050ea:	697b      	ldr	r3, [r7, #20]
 81050ec:	683a      	ldr	r2, [r7, #0]
 81050ee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 81050f0:	697b      	ldr	r3, [r7, #20]
 81050f2:	2200      	movs	r2, #0
 81050f4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 81050f6:	697b      	ldr	r3, [r7, #20]
 81050f8:	2200      	movs	r2, #0
 81050fa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 81050fc:	7afb      	ldrb	r3, [r7, #11]
 81050fe:	f003 030f 	and.w	r3, r3, #15
 8105102:	b2da      	uxtb	r2, r3
 8105104:	697b      	ldr	r3, [r7, #20]
 8105106:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8105108:	68fb      	ldr	r3, [r7, #12]
 810510a:	799b      	ldrb	r3, [r3, #6]
 810510c:	2b01      	cmp	r3, #1
 810510e:	d102      	bne.n	8105116 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8105110:	687a      	ldr	r2, [r7, #4]
 8105112:	697b      	ldr	r3, [r7, #20]
 8105114:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8105116:	68fb      	ldr	r3, [r7, #12]
 8105118:	6818      	ldr	r0, [r3, #0]
 810511a:	68fb      	ldr	r3, [r7, #12]
 810511c:	799b      	ldrb	r3, [r3, #6]
 810511e:	461a      	mov	r2, r3
 8105120:	6979      	ldr	r1, [r7, #20]
 8105122:	f006 f8dd 	bl	810b2e0 <USB_EPStartXfer>

  return HAL_OK;
 8105126:	2300      	movs	r3, #0
}
 8105128:	4618      	mov	r0, r3
 810512a:	3718      	adds	r7, #24
 810512c:	46bd      	mov	sp, r7
 810512e:	bd80      	pop	{r7, pc}

08105130 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8105130:	b480      	push	{r7}
 8105132:	b083      	sub	sp, #12
 8105134:	af00      	add	r7, sp, #0
 8105136:	6078      	str	r0, [r7, #4]
 8105138:	460b      	mov	r3, r1
 810513a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 810513c:	78fb      	ldrb	r3, [r7, #3]
 810513e:	f003 020f 	and.w	r2, r3, #15
 8105142:	6879      	ldr	r1, [r7, #4]
 8105144:	4613      	mov	r3, r2
 8105146:	00db      	lsls	r3, r3, #3
 8105148:	4413      	add	r3, r2
 810514a:	009b      	lsls	r3, r3, #2
 810514c:	440b      	add	r3, r1
 810514e:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8105152:	681b      	ldr	r3, [r3, #0]
}
 8105154:	4618      	mov	r0, r3
 8105156:	370c      	adds	r7, #12
 8105158:	46bd      	mov	sp, r7
 810515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810515e:	4770      	bx	lr

08105160 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8105160:	b580      	push	{r7, lr}
 8105162:	b086      	sub	sp, #24
 8105164:	af00      	add	r7, sp, #0
 8105166:	60f8      	str	r0, [r7, #12]
 8105168:	607a      	str	r2, [r7, #4]
 810516a:	603b      	str	r3, [r7, #0]
 810516c:	460b      	mov	r3, r1
 810516e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8105170:	7afb      	ldrb	r3, [r7, #11]
 8105172:	f003 020f 	and.w	r2, r3, #15
 8105176:	4613      	mov	r3, r2
 8105178:	00db      	lsls	r3, r3, #3
 810517a:	4413      	add	r3, r2
 810517c:	009b      	lsls	r3, r3, #2
 810517e:	3310      	adds	r3, #16
 8105180:	68fa      	ldr	r2, [r7, #12]
 8105182:	4413      	add	r3, r2
 8105184:	3304      	adds	r3, #4
 8105186:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8105188:	697b      	ldr	r3, [r7, #20]
 810518a:	687a      	ldr	r2, [r7, #4]
 810518c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 810518e:	697b      	ldr	r3, [r7, #20]
 8105190:	683a      	ldr	r2, [r7, #0]
 8105192:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8105194:	697b      	ldr	r3, [r7, #20]
 8105196:	2200      	movs	r2, #0
 8105198:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 810519a:	697b      	ldr	r3, [r7, #20]
 810519c:	2201      	movs	r2, #1
 810519e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 81051a0:	7afb      	ldrb	r3, [r7, #11]
 81051a2:	f003 030f 	and.w	r3, r3, #15
 81051a6:	b2da      	uxtb	r2, r3
 81051a8:	697b      	ldr	r3, [r7, #20]
 81051aa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 81051ac:	68fb      	ldr	r3, [r7, #12]
 81051ae:	799b      	ldrb	r3, [r3, #6]
 81051b0:	2b01      	cmp	r3, #1
 81051b2:	d102      	bne.n	81051ba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 81051b4:	687a      	ldr	r2, [r7, #4]
 81051b6:	697b      	ldr	r3, [r7, #20]
 81051b8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 81051ba:	68fb      	ldr	r3, [r7, #12]
 81051bc:	6818      	ldr	r0, [r3, #0]
 81051be:	68fb      	ldr	r3, [r7, #12]
 81051c0:	799b      	ldrb	r3, [r3, #6]
 81051c2:	461a      	mov	r2, r3
 81051c4:	6979      	ldr	r1, [r7, #20]
 81051c6:	f006 f88b 	bl	810b2e0 <USB_EPStartXfer>

  return HAL_OK;
 81051ca:	2300      	movs	r3, #0
}
 81051cc:	4618      	mov	r0, r3
 81051ce:	3718      	adds	r7, #24
 81051d0:	46bd      	mov	sp, r7
 81051d2:	bd80      	pop	{r7, pc}

081051d4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 81051d4:	b580      	push	{r7, lr}
 81051d6:	b084      	sub	sp, #16
 81051d8:	af00      	add	r7, sp, #0
 81051da:	6078      	str	r0, [r7, #4]
 81051dc:	460b      	mov	r3, r1
 81051de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 81051e0:	78fb      	ldrb	r3, [r7, #3]
 81051e2:	f003 030f 	and.w	r3, r3, #15
 81051e6:	687a      	ldr	r2, [r7, #4]
 81051e8:	7912      	ldrb	r2, [r2, #4]
 81051ea:	4293      	cmp	r3, r2
 81051ec:	d901      	bls.n	81051f2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 81051ee:	2301      	movs	r3, #1
 81051f0:	e04f      	b.n	8105292 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 81051f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81051f6:	2b00      	cmp	r3, #0
 81051f8:	da0f      	bge.n	810521a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81051fa:	78fb      	ldrb	r3, [r7, #3]
 81051fc:	f003 020f 	and.w	r2, r3, #15
 8105200:	4613      	mov	r3, r2
 8105202:	00db      	lsls	r3, r3, #3
 8105204:	4413      	add	r3, r2
 8105206:	009b      	lsls	r3, r3, #2
 8105208:	3310      	adds	r3, #16
 810520a:	687a      	ldr	r2, [r7, #4]
 810520c:	4413      	add	r3, r2
 810520e:	3304      	adds	r3, #4
 8105210:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8105212:	68fb      	ldr	r3, [r7, #12]
 8105214:	2201      	movs	r2, #1
 8105216:	705a      	strb	r2, [r3, #1]
 8105218:	e00d      	b.n	8105236 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 810521a:	78fa      	ldrb	r2, [r7, #3]
 810521c:	4613      	mov	r3, r2
 810521e:	00db      	lsls	r3, r3, #3
 8105220:	4413      	add	r3, r2
 8105222:	009b      	lsls	r3, r3, #2
 8105224:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8105228:	687a      	ldr	r2, [r7, #4]
 810522a:	4413      	add	r3, r2
 810522c:	3304      	adds	r3, #4
 810522e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8105230:	68fb      	ldr	r3, [r7, #12]
 8105232:	2200      	movs	r2, #0
 8105234:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8105236:	68fb      	ldr	r3, [r7, #12]
 8105238:	2201      	movs	r2, #1
 810523a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 810523c:	78fb      	ldrb	r3, [r7, #3]
 810523e:	f003 030f 	and.w	r3, r3, #15
 8105242:	b2da      	uxtb	r2, r3
 8105244:	68fb      	ldr	r3, [r7, #12]
 8105246:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8105248:	687b      	ldr	r3, [r7, #4]
 810524a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 810524e:	2b01      	cmp	r3, #1
 8105250:	d101      	bne.n	8105256 <HAL_PCD_EP_SetStall+0x82>
 8105252:	2302      	movs	r3, #2
 8105254:	e01d      	b.n	8105292 <HAL_PCD_EP_SetStall+0xbe>
 8105256:	687b      	ldr	r3, [r7, #4]
 8105258:	2201      	movs	r2, #1
 810525a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 810525e:	687b      	ldr	r3, [r7, #4]
 8105260:	681b      	ldr	r3, [r3, #0]
 8105262:	68f9      	ldr	r1, [r7, #12]
 8105264:	4618      	mov	r0, r3
 8105266:	f006 fc19 	bl	810ba9c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 810526a:	78fb      	ldrb	r3, [r7, #3]
 810526c:	f003 030f 	and.w	r3, r3, #15
 8105270:	2b00      	cmp	r3, #0
 8105272:	d109      	bne.n	8105288 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8105274:	687b      	ldr	r3, [r7, #4]
 8105276:	6818      	ldr	r0, [r3, #0]
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	7999      	ldrb	r1, [r3, #6]
 810527c:	687b      	ldr	r3, [r7, #4]
 810527e:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8105282:	461a      	mov	r2, r3
 8105284:	f006 fe0a 	bl	810be9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8105288:	687b      	ldr	r3, [r7, #4]
 810528a:	2200      	movs	r2, #0
 810528c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8105290:	2300      	movs	r3, #0
}
 8105292:	4618      	mov	r0, r3
 8105294:	3710      	adds	r7, #16
 8105296:	46bd      	mov	sp, r7
 8105298:	bd80      	pop	{r7, pc}

0810529a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 810529a:	b580      	push	{r7, lr}
 810529c:	b084      	sub	sp, #16
 810529e:	af00      	add	r7, sp, #0
 81052a0:	6078      	str	r0, [r7, #4]
 81052a2:	460b      	mov	r3, r1
 81052a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 81052a6:	78fb      	ldrb	r3, [r7, #3]
 81052a8:	f003 030f 	and.w	r3, r3, #15
 81052ac:	687a      	ldr	r2, [r7, #4]
 81052ae:	7912      	ldrb	r2, [r2, #4]
 81052b0:	4293      	cmp	r3, r2
 81052b2:	d901      	bls.n	81052b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 81052b4:	2301      	movs	r3, #1
 81052b6:	e042      	b.n	810533e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 81052b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 81052bc:	2b00      	cmp	r3, #0
 81052be:	da0f      	bge.n	81052e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 81052c0:	78fb      	ldrb	r3, [r7, #3]
 81052c2:	f003 020f 	and.w	r2, r3, #15
 81052c6:	4613      	mov	r3, r2
 81052c8:	00db      	lsls	r3, r3, #3
 81052ca:	4413      	add	r3, r2
 81052cc:	009b      	lsls	r3, r3, #2
 81052ce:	3310      	adds	r3, #16
 81052d0:	687a      	ldr	r2, [r7, #4]
 81052d2:	4413      	add	r3, r2
 81052d4:	3304      	adds	r3, #4
 81052d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 81052d8:	68fb      	ldr	r3, [r7, #12]
 81052da:	2201      	movs	r2, #1
 81052dc:	705a      	strb	r2, [r3, #1]
 81052de:	e00f      	b.n	8105300 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 81052e0:	78fb      	ldrb	r3, [r7, #3]
 81052e2:	f003 020f 	and.w	r2, r3, #15
 81052e6:	4613      	mov	r3, r2
 81052e8:	00db      	lsls	r3, r3, #3
 81052ea:	4413      	add	r3, r2
 81052ec:	009b      	lsls	r3, r3, #2
 81052ee:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 81052f2:	687a      	ldr	r2, [r7, #4]
 81052f4:	4413      	add	r3, r2
 81052f6:	3304      	adds	r3, #4
 81052f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 81052fa:	68fb      	ldr	r3, [r7, #12]
 81052fc:	2200      	movs	r2, #0
 81052fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8105300:	68fb      	ldr	r3, [r7, #12]
 8105302:	2200      	movs	r2, #0
 8105304:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8105306:	78fb      	ldrb	r3, [r7, #3]
 8105308:	f003 030f 	and.w	r3, r3, #15
 810530c:	b2da      	uxtb	r2, r3
 810530e:	68fb      	ldr	r3, [r7, #12]
 8105310:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8105312:	687b      	ldr	r3, [r7, #4]
 8105314:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8105318:	2b01      	cmp	r3, #1
 810531a:	d101      	bne.n	8105320 <HAL_PCD_EP_ClrStall+0x86>
 810531c:	2302      	movs	r3, #2
 810531e:	e00e      	b.n	810533e <HAL_PCD_EP_ClrStall+0xa4>
 8105320:	687b      	ldr	r3, [r7, #4]
 8105322:	2201      	movs	r2, #1
 8105324:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8105328:	687b      	ldr	r3, [r7, #4]
 810532a:	681b      	ldr	r3, [r3, #0]
 810532c:	68f9      	ldr	r1, [r7, #12]
 810532e:	4618      	mov	r0, r3
 8105330:	f006 fc22 	bl	810bb78 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8105334:	687b      	ldr	r3, [r7, #4]
 8105336:	2200      	movs	r2, #0
 8105338:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 810533c:	2300      	movs	r3, #0
}
 810533e:	4618      	mov	r0, r3
 8105340:	3710      	adds	r7, #16
 8105342:	46bd      	mov	sp, r7
 8105344:	bd80      	pop	{r7, pc}

08105346 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8105346:	b580      	push	{r7, lr}
 8105348:	b084      	sub	sp, #16
 810534a:	af00      	add	r7, sp, #0
 810534c:	6078      	str	r0, [r7, #4]
 810534e:	460b      	mov	r3, r1
 8105350:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8105352:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8105356:	2b00      	cmp	r3, #0
 8105358:	da0c      	bge.n	8105374 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 810535a:	78fb      	ldrb	r3, [r7, #3]
 810535c:	f003 020f 	and.w	r2, r3, #15
 8105360:	4613      	mov	r3, r2
 8105362:	00db      	lsls	r3, r3, #3
 8105364:	4413      	add	r3, r2
 8105366:	009b      	lsls	r3, r3, #2
 8105368:	3310      	adds	r3, #16
 810536a:	687a      	ldr	r2, [r7, #4]
 810536c:	4413      	add	r3, r2
 810536e:	3304      	adds	r3, #4
 8105370:	60fb      	str	r3, [r7, #12]
 8105372:	e00c      	b.n	810538e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8105374:	78fb      	ldrb	r3, [r7, #3]
 8105376:	f003 020f 	and.w	r2, r3, #15
 810537a:	4613      	mov	r3, r2
 810537c:	00db      	lsls	r3, r3, #3
 810537e:	4413      	add	r3, r2
 8105380:	009b      	lsls	r3, r3, #2
 8105382:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8105386:	687a      	ldr	r2, [r7, #4]
 8105388:	4413      	add	r3, r2
 810538a:	3304      	adds	r3, #4
 810538c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 810538e:	687b      	ldr	r3, [r7, #4]
 8105390:	681b      	ldr	r3, [r3, #0]
 8105392:	68f9      	ldr	r1, [r7, #12]
 8105394:	4618      	mov	r0, r3
 8105396:	f006 fa41 	bl	810b81c <USB_EPStopXfer>
 810539a:	4603      	mov	r3, r0
 810539c:	72fb      	strb	r3, [r7, #11]

  return ret;
 810539e:	7afb      	ldrb	r3, [r7, #11]
}
 81053a0:	4618      	mov	r0, r3
 81053a2:	3710      	adds	r7, #16
 81053a4:	46bd      	mov	sp, r7
 81053a6:	bd80      	pop	{r7, pc}

081053a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81053a8:	b580      	push	{r7, lr}
 81053aa:	b08a      	sub	sp, #40	@ 0x28
 81053ac:	af02      	add	r7, sp, #8
 81053ae:	6078      	str	r0, [r7, #4]
 81053b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81053b2:	687b      	ldr	r3, [r7, #4]
 81053b4:	681b      	ldr	r3, [r3, #0]
 81053b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81053b8:	697b      	ldr	r3, [r7, #20]
 81053ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 81053bc:	683a      	ldr	r2, [r7, #0]
 81053be:	4613      	mov	r3, r2
 81053c0:	00db      	lsls	r3, r3, #3
 81053c2:	4413      	add	r3, r2
 81053c4:	009b      	lsls	r3, r3, #2
 81053c6:	3310      	adds	r3, #16
 81053c8:	687a      	ldr	r2, [r7, #4]
 81053ca:	4413      	add	r3, r2
 81053cc:	3304      	adds	r3, #4
 81053ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 81053d0:	68fb      	ldr	r3, [r7, #12]
 81053d2:	695a      	ldr	r2, [r3, #20]
 81053d4:	68fb      	ldr	r3, [r7, #12]
 81053d6:	691b      	ldr	r3, [r3, #16]
 81053d8:	429a      	cmp	r2, r3
 81053da:	d901      	bls.n	81053e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 81053dc:	2301      	movs	r3, #1
 81053de:	e06b      	b.n	81054b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 81053e0:	68fb      	ldr	r3, [r7, #12]
 81053e2:	691a      	ldr	r2, [r3, #16]
 81053e4:	68fb      	ldr	r3, [r7, #12]
 81053e6:	695b      	ldr	r3, [r3, #20]
 81053e8:	1ad3      	subs	r3, r2, r3
 81053ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 81053ec:	68fb      	ldr	r3, [r7, #12]
 81053ee:	689b      	ldr	r3, [r3, #8]
 81053f0:	69fa      	ldr	r2, [r7, #28]
 81053f2:	429a      	cmp	r2, r3
 81053f4:	d902      	bls.n	81053fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 81053f6:	68fb      	ldr	r3, [r7, #12]
 81053f8:	689b      	ldr	r3, [r3, #8]
 81053fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 81053fc:	69fb      	ldr	r3, [r7, #28]
 81053fe:	3303      	adds	r3, #3
 8105400:	089b      	lsrs	r3, r3, #2
 8105402:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8105404:	e02a      	b.n	810545c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8105406:	68fb      	ldr	r3, [r7, #12]
 8105408:	691a      	ldr	r2, [r3, #16]
 810540a:	68fb      	ldr	r3, [r7, #12]
 810540c:	695b      	ldr	r3, [r3, #20]
 810540e:	1ad3      	subs	r3, r2, r3
 8105410:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8105412:	68fb      	ldr	r3, [r7, #12]
 8105414:	689b      	ldr	r3, [r3, #8]
 8105416:	69fa      	ldr	r2, [r7, #28]
 8105418:	429a      	cmp	r2, r3
 810541a:	d902      	bls.n	8105422 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 810541c:	68fb      	ldr	r3, [r7, #12]
 810541e:	689b      	ldr	r3, [r3, #8]
 8105420:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8105422:	69fb      	ldr	r3, [r7, #28]
 8105424:	3303      	adds	r3, #3
 8105426:	089b      	lsrs	r3, r3, #2
 8105428:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 810542a:	68fb      	ldr	r3, [r7, #12]
 810542c:	68d9      	ldr	r1, [r3, #12]
 810542e:	683b      	ldr	r3, [r7, #0]
 8105430:	b2da      	uxtb	r2, r3
 8105432:	69fb      	ldr	r3, [r7, #28]
 8105434:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8105436:	687b      	ldr	r3, [r7, #4]
 8105438:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 810543a:	9300      	str	r3, [sp, #0]
 810543c:	4603      	mov	r3, r0
 810543e:	6978      	ldr	r0, [r7, #20]
 8105440:	f006 fa96 	bl	810b970 <USB_WritePacket>

    ep->xfer_buff  += len;
 8105444:	68fb      	ldr	r3, [r7, #12]
 8105446:	68da      	ldr	r2, [r3, #12]
 8105448:	69fb      	ldr	r3, [r7, #28]
 810544a:	441a      	add	r2, r3
 810544c:	68fb      	ldr	r3, [r7, #12]
 810544e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8105450:	68fb      	ldr	r3, [r7, #12]
 8105452:	695a      	ldr	r2, [r3, #20]
 8105454:	69fb      	ldr	r3, [r7, #28]
 8105456:	441a      	add	r2, r3
 8105458:	68fb      	ldr	r3, [r7, #12]
 810545a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 810545c:	683b      	ldr	r3, [r7, #0]
 810545e:	015a      	lsls	r2, r3, #5
 8105460:	693b      	ldr	r3, [r7, #16]
 8105462:	4413      	add	r3, r2
 8105464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8105468:	699b      	ldr	r3, [r3, #24]
 810546a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 810546c:	69ba      	ldr	r2, [r7, #24]
 810546e:	429a      	cmp	r2, r3
 8105470:	d809      	bhi.n	8105486 <PCD_WriteEmptyTxFifo+0xde>
 8105472:	68fb      	ldr	r3, [r7, #12]
 8105474:	695a      	ldr	r2, [r3, #20]
 8105476:	68fb      	ldr	r3, [r7, #12]
 8105478:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 810547a:	429a      	cmp	r2, r3
 810547c:	d203      	bcs.n	8105486 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 810547e:	68fb      	ldr	r3, [r7, #12]
 8105480:	691b      	ldr	r3, [r3, #16]
 8105482:	2b00      	cmp	r3, #0
 8105484:	d1bf      	bne.n	8105406 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8105486:	68fb      	ldr	r3, [r7, #12]
 8105488:	691a      	ldr	r2, [r3, #16]
 810548a:	68fb      	ldr	r3, [r7, #12]
 810548c:	695b      	ldr	r3, [r3, #20]
 810548e:	429a      	cmp	r2, r3
 8105490:	d811      	bhi.n	81054b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8105492:	683b      	ldr	r3, [r7, #0]
 8105494:	f003 030f 	and.w	r3, r3, #15
 8105498:	2201      	movs	r2, #1
 810549a:	fa02 f303 	lsl.w	r3, r2, r3
 810549e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 81054a0:	693b      	ldr	r3, [r7, #16]
 81054a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 81054a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 81054a8:	68bb      	ldr	r3, [r7, #8]
 81054aa:	43db      	mvns	r3, r3
 81054ac:	6939      	ldr	r1, [r7, #16]
 81054ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 81054b2:	4013      	ands	r3, r2
 81054b4:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 81054b6:	2300      	movs	r3, #0
}
 81054b8:	4618      	mov	r0, r3
 81054ba:	3720      	adds	r7, #32
 81054bc:	46bd      	mov	sp, r7
 81054be:	bd80      	pop	{r7, pc}

081054c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 81054c0:	b580      	push	{r7, lr}
 81054c2:	b088      	sub	sp, #32
 81054c4:	af00      	add	r7, sp, #0
 81054c6:	6078      	str	r0, [r7, #4]
 81054c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81054ca:	687b      	ldr	r3, [r7, #4]
 81054cc:	681b      	ldr	r3, [r3, #0]
 81054ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81054d0:	69fb      	ldr	r3, [r7, #28]
 81054d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 81054d4:	69fb      	ldr	r3, [r7, #28]
 81054d6:	333c      	adds	r3, #60	@ 0x3c
 81054d8:	3304      	adds	r3, #4
 81054da:	681b      	ldr	r3, [r3, #0]
 81054dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 81054de:	683b      	ldr	r3, [r7, #0]
 81054e0:	015a      	lsls	r2, r3, #5
 81054e2:	69bb      	ldr	r3, [r7, #24]
 81054e4:	4413      	add	r3, r2
 81054e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81054ea:	689b      	ldr	r3, [r3, #8]
 81054ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 81054ee:	687b      	ldr	r3, [r7, #4]
 81054f0:	799b      	ldrb	r3, [r3, #6]
 81054f2:	2b01      	cmp	r3, #1
 81054f4:	d17b      	bne.n	81055ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 81054f6:	693b      	ldr	r3, [r7, #16]
 81054f8:	f003 0308 	and.w	r3, r3, #8
 81054fc:	2b00      	cmp	r3, #0
 81054fe:	d015      	beq.n	810552c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8105500:	697b      	ldr	r3, [r7, #20]
 8105502:	4a61      	ldr	r2, [pc, #388]	@ (8105688 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8105504:	4293      	cmp	r3, r2
 8105506:	f240 80b9 	bls.w	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 810550a:	693b      	ldr	r3, [r7, #16]
 810550c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8105510:	2b00      	cmp	r3, #0
 8105512:	f000 80b3 	beq.w	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8105516:	683b      	ldr	r3, [r7, #0]
 8105518:	015a      	lsls	r2, r3, #5
 810551a:	69bb      	ldr	r3, [r7, #24]
 810551c:	4413      	add	r3, r2
 810551e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8105522:	461a      	mov	r2, r3
 8105524:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105528:	6093      	str	r3, [r2, #8]
 810552a:	e0a7      	b.n	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 810552c:	693b      	ldr	r3, [r7, #16]
 810552e:	f003 0320 	and.w	r3, r3, #32
 8105532:	2b00      	cmp	r3, #0
 8105534:	d009      	beq.n	810554a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8105536:	683b      	ldr	r3, [r7, #0]
 8105538:	015a      	lsls	r2, r3, #5
 810553a:	69bb      	ldr	r3, [r7, #24]
 810553c:	4413      	add	r3, r2
 810553e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8105542:	461a      	mov	r2, r3
 8105544:	2320      	movs	r3, #32
 8105546:	6093      	str	r3, [r2, #8]
 8105548:	e098      	b.n	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 810554a:	693b      	ldr	r3, [r7, #16]
 810554c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8105550:	2b00      	cmp	r3, #0
 8105552:	f040 8093 	bne.w	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8105556:	697b      	ldr	r3, [r7, #20]
 8105558:	4a4b      	ldr	r2, [pc, #300]	@ (8105688 <PCD_EP_OutXfrComplete_int+0x1c8>)
 810555a:	4293      	cmp	r3, r2
 810555c:	d90f      	bls.n	810557e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 810555e:	693b      	ldr	r3, [r7, #16]
 8105560:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8105564:	2b00      	cmp	r3, #0
 8105566:	d00a      	beq.n	810557e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8105568:	683b      	ldr	r3, [r7, #0]
 810556a:	015a      	lsls	r2, r3, #5
 810556c:	69bb      	ldr	r3, [r7, #24]
 810556e:	4413      	add	r3, r2
 8105570:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8105574:	461a      	mov	r2, r3
 8105576:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810557a:	6093      	str	r3, [r2, #8]
 810557c:	e07e      	b.n	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 810557e:	683a      	ldr	r2, [r7, #0]
 8105580:	4613      	mov	r3, r2
 8105582:	00db      	lsls	r3, r3, #3
 8105584:	4413      	add	r3, r2
 8105586:	009b      	lsls	r3, r3, #2
 8105588:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 810558c:	687a      	ldr	r2, [r7, #4]
 810558e:	4413      	add	r3, r2
 8105590:	3304      	adds	r3, #4
 8105592:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8105594:	68fb      	ldr	r3, [r7, #12]
 8105596:	6a1a      	ldr	r2, [r3, #32]
 8105598:	683b      	ldr	r3, [r7, #0]
 810559a:	0159      	lsls	r1, r3, #5
 810559c:	69bb      	ldr	r3, [r7, #24]
 810559e:	440b      	add	r3, r1
 81055a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81055a4:	691b      	ldr	r3, [r3, #16]
 81055a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 81055aa:	1ad2      	subs	r2, r2, r3
 81055ac:	68fb      	ldr	r3, [r7, #12]
 81055ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 81055b0:	683b      	ldr	r3, [r7, #0]
 81055b2:	2b00      	cmp	r3, #0
 81055b4:	d114      	bne.n	81055e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 81055b6:	68fb      	ldr	r3, [r7, #12]
 81055b8:	691b      	ldr	r3, [r3, #16]
 81055ba:	2b00      	cmp	r3, #0
 81055bc:	d109      	bne.n	81055d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 81055be:	687b      	ldr	r3, [r7, #4]
 81055c0:	6818      	ldr	r0, [r3, #0]
 81055c2:	687b      	ldr	r3, [r7, #4]
 81055c4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 81055c8:	461a      	mov	r2, r3
 81055ca:	2101      	movs	r1, #1
 81055cc:	f006 fc66 	bl	810be9c <USB_EP0_OutStart>
 81055d0:	e006      	b.n	81055e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 81055d2:	68fb      	ldr	r3, [r7, #12]
 81055d4:	68da      	ldr	r2, [r3, #12]
 81055d6:	68fb      	ldr	r3, [r7, #12]
 81055d8:	695b      	ldr	r3, [r3, #20]
 81055da:	441a      	add	r2, r3
 81055dc:	68fb      	ldr	r3, [r7, #12]
 81055de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 81055e0:	683b      	ldr	r3, [r7, #0]
 81055e2:	b2db      	uxtb	r3, r3
 81055e4:	4619      	mov	r1, r3
 81055e6:	6878      	ldr	r0, [r7, #4]
 81055e8:	f008 ffd8 	bl	810e59c <HAL_PCD_DataOutStageCallback>
 81055ec:	e046      	b.n	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 81055ee:	697b      	ldr	r3, [r7, #20]
 81055f0:	4a26      	ldr	r2, [pc, #152]	@ (810568c <PCD_EP_OutXfrComplete_int+0x1cc>)
 81055f2:	4293      	cmp	r3, r2
 81055f4:	d124      	bne.n	8105640 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 81055f6:	693b      	ldr	r3, [r7, #16]
 81055f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 81055fc:	2b00      	cmp	r3, #0
 81055fe:	d00a      	beq.n	8105616 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8105600:	683b      	ldr	r3, [r7, #0]
 8105602:	015a      	lsls	r2, r3, #5
 8105604:	69bb      	ldr	r3, [r7, #24]
 8105606:	4413      	add	r3, r2
 8105608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810560c:	461a      	mov	r2, r3
 810560e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8105612:	6093      	str	r3, [r2, #8]
 8105614:	e032      	b.n	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8105616:	693b      	ldr	r3, [r7, #16]
 8105618:	f003 0320 	and.w	r3, r3, #32
 810561c:	2b00      	cmp	r3, #0
 810561e:	d008      	beq.n	8105632 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8105620:	683b      	ldr	r3, [r7, #0]
 8105622:	015a      	lsls	r2, r3, #5
 8105624:	69bb      	ldr	r3, [r7, #24]
 8105626:	4413      	add	r3, r2
 8105628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810562c:	461a      	mov	r2, r3
 810562e:	2320      	movs	r3, #32
 8105630:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8105632:	683b      	ldr	r3, [r7, #0]
 8105634:	b2db      	uxtb	r3, r3
 8105636:	4619      	mov	r1, r3
 8105638:	6878      	ldr	r0, [r7, #4]
 810563a:	f008 ffaf 	bl	810e59c <HAL_PCD_DataOutStageCallback>
 810563e:	e01d      	b.n	810567c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8105640:	683b      	ldr	r3, [r7, #0]
 8105642:	2b00      	cmp	r3, #0
 8105644:	d114      	bne.n	8105670 <PCD_EP_OutXfrComplete_int+0x1b0>
 8105646:	6879      	ldr	r1, [r7, #4]
 8105648:	683a      	ldr	r2, [r7, #0]
 810564a:	4613      	mov	r3, r2
 810564c:	00db      	lsls	r3, r3, #3
 810564e:	4413      	add	r3, r2
 8105650:	009b      	lsls	r3, r3, #2
 8105652:	440b      	add	r3, r1
 8105654:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8105658:	681b      	ldr	r3, [r3, #0]
 810565a:	2b00      	cmp	r3, #0
 810565c:	d108      	bne.n	8105670 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 810565e:	687b      	ldr	r3, [r7, #4]
 8105660:	6818      	ldr	r0, [r3, #0]
 8105662:	687b      	ldr	r3, [r7, #4]
 8105664:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8105668:	461a      	mov	r2, r3
 810566a:	2100      	movs	r1, #0
 810566c:	f006 fc16 	bl	810be9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8105670:	683b      	ldr	r3, [r7, #0]
 8105672:	b2db      	uxtb	r3, r3
 8105674:	4619      	mov	r1, r3
 8105676:	6878      	ldr	r0, [r7, #4]
 8105678:	f008 ff90 	bl	810e59c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 810567c:	2300      	movs	r3, #0
}
 810567e:	4618      	mov	r0, r3
 8105680:	3720      	adds	r7, #32
 8105682:	46bd      	mov	sp, r7
 8105684:	bd80      	pop	{r7, pc}
 8105686:	bf00      	nop
 8105688:	4f54300a 	.word	0x4f54300a
 810568c:	4f54310a 	.word	0x4f54310a

08105690 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8105690:	b580      	push	{r7, lr}
 8105692:	b086      	sub	sp, #24
 8105694:	af00      	add	r7, sp, #0
 8105696:	6078      	str	r0, [r7, #4]
 8105698:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 810569a:	687b      	ldr	r3, [r7, #4]
 810569c:	681b      	ldr	r3, [r3, #0]
 810569e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 81056a0:	697b      	ldr	r3, [r7, #20]
 81056a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 81056a4:	697b      	ldr	r3, [r7, #20]
 81056a6:	333c      	adds	r3, #60	@ 0x3c
 81056a8:	3304      	adds	r3, #4
 81056aa:	681b      	ldr	r3, [r3, #0]
 81056ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 81056ae:	683b      	ldr	r3, [r7, #0]
 81056b0:	015a      	lsls	r2, r3, #5
 81056b2:	693b      	ldr	r3, [r7, #16]
 81056b4:	4413      	add	r3, r2
 81056b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81056ba:	689b      	ldr	r3, [r3, #8]
 81056bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81056be:	68fb      	ldr	r3, [r7, #12]
 81056c0:	4a15      	ldr	r2, [pc, #84]	@ (8105718 <PCD_EP_OutSetupPacket_int+0x88>)
 81056c2:	4293      	cmp	r3, r2
 81056c4:	d90e      	bls.n	81056e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 81056c6:	68bb      	ldr	r3, [r7, #8]
 81056c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 81056cc:	2b00      	cmp	r3, #0
 81056ce:	d009      	beq.n	81056e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 81056d0:	683b      	ldr	r3, [r7, #0]
 81056d2:	015a      	lsls	r2, r3, #5
 81056d4:	693b      	ldr	r3, [r7, #16]
 81056d6:	4413      	add	r3, r2
 81056d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 81056dc:	461a      	mov	r2, r3
 81056de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 81056e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 81056e4:	6878      	ldr	r0, [r7, #4]
 81056e6:	f008 ff47 	bl	810e578 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 81056ea:	68fb      	ldr	r3, [r7, #12]
 81056ec:	4a0a      	ldr	r2, [pc, #40]	@ (8105718 <PCD_EP_OutSetupPacket_int+0x88>)
 81056ee:	4293      	cmp	r3, r2
 81056f0:	d90c      	bls.n	810570c <PCD_EP_OutSetupPacket_int+0x7c>
 81056f2:	687b      	ldr	r3, [r7, #4]
 81056f4:	799b      	ldrb	r3, [r3, #6]
 81056f6:	2b01      	cmp	r3, #1
 81056f8:	d108      	bne.n	810570c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 81056fa:	687b      	ldr	r3, [r7, #4]
 81056fc:	6818      	ldr	r0, [r3, #0]
 81056fe:	687b      	ldr	r3, [r7, #4]
 8105700:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8105704:	461a      	mov	r2, r3
 8105706:	2101      	movs	r1, #1
 8105708:	f006 fbc8 	bl	810be9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 810570c:	2300      	movs	r3, #0
}
 810570e:	4618      	mov	r0, r3
 8105710:	3718      	adds	r7, #24
 8105712:	46bd      	mov	sp, r7
 8105714:	bd80      	pop	{r7, pc}
 8105716:	bf00      	nop
 8105718:	4f54300a 	.word	0x4f54300a

0810571c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 810571c:	b480      	push	{r7}
 810571e:	b085      	sub	sp, #20
 8105720:	af00      	add	r7, sp, #0
 8105722:	6078      	str	r0, [r7, #4]
 8105724:	460b      	mov	r3, r1
 8105726:	70fb      	strb	r3, [r7, #3]
 8105728:	4613      	mov	r3, r2
 810572a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 810572c:	687b      	ldr	r3, [r7, #4]
 810572e:	681b      	ldr	r3, [r3, #0]
 8105730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8105732:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8105734:	78fb      	ldrb	r3, [r7, #3]
 8105736:	2b00      	cmp	r3, #0
 8105738:	d107      	bne.n	810574a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 810573a:	883b      	ldrh	r3, [r7, #0]
 810573c:	0419      	lsls	r1, r3, #16
 810573e:	687b      	ldr	r3, [r7, #4]
 8105740:	681b      	ldr	r3, [r3, #0]
 8105742:	68ba      	ldr	r2, [r7, #8]
 8105744:	430a      	orrs	r2, r1
 8105746:	629a      	str	r2, [r3, #40]	@ 0x28
 8105748:	e028      	b.n	810579c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 810574a:	687b      	ldr	r3, [r7, #4]
 810574c:	681b      	ldr	r3, [r3, #0]
 810574e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105750:	0c1b      	lsrs	r3, r3, #16
 8105752:	68ba      	ldr	r2, [r7, #8]
 8105754:	4413      	add	r3, r2
 8105756:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8105758:	2300      	movs	r3, #0
 810575a:	73fb      	strb	r3, [r7, #15]
 810575c:	e00d      	b.n	810577a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 810575e:	687b      	ldr	r3, [r7, #4]
 8105760:	681a      	ldr	r2, [r3, #0]
 8105762:	7bfb      	ldrb	r3, [r7, #15]
 8105764:	3340      	adds	r3, #64	@ 0x40
 8105766:	009b      	lsls	r3, r3, #2
 8105768:	4413      	add	r3, r2
 810576a:	685b      	ldr	r3, [r3, #4]
 810576c:	0c1b      	lsrs	r3, r3, #16
 810576e:	68ba      	ldr	r2, [r7, #8]
 8105770:	4413      	add	r3, r2
 8105772:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8105774:	7bfb      	ldrb	r3, [r7, #15]
 8105776:	3301      	adds	r3, #1
 8105778:	73fb      	strb	r3, [r7, #15]
 810577a:	7bfa      	ldrb	r2, [r7, #15]
 810577c:	78fb      	ldrb	r3, [r7, #3]
 810577e:	3b01      	subs	r3, #1
 8105780:	429a      	cmp	r2, r3
 8105782:	d3ec      	bcc.n	810575e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8105784:	883b      	ldrh	r3, [r7, #0]
 8105786:	0418      	lsls	r0, r3, #16
 8105788:	687b      	ldr	r3, [r7, #4]
 810578a:	6819      	ldr	r1, [r3, #0]
 810578c:	78fb      	ldrb	r3, [r7, #3]
 810578e:	3b01      	subs	r3, #1
 8105790:	68ba      	ldr	r2, [r7, #8]
 8105792:	4302      	orrs	r2, r0
 8105794:	3340      	adds	r3, #64	@ 0x40
 8105796:	009b      	lsls	r3, r3, #2
 8105798:	440b      	add	r3, r1
 810579a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 810579c:	2300      	movs	r3, #0
}
 810579e:	4618      	mov	r0, r3
 81057a0:	3714      	adds	r7, #20
 81057a2:	46bd      	mov	sp, r7
 81057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057a8:	4770      	bx	lr

081057aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 81057aa:	b480      	push	{r7}
 81057ac:	b083      	sub	sp, #12
 81057ae:	af00      	add	r7, sp, #0
 81057b0:	6078      	str	r0, [r7, #4]
 81057b2:	460b      	mov	r3, r1
 81057b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 81057b6:	687b      	ldr	r3, [r7, #4]
 81057b8:	681b      	ldr	r3, [r3, #0]
 81057ba:	887a      	ldrh	r2, [r7, #2]
 81057bc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 81057be:	2300      	movs	r3, #0
}
 81057c0:	4618      	mov	r0, r3
 81057c2:	370c      	adds	r7, #12
 81057c4:	46bd      	mov	sp, r7
 81057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057ca:	4770      	bx	lr

081057cc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 81057cc:	b480      	push	{r7}
 81057ce:	b085      	sub	sp, #20
 81057d0:	af00      	add	r7, sp, #0
 81057d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 81057d4:	687b      	ldr	r3, [r7, #4]
 81057d6:	681b      	ldr	r3, [r3, #0]
 81057d8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 81057da:	687b      	ldr	r3, [r7, #4]
 81057dc:	2201      	movs	r2, #1
 81057de:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 81057e2:	687b      	ldr	r3, [r7, #4]
 81057e4:	2200      	movs	r2, #0
 81057e6:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 81057ea:	68fb      	ldr	r3, [r7, #12]
 81057ec:	699b      	ldr	r3, [r3, #24]
 81057ee:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 81057f2:	68fb      	ldr	r3, [r7, #12]
 81057f4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 81057f6:	68fb      	ldr	r3, [r7, #12]
 81057f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81057fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 81057fe:	f043 0303 	orr.w	r3, r3, #3
 8105802:	68fa      	ldr	r2, [r7, #12]
 8105804:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 8105806:	2300      	movs	r3, #0
}
 8105808:	4618      	mov	r0, r3
 810580a:	3714      	adds	r7, #20
 810580c:	46bd      	mov	sp, r7
 810580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105812:	4770      	bx	lr

08105814 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8105814:	b480      	push	{r7}
 8105816:	b083      	sub	sp, #12
 8105818:	af00      	add	r7, sp, #0
 810581a:	6078      	str	r0, [r7, #4]
 810581c:	460b      	mov	r3, r1
 810581e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8105820:	bf00      	nop
 8105822:	370c      	adds	r7, #12
 8105824:	46bd      	mov	sp, r7
 8105826:	f85d 7b04 	ldr.w	r7, [sp], #4
 810582a:	4770      	bx	lr

0810582c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810582c:	b580      	push	{r7, lr}
 810582e:	b084      	sub	sp, #16
 8105830:	af00      	add	r7, sp, #0
 8105832:	60f8      	str	r0, [r7, #12]
 8105834:	460b      	mov	r3, r1
 8105836:	607a      	str	r2, [r7, #4]
 8105838:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810583a:	4b37      	ldr	r3, [pc, #220]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 810583c:	681b      	ldr	r3, [r3, #0]
 810583e:	f023 0201 	bic.w	r2, r3, #1
 8105842:	4935      	ldr	r1, [pc, #212]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105844:	68fb      	ldr	r3, [r7, #12]
 8105846:	4313      	orrs	r3, r2
 8105848:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810584a:	687b      	ldr	r3, [r7, #4]
 810584c:	2b00      	cmp	r3, #0
 810584e:	d123      	bne.n	8105898 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8105850:	f7fd f9c8 	bl	8102be4 <HAL_GetCurrentCPUID>
 8105854:	4603      	mov	r3, r0
 8105856:	2b03      	cmp	r3, #3
 8105858:	d158      	bne.n	810590c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810585a:	4b2f      	ldr	r3, [pc, #188]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 810585c:	691b      	ldr	r3, [r3, #16]
 810585e:	4a2e      	ldr	r2, [pc, #184]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105860:	f023 0301 	bic.w	r3, r3, #1
 8105864:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8105866:	4b2d      	ldr	r3, [pc, #180]	@ (810591c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105868:	691b      	ldr	r3, [r3, #16]
 810586a:	4a2c      	ldr	r2, [pc, #176]	@ (810591c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810586c:	f043 0304 	orr.w	r3, r3, #4
 8105870:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8105872:	f3bf 8f4f 	dsb	sy
}
 8105876:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8105878:	f3bf 8f6f 	isb	sy
}
 810587c:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810587e:	7afb      	ldrb	r3, [r7, #11]
 8105880:	2b01      	cmp	r3, #1
 8105882:	d101      	bne.n	8105888 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8105884:	bf30      	wfi
 8105886:	e000      	b.n	810588a <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8105888:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810588a:	4b24      	ldr	r3, [pc, #144]	@ (810591c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810588c:	691b      	ldr	r3, [r3, #16]
 810588e:	4a23      	ldr	r2, [pc, #140]	@ (810591c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8105890:	f023 0304 	bic.w	r3, r3, #4
 8105894:	6113      	str	r3, [r2, #16]
 8105896:	e03c      	b.n	8105912 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8105898:	687b      	ldr	r3, [r7, #4]
 810589a:	2b01      	cmp	r3, #1
 810589c:	d123      	bne.n	81058e6 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 810589e:	f7fd f9a1 	bl	8102be4 <HAL_GetCurrentCPUID>
 81058a2:	4603      	mov	r3, r0
 81058a4:	2b01      	cmp	r3, #1
 81058a6:	d133      	bne.n	8105910 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81058a8:	4b1b      	ldr	r3, [pc, #108]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 81058aa:	695b      	ldr	r3, [r3, #20]
 81058ac:	4a1a      	ldr	r2, [pc, #104]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 81058ae:	f023 0302 	bic.w	r3, r3, #2
 81058b2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81058b4:	4b19      	ldr	r3, [pc, #100]	@ (810591c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81058b6:	691b      	ldr	r3, [r3, #16]
 81058b8:	4a18      	ldr	r2, [pc, #96]	@ (810591c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81058ba:	f043 0304 	orr.w	r3, r3, #4
 81058be:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81058c0:	f3bf 8f4f 	dsb	sy
}
 81058c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81058c6:	f3bf 8f6f 	isb	sy
}
 81058ca:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81058cc:	7afb      	ldrb	r3, [r7, #11]
 81058ce:	2b01      	cmp	r3, #1
 81058d0:	d101      	bne.n	81058d6 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81058d2:	bf30      	wfi
 81058d4:	e000      	b.n	81058d8 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81058d6:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81058d8:	4b10      	ldr	r3, [pc, #64]	@ (810591c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81058da:	691b      	ldr	r3, [r3, #16]
 81058dc:	4a0f      	ldr	r2, [pc, #60]	@ (810591c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81058de:	f023 0304 	bic.w	r3, r3, #4
 81058e2:	6113      	str	r3, [r2, #16]
 81058e4:	e015      	b.n	8105912 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81058e6:	f7fd f97d 	bl	8102be4 <HAL_GetCurrentCPUID>
 81058ea:	4603      	mov	r3, r0
 81058ec:	2b03      	cmp	r3, #3
 81058ee:	d106      	bne.n	81058fe <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81058f0:	4b09      	ldr	r3, [pc, #36]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 81058f2:	691b      	ldr	r3, [r3, #16]
 81058f4:	4a08      	ldr	r2, [pc, #32]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 81058f6:	f023 0304 	bic.w	r3, r3, #4
 81058fa:	6113      	str	r3, [r2, #16]
 81058fc:	e009      	b.n	8105912 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81058fe:	4b06      	ldr	r3, [pc, #24]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105900:	695b      	ldr	r3, [r3, #20]
 8105902:	4a05      	ldr	r2, [pc, #20]	@ (8105918 <HAL_PWREx_EnterSTOPMode+0xec>)
 8105904:	f023 0304 	bic.w	r3, r3, #4
 8105908:	6153      	str	r3, [r2, #20]
 810590a:	e002      	b.n	8105912 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810590c:	bf00      	nop
 810590e:	e000      	b.n	8105912 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8105910:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8105912:	3710      	adds	r7, #16
 8105914:	46bd      	mov	sp, r7
 8105916:	bd80      	pop	{r7, pc}
 8105918:	58024800 	.word	0x58024800
 810591c:	e000ed00 	.word	0xe000ed00

08105920 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8105920:	b580      	push	{r7, lr}
 8105922:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8105924:	f7fd f95e 	bl	8102be4 <HAL_GetCurrentCPUID>
 8105928:	4603      	mov	r3, r0
 810592a:	2b03      	cmp	r3, #3
 810592c:	d101      	bne.n	8105932 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810592e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8105930:	e001      	b.n	8105936 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8105932:	bf40      	sev
    __WFE ();
 8105934:	bf20      	wfe
}
 8105936:	bf00      	nop
 8105938:	bd80      	pop	{r7, pc}
	...

0810593c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 810593c:	b480      	push	{r7}
 810593e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8105940:	4b05      	ldr	r3, [pc, #20]	@ (8105958 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105942:	68db      	ldr	r3, [r3, #12]
 8105944:	4a04      	ldr	r2, [pc, #16]	@ (8105958 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8105946:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810594a:	60d3      	str	r3, [r2, #12]
}
 810594c:	bf00      	nop
 810594e:	46bd      	mov	sp, r7
 8105950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105954:	4770      	bx	lr
 8105956:	bf00      	nop
 8105958:	58024800 	.word	0x58024800

0810595c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810595c:	b480      	push	{r7}
 810595e:	b089      	sub	sp, #36	@ 0x24
 8105960:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8105962:	4bb3      	ldr	r3, [pc, #716]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105964:	691b      	ldr	r3, [r3, #16]
 8105966:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 810596a:	2b18      	cmp	r3, #24
 810596c:	f200 8155 	bhi.w	8105c1a <HAL_RCC_GetSysClockFreq+0x2be>
 8105970:	a201      	add	r2, pc, #4	@ (adr r2, 8105978 <HAL_RCC_GetSysClockFreq+0x1c>)
 8105972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105976:	bf00      	nop
 8105978:	081059dd 	.word	0x081059dd
 810597c:	08105c1b 	.word	0x08105c1b
 8105980:	08105c1b 	.word	0x08105c1b
 8105984:	08105c1b 	.word	0x08105c1b
 8105988:	08105c1b 	.word	0x08105c1b
 810598c:	08105c1b 	.word	0x08105c1b
 8105990:	08105c1b 	.word	0x08105c1b
 8105994:	08105c1b 	.word	0x08105c1b
 8105998:	08105a03 	.word	0x08105a03
 810599c:	08105c1b 	.word	0x08105c1b
 81059a0:	08105c1b 	.word	0x08105c1b
 81059a4:	08105c1b 	.word	0x08105c1b
 81059a8:	08105c1b 	.word	0x08105c1b
 81059ac:	08105c1b 	.word	0x08105c1b
 81059b0:	08105c1b 	.word	0x08105c1b
 81059b4:	08105c1b 	.word	0x08105c1b
 81059b8:	08105a09 	.word	0x08105a09
 81059bc:	08105c1b 	.word	0x08105c1b
 81059c0:	08105c1b 	.word	0x08105c1b
 81059c4:	08105c1b 	.word	0x08105c1b
 81059c8:	08105c1b 	.word	0x08105c1b
 81059cc:	08105c1b 	.word	0x08105c1b
 81059d0:	08105c1b 	.word	0x08105c1b
 81059d4:	08105c1b 	.word	0x08105c1b
 81059d8:	08105a0f 	.word	0x08105a0f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81059dc:	4b94      	ldr	r3, [pc, #592]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059de:	681b      	ldr	r3, [r3, #0]
 81059e0:	f003 0320 	and.w	r3, r3, #32
 81059e4:	2b00      	cmp	r3, #0
 81059e6:	d009      	beq.n	81059fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81059e8:	4b91      	ldr	r3, [pc, #580]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81059ea:	681b      	ldr	r3, [r3, #0]
 81059ec:	08db      	lsrs	r3, r3, #3
 81059ee:	f003 0303 	and.w	r3, r3, #3
 81059f2:	4a90      	ldr	r2, [pc, #576]	@ (8105c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81059f4:	fa22 f303 	lsr.w	r3, r2, r3
 81059f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81059fa:	e111      	b.n	8105c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81059fc:	4b8d      	ldr	r3, [pc, #564]	@ (8105c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81059fe:	61bb      	str	r3, [r7, #24]
      break;
 8105a00:	e10e      	b.n	8105c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8105a02:	4b8d      	ldr	r3, [pc, #564]	@ (8105c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105a04:	61bb      	str	r3, [r7, #24]
      break;
 8105a06:	e10b      	b.n	8105c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8105a08:	4b8c      	ldr	r3, [pc, #560]	@ (8105c3c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8105a0a:	61bb      	str	r3, [r7, #24]
      break;
 8105a0c:	e108      	b.n	8105c20 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a0e:	4b88      	ldr	r3, [pc, #544]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a12:	f003 0303 	and.w	r3, r3, #3
 8105a16:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8105a18:	4b85      	ldr	r3, [pc, #532]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8105a1c:	091b      	lsrs	r3, r3, #4
 8105a1e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8105a22:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8105a24:	4b82      	ldr	r3, [pc, #520]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105a28:	f003 0301 	and.w	r3, r3, #1
 8105a2c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8105a2e:	4b80      	ldr	r3, [pc, #512]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a30:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8105a32:	08db      	lsrs	r3, r3, #3
 8105a34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105a38:	68fa      	ldr	r2, [r7, #12]
 8105a3a:	fb02 f303 	mul.w	r3, r2, r3
 8105a3e:	ee07 3a90 	vmov	s15, r3
 8105a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a46:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8105a4a:	693b      	ldr	r3, [r7, #16]
 8105a4c:	2b00      	cmp	r3, #0
 8105a4e:	f000 80e1 	beq.w	8105c14 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8105a52:	697b      	ldr	r3, [r7, #20]
 8105a54:	2b02      	cmp	r3, #2
 8105a56:	f000 8083 	beq.w	8105b60 <HAL_RCC_GetSysClockFreq+0x204>
 8105a5a:	697b      	ldr	r3, [r7, #20]
 8105a5c:	2b02      	cmp	r3, #2
 8105a5e:	f200 80a1 	bhi.w	8105ba4 <HAL_RCC_GetSysClockFreq+0x248>
 8105a62:	697b      	ldr	r3, [r7, #20]
 8105a64:	2b00      	cmp	r3, #0
 8105a66:	d003      	beq.n	8105a70 <HAL_RCC_GetSysClockFreq+0x114>
 8105a68:	697b      	ldr	r3, [r7, #20]
 8105a6a:	2b01      	cmp	r3, #1
 8105a6c:	d056      	beq.n	8105b1c <HAL_RCC_GetSysClockFreq+0x1c0>
 8105a6e:	e099      	b.n	8105ba4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105a70:	4b6f      	ldr	r3, [pc, #444]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a72:	681b      	ldr	r3, [r3, #0]
 8105a74:	f003 0320 	and.w	r3, r3, #32
 8105a78:	2b00      	cmp	r3, #0
 8105a7a:	d02d      	beq.n	8105ad8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8105a7c:	4b6c      	ldr	r3, [pc, #432]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105a7e:	681b      	ldr	r3, [r3, #0]
 8105a80:	08db      	lsrs	r3, r3, #3
 8105a82:	f003 0303 	and.w	r3, r3, #3
 8105a86:	4a6b      	ldr	r2, [pc, #428]	@ (8105c34 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8105a88:	fa22 f303 	lsr.w	r3, r2, r3
 8105a8c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105a8e:	687b      	ldr	r3, [r7, #4]
 8105a90:	ee07 3a90 	vmov	s15, r3
 8105a94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105a98:	693b      	ldr	r3, [r7, #16]
 8105a9a:	ee07 3a90 	vmov	s15, r3
 8105a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105aa6:	4b62      	ldr	r3, [pc, #392]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105aae:	ee07 3a90 	vmov	s15, r3
 8105ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105aba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8105c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8105ad6:	e087      	b.n	8105be8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105ad8:	693b      	ldr	r3, [r7, #16]
 8105ada:	ee07 3a90 	vmov	s15, r3
 8105ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105ae2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8105c44 <HAL_RCC_GetSysClockFreq+0x2e8>
 8105ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105aea:	4b51      	ldr	r3, [pc, #324]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105af2:	ee07 3a90 	vmov	s15, r3
 8105af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8105afe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8105c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105b1a:	e065      	b.n	8105be8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b1c:	693b      	ldr	r3, [r7, #16]
 8105b1e:	ee07 3a90 	vmov	s15, r3
 8105b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b26:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8105c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b2e:	4b40      	ldr	r3, [pc, #256]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b36:	ee07 3a90 	vmov	s15, r3
 8105b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8105b42:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8105c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105b5e:	e043      	b.n	8105be8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105b60:	693b      	ldr	r3, [r7, #16]
 8105b62:	ee07 3a90 	vmov	s15, r3
 8105b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b6a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8105c4c <HAL_RCC_GetSysClockFreq+0x2f0>
 8105b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b72:	4b2f      	ldr	r3, [pc, #188]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b7a:	ee07 3a90 	vmov	s15, r3
 8105b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b82:	ed97 6a02 	vldr	s12, [r7, #8]
 8105b86:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8105c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b9e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105ba2:	e021      	b.n	8105be8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8105ba4:	693b      	ldr	r3, [r7, #16]
 8105ba6:	ee07 3a90 	vmov	s15, r3
 8105baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8105c48 <HAL_RCC_GetSysClockFreq+0x2ec>
 8105bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bbe:	ee07 3a90 	vmov	s15, r3
 8105bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105bc6:	ed97 6a02 	vldr	s12, [r7, #8]
 8105bca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8105c40 <HAL_RCC_GetSysClockFreq+0x2e4>
 8105bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8105bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105be2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8105be6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8105be8:	4b11      	ldr	r3, [pc, #68]	@ (8105c30 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8105bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8105bec:	0a5b      	lsrs	r3, r3, #9
 8105bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8105bf2:	3301      	adds	r3, #1
 8105bf4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8105bf6:	683b      	ldr	r3, [r7, #0]
 8105bf8:	ee07 3a90 	vmov	s15, r3
 8105bfc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8105c00:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c04:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c08:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c0c:	ee17 3a90 	vmov	r3, s15
 8105c10:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8105c12:	e005      	b.n	8105c20 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8105c14:	2300      	movs	r3, #0
 8105c16:	61bb      	str	r3, [r7, #24]
      break;
 8105c18:	e002      	b.n	8105c20 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8105c1a:	4b07      	ldr	r3, [pc, #28]	@ (8105c38 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8105c1c:	61bb      	str	r3, [r7, #24]
      break;
 8105c1e:	bf00      	nop
  }

  return sysclockfreq;
 8105c20:	69bb      	ldr	r3, [r7, #24]
}
 8105c22:	4618      	mov	r0, r3
 8105c24:	3724      	adds	r7, #36	@ 0x24
 8105c26:	46bd      	mov	sp, r7
 8105c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105c2c:	4770      	bx	lr
 8105c2e:	bf00      	nop
 8105c30:	58024400 	.word	0x58024400
 8105c34:	03d09000 	.word	0x03d09000
 8105c38:	003d0900 	.word	0x003d0900
 8105c3c:	017d7840 	.word	0x017d7840
 8105c40:	46000000 	.word	0x46000000
 8105c44:	4c742400 	.word	0x4c742400
 8105c48:	4a742400 	.word	0x4a742400
 8105c4c:	4bbebc20 	.word	0x4bbebc20

08105c50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8105c50:	b580      	push	{r7, lr}
 8105c52:	b082      	sub	sp, #8
 8105c54:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8105c56:	f7ff fe81 	bl	810595c <HAL_RCC_GetSysClockFreq>
 8105c5a:	4602      	mov	r2, r0
 8105c5c:	4b11      	ldr	r3, [pc, #68]	@ (8105ca4 <HAL_RCC_GetHCLKFreq+0x54>)
 8105c5e:	699b      	ldr	r3, [r3, #24]
 8105c60:	0a1b      	lsrs	r3, r3, #8
 8105c62:	f003 030f 	and.w	r3, r3, #15
 8105c66:	4910      	ldr	r1, [pc, #64]	@ (8105ca8 <HAL_RCC_GetHCLKFreq+0x58>)
 8105c68:	5ccb      	ldrb	r3, [r1, r3]
 8105c6a:	f003 031f 	and.w	r3, r3, #31
 8105c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8105c72:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8105c74:	4b0b      	ldr	r3, [pc, #44]	@ (8105ca4 <HAL_RCC_GetHCLKFreq+0x54>)
 8105c76:	699b      	ldr	r3, [r3, #24]
 8105c78:	f003 030f 	and.w	r3, r3, #15
 8105c7c:	4a0a      	ldr	r2, [pc, #40]	@ (8105ca8 <HAL_RCC_GetHCLKFreq+0x58>)
 8105c7e:	5cd3      	ldrb	r3, [r2, r3]
 8105c80:	f003 031f 	and.w	r3, r3, #31
 8105c84:	687a      	ldr	r2, [r7, #4]
 8105c86:	fa22 f303 	lsr.w	r3, r2, r3
 8105c8a:	4a08      	ldr	r2, [pc, #32]	@ (8105cac <HAL_RCC_GetHCLKFreq+0x5c>)
 8105c8c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8105c8e:	4b07      	ldr	r3, [pc, #28]	@ (8105cac <HAL_RCC_GetHCLKFreq+0x5c>)
 8105c90:	681b      	ldr	r3, [r3, #0]
 8105c92:	4a07      	ldr	r2, [pc, #28]	@ (8105cb0 <HAL_RCC_GetHCLKFreq+0x60>)
 8105c94:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8105c96:	4b05      	ldr	r3, [pc, #20]	@ (8105cac <HAL_RCC_GetHCLKFreq+0x5c>)
 8105c98:	681b      	ldr	r3, [r3, #0]
}
 8105c9a:	4618      	mov	r0, r3
 8105c9c:	3708      	adds	r7, #8
 8105c9e:	46bd      	mov	sp, r7
 8105ca0:	bd80      	pop	{r7, pc}
 8105ca2:	bf00      	nop
 8105ca4:	58024400 	.word	0x58024400
 8105ca8:	0810ec40 	.word	0x0810ec40
 8105cac:	100320f4 	.word	0x100320f4
 8105cb0:	100320f0 	.word	0x100320f0

08105cb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8105cb4:	b580      	push	{r7, lr}
 8105cb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8105cb8:	f7ff ffca 	bl	8105c50 <HAL_RCC_GetHCLKFreq>
 8105cbc:	4602      	mov	r2, r0
 8105cbe:	4b06      	ldr	r3, [pc, #24]	@ (8105cd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8105cc0:	69db      	ldr	r3, [r3, #28]
 8105cc2:	091b      	lsrs	r3, r3, #4
 8105cc4:	f003 0307 	and.w	r3, r3, #7
 8105cc8:	4904      	ldr	r1, [pc, #16]	@ (8105cdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8105cca:	5ccb      	ldrb	r3, [r1, r3]
 8105ccc:	f003 031f 	and.w	r3, r3, #31
 8105cd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8105cd4:	4618      	mov	r0, r3
 8105cd6:	bd80      	pop	{r7, pc}
 8105cd8:	58024400 	.word	0x58024400
 8105cdc:	0810ec40 	.word	0x0810ec40

08105ce0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8105ce0:	b480      	push	{r7}
 8105ce2:	b083      	sub	sp, #12
 8105ce4:	af00      	add	r7, sp, #0
 8105ce6:	6078      	str	r0, [r7, #4]
 8105ce8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8105cea:	687b      	ldr	r3, [r7, #4]
 8105cec:	223f      	movs	r2, #63	@ 0x3f
 8105cee:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8105cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8105d5c <HAL_RCC_GetClockConfig+0x7c>)
 8105cf2:	691b      	ldr	r3, [r3, #16]
 8105cf4:	f003 0207 	and.w	r2, r3, #7
 8105cf8:	687b      	ldr	r3, [r7, #4]
 8105cfa:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 8105cfc:	4b17      	ldr	r3, [pc, #92]	@ (8105d5c <HAL_RCC_GetClockConfig+0x7c>)
 8105cfe:	699b      	ldr	r3, [r3, #24]
 8105d00:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 8105d08:	4b14      	ldr	r3, [pc, #80]	@ (8105d5c <HAL_RCC_GetClockConfig+0x7c>)
 8105d0a:	699b      	ldr	r3, [r3, #24]
 8105d0c:	f003 020f 	and.w	r2, r3, #15
 8105d10:	687b      	ldr	r3, [r7, #4]
 8105d12:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 8105d14:	4b11      	ldr	r3, [pc, #68]	@ (8105d5c <HAL_RCC_GetClockConfig+0x7c>)
 8105d16:	699b      	ldr	r3, [r3, #24]
 8105d18:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105d1c:	687b      	ldr	r3, [r7, #4]
 8105d1e:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 8105d20:	4b0e      	ldr	r3, [pc, #56]	@ (8105d5c <HAL_RCC_GetClockConfig+0x7c>)
 8105d22:	69db      	ldr	r3, [r3, #28]
 8105d24:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105d28:	687b      	ldr	r3, [r7, #4]
 8105d2a:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 8105d2c:	4b0b      	ldr	r3, [pc, #44]	@ (8105d5c <HAL_RCC_GetClockConfig+0x7c>)
 8105d2e:	69db      	ldr	r3, [r3, #28]
 8105d30:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8105d34:	687b      	ldr	r3, [r7, #4]
 8105d36:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 8105d38:	4b08      	ldr	r3, [pc, #32]	@ (8105d5c <HAL_RCC_GetClockConfig+0x7c>)
 8105d3a:	6a1b      	ldr	r3, [r3, #32]
 8105d3c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8105d40:	687b      	ldr	r3, [r7, #4]
 8105d42:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8105d44:	4b06      	ldr	r3, [pc, #24]	@ (8105d60 <HAL_RCC_GetClockConfig+0x80>)
 8105d46:	681b      	ldr	r3, [r3, #0]
 8105d48:	f003 020f 	and.w	r2, r3, #15
 8105d4c:	683b      	ldr	r3, [r7, #0]
 8105d4e:	601a      	str	r2, [r3, #0]
}
 8105d50:	bf00      	nop
 8105d52:	370c      	adds	r7, #12
 8105d54:	46bd      	mov	sp, r7
 8105d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105d5a:	4770      	bx	lr
 8105d5c:	58024400 	.word	0x58024400
 8105d60:	52002000 	.word	0x52002000

08105d64 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8105d64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8105d68:	b0ca      	sub	sp, #296	@ 0x128
 8105d6a:	af00      	add	r7, sp, #0
 8105d6c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8105d70:	2300      	movs	r3, #0
 8105d72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8105d76:	2300      	movs	r3, #0
 8105d78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8105d7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d84:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8105d88:	2500      	movs	r5, #0
 8105d8a:	ea54 0305 	orrs.w	r3, r4, r5
 8105d8e:	d049      	beq.n	8105e24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8105d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105d94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105d96:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105d9a:	d02f      	beq.n	8105dfc <HAL_RCCEx_PeriphCLKConfig+0x98>
 8105d9c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8105da0:	d828      	bhi.n	8105df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105da2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105da6:	d01a      	beq.n	8105dde <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8105da8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105dac:	d822      	bhi.n	8105df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8105dae:	2b00      	cmp	r3, #0
 8105db0:	d003      	beq.n	8105dba <HAL_RCCEx_PeriphCLKConfig+0x56>
 8105db2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8105db6:	d007      	beq.n	8105dc8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8105db8:	e01c      	b.n	8105df4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105dba:	4bb8      	ldr	r3, [pc, #736]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105dbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105dbe:	4ab7      	ldr	r2, [pc, #732]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105dc4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105dc6:	e01a      	b.n	8105dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8105dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105dcc:	3308      	adds	r3, #8
 8105dce:	2102      	movs	r1, #2
 8105dd0:	4618      	mov	r0, r3
 8105dd2:	f002 fb61 	bl	8108498 <RCCEx_PLL2_Config>
 8105dd6:	4603      	mov	r3, r0
 8105dd8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105ddc:	e00f      	b.n	8105dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8105dde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105de2:	3328      	adds	r3, #40	@ 0x28
 8105de4:	2102      	movs	r1, #2
 8105de6:	4618      	mov	r0, r3
 8105de8:	f002 fc08 	bl	81085fc <RCCEx_PLL3_Config>
 8105dec:	4603      	mov	r3, r0
 8105dee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8105df2:	e004      	b.n	8105dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105df4:	2301      	movs	r3, #1
 8105df6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105dfa:	e000      	b.n	8105dfe <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8105dfc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105dfe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e02:	2b00      	cmp	r3, #0
 8105e04:	d10a      	bne.n	8105e1c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8105e06:	4ba5      	ldr	r3, [pc, #660]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105e0a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8105e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8105e14:	4aa1      	ldr	r2, [pc, #644]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105e16:	430b      	orrs	r3, r1
 8105e18:	6513      	str	r3, [r2, #80]	@ 0x50
 8105e1a:	e003      	b.n	8105e24 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105e1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105e20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8105e24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105e2c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8105e30:	f04f 0900 	mov.w	r9, #0
 8105e34:	ea58 0309 	orrs.w	r3, r8, r9
 8105e38:	d047      	beq.n	8105eca <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8105e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105e40:	2b04      	cmp	r3, #4
 8105e42:	d82a      	bhi.n	8105e9a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8105e44:	a201      	add	r2, pc, #4	@ (adr r2, 8105e4c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8105e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8105e4a:	bf00      	nop
 8105e4c:	08105e61 	.word	0x08105e61
 8105e50:	08105e6f 	.word	0x08105e6f
 8105e54:	08105e85 	.word	0x08105e85
 8105e58:	08105ea3 	.word	0x08105ea3
 8105e5c:	08105ea3 	.word	0x08105ea3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105e60:	4b8e      	ldr	r3, [pc, #568]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105e64:	4a8d      	ldr	r2, [pc, #564]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105e66:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105e6a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105e6c:	e01a      	b.n	8105ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e72:	3308      	adds	r3, #8
 8105e74:	2100      	movs	r1, #0
 8105e76:	4618      	mov	r0, r3
 8105e78:	f002 fb0e 	bl	8108498 <RCCEx_PLL2_Config>
 8105e7c:	4603      	mov	r3, r0
 8105e7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105e82:	e00f      	b.n	8105ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105e84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105e88:	3328      	adds	r3, #40	@ 0x28
 8105e8a:	2100      	movs	r1, #0
 8105e8c:	4618      	mov	r0, r3
 8105e8e:	f002 fbb5 	bl	81085fc <RCCEx_PLL3_Config>
 8105e92:	4603      	mov	r3, r0
 8105e94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105e98:	e004      	b.n	8105ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105e9a:	2301      	movs	r3, #1
 8105e9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105ea0:	e000      	b.n	8105ea4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8105ea2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ea8:	2b00      	cmp	r3, #0
 8105eaa:	d10a      	bne.n	8105ec2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8105eac:	4b7b      	ldr	r3, [pc, #492]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105eae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105eb0:	f023 0107 	bic.w	r1, r3, #7
 8105eb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105eb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8105eba:	4a78      	ldr	r2, [pc, #480]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105ebc:	430b      	orrs	r3, r1
 8105ebe:	6513      	str	r3, [r2, #80]	@ 0x50
 8105ec0:	e003      	b.n	8105eca <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105ec6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8105eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ed2:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8105ed6:	f04f 0b00 	mov.w	fp, #0
 8105eda:	ea5a 030b 	orrs.w	r3, sl, fp
 8105ede:	d04c      	beq.n	8105f7a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8105ee0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105ee6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105eea:	d030      	beq.n	8105f4e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8105eec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8105ef0:	d829      	bhi.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105ef2:	2bc0      	cmp	r3, #192	@ 0xc0
 8105ef4:	d02d      	beq.n	8105f52 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8105ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8105ef8:	d825      	bhi.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105efa:	2b80      	cmp	r3, #128	@ 0x80
 8105efc:	d018      	beq.n	8105f30 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8105efe:	2b80      	cmp	r3, #128	@ 0x80
 8105f00:	d821      	bhi.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8105f02:	2b00      	cmp	r3, #0
 8105f04:	d002      	beq.n	8105f0c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8105f06:	2b40      	cmp	r3, #64	@ 0x40
 8105f08:	d007      	beq.n	8105f1a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8105f0a:	e01c      	b.n	8105f46 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105f0c:	4b63      	ldr	r3, [pc, #396]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105f10:	4a62      	ldr	r2, [pc, #392]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105f16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105f18:	e01c      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105f1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f1e:	3308      	adds	r3, #8
 8105f20:	2100      	movs	r1, #0
 8105f22:	4618      	mov	r0, r3
 8105f24:	f002 fab8 	bl	8108498 <RCCEx_PLL2_Config>
 8105f28:	4603      	mov	r3, r0
 8105f2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105f2e:	e011      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f34:	3328      	adds	r3, #40	@ 0x28
 8105f36:	2100      	movs	r1, #0
 8105f38:	4618      	mov	r0, r3
 8105f3a:	f002 fb5f 	bl	81085fc <RCCEx_PLL3_Config>
 8105f3e:	4603      	mov	r3, r0
 8105f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8105f44:	e006      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8105f46:	2301      	movs	r3, #1
 8105f48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8105f4c:	e002      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105f4e:	bf00      	nop
 8105f50:	e000      	b.n	8105f54 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8105f52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8105f54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105f58:	2b00      	cmp	r3, #0
 8105f5a:	d10a      	bne.n	8105f72 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8105f5c:	4b4f      	ldr	r3, [pc, #316]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8105f60:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8105f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8105f6a:	4a4c      	ldr	r2, [pc, #304]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105f6c:	430b      	orrs	r3, r1
 8105f6e:	6513      	str	r3, [r2, #80]	@ 0x50
 8105f70:	e003      	b.n	8105f7a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8105f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8105f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8105f7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105f82:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8105f86:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8105f8a:	2300      	movs	r3, #0
 8105f8c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8105f90:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8105f94:	460b      	mov	r3, r1
 8105f96:	4313      	orrs	r3, r2
 8105f98:	d053      	beq.n	8106042 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8105f9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105f9e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8105fa2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105fa6:	d035      	beq.n	8106014 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8105fa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8105fac:	d82e      	bhi.n	810600c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105fae:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105fb2:	d031      	beq.n	8106018 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8105fb4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8105fb8:	d828      	bhi.n	810600c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105fba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105fbe:	d01a      	beq.n	8105ff6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8105fc0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8105fc4:	d822      	bhi.n	810600c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8105fc6:	2b00      	cmp	r3, #0
 8105fc8:	d003      	beq.n	8105fd2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8105fca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8105fce:	d007      	beq.n	8105fe0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8105fd0:	e01c      	b.n	810600c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8105fd2:	4b32      	ldr	r3, [pc, #200]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8105fd6:	4a31      	ldr	r2, [pc, #196]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8105fd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8105fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8105fde:	e01c      	b.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8105fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105fe4:	3308      	adds	r3, #8
 8105fe6:	2100      	movs	r1, #0
 8105fe8:	4618      	mov	r0, r3
 8105fea:	f002 fa55 	bl	8108498 <RCCEx_PLL2_Config>
 8105fee:	4603      	mov	r3, r0
 8105ff0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8105ff4:	e011      	b.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8105ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8105ffa:	3328      	adds	r3, #40	@ 0x28
 8105ffc:	2100      	movs	r1, #0
 8105ffe:	4618      	mov	r0, r3
 8106000:	f002 fafc 	bl	81085fc <RCCEx_PLL3_Config>
 8106004:	4603      	mov	r3, r0
 8106006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810600a:	e006      	b.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 810600c:	2301      	movs	r3, #1
 810600e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106012:	e002      	b.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106014:	bf00      	nop
 8106016:	e000      	b.n	810601a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8106018:	bf00      	nop
    }

    if (ret == HAL_OK)
 810601a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810601e:	2b00      	cmp	r3, #0
 8106020:	d10b      	bne.n	810603a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8106022:	4b1e      	ldr	r3, [pc, #120]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106024:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106026:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 810602a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810602e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8106032:	4a1a      	ldr	r2, [pc, #104]	@ (810609c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8106034:	430b      	orrs	r3, r1
 8106036:	6593      	str	r3, [r2, #88]	@ 0x58
 8106038:	e003      	b.n	8106042 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810603a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810603e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8106042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106046:	e9d3 2300 	ldrd	r2, r3, [r3]
 810604a:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 810604e:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8106052:	2300      	movs	r3, #0
 8106054:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8106058:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 810605c:	460b      	mov	r3, r1
 810605e:	4313      	orrs	r3, r2
 8106060:	d056      	beq.n	8106110 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8106062:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106066:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 810606a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810606e:	d038      	beq.n	81060e2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8106070:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8106074:	d831      	bhi.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106076:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 810607a:	d034      	beq.n	81060e6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810607c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8106080:	d82b      	bhi.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x376>
 8106082:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8106086:	d01d      	beq.n	81060c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8106088:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810608c:	d825      	bhi.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x376>
 810608e:	2b00      	cmp	r3, #0
 8106090:	d006      	beq.n	81060a0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8106092:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8106096:	d00a      	beq.n	81060ae <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8106098:	e01f      	b.n	81060da <HAL_RCCEx_PeriphCLKConfig+0x376>
 810609a:	bf00      	nop
 810609c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81060a0:	4ba2      	ldr	r3, [pc, #648]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81060a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81060a4:	4aa1      	ldr	r2, [pc, #644]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81060a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81060aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81060ac:	e01c      	b.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81060ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060b2:	3308      	adds	r3, #8
 81060b4:	2100      	movs	r1, #0
 81060b6:	4618      	mov	r0, r3
 81060b8:	f002 f9ee 	bl	8108498 <RCCEx_PLL2_Config>
 81060bc:	4603      	mov	r3, r0
 81060be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81060c2:	e011      	b.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81060c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060c8:	3328      	adds	r3, #40	@ 0x28
 81060ca:	2100      	movs	r1, #0
 81060cc:	4618      	mov	r0, r3
 81060ce:	f002 fa95 	bl	81085fc <RCCEx_PLL3_Config>
 81060d2:	4603      	mov	r3, r0
 81060d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81060d8:	e006      	b.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81060da:	2301      	movs	r3, #1
 81060dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81060e0:	e002      	b.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81060e2:	bf00      	nop
 81060e4:	e000      	b.n	81060e8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81060e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81060e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81060ec:	2b00      	cmp	r3, #0
 81060ee:	d10b      	bne.n	8106108 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81060f0:	4b8e      	ldr	r3, [pc, #568]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81060f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81060f4:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81060f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81060fc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8106100:	4a8a      	ldr	r2, [pc, #552]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106102:	430b      	orrs	r3, r1
 8106104:	6593      	str	r3, [r2, #88]	@ 0x58
 8106106:	e003      	b.n	8106110 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106108:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810610c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8106110:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106118:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 810611c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8106120:	2300      	movs	r3, #0
 8106122:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8106126:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 810612a:	460b      	mov	r3, r1
 810612c:	4313      	orrs	r3, r2
 810612e:	d03a      	beq.n	81061a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8106130:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106136:	2b30      	cmp	r3, #48	@ 0x30
 8106138:	d01f      	beq.n	810617a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810613a:	2b30      	cmp	r3, #48	@ 0x30
 810613c:	d819      	bhi.n	8106172 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810613e:	2b20      	cmp	r3, #32
 8106140:	d00c      	beq.n	810615c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8106142:	2b20      	cmp	r3, #32
 8106144:	d815      	bhi.n	8106172 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8106146:	2b00      	cmp	r3, #0
 8106148:	d019      	beq.n	810617e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810614a:	2b10      	cmp	r3, #16
 810614c:	d111      	bne.n	8106172 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810614e:	4b77      	ldr	r3, [pc, #476]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106152:	4a76      	ldr	r2, [pc, #472]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106154:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106158:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810615a:	e011      	b.n	8106180 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810615c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106160:	3308      	adds	r3, #8
 8106162:	2102      	movs	r1, #2
 8106164:	4618      	mov	r0, r3
 8106166:	f002 f997 	bl	8108498 <RCCEx_PLL2_Config>
 810616a:	4603      	mov	r3, r0
 810616c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8106170:	e006      	b.n	8106180 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8106172:	2301      	movs	r3, #1
 8106174:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106178:	e002      	b.n	8106180 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810617a:	bf00      	nop
 810617c:	e000      	b.n	8106180 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810617e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106180:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106184:	2b00      	cmp	r3, #0
 8106186:	d10a      	bne.n	810619e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8106188:	4b68      	ldr	r3, [pc, #416]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810618a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810618c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8106190:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106196:	4a65      	ldr	r2, [pc, #404]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106198:	430b      	orrs	r3, r1
 810619a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810619c:	e003      	b.n	81061a6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810619e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81061a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 81061a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81061ae:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81061b2:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81061b6:	2300      	movs	r3, #0
 81061b8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81061bc:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81061c0:	460b      	mov	r3, r1
 81061c2:	4313      	orrs	r3, r2
 81061c4:	d051      	beq.n	810626a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81061c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81061ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81061cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81061d0:	d035      	beq.n	810623e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81061d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81061d6:	d82e      	bhi.n	8106236 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81061d8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81061dc:	d031      	beq.n	8106242 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81061de:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81061e2:	d828      	bhi.n	8106236 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81061e4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81061e8:	d01a      	beq.n	8106220 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81061ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81061ee:	d822      	bhi.n	8106236 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81061f0:	2b00      	cmp	r3, #0
 81061f2:	d003      	beq.n	81061fc <HAL_RCCEx_PeriphCLKConfig+0x498>
 81061f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81061f8:	d007      	beq.n	810620a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81061fa:	e01c      	b.n	8106236 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81061fc:	4b4b      	ldr	r3, [pc, #300]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81061fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106200:	4a4a      	ldr	r2, [pc, #296]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106202:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106206:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106208:	e01c      	b.n	8106244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810620a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810620e:	3308      	adds	r3, #8
 8106210:	2100      	movs	r1, #0
 8106212:	4618      	mov	r0, r3
 8106214:	f002 f940 	bl	8108498 <RCCEx_PLL2_Config>
 8106218:	4603      	mov	r3, r0
 810621a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810621e:	e011      	b.n	8106244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8106220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106224:	3328      	adds	r3, #40	@ 0x28
 8106226:	2100      	movs	r1, #0
 8106228:	4618      	mov	r0, r3
 810622a:	f002 f9e7 	bl	81085fc <RCCEx_PLL3_Config>
 810622e:	4603      	mov	r3, r0
 8106230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8106234:	e006      	b.n	8106244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106236:	2301      	movs	r3, #1
 8106238:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810623c:	e002      	b.n	8106244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810623e:	bf00      	nop
 8106240:	e000      	b.n	8106244 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8106242:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106244:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106248:	2b00      	cmp	r3, #0
 810624a:	d10a      	bne.n	8106262 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810624c:	4b37      	ldr	r3, [pc, #220]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810624e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106250:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8106254:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106258:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 810625a:	4a34      	ldr	r2, [pc, #208]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810625c:	430b      	orrs	r3, r1
 810625e:	6513      	str	r3, [r2, #80]	@ 0x50
 8106260:	e003      	b.n	810626a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106266:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810626a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810626e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106272:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8106276:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 810627a:	2300      	movs	r3, #0
 810627c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8106280:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8106284:	460b      	mov	r3, r1
 8106286:	4313      	orrs	r3, r2
 8106288:	d056      	beq.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810628a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810628e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106290:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8106294:	d033      	beq.n	81062fe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8106296:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810629a:	d82c      	bhi.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810629c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81062a0:	d02f      	beq.n	8106302 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 81062a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81062a6:	d826      	bhi.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81062a8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81062ac:	d02b      	beq.n	8106306 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81062ae:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81062b2:	d820      	bhi.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81062b4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81062b8:	d012      	beq.n	81062e0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81062ba:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81062be:	d81a      	bhi.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81062c0:	2b00      	cmp	r3, #0
 81062c2:	d022      	beq.n	810630a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81062c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81062c8:	d115      	bne.n	81062f6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81062ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062ce:	3308      	adds	r3, #8
 81062d0:	2101      	movs	r1, #1
 81062d2:	4618      	mov	r0, r3
 81062d4:	f002 f8e0 	bl	8108498 <RCCEx_PLL2_Config>
 81062d8:	4603      	mov	r3, r0
 81062da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81062de:	e015      	b.n	810630c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81062e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81062e4:	3328      	adds	r3, #40	@ 0x28
 81062e6:	2101      	movs	r1, #1
 81062e8:	4618      	mov	r0, r3
 81062ea:	f002 f987 	bl	81085fc <RCCEx_PLL3_Config>
 81062ee:	4603      	mov	r3, r0
 81062f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81062f4:	e00a      	b.n	810630c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81062f6:	2301      	movs	r3, #1
 81062f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81062fc:	e006      	b.n	810630c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81062fe:	bf00      	nop
 8106300:	e004      	b.n	810630c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106302:	bf00      	nop
 8106304:	e002      	b.n	810630c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8106306:	bf00      	nop
 8106308:	e000      	b.n	810630c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 810630a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810630c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106310:	2b00      	cmp	r3, #0
 8106312:	d10d      	bne.n	8106330 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8106314:	4b05      	ldr	r3, [pc, #20]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106318:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 810631c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106320:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8106322:	4a02      	ldr	r2, [pc, #8]	@ (810632c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8106324:	430b      	orrs	r3, r1
 8106326:	6513      	str	r3, [r2, #80]	@ 0x50
 8106328:	e006      	b.n	8106338 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810632a:	bf00      	nop
 810632c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106330:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106334:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8106338:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810633c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106340:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8106344:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8106348:	2300      	movs	r3, #0
 810634a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 810634e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8106352:	460b      	mov	r3, r1
 8106354:	4313      	orrs	r3, r2
 8106356:	d055      	beq.n	8106404 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8106358:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810635c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8106360:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106364:	d033      	beq.n	81063ce <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8106366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810636a:	d82c      	bhi.n	81063c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810636c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106370:	d02f      	beq.n	81063d2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8106372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106376:	d826      	bhi.n	81063c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106378:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810637c:	d02b      	beq.n	81063d6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810637e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106382:	d820      	bhi.n	81063c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106384:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106388:	d012      	beq.n	81063b0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810638a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810638e:	d81a      	bhi.n	81063c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8106390:	2b00      	cmp	r3, #0
 8106392:	d022      	beq.n	81063da <HAL_RCCEx_PeriphCLKConfig+0x676>
 8106394:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8106398:	d115      	bne.n	81063c6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810639a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810639e:	3308      	adds	r3, #8
 81063a0:	2101      	movs	r1, #1
 81063a2:	4618      	mov	r0, r3
 81063a4:	f002 f878 	bl	8108498 <RCCEx_PLL2_Config>
 81063a8:	4603      	mov	r3, r0
 81063aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81063ae:	e015      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81063b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063b4:	3328      	adds	r3, #40	@ 0x28
 81063b6:	2101      	movs	r1, #1
 81063b8:	4618      	mov	r0, r3
 81063ba:	f002 f91f 	bl	81085fc <RCCEx_PLL3_Config>
 81063be:	4603      	mov	r3, r0
 81063c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81063c4:	e00a      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81063c6:	2301      	movs	r3, #1
 81063c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81063cc:	e006      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81063ce:	bf00      	nop
 81063d0:	e004      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81063d2:	bf00      	nop
 81063d4:	e002      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81063d6:	bf00      	nop
 81063d8:	e000      	b.n	81063dc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81063da:	bf00      	nop
    }

    if (ret == HAL_OK)
 81063dc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81063e0:	2b00      	cmp	r3, #0
 81063e2:	d10b      	bne.n	81063fc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81063e4:	4ba4      	ldr	r3, [pc, #656]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81063e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81063e8:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81063ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81063f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81063f4:	4aa0      	ldr	r2, [pc, #640]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81063f6:	430b      	orrs	r3, r1
 81063f8:	6593      	str	r3, [r2, #88]	@ 0x58
 81063fa:	e003      	b.n	8106404 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81063fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106400:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8106404:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106408:	e9d3 2300 	ldrd	r2, r3, [r3]
 810640c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8106410:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8106414:	2300      	movs	r3, #0
 8106416:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 810641a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 810641e:	460b      	mov	r3, r1
 8106420:	4313      	orrs	r3, r2
 8106422:	d037      	beq.n	8106494 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8106424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106428:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810642a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810642e:	d00e      	beq.n	810644e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8106430:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106434:	d816      	bhi.n	8106464 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8106436:	2b00      	cmp	r3, #0
 8106438:	d018      	beq.n	810646c <HAL_RCCEx_PeriphCLKConfig+0x708>
 810643a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810643e:	d111      	bne.n	8106464 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106440:	4b8d      	ldr	r3, [pc, #564]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106444:	4a8c      	ldr	r2, [pc, #560]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106446:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810644a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810644c:	e00f      	b.n	810646e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810644e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106452:	3308      	adds	r3, #8
 8106454:	2101      	movs	r1, #1
 8106456:	4618      	mov	r0, r3
 8106458:	f002 f81e 	bl	8108498 <RCCEx_PLL2_Config>
 810645c:	4603      	mov	r3, r0
 810645e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8106462:	e004      	b.n	810646e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106464:	2301      	movs	r3, #1
 8106466:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810646a:	e000      	b.n	810646e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810646c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810646e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106472:	2b00      	cmp	r3, #0
 8106474:	d10a      	bne.n	810648c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8106476:	4b80      	ldr	r3, [pc, #512]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106478:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810647a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 810647e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106482:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106484:	4a7c      	ldr	r2, [pc, #496]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106486:	430b      	orrs	r3, r1
 8106488:	6513      	str	r3, [r2, #80]	@ 0x50
 810648a:	e003      	b.n	8106494 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810648c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106490:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8106494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106498:	e9d3 2300 	ldrd	r2, r3, [r3]
 810649c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 81064a0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 81064a4:	2300      	movs	r3, #0
 81064a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81064aa:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81064ae:	460b      	mov	r3, r1
 81064b0:	4313      	orrs	r3, r2
 81064b2:	d039      	beq.n	8106528 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81064b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81064ba:	2b03      	cmp	r3, #3
 81064bc:	d81c      	bhi.n	81064f8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81064be:	a201      	add	r2, pc, #4	@ (adr r2, 81064c4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81064c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81064c4:	08106501 	.word	0x08106501
 81064c8:	081064d5 	.word	0x081064d5
 81064cc:	081064e3 	.word	0x081064e3
 81064d0:	08106501 	.word	0x08106501
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81064d4:	4b68      	ldr	r3, [pc, #416]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81064d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81064d8:	4a67      	ldr	r2, [pc, #412]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81064da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81064de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81064e0:	e00f      	b.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81064e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81064e6:	3308      	adds	r3, #8
 81064e8:	2102      	movs	r1, #2
 81064ea:	4618      	mov	r0, r3
 81064ec:	f001 ffd4 	bl	8108498 <RCCEx_PLL2_Config>
 81064f0:	4603      	mov	r3, r0
 81064f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81064f6:	e004      	b.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81064f8:	2301      	movs	r3, #1
 81064fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81064fe:	e000      	b.n	8106502 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8106500:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106506:	2b00      	cmp	r3, #0
 8106508:	d10a      	bne.n	8106520 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 810650a:	4b5b      	ldr	r3, [pc, #364]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810650c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810650e:	f023 0103 	bic.w	r1, r3, #3
 8106512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8106518:	4a57      	ldr	r2, [pc, #348]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810651a:	430b      	orrs	r3, r1
 810651c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810651e:	e003      	b.n	8106528 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106520:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106524:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8106528:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810652c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106530:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8106534:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8106538:	2300      	movs	r3, #0
 810653a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 810653e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8106542:	460b      	mov	r3, r1
 8106544:	4313      	orrs	r3, r2
 8106546:	f000 809f 	beq.w	8106688 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810654a:	4b4c      	ldr	r3, [pc, #304]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810654c:	681b      	ldr	r3, [r3, #0]
 810654e:	4a4b      	ldr	r2, [pc, #300]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8106550:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8106554:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8106556:	f7fc fa35 	bl	81029c4 <HAL_GetTick>
 810655a:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810655e:	e00b      	b.n	8106578 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8106560:	f7fc fa30 	bl	81029c4 <HAL_GetTick>
 8106564:	4602      	mov	r2, r0
 8106566:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810656a:	1ad3      	subs	r3, r2, r3
 810656c:	2b64      	cmp	r3, #100	@ 0x64
 810656e:	d903      	bls.n	8106578 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8106570:	2303      	movs	r3, #3
 8106572:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106576:	e005      	b.n	8106584 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8106578:	4b40      	ldr	r3, [pc, #256]	@ (810667c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810657a:	681b      	ldr	r3, [r3, #0]
 810657c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8106580:	2b00      	cmp	r3, #0
 8106582:	d0ed      	beq.n	8106560 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8106584:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106588:	2b00      	cmp	r3, #0
 810658a:	d179      	bne.n	8106680 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810658c:	4b3a      	ldr	r3, [pc, #232]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810658e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8106590:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106594:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106598:	4053      	eors	r3, r2
 810659a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 810659e:	2b00      	cmp	r3, #0
 81065a0:	d015      	beq.n	81065ce <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 81065a2:	4b35      	ldr	r3, [pc, #212]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81065a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 81065aa:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 81065ae:	4b32      	ldr	r3, [pc, #200]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81065b2:	4a31      	ldr	r2, [pc, #196]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 81065b8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81065ba:	4b2f      	ldr	r3, [pc, #188]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81065be:	4a2e      	ldr	r2, [pc, #184]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 81065c4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81065c6:	4a2c      	ldr	r2, [pc, #176]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81065c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 81065cc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81065ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81065d2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81065d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81065da:	d118      	bne.n	810660e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81065dc:	f7fc f9f2 	bl	81029c4 <HAL_GetTick>
 81065e0:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81065e4:	e00d      	b.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81065e6:	f7fc f9ed 	bl	81029c4 <HAL_GetTick>
 81065ea:	4602      	mov	r2, r0
 81065ec:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 81065f0:	1ad2      	subs	r2, r2, r3
 81065f2:	f241 3388 	movw	r3, #5000	@ 0x1388
 81065f6:	429a      	cmp	r2, r3
 81065f8:	d903      	bls.n	8106602 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81065fa:	2303      	movs	r3, #3
 81065fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8106600:	e005      	b.n	810660e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8106602:	4b1d      	ldr	r3, [pc, #116]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8106606:	f003 0302 	and.w	r3, r3, #2
 810660a:	2b00      	cmp	r3, #0
 810660c:	d0eb      	beq.n	81065e6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 810660e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106612:	2b00      	cmp	r3, #0
 8106614:	d12b      	bne.n	810666e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8106616:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810661a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810661e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8106622:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106626:	d110      	bne.n	810664a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8106628:	4b13      	ldr	r3, [pc, #76]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810662a:	691b      	ldr	r3, [r3, #16]
 810662c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8106630:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106634:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106638:	091b      	lsrs	r3, r3, #4
 810663a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 810663e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8106642:	4a0d      	ldr	r2, [pc, #52]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106644:	430b      	orrs	r3, r1
 8106646:	6113      	str	r3, [r2, #16]
 8106648:	e005      	b.n	8106656 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 810664a:	4b0b      	ldr	r3, [pc, #44]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810664c:	691b      	ldr	r3, [r3, #16]
 810664e:	4a0a      	ldr	r2, [pc, #40]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106650:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8106654:	6113      	str	r3, [r2, #16]
 8106656:	4b08      	ldr	r3, [pc, #32]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106658:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 810665a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810665e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8106662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8106666:	4a04      	ldr	r2, [pc, #16]	@ (8106678 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8106668:	430b      	orrs	r3, r1
 810666a:	6713      	str	r3, [r2, #112]	@ 0x70
 810666c:	e00c      	b.n	8106688 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 810666e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106672:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8106676:	e007      	b.n	8106688 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8106678:	58024400 	.word	0x58024400
 810667c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106680:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106684:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8106688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810668c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106690:	f002 0301 	and.w	r3, r2, #1
 8106694:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8106698:	2300      	movs	r3, #0
 810669a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 810669e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 81066a2:	460b      	mov	r3, r1
 81066a4:	4313      	orrs	r3, r2
 81066a6:	f000 8089 	beq.w	81067bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 81066aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81066ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81066b0:	2b28      	cmp	r3, #40	@ 0x28
 81066b2:	d86b      	bhi.n	810678c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 81066b4:	a201      	add	r2, pc, #4	@ (adr r2, 81066bc <HAL_RCCEx_PeriphCLKConfig+0x958>)
 81066b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81066ba:	bf00      	nop
 81066bc:	08106795 	.word	0x08106795
 81066c0:	0810678d 	.word	0x0810678d
 81066c4:	0810678d 	.word	0x0810678d
 81066c8:	0810678d 	.word	0x0810678d
 81066cc:	0810678d 	.word	0x0810678d
 81066d0:	0810678d 	.word	0x0810678d
 81066d4:	0810678d 	.word	0x0810678d
 81066d8:	0810678d 	.word	0x0810678d
 81066dc:	08106761 	.word	0x08106761
 81066e0:	0810678d 	.word	0x0810678d
 81066e4:	0810678d 	.word	0x0810678d
 81066e8:	0810678d 	.word	0x0810678d
 81066ec:	0810678d 	.word	0x0810678d
 81066f0:	0810678d 	.word	0x0810678d
 81066f4:	0810678d 	.word	0x0810678d
 81066f8:	0810678d 	.word	0x0810678d
 81066fc:	08106777 	.word	0x08106777
 8106700:	0810678d 	.word	0x0810678d
 8106704:	0810678d 	.word	0x0810678d
 8106708:	0810678d 	.word	0x0810678d
 810670c:	0810678d 	.word	0x0810678d
 8106710:	0810678d 	.word	0x0810678d
 8106714:	0810678d 	.word	0x0810678d
 8106718:	0810678d 	.word	0x0810678d
 810671c:	08106795 	.word	0x08106795
 8106720:	0810678d 	.word	0x0810678d
 8106724:	0810678d 	.word	0x0810678d
 8106728:	0810678d 	.word	0x0810678d
 810672c:	0810678d 	.word	0x0810678d
 8106730:	0810678d 	.word	0x0810678d
 8106734:	0810678d 	.word	0x0810678d
 8106738:	0810678d 	.word	0x0810678d
 810673c:	08106795 	.word	0x08106795
 8106740:	0810678d 	.word	0x0810678d
 8106744:	0810678d 	.word	0x0810678d
 8106748:	0810678d 	.word	0x0810678d
 810674c:	0810678d 	.word	0x0810678d
 8106750:	0810678d 	.word	0x0810678d
 8106754:	0810678d 	.word	0x0810678d
 8106758:	0810678d 	.word	0x0810678d
 810675c:	08106795 	.word	0x08106795
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106764:	3308      	adds	r3, #8
 8106766:	2101      	movs	r1, #1
 8106768:	4618      	mov	r0, r3
 810676a:	f001 fe95 	bl	8108498 <RCCEx_PLL2_Config>
 810676e:	4603      	mov	r3, r0
 8106770:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8106774:	e00f      	b.n	8106796 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810677a:	3328      	adds	r3, #40	@ 0x28
 810677c:	2101      	movs	r1, #1
 810677e:	4618      	mov	r0, r3
 8106780:	f001 ff3c 	bl	81085fc <RCCEx_PLL3_Config>
 8106784:	4603      	mov	r3, r0
 8106786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810678a:	e004      	b.n	8106796 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810678c:	2301      	movs	r3, #1
 810678e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106792:	e000      	b.n	8106796 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8106794:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106796:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810679a:	2b00      	cmp	r3, #0
 810679c:	d10a      	bne.n	81067b4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 810679e:	4bbf      	ldr	r3, [pc, #764]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81067a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81067a2:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 81067a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067aa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 81067ac:	4abb      	ldr	r2, [pc, #748]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81067ae:	430b      	orrs	r3, r1
 81067b0:	6553      	str	r3, [r2, #84]	@ 0x54
 81067b2:	e003      	b.n	81067bc <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81067b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81067b8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 81067bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81067c4:	f002 0302 	and.w	r3, r2, #2
 81067c8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 81067cc:	2300      	movs	r3, #0
 81067ce:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 81067d2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 81067d6:	460b      	mov	r3, r1
 81067d8:	4313      	orrs	r3, r2
 81067da:	d041      	beq.n	8106860 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 81067dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81067e0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81067e2:	2b05      	cmp	r3, #5
 81067e4:	d824      	bhi.n	8106830 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 81067e6:	a201      	add	r2, pc, #4	@ (adr r2, 81067ec <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 81067e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81067ec:	08106839 	.word	0x08106839
 81067f0:	08106805 	.word	0x08106805
 81067f4:	0810681b 	.word	0x0810681b
 81067f8:	08106839 	.word	0x08106839
 81067fc:	08106839 	.word	0x08106839
 8106800:	08106839 	.word	0x08106839
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8106804:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106808:	3308      	adds	r3, #8
 810680a:	2101      	movs	r1, #1
 810680c:	4618      	mov	r0, r3
 810680e:	f001 fe43 	bl	8108498 <RCCEx_PLL2_Config>
 8106812:	4603      	mov	r3, r0
 8106814:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8106818:	e00f      	b.n	810683a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810681a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810681e:	3328      	adds	r3, #40	@ 0x28
 8106820:	2101      	movs	r1, #1
 8106822:	4618      	mov	r0, r3
 8106824:	f001 feea 	bl	81085fc <RCCEx_PLL3_Config>
 8106828:	4603      	mov	r3, r0
 810682a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 810682e:	e004      	b.n	810683a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106830:	2301      	movs	r3, #1
 8106832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106836:	e000      	b.n	810683a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8106838:	bf00      	nop
    }

    if (ret == HAL_OK)
 810683a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810683e:	2b00      	cmp	r3, #0
 8106840:	d10a      	bne.n	8106858 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8106842:	4b96      	ldr	r3, [pc, #600]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106844:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106846:	f023 0107 	bic.w	r1, r3, #7
 810684a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810684e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8106850:	4a92      	ldr	r2, [pc, #584]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106852:	430b      	orrs	r3, r1
 8106854:	6553      	str	r3, [r2, #84]	@ 0x54
 8106856:	e003      	b.n	8106860 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106858:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810685c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8106860:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106868:	f002 0304 	and.w	r3, r2, #4
 810686c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8106870:	2300      	movs	r3, #0
 8106872:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8106876:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810687a:	460b      	mov	r3, r1
 810687c:	4313      	orrs	r3, r2
 810687e:	d044      	beq.n	810690a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8106880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8106888:	2b05      	cmp	r3, #5
 810688a:	d825      	bhi.n	81068d8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 810688c:	a201      	add	r2, pc, #4	@ (adr r2, 8106894 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 810688e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106892:	bf00      	nop
 8106894:	081068e1 	.word	0x081068e1
 8106898:	081068ad 	.word	0x081068ad
 810689c:	081068c3 	.word	0x081068c3
 81068a0:	081068e1 	.word	0x081068e1
 81068a4:	081068e1 	.word	0x081068e1
 81068a8:	081068e1 	.word	0x081068e1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81068ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068b0:	3308      	adds	r3, #8
 81068b2:	2101      	movs	r1, #1
 81068b4:	4618      	mov	r0, r3
 81068b6:	f001 fdef 	bl	8108498 <RCCEx_PLL2_Config>
 81068ba:	4603      	mov	r3, r0
 81068bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81068c0:	e00f      	b.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81068c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068c6:	3328      	adds	r3, #40	@ 0x28
 81068c8:	2101      	movs	r1, #1
 81068ca:	4618      	mov	r0, r3
 81068cc:	f001 fe96 	bl	81085fc <RCCEx_PLL3_Config>
 81068d0:	4603      	mov	r3, r0
 81068d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81068d6:	e004      	b.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81068d8:	2301      	movs	r3, #1
 81068da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81068de:	e000      	b.n	81068e2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81068e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81068e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81068e6:	2b00      	cmp	r3, #0
 81068e8:	d10b      	bne.n	8106902 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81068ea:	4b6c      	ldr	r3, [pc, #432]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81068ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81068ee:	f023 0107 	bic.w	r1, r3, #7
 81068f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81068f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81068fa:	4a68      	ldr	r2, [pc, #416]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81068fc:	430b      	orrs	r3, r1
 81068fe:	6593      	str	r3, [r2, #88]	@ 0x58
 8106900:	e003      	b.n	810690a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106902:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106906:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 810690a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810690e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106912:	f002 0320 	and.w	r3, r2, #32
 8106916:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 810691a:	2300      	movs	r3, #0
 810691c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8106920:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8106924:	460b      	mov	r3, r1
 8106926:	4313      	orrs	r3, r2
 8106928:	d055      	beq.n	81069d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 810692a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8106932:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8106936:	d033      	beq.n	81069a0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8106938:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810693c:	d82c      	bhi.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810693e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106942:	d02f      	beq.n	81069a4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8106944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8106948:	d826      	bhi.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810694a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810694e:	d02b      	beq.n	81069a8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8106950:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8106954:	d820      	bhi.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106956:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810695a:	d012      	beq.n	8106982 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 810695c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8106960:	d81a      	bhi.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8106962:	2b00      	cmp	r3, #0
 8106964:	d022      	beq.n	81069ac <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8106966:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810696a:	d115      	bne.n	8106998 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810696c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106970:	3308      	adds	r3, #8
 8106972:	2100      	movs	r1, #0
 8106974:	4618      	mov	r0, r3
 8106976:	f001 fd8f 	bl	8108498 <RCCEx_PLL2_Config>
 810697a:	4603      	mov	r3, r0
 810697c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106980:	e015      	b.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106986:	3328      	adds	r3, #40	@ 0x28
 8106988:	2102      	movs	r1, #2
 810698a:	4618      	mov	r0, r3
 810698c:	f001 fe36 	bl	81085fc <RCCEx_PLL3_Config>
 8106990:	4603      	mov	r3, r0
 8106992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8106996:	e00a      	b.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106998:	2301      	movs	r3, #1
 810699a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810699e:	e006      	b.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81069a0:	bf00      	nop
 81069a2:	e004      	b.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81069a4:	bf00      	nop
 81069a6:	e002      	b.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81069a8:	bf00      	nop
 81069aa:	e000      	b.n	81069ae <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 81069ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 81069ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81069b2:	2b00      	cmp	r3, #0
 81069b4:	d10b      	bne.n	81069ce <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81069b6:	4b39      	ldr	r3, [pc, #228]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81069ba:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81069be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81069c6:	4a35      	ldr	r2, [pc, #212]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81069c8:	430b      	orrs	r3, r1
 81069ca:	6553      	str	r3, [r2, #84]	@ 0x54
 81069cc:	e003      	b.n	81069d6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81069ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81069d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81069d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069da:	e9d3 2300 	ldrd	r2, r3, [r3]
 81069de:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81069e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81069e6:	2300      	movs	r3, #0
 81069e8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81069ec:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81069f0:	460b      	mov	r3, r1
 81069f2:	4313      	orrs	r3, r2
 81069f4:	d058      	beq.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81069f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81069fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81069fe:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106a02:	d033      	beq.n	8106a6c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8106a04:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8106a08:	d82c      	bhi.n	8106a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106a0a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106a0e:	d02f      	beq.n	8106a70 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8106a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106a14:	d826      	bhi.n	8106a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106a16:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106a1a:	d02b      	beq.n	8106a74 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8106a1c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8106a20:	d820      	bhi.n	8106a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106a22:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106a26:	d012      	beq.n	8106a4e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8106a28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8106a2c:	d81a      	bhi.n	8106a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8106a2e:	2b00      	cmp	r3, #0
 8106a30:	d022      	beq.n	8106a78 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8106a32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8106a36:	d115      	bne.n	8106a64 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a3c:	3308      	adds	r3, #8
 8106a3e:	2100      	movs	r1, #0
 8106a40:	4618      	mov	r0, r3
 8106a42:	f001 fd29 	bl	8108498 <RCCEx_PLL2_Config>
 8106a46:	4603      	mov	r3, r0
 8106a48:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106a4c:	e015      	b.n	8106a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a52:	3328      	adds	r3, #40	@ 0x28
 8106a54:	2102      	movs	r1, #2
 8106a56:	4618      	mov	r0, r3
 8106a58:	f001 fdd0 	bl	81085fc <RCCEx_PLL3_Config>
 8106a5c:	4603      	mov	r3, r0
 8106a5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8106a62:	e00a      	b.n	8106a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106a64:	2301      	movs	r3, #1
 8106a66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106a6a:	e006      	b.n	8106a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106a6c:	bf00      	nop
 8106a6e:	e004      	b.n	8106a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106a70:	bf00      	nop
 8106a72:	e002      	b.n	8106a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106a74:	bf00      	nop
 8106a76:	e000      	b.n	8106a7a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8106a78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106a7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106a7e:	2b00      	cmp	r3, #0
 8106a80:	d10e      	bne.n	8106aa0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8106a82:	4b06      	ldr	r3, [pc, #24]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106a84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106a86:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8106a8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106a8e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8106a92:	4a02      	ldr	r2, [pc, #8]	@ (8106a9c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8106a94:	430b      	orrs	r3, r1
 8106a96:	6593      	str	r3, [r2, #88]	@ 0x58
 8106a98:	e006      	b.n	8106aa8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8106a9a:	bf00      	nop
 8106a9c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106aa0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106aa4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8106aa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ab0:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8106ab4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8106ab8:	2300      	movs	r3, #0
 8106aba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8106abe:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8106ac2:	460b      	mov	r3, r1
 8106ac4:	4313      	orrs	r3, r2
 8106ac6:	d055      	beq.n	8106b74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8106ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106acc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106ad0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106ad4:	d033      	beq.n	8106b3e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8106ad6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8106ada:	d82c      	bhi.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106adc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106ae0:	d02f      	beq.n	8106b42 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8106ae2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8106ae6:	d826      	bhi.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106ae8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106aec:	d02b      	beq.n	8106b46 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8106aee:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8106af2:	d820      	bhi.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106af4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106af8:	d012      	beq.n	8106b20 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8106afa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8106afe:	d81a      	bhi.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8106b00:	2b00      	cmp	r3, #0
 8106b02:	d022      	beq.n	8106b4a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8106b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8106b08:	d115      	bne.n	8106b36 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106b0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b0e:	3308      	adds	r3, #8
 8106b10:	2100      	movs	r1, #0
 8106b12:	4618      	mov	r0, r3
 8106b14:	f001 fcc0 	bl	8108498 <RCCEx_PLL2_Config>
 8106b18:	4603      	mov	r3, r0
 8106b1a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106b1e:	e015      	b.n	8106b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b24:	3328      	adds	r3, #40	@ 0x28
 8106b26:	2102      	movs	r1, #2
 8106b28:	4618      	mov	r0, r3
 8106b2a:	f001 fd67 	bl	81085fc <RCCEx_PLL3_Config>
 8106b2e:	4603      	mov	r3, r0
 8106b30:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8106b34:	e00a      	b.n	8106b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106b36:	2301      	movs	r3, #1
 8106b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106b3c:	e006      	b.n	8106b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106b3e:	bf00      	nop
 8106b40:	e004      	b.n	8106b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106b42:	bf00      	nop
 8106b44:	e002      	b.n	8106b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106b46:	bf00      	nop
 8106b48:	e000      	b.n	8106b4c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8106b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b50:	2b00      	cmp	r3, #0
 8106b52:	d10b      	bne.n	8106b6c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8106b54:	4ba1      	ldr	r3, [pc, #644]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106b58:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8106b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8106b64:	4a9d      	ldr	r2, [pc, #628]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106b66:	430b      	orrs	r3, r1
 8106b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8106b6a:	e003      	b.n	8106b74 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106b6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106b70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8106b74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b7c:	f002 0308 	and.w	r3, r2, #8
 8106b80:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8106b84:	2300      	movs	r3, #0
 8106b86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8106b8a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8106b8e:	460b      	mov	r3, r1
 8106b90:	4313      	orrs	r3, r2
 8106b92:	d01e      	beq.n	8106bd2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8106b94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106b98:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106b9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8106ba0:	d10c      	bne.n	8106bbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ba6:	3328      	adds	r3, #40	@ 0x28
 8106ba8:	2102      	movs	r1, #2
 8106baa:	4618      	mov	r0, r3
 8106bac:	f001 fd26 	bl	81085fc <RCCEx_PLL3_Config>
 8106bb0:	4603      	mov	r3, r0
 8106bb2:	2b00      	cmp	r3, #0
 8106bb4:	d002      	beq.n	8106bbc <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8106bb6:	2301      	movs	r3, #1
 8106bb8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8106bbc:	4b87      	ldr	r3, [pc, #540]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106bbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106bc0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8106bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8106bcc:	4a83      	ldr	r2, [pc, #524]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106bce:	430b      	orrs	r3, r1
 8106bd0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8106bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bda:	f002 0310 	and.w	r3, r2, #16
 8106bde:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8106be2:	2300      	movs	r3, #0
 8106be4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8106be8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8106bec:	460b      	mov	r3, r1
 8106bee:	4313      	orrs	r3, r2
 8106bf0:	d01e      	beq.n	8106c30 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8106bf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106bf6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106bfa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106bfe:	d10c      	bne.n	8106c1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c04:	3328      	adds	r3, #40	@ 0x28
 8106c06:	2102      	movs	r1, #2
 8106c08:	4618      	mov	r0, r3
 8106c0a:	f001 fcf7 	bl	81085fc <RCCEx_PLL3_Config>
 8106c0e:	4603      	mov	r3, r0
 8106c10:	2b00      	cmp	r3, #0
 8106c12:	d002      	beq.n	8106c1a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8106c14:	2301      	movs	r3, #1
 8106c16:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8106c1a:	4b70      	ldr	r3, [pc, #448]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106c1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106c1e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106c22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c26:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8106c2a:	4a6c      	ldr	r2, [pc, #432]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106c2c:	430b      	orrs	r3, r1
 8106c2e:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8106c30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106c38:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8106c3c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8106c40:	2300      	movs	r3, #0
 8106c42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8106c46:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8106c4a:	460b      	mov	r3, r1
 8106c4c:	4313      	orrs	r3, r2
 8106c4e:	d03e      	beq.n	8106cce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8106c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c54:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106c58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c5c:	d022      	beq.n	8106ca4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8106c5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8106c62:	d81b      	bhi.n	8106c9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8106c64:	2b00      	cmp	r3, #0
 8106c66:	d003      	beq.n	8106c70 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8106c68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106c6c:	d00b      	beq.n	8106c86 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8106c6e:	e015      	b.n	8106c9c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c74:	3308      	adds	r3, #8
 8106c76:	2100      	movs	r1, #0
 8106c78:	4618      	mov	r0, r3
 8106c7a:	f001 fc0d 	bl	8108498 <RCCEx_PLL2_Config>
 8106c7e:	4603      	mov	r3, r0
 8106c80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106c84:	e00f      	b.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8106c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106c8a:	3328      	adds	r3, #40	@ 0x28
 8106c8c:	2102      	movs	r1, #2
 8106c8e:	4618      	mov	r0, r3
 8106c90:	f001 fcb4 	bl	81085fc <RCCEx_PLL3_Config>
 8106c94:	4603      	mov	r3, r0
 8106c96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8106c9a:	e004      	b.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106c9c:	2301      	movs	r3, #1
 8106c9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106ca2:	e000      	b.n	8106ca6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8106ca4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106ca6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106caa:	2b00      	cmp	r3, #0
 8106cac:	d10b      	bne.n	8106cc6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8106cae:	4b4b      	ldr	r3, [pc, #300]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106cb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8106cb2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8106cb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8106cbe:	4a47      	ldr	r2, [pc, #284]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106cc0:	430b      	orrs	r3, r1
 8106cc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8106cc4:	e003      	b.n	8106cce <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106cca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8106cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106cd6:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8106cda:	67bb      	str	r3, [r7, #120]	@ 0x78
 8106cdc:	2300      	movs	r3, #0
 8106cde:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8106ce0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8106ce4:	460b      	mov	r3, r1
 8106ce6:	4313      	orrs	r3, r2
 8106ce8:	d03b      	beq.n	8106d62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8106cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106cf2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106cf6:	d01f      	beq.n	8106d38 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8106cf8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8106cfc:	d818      	bhi.n	8106d30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8106cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8106d02:	d003      	beq.n	8106d0c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8106d04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8106d08:	d007      	beq.n	8106d1a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8106d0a:	e011      	b.n	8106d30 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d0c:	4b33      	ldr	r3, [pc, #204]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d10:	4a32      	ldr	r2, [pc, #200]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106d16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8106d18:	e00f      	b.n	8106d3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8106d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d1e:	3328      	adds	r3, #40	@ 0x28
 8106d20:	2101      	movs	r1, #1
 8106d22:	4618      	mov	r0, r3
 8106d24:	f001 fc6a 	bl	81085fc <RCCEx_PLL3_Config>
 8106d28:	4603      	mov	r3, r0
 8106d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8106d2e:	e004      	b.n	8106d3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106d30:	2301      	movs	r3, #1
 8106d32:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106d36:	e000      	b.n	8106d3a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8106d38:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d3e:	2b00      	cmp	r3, #0
 8106d40:	d10b      	bne.n	8106d5a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8106d42:	4b26      	ldr	r3, [pc, #152]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106d46:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8106d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8106d52:	4a22      	ldr	r2, [pc, #136]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d54:	430b      	orrs	r3, r1
 8106d56:	6553      	str	r3, [r2, #84]	@ 0x54
 8106d58:	e003      	b.n	8106d62 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106d5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106d5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8106d62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106d6a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8106d6e:	673b      	str	r3, [r7, #112]	@ 0x70
 8106d70:	2300      	movs	r3, #0
 8106d72:	677b      	str	r3, [r7, #116]	@ 0x74
 8106d74:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8106d78:	460b      	mov	r3, r1
 8106d7a:	4313      	orrs	r3, r2
 8106d7c:	d034      	beq.n	8106de8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8106d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106d82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106d84:	2b00      	cmp	r3, #0
 8106d86:	d003      	beq.n	8106d90 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8106d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8106d8c:	d007      	beq.n	8106d9e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8106d8e:	e011      	b.n	8106db4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106d90:	4b12      	ldr	r3, [pc, #72]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106d94:	4a11      	ldr	r2, [pc, #68]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106d96:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106d9a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106d9c:	e00e      	b.n	8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8106d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106da2:	3308      	adds	r3, #8
 8106da4:	2102      	movs	r1, #2
 8106da6:	4618      	mov	r0, r3
 8106da8:	f001 fb76 	bl	8108498 <RCCEx_PLL2_Config>
 8106dac:	4603      	mov	r3, r0
 8106dae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8106db2:	e003      	b.n	8106dbc <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8106db4:	2301      	movs	r3, #1
 8106db6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106dba:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106dc0:	2b00      	cmp	r3, #0
 8106dc2:	d10d      	bne.n	8106de0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8106dc4:	4b05      	ldr	r3, [pc, #20]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106dc6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106dc8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8106dcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106dd2:	4a02      	ldr	r2, [pc, #8]	@ (8106ddc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8106dd4:	430b      	orrs	r3, r1
 8106dd6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8106dd8:	e006      	b.n	8106de8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8106dda:	bf00      	nop
 8106ddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106de0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106de4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8106de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106df0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8106df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8106df6:	2300      	movs	r3, #0
 8106df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8106dfa:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8106dfe:	460b      	mov	r3, r1
 8106e00:	4313      	orrs	r3, r2
 8106e02:	d00c      	beq.n	8106e1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8106e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e08:	3328      	adds	r3, #40	@ 0x28
 8106e0a:	2102      	movs	r1, #2
 8106e0c:	4618      	mov	r0, r3
 8106e0e:	f001 fbf5 	bl	81085fc <RCCEx_PLL3_Config>
 8106e12:	4603      	mov	r3, r0
 8106e14:	2b00      	cmp	r3, #0
 8106e16:	d002      	beq.n	8106e1e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8106e18:	2301      	movs	r3, #1
 8106e1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8106e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106e26:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8106e2a:	663b      	str	r3, [r7, #96]	@ 0x60
 8106e2c:	2300      	movs	r3, #0
 8106e2e:	667b      	str	r3, [r7, #100]	@ 0x64
 8106e30:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8106e34:	460b      	mov	r3, r1
 8106e36:	4313      	orrs	r3, r2
 8106e38:	d038      	beq.n	8106eac <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8106e3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106e42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106e46:	d018      	beq.n	8106e7a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8106e48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8106e4c:	d811      	bhi.n	8106e72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106e52:	d014      	beq.n	8106e7e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8106e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8106e58:	d80b      	bhi.n	8106e72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8106e5a:	2b00      	cmp	r3, #0
 8106e5c:	d011      	beq.n	8106e82 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8106e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8106e62:	d106      	bne.n	8106e72 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8106e64:	4bc3      	ldr	r3, [pc, #780]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106e66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8106e68:	4ac2      	ldr	r2, [pc, #776]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106e6a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8106e6e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8106e70:	e008      	b.n	8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8106e72:	2301      	movs	r3, #1
 8106e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8106e78:	e004      	b.n	8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106e7a:	bf00      	nop
 8106e7c:	e002      	b.n	8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106e7e:	bf00      	nop
 8106e80:	e000      	b.n	8106e84 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8106e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8106e84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106e88:	2b00      	cmp	r3, #0
 8106e8a:	d10b      	bne.n	8106ea4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8106e8c:	4bb9      	ldr	r3, [pc, #740]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106e8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106e90:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8106e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8106e9c:	4ab5      	ldr	r2, [pc, #724]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106e9e:	430b      	orrs	r3, r1
 8106ea0:	6553      	str	r3, [r2, #84]	@ 0x54
 8106ea2:	e003      	b.n	8106eac <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8106ea4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8106ea8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8106eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106eb4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8106eb8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8106eba:	2300      	movs	r3, #0
 8106ebc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8106ebe:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8106ec2:	460b      	mov	r3, r1
 8106ec4:	4313      	orrs	r3, r2
 8106ec6:	d009      	beq.n	8106edc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8106ec8:	4baa      	ldr	r3, [pc, #680]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106ecc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8106ed0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ed4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8106ed6:	4aa7      	ldr	r2, [pc, #668]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106ed8:	430b      	orrs	r3, r1
 8106eda:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8106edc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106ee4:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8106ee8:	653b      	str	r3, [r7, #80]	@ 0x50
 8106eea:	2300      	movs	r3, #0
 8106eec:	657b      	str	r3, [r7, #84]	@ 0x54
 8106eee:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8106ef2:	460b      	mov	r3, r1
 8106ef4:	4313      	orrs	r3, r2
 8106ef6:	d00a      	beq.n	8106f0e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8106ef8:	4b9e      	ldr	r3, [pc, #632]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106efa:	691b      	ldr	r3, [r3, #16]
 8106efc:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8106f00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f04:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8106f08:	4a9a      	ldr	r2, [pc, #616]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f0a:	430b      	orrs	r3, r1
 8106f0c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8106f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f16:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8106f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8106f1c:	2300      	movs	r3, #0
 8106f1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8106f20:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8106f24:	460b      	mov	r3, r1
 8106f26:	4313      	orrs	r3, r2
 8106f28:	d009      	beq.n	8106f3e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8106f2a:	4b92      	ldr	r3, [pc, #584]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8106f2e:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8106f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f36:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8106f38:	4a8e      	ldr	r2, [pc, #568]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f3a:	430b      	orrs	r3, r1
 8106f3c:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8106f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f46:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8106f4a:	643b      	str	r3, [r7, #64]	@ 0x40
 8106f4c:	2300      	movs	r3, #0
 8106f4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8106f50:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8106f54:	460b      	mov	r3, r1
 8106f56:	4313      	orrs	r3, r2
 8106f58:	d00e      	beq.n	8106f78 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8106f5a:	4b86      	ldr	r3, [pc, #536]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f5c:	691b      	ldr	r3, [r3, #16]
 8106f5e:	4a85      	ldr	r2, [pc, #532]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8106f64:	6113      	str	r3, [r2, #16]
 8106f66:	4b83      	ldr	r3, [pc, #524]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f68:	6919      	ldr	r1, [r3, #16]
 8106f6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f6e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8106f72:	4a80      	ldr	r2, [pc, #512]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f74:	430b      	orrs	r3, r1
 8106f76:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8106f78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106f80:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8106f84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8106f86:	2300      	movs	r3, #0
 8106f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8106f8a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8106f8e:	460b      	mov	r3, r1
 8106f90:	4313      	orrs	r3, r2
 8106f92:	d009      	beq.n	8106fa8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8106f94:	4b77      	ldr	r3, [pc, #476]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106f96:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8106f98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8106f9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106fa2:	4a74      	ldr	r2, [pc, #464]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106fa4:	430b      	orrs	r3, r1
 8106fa6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8106fa8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fb0:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8106fb4:	633b      	str	r3, [r7, #48]	@ 0x30
 8106fb6:	2300      	movs	r3, #0
 8106fb8:	637b      	str	r3, [r7, #52]	@ 0x34
 8106fba:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8106fbe:	460b      	mov	r3, r1
 8106fc0:	4313      	orrs	r3, r2
 8106fc2:	d00a      	beq.n	8106fda <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8106fc4:	4b6b      	ldr	r3, [pc, #428]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106fc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8106fc8:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8106fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8106fd4:	4a67      	ldr	r2, [pc, #412]	@ (8107174 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8106fd6:	430b      	orrs	r3, r1
 8106fd8:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8106fda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106fe2:	2100      	movs	r1, #0
 8106fe4:	62b9      	str	r1, [r7, #40]	@ 0x28
 8106fe6:	f003 0301 	and.w	r3, r3, #1
 8106fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8106fec:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8106ff0:	460b      	mov	r3, r1
 8106ff2:	4313      	orrs	r3, r2
 8106ff4:	d011      	beq.n	810701a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8106ff6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8106ffa:	3308      	adds	r3, #8
 8106ffc:	2100      	movs	r1, #0
 8106ffe:	4618      	mov	r0, r3
 8107000:	f001 fa4a 	bl	8108498 <RCCEx_PLL2_Config>
 8107004:	4603      	mov	r3, r0
 8107006:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810700a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810700e:	2b00      	cmp	r3, #0
 8107010:	d003      	beq.n	810701a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107012:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107016:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810701a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810701e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107022:	2100      	movs	r1, #0
 8107024:	6239      	str	r1, [r7, #32]
 8107026:	f003 0302 	and.w	r3, r3, #2
 810702a:	627b      	str	r3, [r7, #36]	@ 0x24
 810702c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8107030:	460b      	mov	r3, r1
 8107032:	4313      	orrs	r3, r2
 8107034:	d011      	beq.n	810705a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8107036:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810703a:	3308      	adds	r3, #8
 810703c:	2101      	movs	r1, #1
 810703e:	4618      	mov	r0, r3
 8107040:	f001 fa2a 	bl	8108498 <RCCEx_PLL2_Config>
 8107044:	4603      	mov	r3, r0
 8107046:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810704a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810704e:	2b00      	cmp	r3, #0
 8107050:	d003      	beq.n	810705a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107052:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107056:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810705a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810705e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107062:	2100      	movs	r1, #0
 8107064:	61b9      	str	r1, [r7, #24]
 8107066:	f003 0304 	and.w	r3, r3, #4
 810706a:	61fb      	str	r3, [r7, #28]
 810706c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8107070:	460b      	mov	r3, r1
 8107072:	4313      	orrs	r3, r2
 8107074:	d011      	beq.n	810709a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8107076:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810707a:	3308      	adds	r3, #8
 810707c:	2102      	movs	r1, #2
 810707e:	4618      	mov	r0, r3
 8107080:	f001 fa0a 	bl	8108498 <RCCEx_PLL2_Config>
 8107084:	4603      	mov	r3, r0
 8107086:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810708a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810708e:	2b00      	cmp	r3, #0
 8107090:	d003      	beq.n	810709a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107092:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107096:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810709a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810709e:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070a2:	2100      	movs	r1, #0
 81070a4:	6139      	str	r1, [r7, #16]
 81070a6:	f003 0308 	and.w	r3, r3, #8
 81070aa:	617b      	str	r3, [r7, #20]
 81070ac:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81070b0:	460b      	mov	r3, r1
 81070b2:	4313      	orrs	r3, r2
 81070b4:	d011      	beq.n	81070da <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81070b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070ba:	3328      	adds	r3, #40	@ 0x28
 81070bc:	2100      	movs	r1, #0
 81070be:	4618      	mov	r0, r3
 81070c0:	f001 fa9c 	bl	81085fc <RCCEx_PLL3_Config>
 81070c4:	4603      	mov	r3, r0
 81070c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81070ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070ce:	2b00      	cmp	r3, #0
 81070d0:	d003      	beq.n	81070da <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81070d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81070d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81070da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070de:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070e2:	2100      	movs	r1, #0
 81070e4:	60b9      	str	r1, [r7, #8]
 81070e6:	f003 0310 	and.w	r3, r3, #16
 81070ea:	60fb      	str	r3, [r7, #12]
 81070ec:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81070f0:	460b      	mov	r3, r1
 81070f2:	4313      	orrs	r3, r2
 81070f4:	d011      	beq.n	810711a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81070f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81070fa:	3328      	adds	r3, #40	@ 0x28
 81070fc:	2101      	movs	r1, #1
 81070fe:	4618      	mov	r0, r3
 8107100:	f001 fa7c 	bl	81085fc <RCCEx_PLL3_Config>
 8107104:	4603      	mov	r3, r0
 8107106:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810710a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810710e:	2b00      	cmp	r3, #0
 8107110:	d003      	beq.n	810711a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810711a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810711e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107122:	2100      	movs	r1, #0
 8107124:	6039      	str	r1, [r7, #0]
 8107126:	f003 0320 	and.w	r3, r3, #32
 810712a:	607b      	str	r3, [r7, #4]
 810712c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8107130:	460b      	mov	r3, r1
 8107132:	4313      	orrs	r3, r2
 8107134:	d011      	beq.n	810715a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8107136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810713a:	3328      	adds	r3, #40	@ 0x28
 810713c:	2102      	movs	r1, #2
 810713e:	4618      	mov	r0, r3
 8107140:	f001 fa5c 	bl	81085fc <RCCEx_PLL3_Config>
 8107144:	4603      	mov	r3, r0
 8107146:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 810714a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810714e:	2b00      	cmp	r3, #0
 8107150:	d003      	beq.n	810715a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8107152:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8107156:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 810715a:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 810715e:	2b00      	cmp	r3, #0
 8107160:	d101      	bne.n	8107166 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8107162:	2300      	movs	r3, #0
 8107164:	e000      	b.n	8107168 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8107166:	2301      	movs	r3, #1
}
 8107168:	4618      	mov	r0, r3
 810716a:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 810716e:	46bd      	mov	sp, r7
 8107170:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8107174:	58024400 	.word	0x58024400

08107178 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8107178:	b580      	push	{r7, lr}
 810717a:	b090      	sub	sp, #64	@ 0x40
 810717c:	af00      	add	r7, sp, #0
 810717e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8107182:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107186:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 810718a:	430b      	orrs	r3, r1
 810718c:	f040 8094 	bne.w	81072b8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8107190:	4b9e      	ldr	r3, [pc, #632]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107192:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107194:	f003 0307 	and.w	r3, r3, #7
 8107198:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810719a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810719c:	2b04      	cmp	r3, #4
 810719e:	f200 8087 	bhi.w	81072b0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 81071a2:	a201      	add	r2, pc, #4	@ (adr r2, 81071a8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 81071a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81071a8:	081071bd 	.word	0x081071bd
 81071ac:	081071e5 	.word	0x081071e5
 81071b0:	0810720d 	.word	0x0810720d
 81071b4:	081072a9 	.word	0x081072a9
 81071b8:	08107235 	.word	0x08107235
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81071bc:	4b93      	ldr	r3, [pc, #588]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81071be:	681b      	ldr	r3, [r3, #0]
 81071c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81071c4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81071c8:	d108      	bne.n	81071dc <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81071ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81071ce:	4618      	mov	r0, r3
 81071d0:	f001 f810 	bl	81081f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81071d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81071d8:	f000 bd45 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81071dc:	2300      	movs	r3, #0
 81071de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81071e0:	f000 bd41 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81071e4:	4b89      	ldr	r3, [pc, #548]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81071e6:	681b      	ldr	r3, [r3, #0]
 81071e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81071ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81071f0:	d108      	bne.n	8107204 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81071f2:	f107 0318 	add.w	r3, r7, #24
 81071f6:	4618      	mov	r0, r3
 81071f8:	f000 fd54 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81071fc:	69bb      	ldr	r3, [r7, #24]
 81071fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107200:	f000 bd31 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107204:	2300      	movs	r3, #0
 8107206:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107208:	f000 bd2d 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810720c:	4b7f      	ldr	r3, [pc, #508]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 810720e:	681b      	ldr	r3, [r3, #0]
 8107210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107218:	d108      	bne.n	810722c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810721a:	f107 030c 	add.w	r3, r7, #12
 810721e:	4618      	mov	r0, r3
 8107220:	f000 fe94 	bl	8107f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107224:	68fb      	ldr	r3, [r7, #12]
 8107226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107228:	f000 bd1d 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810722c:	2300      	movs	r3, #0
 810722e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107230:	f000 bd19 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107234:	4b75      	ldr	r3, [pc, #468]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107238:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810723c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810723e:	4b73      	ldr	r3, [pc, #460]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107240:	681b      	ldr	r3, [r3, #0]
 8107242:	f003 0304 	and.w	r3, r3, #4
 8107246:	2b04      	cmp	r3, #4
 8107248:	d10c      	bne.n	8107264 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 810724a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810724c:	2b00      	cmp	r3, #0
 810724e:	d109      	bne.n	8107264 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107250:	4b6e      	ldr	r3, [pc, #440]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107252:	681b      	ldr	r3, [r3, #0]
 8107254:	08db      	lsrs	r3, r3, #3
 8107256:	f003 0303 	and.w	r3, r3, #3
 810725a:	4a6d      	ldr	r2, [pc, #436]	@ (8107410 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 810725c:	fa22 f303 	lsr.w	r3, r2, r3
 8107260:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107262:	e01f      	b.n	81072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107264:	4b69      	ldr	r3, [pc, #420]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107266:	681b      	ldr	r3, [r3, #0]
 8107268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810726c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107270:	d106      	bne.n	8107280 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8107272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107274:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107278:	d102      	bne.n	8107280 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 810727a:	4b66      	ldr	r3, [pc, #408]	@ (8107414 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 810727c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810727e:	e011      	b.n	81072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107280:	4b62      	ldr	r3, [pc, #392]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107282:	681b      	ldr	r3, [r3, #0]
 8107284:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107288:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810728c:	d106      	bne.n	810729c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 810728e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107290:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107294:	d102      	bne.n	810729c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107296:	4b60      	ldr	r3, [pc, #384]	@ (8107418 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8107298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810729a:	e003      	b.n	81072a4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810729c:	2300      	movs	r3, #0
 810729e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81072a0:	f000 bce1 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81072a4:	f000 bcdf 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81072a8:	4b5c      	ldr	r3, [pc, #368]	@ (810741c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81072aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81072ac:	f000 bcdb 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 81072b0:	2300      	movs	r3, #0
 81072b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81072b4:	f000 bcd7 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 81072b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81072bc:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 81072c0:	430b      	orrs	r3, r1
 81072c2:	f040 80ad 	bne.w	8107420 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 81072c6:	4b51      	ldr	r3, [pc, #324]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81072c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81072ca:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 81072ce:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 81072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072d2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81072d6:	d056      	beq.n	8107386 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 81072d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81072de:	f200 8090 	bhi.w	8107402 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072e4:	2bc0      	cmp	r3, #192	@ 0xc0
 81072e6:	f000 8088 	beq.w	81073fa <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 81072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072ec:	2bc0      	cmp	r3, #192	@ 0xc0
 81072ee:	f200 8088 	bhi.w	8107402 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 81072f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072f4:	2b80      	cmp	r3, #128	@ 0x80
 81072f6:	d032      	beq.n	810735e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 81072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81072fa:	2b80      	cmp	r3, #128	@ 0x80
 81072fc:	f200 8081 	bhi.w	8107402 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8107300:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107302:	2b00      	cmp	r3, #0
 8107304:	d003      	beq.n	810730e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8107306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107308:	2b40      	cmp	r3, #64	@ 0x40
 810730a:	d014      	beq.n	8107336 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 810730c:	e079      	b.n	8107402 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810730e:	4b3f      	ldr	r3, [pc, #252]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107310:	681b      	ldr	r3, [r3, #0]
 8107312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107316:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810731a:	d108      	bne.n	810732e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810731c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107320:	4618      	mov	r0, r3
 8107322:	f000 ff67 	bl	81081f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810732a:	f000 bc9c 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810732e:	2300      	movs	r3, #0
 8107330:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107332:	f000 bc98 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107336:	4b35      	ldr	r3, [pc, #212]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107338:	681b      	ldr	r3, [r3, #0]
 810733a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810733e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107342:	d108      	bne.n	8107356 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107344:	f107 0318 	add.w	r3, r7, #24
 8107348:	4618      	mov	r0, r3
 810734a:	f000 fcab 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810734e:	69bb      	ldr	r3, [r7, #24]
 8107350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107352:	f000 bc88 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107356:	2300      	movs	r3, #0
 8107358:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810735a:	f000 bc84 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810735e:	4b2b      	ldr	r3, [pc, #172]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107360:	681b      	ldr	r3, [r3, #0]
 8107362:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107366:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810736a:	d108      	bne.n	810737e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810736c:	f107 030c 	add.w	r3, r7, #12
 8107370:	4618      	mov	r0, r3
 8107372:	f000 fdeb 	bl	8107f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107376:	68fb      	ldr	r3, [r7, #12]
 8107378:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810737a:	f000 bc74 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810737e:	2300      	movs	r3, #0
 8107380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107382:	f000 bc70 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107386:	4b21      	ldr	r3, [pc, #132]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810738a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810738e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107390:	4b1e      	ldr	r3, [pc, #120]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8107392:	681b      	ldr	r3, [r3, #0]
 8107394:	f003 0304 	and.w	r3, r3, #4
 8107398:	2b04      	cmp	r3, #4
 810739a:	d10c      	bne.n	81073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 810739c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810739e:	2b00      	cmp	r3, #0
 81073a0:	d109      	bne.n	81073b6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81073a2:	4b1a      	ldr	r3, [pc, #104]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81073a4:	681b      	ldr	r3, [r3, #0]
 81073a6:	08db      	lsrs	r3, r3, #3
 81073a8:	f003 0303 	and.w	r3, r3, #3
 81073ac:	4a18      	ldr	r2, [pc, #96]	@ (8107410 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 81073ae:	fa22 f303 	lsr.w	r3, r2, r3
 81073b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81073b4:	e01f      	b.n	81073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81073b6:	4b15      	ldr	r3, [pc, #84]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81073b8:	681b      	ldr	r3, [r3, #0]
 81073ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81073be:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81073c2:	d106      	bne.n	81073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 81073c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81073c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81073ca:	d102      	bne.n	81073d2 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81073cc:	4b11      	ldr	r3, [pc, #68]	@ (8107414 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 81073ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81073d0:	e011      	b.n	81073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81073d2:	4b0e      	ldr	r3, [pc, #56]	@ (810740c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 81073d4:	681b      	ldr	r3, [r3, #0]
 81073d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81073da:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81073de:	d106      	bne.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 81073e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81073e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81073e6:	d102      	bne.n	81073ee <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81073e8:	4b0b      	ldr	r3, [pc, #44]	@ (8107418 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 81073ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81073ec:	e003      	b.n	81073f6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81073ee:	2300      	movs	r3, #0
 81073f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81073f2:	f000 bc38 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81073f6:	f000 bc36 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81073fa:	4b08      	ldr	r3, [pc, #32]	@ (810741c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 81073fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81073fe:	f000 bc32 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107402:	2300      	movs	r3, #0
 8107404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107406:	f000 bc2e 	b.w	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 810740a:	bf00      	nop
 810740c:	58024400 	.word	0x58024400
 8107410:	03d09000 	.word	0x03d09000
 8107414:	003d0900 	.word	0x003d0900
 8107418:	017d7840 	.word	0x017d7840
 810741c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8107420:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107424:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8107428:	430b      	orrs	r3, r1
 810742a:	f040 809c 	bne.w	8107566 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 810742e:	4b9e      	ldr	r3, [pc, #632]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107432:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8107436:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8107438:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810743a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810743e:	d054      	beq.n	81074ea <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8107440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107442:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8107446:	f200 808b 	bhi.w	8107560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810744a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810744c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8107450:	f000 8083 	beq.w	810755a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8107454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107456:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810745a:	f200 8081 	bhi.w	8107560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810745e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107460:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8107464:	d02f      	beq.n	81074c6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8107466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 810746c:	d878      	bhi.n	8107560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 810746e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107470:	2b00      	cmp	r3, #0
 8107472:	d004      	beq.n	810747e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8107474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107476:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810747a:	d012      	beq.n	81074a2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 810747c:	e070      	b.n	8107560 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810747e:	4b8a      	ldr	r3, [pc, #552]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107480:	681b      	ldr	r3, [r3, #0]
 8107482:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107486:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810748a:	d107      	bne.n	810749c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810748c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107490:	4618      	mov	r0, r3
 8107492:	f000 feaf 	bl	81081f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107498:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810749a:	e3e4      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810749c:	2300      	movs	r3, #0
 810749e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81074a0:	e3e1      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81074a2:	4b81      	ldr	r3, [pc, #516]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074a4:	681b      	ldr	r3, [r3, #0]
 81074a6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81074aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81074ae:	d107      	bne.n	81074c0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81074b0:	f107 0318 	add.w	r3, r7, #24
 81074b4:	4618      	mov	r0, r3
 81074b6:	f000 fbf5 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81074ba:	69bb      	ldr	r3, [r7, #24]
 81074bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81074be:	e3d2      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81074c0:	2300      	movs	r3, #0
 81074c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81074c4:	e3cf      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81074c6:	4b78      	ldr	r3, [pc, #480]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074c8:	681b      	ldr	r3, [r3, #0]
 81074ca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81074ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81074d2:	d107      	bne.n	81074e4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81074d4:	f107 030c 	add.w	r3, r7, #12
 81074d8:	4618      	mov	r0, r3
 81074da:	f000 fd37 	bl	8107f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 81074de:	68fb      	ldr	r3, [r7, #12]
 81074e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81074e2:	e3c0      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81074e4:	2300      	movs	r3, #0
 81074e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81074e8:	e3bd      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81074ea:	4b6f      	ldr	r3, [pc, #444]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81074ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81074f2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81074f4:	4b6c      	ldr	r3, [pc, #432]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81074f6:	681b      	ldr	r3, [r3, #0]
 81074f8:	f003 0304 	and.w	r3, r3, #4
 81074fc:	2b04      	cmp	r3, #4
 81074fe:	d10c      	bne.n	810751a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8107500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107502:	2b00      	cmp	r3, #0
 8107504:	d109      	bne.n	810751a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107506:	4b68      	ldr	r3, [pc, #416]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107508:	681b      	ldr	r3, [r3, #0]
 810750a:	08db      	lsrs	r3, r3, #3
 810750c:	f003 0303 	and.w	r3, r3, #3
 8107510:	4a66      	ldr	r2, [pc, #408]	@ (81076ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8107512:	fa22 f303 	lsr.w	r3, r2, r3
 8107516:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107518:	e01e      	b.n	8107558 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810751a:	4b63      	ldr	r3, [pc, #396]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810751c:	681b      	ldr	r3, [r3, #0]
 810751e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107522:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107526:	d106      	bne.n	8107536 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8107528:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810752a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810752e:	d102      	bne.n	8107536 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107530:	4b5f      	ldr	r3, [pc, #380]	@ (81076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8107532:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107534:	e010      	b.n	8107558 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8107536:	4b5c      	ldr	r3, [pc, #368]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107538:	681b      	ldr	r3, [r3, #0]
 810753a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810753e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107542:	d106      	bne.n	8107552 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8107544:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107546:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810754a:	d102      	bne.n	8107552 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 810754c:	4b59      	ldr	r3, [pc, #356]	@ (81076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 810754e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107550:	e002      	b.n	8107558 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107552:	2300      	movs	r3, #0
 8107554:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107556:	e386      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107558:	e385      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 810755a:	4b57      	ldr	r3, [pc, #348]	@ (81076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 810755c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810755e:	e382      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107560:	2300      	movs	r3, #0
 8107562:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107564:	e37f      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8107566:	e9d7 2300 	ldrd	r2, r3, [r7]
 810756a:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 810756e:	430b      	orrs	r3, r1
 8107570:	f040 80a7 	bne.w	81076c2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 8107574:	4b4c      	ldr	r3, [pc, #304]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107576:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107578:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 810757c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 810757e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107580:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8107584:	d055      	beq.n	8107632 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8107586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107588:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810758c:	f200 8096 	bhi.w	81076bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8107590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8107592:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8107596:	f000 8084 	beq.w	81076a2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 810759a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810759c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 81075a0:	f200 808c 	bhi.w	81076bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81075a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075a6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81075aa:	d030      	beq.n	810760e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 81075ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075ae:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81075b2:	f200 8083 	bhi.w	81076bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 81075b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075b8:	2b00      	cmp	r3, #0
 81075ba:	d004      	beq.n	81075c6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 81075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81075be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81075c2:	d012      	beq.n	81075ea <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 81075c4:	e07a      	b.n	81076bc <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81075c6:	4b38      	ldr	r3, [pc, #224]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81075c8:	681b      	ldr	r3, [r3, #0]
 81075ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 81075ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 81075d2:	d107      	bne.n	81075e4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81075d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 81075d8:	4618      	mov	r0, r3
 81075da:	f000 fe0b 	bl	81081f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81075de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81075e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81075e2:	e340      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81075e4:	2300      	movs	r3, #0
 81075e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81075e8:	e33d      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81075ea:	4b2f      	ldr	r3, [pc, #188]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 81075ec:	681b      	ldr	r3, [r3, #0]
 81075ee:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81075f2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81075f6:	d107      	bne.n	8107608 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81075f8:	f107 0318 	add.w	r3, r7, #24
 81075fc:	4618      	mov	r0, r3
 81075fe:	f000 fb51 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107602:	69bb      	ldr	r3, [r7, #24]
 8107604:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107606:	e32e      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107608:	2300      	movs	r3, #0
 810760a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810760c:	e32b      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810760e:	4b26      	ldr	r3, [pc, #152]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107610:	681b      	ldr	r3, [r3, #0]
 8107612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107616:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810761a:	d107      	bne.n	810762c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810761c:	f107 030c 	add.w	r3, r7, #12
 8107620:	4618      	mov	r0, r3
 8107622:	f000 fc93 	bl	8107f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107626:	68fb      	ldr	r3, [r7, #12]
 8107628:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810762a:	e31c      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810762c:	2300      	movs	r3, #0
 810762e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107630:	e319      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8107632:	4b1d      	ldr	r3, [pc, #116]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107636:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 810763a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810763c:	4b1a      	ldr	r3, [pc, #104]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 810763e:	681b      	ldr	r3, [r3, #0]
 8107640:	f003 0304 	and.w	r3, r3, #4
 8107644:	2b04      	cmp	r3, #4
 8107646:	d10c      	bne.n	8107662 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8107648:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810764a:	2b00      	cmp	r3, #0
 810764c:	d109      	bne.n	8107662 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810764e:	4b16      	ldr	r3, [pc, #88]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107650:	681b      	ldr	r3, [r3, #0]
 8107652:	08db      	lsrs	r3, r3, #3
 8107654:	f003 0303 	and.w	r3, r3, #3
 8107658:	4a14      	ldr	r2, [pc, #80]	@ (81076ac <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 810765a:	fa22 f303 	lsr.w	r3, r2, r3
 810765e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107660:	e01e      	b.n	81076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8107662:	4b11      	ldr	r3, [pc, #68]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107664:	681b      	ldr	r3, [r3, #0]
 8107666:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810766a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810766e:	d106      	bne.n	810767e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8107670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107672:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107676:	d102      	bne.n	810767e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8107678:	4b0d      	ldr	r3, [pc, #52]	@ (81076b0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 810767a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 810767c:	e010      	b.n	81076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810767e:	4b0a      	ldr	r3, [pc, #40]	@ (81076a8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8107680:	681b      	ldr	r3, [r3, #0]
 8107682:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107686:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810768a:	d106      	bne.n	810769a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 810768c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 810768e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107692:	d102      	bne.n	810769a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107694:	4b07      	ldr	r3, [pc, #28]	@ (81076b4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8107696:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107698:	e002      	b.n	81076a0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 810769a:	2300      	movs	r3, #0
 810769c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 810769e:	e2e2      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81076a0:	e2e1      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81076a2:	4b05      	ldr	r3, [pc, #20]	@ (81076b8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 81076a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81076a6:	e2de      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81076a8:	58024400 	.word	0x58024400
 81076ac:	03d09000 	.word	0x03d09000
 81076b0:	003d0900 	.word	0x003d0900
 81076b4:	017d7840 	.word	0x017d7840
 81076b8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 81076bc:	2300      	movs	r3, #0
 81076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81076c0:	e2d1      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 81076c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 81076c6:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 81076ca:	430b      	orrs	r3, r1
 81076cc:	f040 809c 	bne.w	8107808 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 81076d0:	4b93      	ldr	r3, [pc, #588]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81076d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81076d4:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 81076d8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 81076da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81076e0:	d054      	beq.n	810778c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 81076e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076e4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81076e8:	f200 808b 	bhi.w	8107802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 81076ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076ee:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81076f2:	f000 8083 	beq.w	81077fc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 81076f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81076f8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81076fc:	f200 8081 	bhi.w	8107802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107702:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8107706:	d02f      	beq.n	8107768 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8107708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810770a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 810770e:	d878      	bhi.n	8107802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8107710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107712:	2b00      	cmp	r3, #0
 8107714:	d004      	beq.n	8107720 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8107716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 810771c:	d012      	beq.n	8107744 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 810771e:	e070      	b.n	8107802 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107720:	4b7f      	ldr	r3, [pc, #508]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107722:	681b      	ldr	r3, [r3, #0]
 8107724:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107728:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810772c:	d107      	bne.n	810773e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810772e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107732:	4618      	mov	r0, r3
 8107734:	f000 fd5e 	bl	81081f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 810773a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 810773c:	e293      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 810773e:	2300      	movs	r3, #0
 8107740:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107742:	e290      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107744:	4b76      	ldr	r3, [pc, #472]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107746:	681b      	ldr	r3, [r3, #0]
 8107748:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810774c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107750:	d107      	bne.n	8107762 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107752:	f107 0318 	add.w	r3, r7, #24
 8107756:	4618      	mov	r0, r3
 8107758:	f000 faa4 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 810775c:	69bb      	ldr	r3, [r7, #24]
 810775e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107760:	e281      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107762:	2300      	movs	r3, #0
 8107764:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107766:	e27e      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107768:	4b6d      	ldr	r3, [pc, #436]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810776a:	681b      	ldr	r3, [r3, #0]
 810776c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107770:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107774:	d107      	bne.n	8107786 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107776:	f107 030c 	add.w	r3, r7, #12
 810777a:	4618      	mov	r0, r3
 810777c:	f000 fbe6 	bl	8107f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8107780:	68fb      	ldr	r3, [r7, #12]
 8107782:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107784:	e26f      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107786:	2300      	movs	r3, #0
 8107788:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810778a:	e26c      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 810778c:	4b64      	ldr	r3, [pc, #400]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810778e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107790:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107794:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8107796:	4b62      	ldr	r3, [pc, #392]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107798:	681b      	ldr	r3, [r3, #0]
 810779a:	f003 0304 	and.w	r3, r3, #4
 810779e:	2b04      	cmp	r3, #4
 81077a0:	d10c      	bne.n	81077bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 81077a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81077a4:	2b00      	cmp	r3, #0
 81077a6:	d109      	bne.n	81077bc <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81077a8:	4b5d      	ldr	r3, [pc, #372]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81077aa:	681b      	ldr	r3, [r3, #0]
 81077ac:	08db      	lsrs	r3, r3, #3
 81077ae:	f003 0303 	and.w	r3, r3, #3
 81077b2:	4a5c      	ldr	r2, [pc, #368]	@ (8107924 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81077b4:	fa22 f303 	lsr.w	r3, r2, r3
 81077b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077ba:	e01e      	b.n	81077fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81077bc:	4b58      	ldr	r3, [pc, #352]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81077be:	681b      	ldr	r3, [r3, #0]
 81077c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81077c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81077c8:	d106      	bne.n	81077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 81077ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81077cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81077d0:	d102      	bne.n	81077d8 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81077d2:	4b55      	ldr	r3, [pc, #340]	@ (8107928 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81077d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077d6:	e010      	b.n	81077fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81077d8:	4b51      	ldr	r3, [pc, #324]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81077da:	681b      	ldr	r3, [r3, #0]
 81077dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 81077e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81077e4:	d106      	bne.n	81077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 81077e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81077e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81077ec:	d102      	bne.n	81077f4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 81077ee:	4b4f      	ldr	r3, [pc, #316]	@ (810792c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 81077f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81077f2:	e002      	b.n	81077fa <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 81077f4:	2300      	movs	r3, #0
 81077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 81077f8:	e235      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 81077fa:	e234      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 81077fc:	4b4c      	ldr	r3, [pc, #304]	@ (8107930 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 81077fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107800:	e231      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107802:	2300      	movs	r3, #0
 8107804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107806:	e22e      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8107808:	e9d7 2300 	ldrd	r2, r3, [r7]
 810780c:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8107810:	430b      	orrs	r3, r1
 8107812:	f040 808f 	bne.w	8107934 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8107816:	4b42      	ldr	r3, [pc, #264]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107818:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810781a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 810781e:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8107820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107822:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8107826:	d06b      	beq.n	8107900 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8107828:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810782a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810782e:	d874      	bhi.n	810791a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107830:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107832:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8107836:	d056      	beq.n	81078e6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8107838:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810783a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810783e:	d86c      	bhi.n	810791a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107842:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8107846:	d03b      	beq.n	81078c0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8107848:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810784a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 810784e:	d864      	bhi.n	810791a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107852:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107856:	d021      	beq.n	810789c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8107858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810785a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810785e:	d85c      	bhi.n	810791a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8107860:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107862:	2b00      	cmp	r3, #0
 8107864:	d004      	beq.n	8107870 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8107866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 810786c:	d004      	beq.n	8107878 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 810786e:	e054      	b.n	810791a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8107870:	f7fe fa20 	bl	8105cb4 <HAL_RCC_GetPCLK1Freq>
 8107874:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107876:	e1f6      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107878:	4b29      	ldr	r3, [pc, #164]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810787a:	681b      	ldr	r3, [r3, #0]
 810787c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107880:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107884:	d107      	bne.n	8107896 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107886:	f107 0318 	add.w	r3, r7, #24
 810788a:	4618      	mov	r0, r3
 810788c:	f000 fa0a 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107890:	69fb      	ldr	r3, [r7, #28]
 8107892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107894:	e1e7      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107896:	2300      	movs	r3, #0
 8107898:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810789a:	e1e4      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810789c:	4b20      	ldr	r3, [pc, #128]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 810789e:	681b      	ldr	r3, [r3, #0]
 81078a0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 81078a4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81078a8:	d107      	bne.n	81078ba <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81078aa:	f107 030c 	add.w	r3, r7, #12
 81078ae:	4618      	mov	r0, r3
 81078b0:	f000 fb4c 	bl	8107f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81078b4:	693b      	ldr	r3, [r7, #16]
 81078b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078b8:	e1d5      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078ba:	2300      	movs	r3, #0
 81078bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078be:	e1d2      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81078c0:	4b17      	ldr	r3, [pc, #92]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81078c2:	681b      	ldr	r3, [r3, #0]
 81078c4:	f003 0304 	and.w	r3, r3, #4
 81078c8:	2b04      	cmp	r3, #4
 81078ca:	d109      	bne.n	81078e0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81078cc:	4b14      	ldr	r3, [pc, #80]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81078ce:	681b      	ldr	r3, [r3, #0]
 81078d0:	08db      	lsrs	r3, r3, #3
 81078d2:	f003 0303 	and.w	r3, r3, #3
 81078d6:	4a13      	ldr	r2, [pc, #76]	@ (8107924 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 81078d8:	fa22 f303 	lsr.w	r3, r2, r3
 81078dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078de:	e1c2      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078e0:	2300      	movs	r3, #0
 81078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078e4:	e1bf      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81078e6:	4b0e      	ldr	r3, [pc, #56]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 81078e8:	681b      	ldr	r3, [r3, #0]
 81078ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81078ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81078f2:	d102      	bne.n	81078fa <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 81078f4:	4b0c      	ldr	r3, [pc, #48]	@ (8107928 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 81078f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81078f8:	e1b5      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81078fa:	2300      	movs	r3, #0
 81078fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81078fe:	e1b2      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107900:	4b07      	ldr	r3, [pc, #28]	@ (8107920 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8107902:	681b      	ldr	r3, [r3, #0]
 8107904:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107908:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810790c:	d102      	bne.n	8107914 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 810790e:	4b07      	ldr	r3, [pc, #28]	@ (810792c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8107910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107912:	e1a8      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107914:	2300      	movs	r3, #0
 8107916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107918:	e1a5      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 810791a:	2300      	movs	r3, #0
 810791c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810791e:	e1a2      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107920:	58024400 	.word	0x58024400
 8107924:	03d09000 	.word	0x03d09000
 8107928:	003d0900 	.word	0x003d0900
 810792c:	017d7840 	.word	0x017d7840
 8107930:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8107934:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107938:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 810793c:	430b      	orrs	r3, r1
 810793e:	d173      	bne.n	8107a28 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8107940:	4b9c      	ldr	r3, [pc, #624]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107944:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8107948:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 810794a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810794c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107950:	d02f      	beq.n	81079b2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8107952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107954:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107958:	d863      	bhi.n	8107a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 810795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 810795c:	2b00      	cmp	r3, #0
 810795e:	d004      	beq.n	810796a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8107960:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107962:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107966:	d012      	beq.n	810798e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8107968:	e05b      	b.n	8107a22 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 810796a:	4b92      	ldr	r3, [pc, #584]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 810796c:	681b      	ldr	r3, [r3, #0]
 810796e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107972:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107976:	d107      	bne.n	8107988 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107978:	f107 0318 	add.w	r3, r7, #24
 810797c:	4618      	mov	r0, r3
 810797e:	f000 f991 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8107982:	69bb      	ldr	r3, [r7, #24]
 8107984:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107986:	e16e      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107988:	2300      	movs	r3, #0
 810798a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 810798c:	e16b      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 810798e:	4b89      	ldr	r3, [pc, #548]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107990:	681b      	ldr	r3, [r3, #0]
 8107992:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107996:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810799a:	d107      	bne.n	81079ac <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810799c:	f107 030c 	add.w	r3, r7, #12
 81079a0:	4618      	mov	r0, r3
 81079a2:	f000 fad3 	bl	8107f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 81079a6:	697b      	ldr	r3, [r7, #20]
 81079a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 81079aa:	e15c      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 81079ac:	2300      	movs	r3, #0
 81079ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81079b0:	e159      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 81079b2:	4b80      	ldr	r3, [pc, #512]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81079b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81079b6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 81079ba:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 81079bc:	4b7d      	ldr	r3, [pc, #500]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81079be:	681b      	ldr	r3, [r3, #0]
 81079c0:	f003 0304 	and.w	r3, r3, #4
 81079c4:	2b04      	cmp	r3, #4
 81079c6:	d10c      	bne.n	81079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 81079c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81079ca:	2b00      	cmp	r3, #0
 81079cc:	d109      	bne.n	81079e2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81079ce:	4b79      	ldr	r3, [pc, #484]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81079d0:	681b      	ldr	r3, [r3, #0]
 81079d2:	08db      	lsrs	r3, r3, #3
 81079d4:	f003 0303 	and.w	r3, r3, #3
 81079d8:	4a77      	ldr	r2, [pc, #476]	@ (8107bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 81079da:	fa22 f303 	lsr.w	r3, r2, r3
 81079de:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81079e0:	e01e      	b.n	8107a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 81079e2:	4b74      	ldr	r3, [pc, #464]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 81079e4:	681b      	ldr	r3, [r3, #0]
 81079e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81079ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81079ee:	d106      	bne.n	81079fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 81079f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81079f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81079f6:	d102      	bne.n	81079fe <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 81079f8:	4b70      	ldr	r3, [pc, #448]	@ (8107bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 81079fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 81079fc:	e010      	b.n	8107a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 81079fe:	4b6d      	ldr	r3, [pc, #436]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107a00:	681b      	ldr	r3, [r3, #0]
 8107a02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107a06:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107a0a:	d106      	bne.n	8107a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8107a0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8107a0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107a12:	d102      	bne.n	8107a1a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8107a14:	4b6a      	ldr	r3, [pc, #424]	@ (8107bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8107a18:	e002      	b.n	8107a20 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8107a1a:	2300      	movs	r3, #0
 8107a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8107a1e:	e122      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107a20:	e121      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107a22:	2300      	movs	r3, #0
 8107a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a26:	e11e      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8107a28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107a2c:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 8107a30:	430b      	orrs	r3, r1
 8107a32:	d133      	bne.n	8107a9c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8107a34:	4b5f      	ldr	r3, [pc, #380]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8107a38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8107a3c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107a40:	2b00      	cmp	r3, #0
 8107a42:	d004      	beq.n	8107a4e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8107a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107a46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8107a4a:	d012      	beq.n	8107a72 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8107a4c:	e023      	b.n	8107a96 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107a4e:	4b59      	ldr	r3, [pc, #356]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107a50:	681b      	ldr	r3, [r3, #0]
 8107a52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107a56:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107a5a:	d107      	bne.n	8107a6c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107a5c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107a60:	4618      	mov	r0, r3
 8107a62:	f000 fbc7 	bl	81081f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107a68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a6a:	e0fc      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a6c:	2300      	movs	r3, #0
 8107a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a70:	e0f9      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107a72:	4b50      	ldr	r3, [pc, #320]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107a74:	681b      	ldr	r3, [r3, #0]
 8107a76:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107a7a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107a7e:	d107      	bne.n	8107a90 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107a80:	f107 0318 	add.w	r3, r7, #24
 8107a84:	4618      	mov	r0, r3
 8107a86:	f000 f90d 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8107a8a:	6a3b      	ldr	r3, [r7, #32]
 8107a8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107a8e:	e0ea      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107a90:	2300      	movs	r3, #0
 8107a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a94:	e0e7      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8107a96:	2300      	movs	r3, #0
 8107a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107a9a:	e0e4      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8107a9c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107aa0:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8107aa4:	430b      	orrs	r3, r1
 8107aa6:	f040 808d 	bne.w	8107bc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8107aaa:	4b42      	ldr	r3, [pc, #264]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8107aae:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8107ab2:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107ab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ab6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107aba:	d06b      	beq.n	8107b94 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8107abc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107abe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8107ac2:	d874      	bhi.n	8107bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107ac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ac6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107aca:	d056      	beq.n	8107b7a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8107acc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ace:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107ad2:	d86c      	bhi.n	8107bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107ad4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ad6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107ada:	d03b      	beq.n	8107b54 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8107adc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ade:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8107ae2:	d864      	bhi.n	8107bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107ae4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107ae6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107aea:	d021      	beq.n	8107b30 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8107aec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107aee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107af2:	d85c      	bhi.n	8107bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8107af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107af6:	2b00      	cmp	r3, #0
 8107af8:	d004      	beq.n	8107b04 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8107afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107afc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107b00:	d004      	beq.n	8107b0c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8107b02:	e054      	b.n	8107bae <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8107b04:	f000 f8b8 	bl	8107c78 <HAL_RCCEx_GetD3PCLK1Freq>
 8107b08:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8107b0a:	e0ac      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107b0c:	4b29      	ldr	r3, [pc, #164]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b0e:	681b      	ldr	r3, [r3, #0]
 8107b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107b14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107b18:	d107      	bne.n	8107b2a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107b1a:	f107 0318 	add.w	r3, r7, #24
 8107b1e:	4618      	mov	r0, r3
 8107b20:	f000 f8c0 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107b24:	69fb      	ldr	r3, [r7, #28]
 8107b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b28:	e09d      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b2a:	2300      	movs	r3, #0
 8107b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b2e:	e09a      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8107b30:	4b20      	ldr	r3, [pc, #128]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b32:	681b      	ldr	r3, [r3, #0]
 8107b34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8107b38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107b3c:	d107      	bne.n	8107b4e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8107b3e:	f107 030c 	add.w	r3, r7, #12
 8107b42:	4618      	mov	r0, r3
 8107b44:	f000 fa02 	bl	8107f4c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8107b48:	693b      	ldr	r3, [r7, #16]
 8107b4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b4c:	e08b      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b4e:	2300      	movs	r3, #0
 8107b50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b52:	e088      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8107b54:	4b17      	ldr	r3, [pc, #92]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b56:	681b      	ldr	r3, [r3, #0]
 8107b58:	f003 0304 	and.w	r3, r3, #4
 8107b5c:	2b04      	cmp	r3, #4
 8107b5e:	d109      	bne.n	8107b74 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107b60:	4b14      	ldr	r3, [pc, #80]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b62:	681b      	ldr	r3, [r3, #0]
 8107b64:	08db      	lsrs	r3, r3, #3
 8107b66:	f003 0303 	and.w	r3, r3, #3
 8107b6a:	4a13      	ldr	r2, [pc, #76]	@ (8107bb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8107b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8107b70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b72:	e078      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b74:	2300      	movs	r3, #0
 8107b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b78:	e075      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8107b7a:	4b0e      	ldr	r3, [pc, #56]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b7c:	681b      	ldr	r3, [r3, #0]
 8107b7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8107b82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8107b86:	d102      	bne.n	8107b8e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8107b88:	4b0c      	ldr	r3, [pc, #48]	@ (8107bbc <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8107b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107b8c:	e06b      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107b8e:	2300      	movs	r3, #0
 8107b90:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107b92:	e068      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107b94:	4b07      	ldr	r3, [pc, #28]	@ (8107bb4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8107b96:	681b      	ldr	r3, [r3, #0]
 8107b98:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107b9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107ba0:	d102      	bne.n	8107ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8107ba2:	4b07      	ldr	r3, [pc, #28]	@ (8107bc0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8107ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107ba6:	e05e      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107ba8:	2300      	movs	r3, #0
 8107baa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bac:	e05b      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8107bae:	2300      	movs	r3, #0
 8107bb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107bb2:	e058      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8107bb4:	58024400 	.word	0x58024400
 8107bb8:	03d09000 	.word	0x03d09000
 8107bbc:	003d0900 	.word	0x003d0900
 8107bc0:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8107bc4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8107bc8:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8107bcc:	430b      	orrs	r3, r1
 8107bce:	d148      	bne.n	8107c62 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8107bd0:	4b27      	ldr	r3, [pc, #156]	@ (8107c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107bd2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8107bd4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8107bd8:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8107bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107bdc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107be0:	d02a      	beq.n	8107c38 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8107be2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107be4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8107be8:	d838      	bhi.n	8107c5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8107bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107bec:	2b00      	cmp	r3, #0
 8107bee:	d004      	beq.n	8107bfa <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8107bf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8107bf2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107bf6:	d00d      	beq.n	8107c14 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8107bf8:	e030      	b.n	8107c5c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8107bfa:	4b1d      	ldr	r3, [pc, #116]	@ (8107c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107bfc:	681b      	ldr	r3, [r3, #0]
 8107bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8107c02:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8107c06:	d102      	bne.n	8107c0e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8107c08:	4b1a      	ldr	r3, [pc, #104]	@ (8107c74 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8107c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c0c:	e02b      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c0e:	2300      	movs	r3, #0
 8107c10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c12:	e028      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8107c14:	4b16      	ldr	r3, [pc, #88]	@ (8107c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107c16:	681b      	ldr	r3, [r3, #0]
 8107c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8107c1c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8107c20:	d107      	bne.n	8107c32 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8107c22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8107c26:	4618      	mov	r0, r3
 8107c28:	f000 fae4 	bl	81081f4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8107c2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8107c2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c30:	e019      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c32:	2300      	movs	r3, #0
 8107c34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c36:	e016      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8107c38:	4b0d      	ldr	r3, [pc, #52]	@ (8107c70 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8107c3a:	681b      	ldr	r3, [r3, #0]
 8107c3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8107c40:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8107c44:	d107      	bne.n	8107c56 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8107c46:	f107 0318 	add.w	r3, r7, #24
 8107c4a:	4618      	mov	r0, r3
 8107c4c:	f000 f82a 	bl	8107ca4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8107c50:	69fb      	ldr	r3, [r7, #28]
 8107c52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8107c54:	e007      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8107c56:	2300      	movs	r3, #0
 8107c58:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c5a:	e004      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8107c5c:	2300      	movs	r3, #0
 8107c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8107c60:	e001      	b.n	8107c66 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8107c62:	2300      	movs	r3, #0
 8107c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 8107c66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8107c68:	4618      	mov	r0, r3
 8107c6a:	3740      	adds	r7, #64	@ 0x40
 8107c6c:	46bd      	mov	sp, r7
 8107c6e:	bd80      	pop	{r7, pc}
 8107c70:	58024400 	.word	0x58024400
 8107c74:	017d7840 	.word	0x017d7840

08107c78 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8107c78:	b580      	push	{r7, lr}
 8107c7a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8107c7c:	f7fd ffe8 	bl	8105c50 <HAL_RCC_GetHCLKFreq>
 8107c80:	4602      	mov	r2, r0
 8107c82:	4b06      	ldr	r3, [pc, #24]	@ (8107c9c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8107c84:	6a1b      	ldr	r3, [r3, #32]
 8107c86:	091b      	lsrs	r3, r3, #4
 8107c88:	f003 0307 	and.w	r3, r3, #7
 8107c8c:	4904      	ldr	r1, [pc, #16]	@ (8107ca0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8107c8e:	5ccb      	ldrb	r3, [r1, r3]
 8107c90:	f003 031f 	and.w	r3, r3, #31
 8107c94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8107c98:	4618      	mov	r0, r3
 8107c9a:	bd80      	pop	{r7, pc}
 8107c9c:	58024400 	.word	0x58024400
 8107ca0:	0810ec40 	.word	0x0810ec40

08107ca4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8107ca4:	b480      	push	{r7}
 8107ca6:	b089      	sub	sp, #36	@ 0x24
 8107ca8:	af00      	add	r7, sp, #0
 8107caa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107cac:	4ba1      	ldr	r3, [pc, #644]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107cb0:	f003 0303 	and.w	r3, r3, #3
 8107cb4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8107cb6:	4b9f      	ldr	r3, [pc, #636]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107cba:	0b1b      	lsrs	r3, r3, #12
 8107cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107cc0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8107cc2:	4b9c      	ldr	r3, [pc, #624]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107cc6:	091b      	lsrs	r3, r3, #4
 8107cc8:	f003 0301 	and.w	r3, r3, #1
 8107ccc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8107cce:	4b99      	ldr	r3, [pc, #612]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8107cd2:	08db      	lsrs	r3, r3, #3
 8107cd4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107cd8:	693a      	ldr	r2, [r7, #16]
 8107cda:	fb02 f303 	mul.w	r3, r2, r3
 8107cde:	ee07 3a90 	vmov	s15, r3
 8107ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ce6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8107cea:	697b      	ldr	r3, [r7, #20]
 8107cec:	2b00      	cmp	r3, #0
 8107cee:	f000 8111 	beq.w	8107f14 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8107cf2:	69bb      	ldr	r3, [r7, #24]
 8107cf4:	2b02      	cmp	r3, #2
 8107cf6:	f000 8083 	beq.w	8107e00 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8107cfa:	69bb      	ldr	r3, [r7, #24]
 8107cfc:	2b02      	cmp	r3, #2
 8107cfe:	f200 80a1 	bhi.w	8107e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8107d02:	69bb      	ldr	r3, [r7, #24]
 8107d04:	2b00      	cmp	r3, #0
 8107d06:	d003      	beq.n	8107d10 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8107d08:	69bb      	ldr	r3, [r7, #24]
 8107d0a:	2b01      	cmp	r3, #1
 8107d0c:	d056      	beq.n	8107dbc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8107d0e:	e099      	b.n	8107e44 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107d10:	4b88      	ldr	r3, [pc, #544]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107d12:	681b      	ldr	r3, [r3, #0]
 8107d14:	f003 0320 	and.w	r3, r3, #32
 8107d18:	2b00      	cmp	r3, #0
 8107d1a:	d02d      	beq.n	8107d78 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107d1c:	4b85      	ldr	r3, [pc, #532]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107d1e:	681b      	ldr	r3, [r3, #0]
 8107d20:	08db      	lsrs	r3, r3, #3
 8107d22:	f003 0303 	and.w	r3, r3, #3
 8107d26:	4a84      	ldr	r2, [pc, #528]	@ (8107f38 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8107d28:	fa22 f303 	lsr.w	r3, r2, r3
 8107d2c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107d2e:	68bb      	ldr	r3, [r7, #8]
 8107d30:	ee07 3a90 	vmov	s15, r3
 8107d34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d38:	697b      	ldr	r3, [r7, #20]
 8107d3a:	ee07 3a90 	vmov	s15, r3
 8107d3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d46:	4b7b      	ldr	r3, [pc, #492]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107d48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107d4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d4e:	ee07 3a90 	vmov	s15, r3
 8107d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d56:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d5a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8107f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107d5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107d62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107d66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107d6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107d6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107d72:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8107d76:	e087      	b.n	8107e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107d78:	697b      	ldr	r3, [r7, #20]
 8107d7a:	ee07 3a90 	vmov	s15, r3
 8107d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107d82:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8107f40 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8107d86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107d8a:	4b6a      	ldr	r3, [pc, #424]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107d8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107d8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107d92:	ee07 3a90 	vmov	s15, r3
 8107d96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107d9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8107d9e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8107f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107da2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107da6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107daa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107dae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107db2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107db6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107dba:	e065      	b.n	8107e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107dbc:	697b      	ldr	r3, [r7, #20]
 8107dbe:	ee07 3a90 	vmov	s15, r3
 8107dc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107dc6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8107f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107dca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107dce:	4b59      	ldr	r3, [pc, #356]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107dd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107dd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107dd6:	ee07 3a90 	vmov	s15, r3
 8107dda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107dde:	ed97 6a03 	vldr	s12, [r7, #12]
 8107de2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8107f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107de6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107dea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107dee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107df2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107dfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107dfe:	e043      	b.n	8107e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107e00:	697b      	ldr	r3, [r7, #20]
 8107e02:	ee07 3a90 	vmov	s15, r3
 8107e06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e0a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8107f48 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8107e0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107e12:	4b48      	ldr	r3, [pc, #288]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e1a:	ee07 3a90 	vmov	s15, r3
 8107e1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e22:	ed97 6a03 	vldr	s12, [r7, #12]
 8107e26:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8107f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107e2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107e36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e42:	e021      	b.n	8107e88 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8107e44:	697b      	ldr	r3, [r7, #20]
 8107e46:	ee07 3a90 	vmov	s15, r3
 8107e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e4e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8107f44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8107e52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107e56:	4b37      	ldr	r3, [pc, #220]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107e5e:	ee07 3a90 	vmov	s15, r3
 8107e62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107e66:	ed97 6a03 	vldr	s12, [r7, #12]
 8107e6a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8107f3c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8107e6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8107e72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8107e76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8107e7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8107e7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8107e82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8107e86:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8107e88:	4b2a      	ldr	r3, [pc, #168]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107e8c:	0a5b      	lsrs	r3, r3, #9
 8107e8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107e92:	ee07 3a90 	vmov	s15, r3
 8107e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107e9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107e9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ea2:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107eaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107eae:	ee17 2a90 	vmov	r2, s15
 8107eb2:	687b      	ldr	r3, [r7, #4]
 8107eb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8107eb6:	4b1f      	ldr	r3, [pc, #124]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107eba:	0c1b      	lsrs	r3, r3, #16
 8107ebc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107ec0:	ee07 3a90 	vmov	s15, r3
 8107ec4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ec8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107ecc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8107ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107edc:	ee17 2a90 	vmov	r2, s15
 8107ee0:	687b      	ldr	r3, [r7, #4]
 8107ee2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8107ee4:	4b13      	ldr	r3, [pc, #76]	@ (8107f34 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8107ee6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8107ee8:	0e1b      	lsrs	r3, r3, #24
 8107eea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8107eee:	ee07 3a90 	vmov	s15, r3
 8107ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107ef6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8107efa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8107efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8107f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8107f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8107f0a:	ee17 2a90 	vmov	r2, s15
 8107f0e:	687b      	ldr	r3, [r7, #4]
 8107f10:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8107f12:	e008      	b.n	8107f26 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8107f14:	687b      	ldr	r3, [r7, #4]
 8107f16:	2200      	movs	r2, #0
 8107f18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8107f1a:	687b      	ldr	r3, [r7, #4]
 8107f1c:	2200      	movs	r2, #0
 8107f1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8107f20:	687b      	ldr	r3, [r7, #4]
 8107f22:	2200      	movs	r2, #0
 8107f24:	609a      	str	r2, [r3, #8]
}
 8107f26:	bf00      	nop
 8107f28:	3724      	adds	r7, #36	@ 0x24
 8107f2a:	46bd      	mov	sp, r7
 8107f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107f30:	4770      	bx	lr
 8107f32:	bf00      	nop
 8107f34:	58024400 	.word	0x58024400
 8107f38:	03d09000 	.word	0x03d09000
 8107f3c:	46000000 	.word	0x46000000
 8107f40:	4c742400 	.word	0x4c742400
 8107f44:	4a742400 	.word	0x4a742400
 8107f48:	4bbebc20 	.word	0x4bbebc20

08107f4c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8107f4c:	b480      	push	{r7}
 8107f4e:	b089      	sub	sp, #36	@ 0x24
 8107f50:	af00      	add	r7, sp, #0
 8107f52:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8107f54:	4ba1      	ldr	r3, [pc, #644]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107f58:	f003 0303 	and.w	r3, r3, #3
 8107f5c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8107f5e:	4b9f      	ldr	r3, [pc, #636]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8107f62:	0d1b      	lsrs	r3, r3, #20
 8107f64:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8107f68:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8107f6a:	4b9c      	ldr	r3, [pc, #624]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8107f6e:	0a1b      	lsrs	r3, r3, #8
 8107f70:	f003 0301 	and.w	r3, r3, #1
 8107f74:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8107f76:	4b99      	ldr	r3, [pc, #612]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8107f7a:	08db      	lsrs	r3, r3, #3
 8107f7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8107f80:	693a      	ldr	r2, [r7, #16]
 8107f82:	fb02 f303 	mul.w	r3, r2, r3
 8107f86:	ee07 3a90 	vmov	s15, r3
 8107f8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107f8e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8107f92:	697b      	ldr	r3, [r7, #20]
 8107f94:	2b00      	cmp	r3, #0
 8107f96:	f000 8111 	beq.w	81081bc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8107f9a:	69bb      	ldr	r3, [r7, #24]
 8107f9c:	2b02      	cmp	r3, #2
 8107f9e:	f000 8083 	beq.w	81080a8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8107fa2:	69bb      	ldr	r3, [r7, #24]
 8107fa4:	2b02      	cmp	r3, #2
 8107fa6:	f200 80a1 	bhi.w	81080ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8107faa:	69bb      	ldr	r3, [r7, #24]
 8107fac:	2b00      	cmp	r3, #0
 8107fae:	d003      	beq.n	8107fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8107fb0:	69bb      	ldr	r3, [r7, #24]
 8107fb2:	2b01      	cmp	r3, #1
 8107fb4:	d056      	beq.n	8108064 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8107fb6:	e099      	b.n	81080ec <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8107fb8:	4b88      	ldr	r3, [pc, #544]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107fba:	681b      	ldr	r3, [r3, #0]
 8107fbc:	f003 0320 	and.w	r3, r3, #32
 8107fc0:	2b00      	cmp	r3, #0
 8107fc2:	d02d      	beq.n	8108020 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8107fc4:	4b85      	ldr	r3, [pc, #532]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107fc6:	681b      	ldr	r3, [r3, #0]
 8107fc8:	08db      	lsrs	r3, r3, #3
 8107fca:	f003 0303 	and.w	r3, r3, #3
 8107fce:	4a84      	ldr	r2, [pc, #528]	@ (81081e0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8107fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8107fd4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8107fd6:	68bb      	ldr	r3, [r7, #8]
 8107fd8:	ee07 3a90 	vmov	s15, r3
 8107fdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107fe0:	697b      	ldr	r3, [r7, #20]
 8107fe2:	ee07 3a90 	vmov	s15, r3
 8107fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8107fea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8107fee:	4b7b      	ldr	r3, [pc, #492]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8107ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8107ff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8107ff6:	ee07 3a90 	vmov	s15, r3
 8107ffa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8107ffe:	ed97 6a03 	vldr	s12, [r7, #12]
 8108002:	eddf 5a78 	vldr	s11, [pc, #480]	@ 81081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108006:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810800a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810800e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108012:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108016:	ee67 7a27 	vmul.f32	s15, s14, s15
 810801a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810801e:	e087      	b.n	8108130 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108020:	697b      	ldr	r3, [r7, #20]
 8108022:	ee07 3a90 	vmov	s15, r3
 8108026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810802a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 81081e8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810802e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108032:	4b6a      	ldr	r3, [pc, #424]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108036:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810803a:	ee07 3a90 	vmov	s15, r3
 810803e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108042:	ed97 6a03 	vldr	s12, [r7, #12]
 8108046:	eddf 5a67 	vldr	s11, [pc, #412]	@ 81081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810804a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810804e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108052:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108056:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810805a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810805e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108062:	e065      	b.n	8108130 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8108064:	697b      	ldr	r3, [r7, #20]
 8108066:	ee07 3a90 	vmov	s15, r3
 810806a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810806e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 81081ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8108072:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108076:	4b59      	ldr	r3, [pc, #356]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 810807a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810807e:	ee07 3a90 	vmov	s15, r3
 8108082:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108086:	ed97 6a03 	vldr	s12, [r7, #12]
 810808a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 81081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810808e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108092:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108096:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810809a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810809e:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080a6:	e043      	b.n	8108130 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81080a8:	697b      	ldr	r3, [r7, #20]
 81080aa:	ee07 3a90 	vmov	s15, r3
 81080ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080b2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 81081f0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81080b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080ba:	4b48      	ldr	r3, [pc, #288]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81080bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81080be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81080c2:	ee07 3a90 	vmov	s15, r3
 81080c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81080ca:	ed97 6a03 	vldr	s12, [r7, #12]
 81080ce:	eddf 5a45 	vldr	s11, [pc, #276]	@ 81081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81080d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81080d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81080da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81080de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81080e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81080e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81080ea:	e021      	b.n	8108130 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81080ec:	697b      	ldr	r3, [r7, #20]
 81080ee:	ee07 3a90 	vmov	s15, r3
 81080f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81080f6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 81081ec <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81080fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81080fe:	4b37      	ldr	r3, [pc, #220]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108102:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108106:	ee07 3a90 	vmov	s15, r3
 810810a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810810e:	ed97 6a03 	vldr	s12, [r7, #12]
 8108112:	eddf 5a34 	vldr	s11, [pc, #208]	@ 81081e4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8108116:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810811a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810811e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108122:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108126:	ee67 7a27 	vmul.f32	s15, s14, s15
 810812a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810812e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8108130:	4b2a      	ldr	r3, [pc, #168]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108134:	0a5b      	lsrs	r3, r3, #9
 8108136:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810813a:	ee07 3a90 	vmov	s15, r3
 810813e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108142:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108146:	ee37 7a87 	vadd.f32	s14, s15, s14
 810814a:	edd7 6a07 	vldr	s13, [r7, #28]
 810814e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108156:	ee17 2a90 	vmov	r2, s15
 810815a:	687b      	ldr	r3, [r7, #4]
 810815c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 810815e:	4b1f      	ldr	r3, [pc, #124]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8108160:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108162:	0c1b      	lsrs	r3, r3, #16
 8108164:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108168:	ee07 3a90 	vmov	s15, r3
 810816c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108170:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108174:	ee37 7a87 	vadd.f32	s14, s15, s14
 8108178:	edd7 6a07 	vldr	s13, [r7, #28]
 810817c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108180:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108184:	ee17 2a90 	vmov	r2, s15
 8108188:	687b      	ldr	r3, [r7, #4]
 810818a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 810818c:	4b13      	ldr	r3, [pc, #76]	@ (81081dc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810818e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8108190:	0e1b      	lsrs	r3, r3, #24
 8108192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8108196:	ee07 3a90 	vmov	s15, r3
 810819a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810819e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81081a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 81081a6:	edd7 6a07 	vldr	s13, [r7, #28]
 81081aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81081ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81081b2:	ee17 2a90 	vmov	r2, s15
 81081b6:	687b      	ldr	r3, [r7, #4]
 81081b8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 81081ba:	e008      	b.n	81081ce <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 81081bc:	687b      	ldr	r3, [r7, #4]
 81081be:	2200      	movs	r2, #0
 81081c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 81081c2:	687b      	ldr	r3, [r7, #4]
 81081c4:	2200      	movs	r2, #0
 81081c6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 81081c8:	687b      	ldr	r3, [r7, #4]
 81081ca:	2200      	movs	r2, #0
 81081cc:	609a      	str	r2, [r3, #8]
}
 81081ce:	bf00      	nop
 81081d0:	3724      	adds	r7, #36	@ 0x24
 81081d2:	46bd      	mov	sp, r7
 81081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81081d8:	4770      	bx	lr
 81081da:	bf00      	nop
 81081dc:	58024400 	.word	0x58024400
 81081e0:	03d09000 	.word	0x03d09000
 81081e4:	46000000 	.word	0x46000000
 81081e8:	4c742400 	.word	0x4c742400
 81081ec:	4a742400 	.word	0x4a742400
 81081f0:	4bbebc20 	.word	0x4bbebc20

081081f4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 81081f4:	b480      	push	{r7}
 81081f6:	b089      	sub	sp, #36	@ 0x24
 81081f8:	af00      	add	r7, sp, #0
 81081fa:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81081fc:	4ba0      	ldr	r3, [pc, #640]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81081fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108200:	f003 0303 	and.w	r3, r3, #3
 8108204:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8108206:	4b9e      	ldr	r3, [pc, #632]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810820a:	091b      	lsrs	r3, r3, #4
 810820c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8108210:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8108212:	4b9b      	ldr	r3, [pc, #620]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108216:	f003 0301 	and.w	r3, r3, #1
 810821a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810821c:	4b98      	ldr	r3, [pc, #608]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810821e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8108220:	08db      	lsrs	r3, r3, #3
 8108222:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8108226:	693a      	ldr	r2, [r7, #16]
 8108228:	fb02 f303 	mul.w	r3, r2, r3
 810822c:	ee07 3a90 	vmov	s15, r3
 8108230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108234:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8108238:	697b      	ldr	r3, [r7, #20]
 810823a:	2b00      	cmp	r3, #0
 810823c:	f000 8111 	beq.w	8108462 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8108240:	69bb      	ldr	r3, [r7, #24]
 8108242:	2b02      	cmp	r3, #2
 8108244:	f000 8083 	beq.w	810834e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8108248:	69bb      	ldr	r3, [r7, #24]
 810824a:	2b02      	cmp	r3, #2
 810824c:	f200 80a1 	bhi.w	8108392 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8108250:	69bb      	ldr	r3, [r7, #24]
 8108252:	2b00      	cmp	r3, #0
 8108254:	d003      	beq.n	810825e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8108256:	69bb      	ldr	r3, [r7, #24]
 8108258:	2b01      	cmp	r3, #1
 810825a:	d056      	beq.n	810830a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 810825c:	e099      	b.n	8108392 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810825e:	4b88      	ldr	r3, [pc, #544]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108260:	681b      	ldr	r3, [r3, #0]
 8108262:	f003 0320 	and.w	r3, r3, #32
 8108266:	2b00      	cmp	r3, #0
 8108268:	d02d      	beq.n	81082c6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810826a:	4b85      	ldr	r3, [pc, #532]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810826c:	681b      	ldr	r3, [r3, #0]
 810826e:	08db      	lsrs	r3, r3, #3
 8108270:	f003 0303 	and.w	r3, r3, #3
 8108274:	4a83      	ldr	r2, [pc, #524]	@ (8108484 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8108276:	fa22 f303 	lsr.w	r3, r2, r3
 810827a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810827c:	68bb      	ldr	r3, [r7, #8]
 810827e:	ee07 3a90 	vmov	s15, r3
 8108282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108286:	697b      	ldr	r3, [r7, #20]
 8108288:	ee07 3a90 	vmov	s15, r3
 810828c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108294:	4b7a      	ldr	r3, [pc, #488]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810829c:	ee07 3a90 	vmov	s15, r3
 81082a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81082a4:	ed97 6a03 	vldr	s12, [r7, #12]
 81082a8:	eddf 5a77 	vldr	s11, [pc, #476]	@ 8108488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81082ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81082b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81082b4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81082b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81082bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81082c0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 81082c4:	e087      	b.n	81083d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81082c6:	697b      	ldr	r3, [r7, #20]
 81082c8:	ee07 3a90 	vmov	s15, r3
 81082cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81082d0:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 810848c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81082d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81082d8:	4b69      	ldr	r3, [pc, #420]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81082da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81082dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81082e0:	ee07 3a90 	vmov	s15, r3
 81082e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81082e8:	ed97 6a03 	vldr	s12, [r7, #12]
 81082ec:	eddf 5a66 	vldr	s11, [pc, #408]	@ 8108488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81082f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81082f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81082f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81082fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108300:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108304:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108308:	e065      	b.n	81083d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810830a:	697b      	ldr	r3, [r7, #20]
 810830c:	ee07 3a90 	vmov	s15, r3
 8108310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108314:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8108490 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8108318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810831c:	4b58      	ldr	r3, [pc, #352]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 810831e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108324:	ee07 3a90 	vmov	s15, r3
 8108328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810832c:	ed97 6a03 	vldr	s12, [r7, #12]
 8108330:	eddf 5a55 	vldr	s11, [pc, #340]	@ 8108488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8108338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810833c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8108348:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 810834c:	e043      	b.n	81083d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810834e:	697b      	ldr	r3, [r7, #20]
 8108350:	ee07 3a90 	vmov	s15, r3
 8108354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108358:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8108494 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 810835c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8108360:	4b47      	ldr	r3, [pc, #284]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8108368:	ee07 3a90 	vmov	s15, r3
 810836c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8108370:	ed97 6a03 	vldr	s12, [r7, #12]
 8108374:	eddf 5a44 	vldr	s11, [pc, #272]	@ 8108488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8108378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810837c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8108380:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8108384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8108388:	ee67 7a27 	vmul.f32	s15, s14, s15
 810838c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8108390:	e021      	b.n	81083d6 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8108392:	697b      	ldr	r3, [r7, #20]
 8108394:	ee07 3a90 	vmov	s15, r3
 8108398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810839c:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 810848c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 81083a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81083a4:	4b36      	ldr	r3, [pc, #216]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81083a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81083a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81083ac:	ee07 3a90 	vmov	s15, r3
 81083b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81083b4:	ed97 6a03 	vldr	s12, [r7, #12]
 81083b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8108488 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 81083bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81083c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81083c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81083c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81083cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 81083d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81083d4:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 81083d6:	4b2a      	ldr	r3, [pc, #168]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 81083d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81083da:	0a5b      	lsrs	r3, r3, #9
 81083dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81083e0:	ee07 3a90 	vmov	s15, r3
 81083e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81083e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 81083ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 81083f0:	edd7 6a07 	vldr	s13, [r7, #28]
 81083f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81083f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81083fc:	ee17 2a90 	vmov	r2, s15
 8108400:	687b      	ldr	r3, [r7, #4]
 8108402:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8108404:	4b1e      	ldr	r3, [pc, #120]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108408:	0c1b      	lsrs	r3, r3, #16
 810840a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810840e:	ee07 3a90 	vmov	s15, r3
 8108412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108416:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 810841a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810841e:	edd7 6a07 	vldr	s13, [r7, #28]
 8108422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810842a:	ee17 2a90 	vmov	r2, s15
 810842e:	687b      	ldr	r3, [r7, #4]
 8108430:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8108432:	4b13      	ldr	r3, [pc, #76]	@ (8108480 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8108434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8108436:	0e1b      	lsrs	r3, r3, #24
 8108438:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810843c:	ee07 3a90 	vmov	s15, r3
 8108440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8108444:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8108448:	ee37 7a87 	vadd.f32	s14, s15, s14
 810844c:	edd7 6a07 	vldr	s13, [r7, #28]
 8108450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8108454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8108458:	ee17 2a90 	vmov	r2, s15
 810845c:	687b      	ldr	r3, [r7, #4]
 810845e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8108460:	e008      	b.n	8108474 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8108462:	687b      	ldr	r3, [r7, #4]
 8108464:	2200      	movs	r2, #0
 8108466:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8108468:	687b      	ldr	r3, [r7, #4]
 810846a:	2200      	movs	r2, #0
 810846c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 810846e:	687b      	ldr	r3, [r7, #4]
 8108470:	2200      	movs	r2, #0
 8108472:	609a      	str	r2, [r3, #8]
}
 8108474:	bf00      	nop
 8108476:	3724      	adds	r7, #36	@ 0x24
 8108478:	46bd      	mov	sp, r7
 810847a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810847e:	4770      	bx	lr
 8108480:	58024400 	.word	0x58024400
 8108484:	03d09000 	.word	0x03d09000
 8108488:	46000000 	.word	0x46000000
 810848c:	4c742400 	.word	0x4c742400
 8108490:	4a742400 	.word	0x4a742400
 8108494:	4bbebc20 	.word	0x4bbebc20

08108498 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8108498:	b580      	push	{r7, lr}
 810849a:	b084      	sub	sp, #16
 810849c:	af00      	add	r7, sp, #0
 810849e:	6078      	str	r0, [r7, #4]
 81084a0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81084a2:	2300      	movs	r3, #0
 81084a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81084a6:	4b54      	ldr	r3, [pc, #336]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81084a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81084aa:	f003 0303 	and.w	r3, r3, #3
 81084ae:	2b03      	cmp	r3, #3
 81084b0:	d101      	bne.n	81084b6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 81084b2:	2301      	movs	r3, #1
 81084b4:	e09b      	b.n	81085ee <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 81084b6:	4b50      	ldr	r3, [pc, #320]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81084b8:	681b      	ldr	r3, [r3, #0]
 81084ba:	4a4f      	ldr	r2, [pc, #316]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81084bc:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 81084c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81084c2:	f7fa fa7f 	bl	81029c4 <HAL_GetTick>
 81084c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81084c8:	e008      	b.n	81084dc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81084ca:	f7fa fa7b 	bl	81029c4 <HAL_GetTick>
 81084ce:	4602      	mov	r2, r0
 81084d0:	68bb      	ldr	r3, [r7, #8]
 81084d2:	1ad3      	subs	r3, r2, r3
 81084d4:	2b02      	cmp	r3, #2
 81084d6:	d901      	bls.n	81084dc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81084d8:	2303      	movs	r3, #3
 81084da:	e088      	b.n	81085ee <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81084dc:	4b46      	ldr	r3, [pc, #280]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81084de:	681b      	ldr	r3, [r3, #0]
 81084e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81084e4:	2b00      	cmp	r3, #0
 81084e6:	d1f0      	bne.n	81084ca <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81084e8:	4b43      	ldr	r3, [pc, #268]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81084ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81084ec:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81084f0:	687b      	ldr	r3, [r7, #4]
 81084f2:	681b      	ldr	r3, [r3, #0]
 81084f4:	031b      	lsls	r3, r3, #12
 81084f6:	4940      	ldr	r1, [pc, #256]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81084f8:	4313      	orrs	r3, r2
 81084fa:	628b      	str	r3, [r1, #40]	@ 0x28
 81084fc:	687b      	ldr	r3, [r7, #4]
 81084fe:	685b      	ldr	r3, [r3, #4]
 8108500:	3b01      	subs	r3, #1
 8108502:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8108506:	687b      	ldr	r3, [r7, #4]
 8108508:	689b      	ldr	r3, [r3, #8]
 810850a:	3b01      	subs	r3, #1
 810850c:	025b      	lsls	r3, r3, #9
 810850e:	b29b      	uxth	r3, r3
 8108510:	431a      	orrs	r2, r3
 8108512:	687b      	ldr	r3, [r7, #4]
 8108514:	68db      	ldr	r3, [r3, #12]
 8108516:	3b01      	subs	r3, #1
 8108518:	041b      	lsls	r3, r3, #16
 810851a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810851e:	431a      	orrs	r2, r3
 8108520:	687b      	ldr	r3, [r7, #4]
 8108522:	691b      	ldr	r3, [r3, #16]
 8108524:	3b01      	subs	r3, #1
 8108526:	061b      	lsls	r3, r3, #24
 8108528:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 810852c:	4932      	ldr	r1, [pc, #200]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 810852e:	4313      	orrs	r3, r2
 8108530:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8108532:	4b31      	ldr	r3, [pc, #196]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108536:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 810853a:	687b      	ldr	r3, [r7, #4]
 810853c:	695b      	ldr	r3, [r3, #20]
 810853e:	492e      	ldr	r1, [pc, #184]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108540:	4313      	orrs	r3, r2
 8108542:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8108544:	4b2c      	ldr	r3, [pc, #176]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108546:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108548:	f023 0220 	bic.w	r2, r3, #32
 810854c:	687b      	ldr	r3, [r7, #4]
 810854e:	699b      	ldr	r3, [r3, #24]
 8108550:	4929      	ldr	r1, [pc, #164]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108552:	4313      	orrs	r3, r2
 8108554:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8108556:	4b28      	ldr	r3, [pc, #160]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810855a:	4a27      	ldr	r2, [pc, #156]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 810855c:	f023 0310 	bic.w	r3, r3, #16
 8108560:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8108562:	4b25      	ldr	r3, [pc, #148]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8108566:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 810856a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 810856e:	687a      	ldr	r2, [r7, #4]
 8108570:	69d2      	ldr	r2, [r2, #28]
 8108572:	00d2      	lsls	r2, r2, #3
 8108574:	4920      	ldr	r1, [pc, #128]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108576:	4313      	orrs	r3, r2
 8108578:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 810857a:	4b1f      	ldr	r3, [pc, #124]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 810857c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810857e:	4a1e      	ldr	r2, [pc, #120]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108580:	f043 0310 	orr.w	r3, r3, #16
 8108584:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8108586:	683b      	ldr	r3, [r7, #0]
 8108588:	2b00      	cmp	r3, #0
 810858a:	d106      	bne.n	810859a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 810858c:	4b1a      	ldr	r3, [pc, #104]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 810858e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108590:	4a19      	ldr	r2, [pc, #100]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 8108592:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8108596:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108598:	e00f      	b.n	81085ba <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 810859a:	683b      	ldr	r3, [r7, #0]
 810859c:	2b01      	cmp	r3, #1
 810859e:	d106      	bne.n	81085ae <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 81085a0:	4b15      	ldr	r3, [pc, #84]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81085a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81085a4:	4a14      	ldr	r2, [pc, #80]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81085a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 81085aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81085ac:	e005      	b.n	81085ba <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 81085ae:	4b12      	ldr	r3, [pc, #72]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81085b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81085b2:	4a11      	ldr	r2, [pc, #68]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81085b4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 81085b8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 81085ba:	4b0f      	ldr	r3, [pc, #60]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81085bc:	681b      	ldr	r3, [r3, #0]
 81085be:	4a0e      	ldr	r2, [pc, #56]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81085c0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 81085c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81085c6:	f7fa f9fd 	bl	81029c4 <HAL_GetTick>
 81085ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81085cc:	e008      	b.n	81085e0 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81085ce:	f7fa f9f9 	bl	81029c4 <HAL_GetTick>
 81085d2:	4602      	mov	r2, r0
 81085d4:	68bb      	ldr	r3, [r7, #8]
 81085d6:	1ad3      	subs	r3, r2, r3
 81085d8:	2b02      	cmp	r3, #2
 81085da:	d901      	bls.n	81085e0 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81085dc:	2303      	movs	r3, #3
 81085de:	e006      	b.n	81085ee <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81085e0:	4b05      	ldr	r3, [pc, #20]	@ (81085f8 <RCCEx_PLL2_Config+0x160>)
 81085e2:	681b      	ldr	r3, [r3, #0]
 81085e4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81085e8:	2b00      	cmp	r3, #0
 81085ea:	d0f0      	beq.n	81085ce <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81085ec:	7bfb      	ldrb	r3, [r7, #15]
}
 81085ee:	4618      	mov	r0, r3
 81085f0:	3710      	adds	r7, #16
 81085f2:	46bd      	mov	sp, r7
 81085f4:	bd80      	pop	{r7, pc}
 81085f6:	bf00      	nop
 81085f8:	58024400 	.word	0x58024400

081085fc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81085fc:	b580      	push	{r7, lr}
 81085fe:	b084      	sub	sp, #16
 8108600:	af00      	add	r7, sp, #0
 8108602:	6078      	str	r0, [r7, #4]
 8108604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8108606:	2300      	movs	r3, #0
 8108608:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810860a:	4b54      	ldr	r3, [pc, #336]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 810860c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810860e:	f003 0303 	and.w	r3, r3, #3
 8108612:	2b03      	cmp	r3, #3
 8108614:	d101      	bne.n	810861a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8108616:	2301      	movs	r3, #1
 8108618:	e09b      	b.n	8108752 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810861a:	4b50      	ldr	r3, [pc, #320]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 810861c:	681b      	ldr	r3, [r3, #0]
 810861e:	4a4f      	ldr	r2, [pc, #316]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108620:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8108624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8108626:	f7fa f9cd 	bl	81029c4 <HAL_GetTick>
 810862a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 810862c:	e008      	b.n	8108640 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810862e:	f7fa f9c9 	bl	81029c4 <HAL_GetTick>
 8108632:	4602      	mov	r2, r0
 8108634:	68bb      	ldr	r3, [r7, #8]
 8108636:	1ad3      	subs	r3, r2, r3
 8108638:	2b02      	cmp	r3, #2
 810863a:	d901      	bls.n	8108640 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 810863c:	2303      	movs	r3, #3
 810863e:	e088      	b.n	8108752 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8108640:	4b46      	ldr	r3, [pc, #280]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108642:	681b      	ldr	r3, [r3, #0]
 8108644:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8108648:	2b00      	cmp	r3, #0
 810864a:	d1f0      	bne.n	810862e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 810864c:	4b43      	ldr	r3, [pc, #268]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 810864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8108650:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8108654:	687b      	ldr	r3, [r7, #4]
 8108656:	681b      	ldr	r3, [r3, #0]
 8108658:	051b      	lsls	r3, r3, #20
 810865a:	4940      	ldr	r1, [pc, #256]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 810865c:	4313      	orrs	r3, r2
 810865e:	628b      	str	r3, [r1, #40]	@ 0x28
 8108660:	687b      	ldr	r3, [r7, #4]
 8108662:	685b      	ldr	r3, [r3, #4]
 8108664:	3b01      	subs	r3, #1
 8108666:	f3c3 0208 	ubfx	r2, r3, #0, #9
 810866a:	687b      	ldr	r3, [r7, #4]
 810866c:	689b      	ldr	r3, [r3, #8]
 810866e:	3b01      	subs	r3, #1
 8108670:	025b      	lsls	r3, r3, #9
 8108672:	b29b      	uxth	r3, r3
 8108674:	431a      	orrs	r2, r3
 8108676:	687b      	ldr	r3, [r7, #4]
 8108678:	68db      	ldr	r3, [r3, #12]
 810867a:	3b01      	subs	r3, #1
 810867c:	041b      	lsls	r3, r3, #16
 810867e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8108682:	431a      	orrs	r2, r3
 8108684:	687b      	ldr	r3, [r7, #4]
 8108686:	691b      	ldr	r3, [r3, #16]
 8108688:	3b01      	subs	r3, #1
 810868a:	061b      	lsls	r3, r3, #24
 810868c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8108690:	4932      	ldr	r1, [pc, #200]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108692:	4313      	orrs	r3, r2
 8108694:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8108696:	4b31      	ldr	r3, [pc, #196]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108698:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810869a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 810869e:	687b      	ldr	r3, [r7, #4]
 81086a0:	695b      	ldr	r3, [r3, #20]
 81086a2:	492e      	ldr	r1, [pc, #184]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086a4:	4313      	orrs	r3, r2
 81086a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81086a8:	4b2c      	ldr	r3, [pc, #176]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086ac:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81086b0:	687b      	ldr	r3, [r7, #4]
 81086b2:	699b      	ldr	r3, [r3, #24]
 81086b4:	4929      	ldr	r1, [pc, #164]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086b6:	4313      	orrs	r3, r2
 81086b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81086ba:	4b28      	ldr	r3, [pc, #160]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086be:	4a27      	ldr	r2, [pc, #156]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 81086c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 81086c6:	4b25      	ldr	r3, [pc, #148]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81086ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81086ce:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81086d2:	687a      	ldr	r2, [r7, #4]
 81086d4:	69d2      	ldr	r2, [r2, #28]
 81086d6:	00d2      	lsls	r2, r2, #3
 81086d8:	4920      	ldr	r1, [pc, #128]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086da:	4313      	orrs	r3, r2
 81086dc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81086de:	4b1f      	ldr	r3, [pc, #124]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086e2:	4a1e      	ldr	r2, [pc, #120]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81086e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81086ea:	683b      	ldr	r3, [r7, #0]
 81086ec:	2b00      	cmp	r3, #0
 81086ee:	d106      	bne.n	81086fe <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81086f0:	4b1a      	ldr	r3, [pc, #104]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81086f4:	4a19      	ldr	r2, [pc, #100]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 81086f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81086fa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81086fc:	e00f      	b.n	810871e <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81086fe:	683b      	ldr	r3, [r7, #0]
 8108700:	2b01      	cmp	r3, #1
 8108702:	d106      	bne.n	8108712 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8108704:	4b15      	ldr	r3, [pc, #84]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108708:	4a14      	ldr	r2, [pc, #80]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 810870a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 810870e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8108710:	e005      	b.n	810871e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8108712:	4b12      	ldr	r3, [pc, #72]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8108716:	4a11      	ldr	r2, [pc, #68]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108718:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 810871c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 810871e:	4b0f      	ldr	r3, [pc, #60]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108720:	681b      	ldr	r3, [r3, #0]
 8108722:	4a0e      	ldr	r2, [pc, #56]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108724:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8108728:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810872a:	f7fa f94b 	bl	81029c4 <HAL_GetTick>
 810872e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108730:	e008      	b.n	8108744 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8108732:	f7fa f947 	bl	81029c4 <HAL_GetTick>
 8108736:	4602      	mov	r2, r0
 8108738:	68bb      	ldr	r3, [r7, #8]
 810873a:	1ad3      	subs	r3, r2, r3
 810873c:	2b02      	cmp	r3, #2
 810873e:	d901      	bls.n	8108744 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8108740:	2303      	movs	r3, #3
 8108742:	e006      	b.n	8108752 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8108744:	4b05      	ldr	r3, [pc, #20]	@ (810875c <RCCEx_PLL3_Config+0x160>)
 8108746:	681b      	ldr	r3, [r3, #0]
 8108748:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810874c:	2b00      	cmp	r3, #0
 810874e:	d0f0      	beq.n	8108732 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8108750:	7bfb      	ldrb	r3, [r7, #15]
}
 8108752:	4618      	mov	r0, r3
 8108754:	3710      	adds	r7, #16
 8108756:	46bd      	mov	sp, r7
 8108758:	bd80      	pop	{r7, pc}
 810875a:	bf00      	nop
 810875c:	58024400 	.word	0x58024400

08108760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8108760:	b580      	push	{r7, lr}
 8108762:	b082      	sub	sp, #8
 8108764:	af00      	add	r7, sp, #0
 8108766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8108768:	687b      	ldr	r3, [r7, #4]
 810876a:	2b00      	cmp	r3, #0
 810876c:	d101      	bne.n	8108772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 810876e:	2301      	movs	r3, #1
 8108770:	e049      	b.n	8108806 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8108772:	687b      	ldr	r3, [r7, #4]
 8108774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108778:	b2db      	uxtb	r3, r3
 810877a:	2b00      	cmp	r3, #0
 810877c:	d106      	bne.n	810878c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810877e:	687b      	ldr	r3, [r7, #4]
 8108780:	2200      	movs	r2, #0
 8108782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8108786:	6878      	ldr	r0, [r7, #4]
 8108788:	f000 f841 	bl	810880e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810878c:	687b      	ldr	r3, [r7, #4]
 810878e:	2202      	movs	r2, #2
 8108790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8108794:	687b      	ldr	r3, [r7, #4]
 8108796:	681a      	ldr	r2, [r3, #0]
 8108798:	687b      	ldr	r3, [r7, #4]
 810879a:	3304      	adds	r3, #4
 810879c:	4619      	mov	r1, r3
 810879e:	4610      	mov	r0, r2
 81087a0:	f000 f9e8 	bl	8108b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 81087a4:	687b      	ldr	r3, [r7, #4]
 81087a6:	2201      	movs	r2, #1
 81087a8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81087ac:	687b      	ldr	r3, [r7, #4]
 81087ae:	2201      	movs	r2, #1
 81087b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 81087b4:	687b      	ldr	r3, [r7, #4]
 81087b6:	2201      	movs	r2, #1
 81087b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 81087bc:	687b      	ldr	r3, [r7, #4]
 81087be:	2201      	movs	r2, #1
 81087c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 81087c4:	687b      	ldr	r3, [r7, #4]
 81087c6:	2201      	movs	r2, #1
 81087c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 81087cc:	687b      	ldr	r3, [r7, #4]
 81087ce:	2201      	movs	r2, #1
 81087d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 81087d4:	687b      	ldr	r3, [r7, #4]
 81087d6:	2201      	movs	r2, #1
 81087d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81087dc:	687b      	ldr	r3, [r7, #4]
 81087de:	2201      	movs	r2, #1
 81087e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 81087e4:	687b      	ldr	r3, [r7, #4]
 81087e6:	2201      	movs	r2, #1
 81087e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 81087ec:	687b      	ldr	r3, [r7, #4]
 81087ee:	2201      	movs	r2, #1
 81087f0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 81087f4:	687b      	ldr	r3, [r7, #4]
 81087f6:	2201      	movs	r2, #1
 81087f8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81087fc:	687b      	ldr	r3, [r7, #4]
 81087fe:	2201      	movs	r2, #1
 8108800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8108804:	2300      	movs	r3, #0
}
 8108806:	4618      	mov	r0, r3
 8108808:	3708      	adds	r7, #8
 810880a:	46bd      	mov	sp, r7
 810880c:	bd80      	pop	{r7, pc}

0810880e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 810880e:	b480      	push	{r7}
 8108810:	b083      	sub	sp, #12
 8108812:	af00      	add	r7, sp, #0
 8108814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8108816:	bf00      	nop
 8108818:	370c      	adds	r7, #12
 810881a:	46bd      	mov	sp, r7
 810881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108820:	4770      	bx	lr
	...

08108824 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8108824:	b480      	push	{r7}
 8108826:	b085      	sub	sp, #20
 8108828:	af00      	add	r7, sp, #0
 810882a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 810882c:	687b      	ldr	r3, [r7, #4]
 810882e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8108832:	b2db      	uxtb	r3, r3
 8108834:	2b01      	cmp	r3, #1
 8108836:	d001      	beq.n	810883c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8108838:	2301      	movs	r3, #1
 810883a:	e054      	b.n	81088e6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810883c:	687b      	ldr	r3, [r7, #4]
 810883e:	2202      	movs	r2, #2
 8108840:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8108844:	687b      	ldr	r3, [r7, #4]
 8108846:	681b      	ldr	r3, [r3, #0]
 8108848:	68da      	ldr	r2, [r3, #12]
 810884a:	687b      	ldr	r3, [r7, #4]
 810884c:	681b      	ldr	r3, [r3, #0]
 810884e:	f042 0201 	orr.w	r2, r2, #1
 8108852:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8108854:	687b      	ldr	r3, [r7, #4]
 8108856:	681b      	ldr	r3, [r3, #0]
 8108858:	4a26      	ldr	r2, [pc, #152]	@ (81088f4 <HAL_TIM_Base_Start_IT+0xd0>)
 810885a:	4293      	cmp	r3, r2
 810885c:	d022      	beq.n	81088a4 <HAL_TIM_Base_Start_IT+0x80>
 810885e:	687b      	ldr	r3, [r7, #4]
 8108860:	681b      	ldr	r3, [r3, #0]
 8108862:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108866:	d01d      	beq.n	81088a4 <HAL_TIM_Base_Start_IT+0x80>
 8108868:	687b      	ldr	r3, [r7, #4]
 810886a:	681b      	ldr	r3, [r3, #0]
 810886c:	4a22      	ldr	r2, [pc, #136]	@ (81088f8 <HAL_TIM_Base_Start_IT+0xd4>)
 810886e:	4293      	cmp	r3, r2
 8108870:	d018      	beq.n	81088a4 <HAL_TIM_Base_Start_IT+0x80>
 8108872:	687b      	ldr	r3, [r7, #4]
 8108874:	681b      	ldr	r3, [r3, #0]
 8108876:	4a21      	ldr	r2, [pc, #132]	@ (81088fc <HAL_TIM_Base_Start_IT+0xd8>)
 8108878:	4293      	cmp	r3, r2
 810887a:	d013      	beq.n	81088a4 <HAL_TIM_Base_Start_IT+0x80>
 810887c:	687b      	ldr	r3, [r7, #4]
 810887e:	681b      	ldr	r3, [r3, #0]
 8108880:	4a1f      	ldr	r2, [pc, #124]	@ (8108900 <HAL_TIM_Base_Start_IT+0xdc>)
 8108882:	4293      	cmp	r3, r2
 8108884:	d00e      	beq.n	81088a4 <HAL_TIM_Base_Start_IT+0x80>
 8108886:	687b      	ldr	r3, [r7, #4]
 8108888:	681b      	ldr	r3, [r3, #0]
 810888a:	4a1e      	ldr	r2, [pc, #120]	@ (8108904 <HAL_TIM_Base_Start_IT+0xe0>)
 810888c:	4293      	cmp	r3, r2
 810888e:	d009      	beq.n	81088a4 <HAL_TIM_Base_Start_IT+0x80>
 8108890:	687b      	ldr	r3, [r7, #4]
 8108892:	681b      	ldr	r3, [r3, #0]
 8108894:	4a1c      	ldr	r2, [pc, #112]	@ (8108908 <HAL_TIM_Base_Start_IT+0xe4>)
 8108896:	4293      	cmp	r3, r2
 8108898:	d004      	beq.n	81088a4 <HAL_TIM_Base_Start_IT+0x80>
 810889a:	687b      	ldr	r3, [r7, #4]
 810889c:	681b      	ldr	r3, [r3, #0]
 810889e:	4a1b      	ldr	r2, [pc, #108]	@ (810890c <HAL_TIM_Base_Start_IT+0xe8>)
 81088a0:	4293      	cmp	r3, r2
 81088a2:	d115      	bne.n	81088d0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81088a4:	687b      	ldr	r3, [r7, #4]
 81088a6:	681b      	ldr	r3, [r3, #0]
 81088a8:	689a      	ldr	r2, [r3, #8]
 81088aa:	4b19      	ldr	r3, [pc, #100]	@ (8108910 <HAL_TIM_Base_Start_IT+0xec>)
 81088ac:	4013      	ands	r3, r2
 81088ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088b0:	68fb      	ldr	r3, [r7, #12]
 81088b2:	2b06      	cmp	r3, #6
 81088b4:	d015      	beq.n	81088e2 <HAL_TIM_Base_Start_IT+0xbe>
 81088b6:	68fb      	ldr	r3, [r7, #12]
 81088b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81088bc:	d011      	beq.n	81088e2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 81088be:	687b      	ldr	r3, [r7, #4]
 81088c0:	681b      	ldr	r3, [r3, #0]
 81088c2:	681a      	ldr	r2, [r3, #0]
 81088c4:	687b      	ldr	r3, [r7, #4]
 81088c6:	681b      	ldr	r3, [r3, #0]
 81088c8:	f042 0201 	orr.w	r2, r2, #1
 81088cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088ce:	e008      	b.n	81088e2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81088d0:	687b      	ldr	r3, [r7, #4]
 81088d2:	681b      	ldr	r3, [r3, #0]
 81088d4:	681a      	ldr	r2, [r3, #0]
 81088d6:	687b      	ldr	r3, [r7, #4]
 81088d8:	681b      	ldr	r3, [r3, #0]
 81088da:	f042 0201 	orr.w	r2, r2, #1
 81088de:	601a      	str	r2, [r3, #0]
 81088e0:	e000      	b.n	81088e4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81088e2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81088e4:	2300      	movs	r3, #0
}
 81088e6:	4618      	mov	r0, r3
 81088e8:	3714      	adds	r7, #20
 81088ea:	46bd      	mov	sp, r7
 81088ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81088f0:	4770      	bx	lr
 81088f2:	bf00      	nop
 81088f4:	40010000 	.word	0x40010000
 81088f8:	40000400 	.word	0x40000400
 81088fc:	40000800 	.word	0x40000800
 8108900:	40000c00 	.word	0x40000c00
 8108904:	40010400 	.word	0x40010400
 8108908:	40001800 	.word	0x40001800
 810890c:	40014000 	.word	0x40014000
 8108910:	00010007 	.word	0x00010007

08108914 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8108914:	b580      	push	{r7, lr}
 8108916:	b084      	sub	sp, #16
 8108918:	af00      	add	r7, sp, #0
 810891a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 810891c:	687b      	ldr	r3, [r7, #4]
 810891e:	681b      	ldr	r3, [r3, #0]
 8108920:	68db      	ldr	r3, [r3, #12]
 8108922:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8108924:	687b      	ldr	r3, [r7, #4]
 8108926:	681b      	ldr	r3, [r3, #0]
 8108928:	691b      	ldr	r3, [r3, #16]
 810892a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 810892c:	68bb      	ldr	r3, [r7, #8]
 810892e:	f003 0302 	and.w	r3, r3, #2
 8108932:	2b00      	cmp	r3, #0
 8108934:	d020      	beq.n	8108978 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8108936:	68fb      	ldr	r3, [r7, #12]
 8108938:	f003 0302 	and.w	r3, r3, #2
 810893c:	2b00      	cmp	r3, #0
 810893e:	d01b      	beq.n	8108978 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8108940:	687b      	ldr	r3, [r7, #4]
 8108942:	681b      	ldr	r3, [r3, #0]
 8108944:	f06f 0202 	mvn.w	r2, #2
 8108948:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 810894a:	687b      	ldr	r3, [r7, #4]
 810894c:	2201      	movs	r2, #1
 810894e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8108950:	687b      	ldr	r3, [r7, #4]
 8108952:	681b      	ldr	r3, [r3, #0]
 8108954:	699b      	ldr	r3, [r3, #24]
 8108956:	f003 0303 	and.w	r3, r3, #3
 810895a:	2b00      	cmp	r3, #0
 810895c:	d003      	beq.n	8108966 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 810895e:	6878      	ldr	r0, [r7, #4]
 8108960:	f000 f8e9 	bl	8108b36 <HAL_TIM_IC_CaptureCallback>
 8108964:	e005      	b.n	8108972 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8108966:	6878      	ldr	r0, [r7, #4]
 8108968:	f000 f8db 	bl	8108b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 810896c:	6878      	ldr	r0, [r7, #4]
 810896e:	f000 f8ec 	bl	8108b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108972:	687b      	ldr	r3, [r7, #4]
 8108974:	2200      	movs	r2, #0
 8108976:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8108978:	68bb      	ldr	r3, [r7, #8]
 810897a:	f003 0304 	and.w	r3, r3, #4
 810897e:	2b00      	cmp	r3, #0
 8108980:	d020      	beq.n	81089c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8108982:	68fb      	ldr	r3, [r7, #12]
 8108984:	f003 0304 	and.w	r3, r3, #4
 8108988:	2b00      	cmp	r3, #0
 810898a:	d01b      	beq.n	81089c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 810898c:	687b      	ldr	r3, [r7, #4]
 810898e:	681b      	ldr	r3, [r3, #0]
 8108990:	f06f 0204 	mvn.w	r2, #4
 8108994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8108996:	687b      	ldr	r3, [r7, #4]
 8108998:	2202      	movs	r2, #2
 810899a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810899c:	687b      	ldr	r3, [r7, #4]
 810899e:	681b      	ldr	r3, [r3, #0]
 81089a0:	699b      	ldr	r3, [r3, #24]
 81089a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81089a6:	2b00      	cmp	r3, #0
 81089a8:	d003      	beq.n	81089b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81089aa:	6878      	ldr	r0, [r7, #4]
 81089ac:	f000 f8c3 	bl	8108b36 <HAL_TIM_IC_CaptureCallback>
 81089b0:	e005      	b.n	81089be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81089b2:	6878      	ldr	r0, [r7, #4]
 81089b4:	f000 f8b5 	bl	8108b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81089b8:	6878      	ldr	r0, [r7, #4]
 81089ba:	f000 f8c6 	bl	8108b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81089be:	687b      	ldr	r3, [r7, #4]
 81089c0:	2200      	movs	r2, #0
 81089c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 81089c4:	68bb      	ldr	r3, [r7, #8]
 81089c6:	f003 0308 	and.w	r3, r3, #8
 81089ca:	2b00      	cmp	r3, #0
 81089cc:	d020      	beq.n	8108a10 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 81089ce:	68fb      	ldr	r3, [r7, #12]
 81089d0:	f003 0308 	and.w	r3, r3, #8
 81089d4:	2b00      	cmp	r3, #0
 81089d6:	d01b      	beq.n	8108a10 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 81089d8:	687b      	ldr	r3, [r7, #4]
 81089da:	681b      	ldr	r3, [r3, #0]
 81089dc:	f06f 0208 	mvn.w	r2, #8
 81089e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81089e2:	687b      	ldr	r3, [r7, #4]
 81089e4:	2204      	movs	r2, #4
 81089e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81089e8:	687b      	ldr	r3, [r7, #4]
 81089ea:	681b      	ldr	r3, [r3, #0]
 81089ec:	69db      	ldr	r3, [r3, #28]
 81089ee:	f003 0303 	and.w	r3, r3, #3
 81089f2:	2b00      	cmp	r3, #0
 81089f4:	d003      	beq.n	81089fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81089f6:	6878      	ldr	r0, [r7, #4]
 81089f8:	f000 f89d 	bl	8108b36 <HAL_TIM_IC_CaptureCallback>
 81089fc:	e005      	b.n	8108a0a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81089fe:	6878      	ldr	r0, [r7, #4]
 8108a00:	f000 f88f 	bl	8108b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108a04:	6878      	ldr	r0, [r7, #4]
 8108a06:	f000 f8a0 	bl	8108b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108a0a:	687b      	ldr	r3, [r7, #4]
 8108a0c:	2200      	movs	r2, #0
 8108a0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8108a10:	68bb      	ldr	r3, [r7, #8]
 8108a12:	f003 0310 	and.w	r3, r3, #16
 8108a16:	2b00      	cmp	r3, #0
 8108a18:	d020      	beq.n	8108a5c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8108a1a:	68fb      	ldr	r3, [r7, #12]
 8108a1c:	f003 0310 	and.w	r3, r3, #16
 8108a20:	2b00      	cmp	r3, #0
 8108a22:	d01b      	beq.n	8108a5c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8108a24:	687b      	ldr	r3, [r7, #4]
 8108a26:	681b      	ldr	r3, [r3, #0]
 8108a28:	f06f 0210 	mvn.w	r2, #16
 8108a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8108a2e:	687b      	ldr	r3, [r7, #4]
 8108a30:	2208      	movs	r2, #8
 8108a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8108a34:	687b      	ldr	r3, [r7, #4]
 8108a36:	681b      	ldr	r3, [r3, #0]
 8108a38:	69db      	ldr	r3, [r3, #28]
 8108a3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8108a3e:	2b00      	cmp	r3, #0
 8108a40:	d003      	beq.n	8108a4a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8108a42:	6878      	ldr	r0, [r7, #4]
 8108a44:	f000 f877 	bl	8108b36 <HAL_TIM_IC_CaptureCallback>
 8108a48:	e005      	b.n	8108a56 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8108a4a:	6878      	ldr	r0, [r7, #4]
 8108a4c:	f000 f869 	bl	8108b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8108a50:	6878      	ldr	r0, [r7, #4]
 8108a52:	f000 f87a 	bl	8108b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8108a56:	687b      	ldr	r3, [r7, #4]
 8108a58:	2200      	movs	r2, #0
 8108a5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8108a5c:	68bb      	ldr	r3, [r7, #8]
 8108a5e:	f003 0301 	and.w	r3, r3, #1
 8108a62:	2b00      	cmp	r3, #0
 8108a64:	d00c      	beq.n	8108a80 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8108a66:	68fb      	ldr	r3, [r7, #12]
 8108a68:	f003 0301 	and.w	r3, r3, #1
 8108a6c:	2b00      	cmp	r3, #0
 8108a6e:	d007      	beq.n	8108a80 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8108a70:	687b      	ldr	r3, [r7, #4]
 8108a72:	681b      	ldr	r3, [r3, #0]
 8108a74:	f06f 0201 	mvn.w	r2, #1
 8108a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8108a7a:	6878      	ldr	r0, [r7, #4]
 8108a7c:	f7f9 fbbe 	bl	81021fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8108a80:	68bb      	ldr	r3, [r7, #8]
 8108a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108a86:	2b00      	cmp	r3, #0
 8108a88:	d104      	bne.n	8108a94 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8108a8a:	68bb      	ldr	r3, [r7, #8]
 8108a8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8108a90:	2b00      	cmp	r3, #0
 8108a92:	d00c      	beq.n	8108aae <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8108a94:	68fb      	ldr	r3, [r7, #12]
 8108a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108a9a:	2b00      	cmp	r3, #0
 8108a9c:	d007      	beq.n	8108aae <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8108a9e:	687b      	ldr	r3, [r7, #4]
 8108aa0:	681b      	ldr	r3, [r3, #0]
 8108aa2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8108aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8108aa8:	6878      	ldr	r0, [r7, #4]
 8108aaa:	f000 f90d 	bl	8108cc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8108aae:	68bb      	ldr	r3, [r7, #8]
 8108ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108ab4:	2b00      	cmp	r3, #0
 8108ab6:	d00c      	beq.n	8108ad2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8108ab8:	68fb      	ldr	r3, [r7, #12]
 8108aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8108abe:	2b00      	cmp	r3, #0
 8108ac0:	d007      	beq.n	8108ad2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8108ac2:	687b      	ldr	r3, [r7, #4]
 8108ac4:	681b      	ldr	r3, [r3, #0]
 8108ac6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8108aca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8108acc:	6878      	ldr	r0, [r7, #4]
 8108ace:	f000 f905 	bl	8108cdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8108ad2:	68bb      	ldr	r3, [r7, #8]
 8108ad4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108ad8:	2b00      	cmp	r3, #0
 8108ada:	d00c      	beq.n	8108af6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8108adc:	68fb      	ldr	r3, [r7, #12]
 8108ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8108ae2:	2b00      	cmp	r3, #0
 8108ae4:	d007      	beq.n	8108af6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8108ae6:	687b      	ldr	r3, [r7, #4]
 8108ae8:	681b      	ldr	r3, [r3, #0]
 8108aea:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8108aee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8108af0:	6878      	ldr	r0, [r7, #4]
 8108af2:	f000 f834 	bl	8108b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8108af6:	68bb      	ldr	r3, [r7, #8]
 8108af8:	f003 0320 	and.w	r3, r3, #32
 8108afc:	2b00      	cmp	r3, #0
 8108afe:	d00c      	beq.n	8108b1a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8108b00:	68fb      	ldr	r3, [r7, #12]
 8108b02:	f003 0320 	and.w	r3, r3, #32
 8108b06:	2b00      	cmp	r3, #0
 8108b08:	d007      	beq.n	8108b1a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8108b0a:	687b      	ldr	r3, [r7, #4]
 8108b0c:	681b      	ldr	r3, [r3, #0]
 8108b0e:	f06f 0220 	mvn.w	r2, #32
 8108b12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8108b14:	6878      	ldr	r0, [r7, #4]
 8108b16:	f000 f8cd 	bl	8108cb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8108b1a:	bf00      	nop
 8108b1c:	3710      	adds	r7, #16
 8108b1e:	46bd      	mov	sp, r7
 8108b20:	bd80      	pop	{r7, pc}

08108b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8108b22:	b480      	push	{r7}
 8108b24:	b083      	sub	sp, #12
 8108b26:	af00      	add	r7, sp, #0
 8108b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8108b2a:	bf00      	nop
 8108b2c:	370c      	adds	r7, #12
 8108b2e:	46bd      	mov	sp, r7
 8108b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b34:	4770      	bx	lr

08108b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8108b36:	b480      	push	{r7}
 8108b38:	b083      	sub	sp, #12
 8108b3a:	af00      	add	r7, sp, #0
 8108b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8108b3e:	bf00      	nop
 8108b40:	370c      	adds	r7, #12
 8108b42:	46bd      	mov	sp, r7
 8108b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b48:	4770      	bx	lr

08108b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8108b4a:	b480      	push	{r7}
 8108b4c:	b083      	sub	sp, #12
 8108b4e:	af00      	add	r7, sp, #0
 8108b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8108b52:	bf00      	nop
 8108b54:	370c      	adds	r7, #12
 8108b56:	46bd      	mov	sp, r7
 8108b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b5c:	4770      	bx	lr

08108b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8108b5e:	b480      	push	{r7}
 8108b60:	b083      	sub	sp, #12
 8108b62:	af00      	add	r7, sp, #0
 8108b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8108b66:	bf00      	nop
 8108b68:	370c      	adds	r7, #12
 8108b6a:	46bd      	mov	sp, r7
 8108b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108b70:	4770      	bx	lr
	...

08108b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8108b74:	b480      	push	{r7}
 8108b76:	b085      	sub	sp, #20
 8108b78:	af00      	add	r7, sp, #0
 8108b7a:	6078      	str	r0, [r7, #4]
 8108b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8108b7e:	687b      	ldr	r3, [r7, #4]
 8108b80:	681b      	ldr	r3, [r3, #0]
 8108b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8108b84:	687b      	ldr	r3, [r7, #4]
 8108b86:	4a43      	ldr	r2, [pc, #268]	@ (8108c94 <TIM_Base_SetConfig+0x120>)
 8108b88:	4293      	cmp	r3, r2
 8108b8a:	d013      	beq.n	8108bb4 <TIM_Base_SetConfig+0x40>
 8108b8c:	687b      	ldr	r3, [r7, #4]
 8108b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108b92:	d00f      	beq.n	8108bb4 <TIM_Base_SetConfig+0x40>
 8108b94:	687b      	ldr	r3, [r7, #4]
 8108b96:	4a40      	ldr	r2, [pc, #256]	@ (8108c98 <TIM_Base_SetConfig+0x124>)
 8108b98:	4293      	cmp	r3, r2
 8108b9a:	d00b      	beq.n	8108bb4 <TIM_Base_SetConfig+0x40>
 8108b9c:	687b      	ldr	r3, [r7, #4]
 8108b9e:	4a3f      	ldr	r2, [pc, #252]	@ (8108c9c <TIM_Base_SetConfig+0x128>)
 8108ba0:	4293      	cmp	r3, r2
 8108ba2:	d007      	beq.n	8108bb4 <TIM_Base_SetConfig+0x40>
 8108ba4:	687b      	ldr	r3, [r7, #4]
 8108ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8108ca0 <TIM_Base_SetConfig+0x12c>)
 8108ba8:	4293      	cmp	r3, r2
 8108baa:	d003      	beq.n	8108bb4 <TIM_Base_SetConfig+0x40>
 8108bac:	687b      	ldr	r3, [r7, #4]
 8108bae:	4a3d      	ldr	r2, [pc, #244]	@ (8108ca4 <TIM_Base_SetConfig+0x130>)
 8108bb0:	4293      	cmp	r3, r2
 8108bb2:	d108      	bne.n	8108bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8108bb4:	68fb      	ldr	r3, [r7, #12]
 8108bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8108bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8108bbc:	683b      	ldr	r3, [r7, #0]
 8108bbe:	685b      	ldr	r3, [r3, #4]
 8108bc0:	68fa      	ldr	r2, [r7, #12]
 8108bc2:	4313      	orrs	r3, r2
 8108bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8108bc6:	687b      	ldr	r3, [r7, #4]
 8108bc8:	4a32      	ldr	r2, [pc, #200]	@ (8108c94 <TIM_Base_SetConfig+0x120>)
 8108bca:	4293      	cmp	r3, r2
 8108bcc:	d01f      	beq.n	8108c0e <TIM_Base_SetConfig+0x9a>
 8108bce:	687b      	ldr	r3, [r7, #4]
 8108bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8108bd4:	d01b      	beq.n	8108c0e <TIM_Base_SetConfig+0x9a>
 8108bd6:	687b      	ldr	r3, [r7, #4]
 8108bd8:	4a2f      	ldr	r2, [pc, #188]	@ (8108c98 <TIM_Base_SetConfig+0x124>)
 8108bda:	4293      	cmp	r3, r2
 8108bdc:	d017      	beq.n	8108c0e <TIM_Base_SetConfig+0x9a>
 8108bde:	687b      	ldr	r3, [r7, #4]
 8108be0:	4a2e      	ldr	r2, [pc, #184]	@ (8108c9c <TIM_Base_SetConfig+0x128>)
 8108be2:	4293      	cmp	r3, r2
 8108be4:	d013      	beq.n	8108c0e <TIM_Base_SetConfig+0x9a>
 8108be6:	687b      	ldr	r3, [r7, #4]
 8108be8:	4a2d      	ldr	r2, [pc, #180]	@ (8108ca0 <TIM_Base_SetConfig+0x12c>)
 8108bea:	4293      	cmp	r3, r2
 8108bec:	d00f      	beq.n	8108c0e <TIM_Base_SetConfig+0x9a>
 8108bee:	687b      	ldr	r3, [r7, #4]
 8108bf0:	4a2c      	ldr	r2, [pc, #176]	@ (8108ca4 <TIM_Base_SetConfig+0x130>)
 8108bf2:	4293      	cmp	r3, r2
 8108bf4:	d00b      	beq.n	8108c0e <TIM_Base_SetConfig+0x9a>
 8108bf6:	687b      	ldr	r3, [r7, #4]
 8108bf8:	4a2b      	ldr	r2, [pc, #172]	@ (8108ca8 <TIM_Base_SetConfig+0x134>)
 8108bfa:	4293      	cmp	r3, r2
 8108bfc:	d007      	beq.n	8108c0e <TIM_Base_SetConfig+0x9a>
 8108bfe:	687b      	ldr	r3, [r7, #4]
 8108c00:	4a2a      	ldr	r2, [pc, #168]	@ (8108cac <TIM_Base_SetConfig+0x138>)
 8108c02:	4293      	cmp	r3, r2
 8108c04:	d003      	beq.n	8108c0e <TIM_Base_SetConfig+0x9a>
 8108c06:	687b      	ldr	r3, [r7, #4]
 8108c08:	4a29      	ldr	r2, [pc, #164]	@ (8108cb0 <TIM_Base_SetConfig+0x13c>)
 8108c0a:	4293      	cmp	r3, r2
 8108c0c:	d108      	bne.n	8108c20 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8108c0e:	68fb      	ldr	r3, [r7, #12]
 8108c10:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8108c14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8108c16:	683b      	ldr	r3, [r7, #0]
 8108c18:	68db      	ldr	r3, [r3, #12]
 8108c1a:	68fa      	ldr	r2, [r7, #12]
 8108c1c:	4313      	orrs	r3, r2
 8108c1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8108c20:	68fb      	ldr	r3, [r7, #12]
 8108c22:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8108c26:	683b      	ldr	r3, [r7, #0]
 8108c28:	695b      	ldr	r3, [r3, #20]
 8108c2a:	4313      	orrs	r3, r2
 8108c2c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8108c2e:	683b      	ldr	r3, [r7, #0]
 8108c30:	689a      	ldr	r2, [r3, #8]
 8108c32:	687b      	ldr	r3, [r7, #4]
 8108c34:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8108c36:	683b      	ldr	r3, [r7, #0]
 8108c38:	681a      	ldr	r2, [r3, #0]
 8108c3a:	687b      	ldr	r3, [r7, #4]
 8108c3c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8108c3e:	687b      	ldr	r3, [r7, #4]
 8108c40:	4a14      	ldr	r2, [pc, #80]	@ (8108c94 <TIM_Base_SetConfig+0x120>)
 8108c42:	4293      	cmp	r3, r2
 8108c44:	d00f      	beq.n	8108c66 <TIM_Base_SetConfig+0xf2>
 8108c46:	687b      	ldr	r3, [r7, #4]
 8108c48:	4a16      	ldr	r2, [pc, #88]	@ (8108ca4 <TIM_Base_SetConfig+0x130>)
 8108c4a:	4293      	cmp	r3, r2
 8108c4c:	d00b      	beq.n	8108c66 <TIM_Base_SetConfig+0xf2>
 8108c4e:	687b      	ldr	r3, [r7, #4]
 8108c50:	4a15      	ldr	r2, [pc, #84]	@ (8108ca8 <TIM_Base_SetConfig+0x134>)
 8108c52:	4293      	cmp	r3, r2
 8108c54:	d007      	beq.n	8108c66 <TIM_Base_SetConfig+0xf2>
 8108c56:	687b      	ldr	r3, [r7, #4]
 8108c58:	4a14      	ldr	r2, [pc, #80]	@ (8108cac <TIM_Base_SetConfig+0x138>)
 8108c5a:	4293      	cmp	r3, r2
 8108c5c:	d003      	beq.n	8108c66 <TIM_Base_SetConfig+0xf2>
 8108c5e:	687b      	ldr	r3, [r7, #4]
 8108c60:	4a13      	ldr	r2, [pc, #76]	@ (8108cb0 <TIM_Base_SetConfig+0x13c>)
 8108c62:	4293      	cmp	r3, r2
 8108c64:	d103      	bne.n	8108c6e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8108c66:	683b      	ldr	r3, [r7, #0]
 8108c68:	691a      	ldr	r2, [r3, #16]
 8108c6a:	687b      	ldr	r3, [r7, #4]
 8108c6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8108c6e:	687b      	ldr	r3, [r7, #4]
 8108c70:	681b      	ldr	r3, [r3, #0]
 8108c72:	f043 0204 	orr.w	r2, r3, #4
 8108c76:	687b      	ldr	r3, [r7, #4]
 8108c78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8108c7a:	687b      	ldr	r3, [r7, #4]
 8108c7c:	2201      	movs	r2, #1
 8108c7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8108c80:	687b      	ldr	r3, [r7, #4]
 8108c82:	68fa      	ldr	r2, [r7, #12]
 8108c84:	601a      	str	r2, [r3, #0]
}
 8108c86:	bf00      	nop
 8108c88:	3714      	adds	r7, #20
 8108c8a:	46bd      	mov	sp, r7
 8108c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108c90:	4770      	bx	lr
 8108c92:	bf00      	nop
 8108c94:	40010000 	.word	0x40010000
 8108c98:	40000400 	.word	0x40000400
 8108c9c:	40000800 	.word	0x40000800
 8108ca0:	40000c00 	.word	0x40000c00
 8108ca4:	40010400 	.word	0x40010400
 8108ca8:	40014000 	.word	0x40014000
 8108cac:	40014400 	.word	0x40014400
 8108cb0:	40014800 	.word	0x40014800

08108cb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8108cb4:	b480      	push	{r7}
 8108cb6:	b083      	sub	sp, #12
 8108cb8:	af00      	add	r7, sp, #0
 8108cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8108cbc:	bf00      	nop
 8108cbe:	370c      	adds	r7, #12
 8108cc0:	46bd      	mov	sp, r7
 8108cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cc6:	4770      	bx	lr

08108cc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8108cc8:	b480      	push	{r7}
 8108cca:	b083      	sub	sp, #12
 8108ccc:	af00      	add	r7, sp, #0
 8108cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8108cd0:	bf00      	nop
 8108cd2:	370c      	adds	r7, #12
 8108cd4:	46bd      	mov	sp, r7
 8108cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cda:	4770      	bx	lr

08108cdc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8108cdc:	b480      	push	{r7}
 8108cde:	b083      	sub	sp, #12
 8108ce0:	af00      	add	r7, sp, #0
 8108ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8108ce4:	bf00      	nop
 8108ce6:	370c      	adds	r7, #12
 8108ce8:	46bd      	mov	sp, r7
 8108cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108cee:	4770      	bx	lr

08108cf0 <LL_GPIO_SetPinMode>:
{
 8108cf0:	b480      	push	{r7}
 8108cf2:	b085      	sub	sp, #20
 8108cf4:	af00      	add	r7, sp, #0
 8108cf6:	60f8      	str	r0, [r7, #12]
 8108cf8:	60b9      	str	r1, [r7, #8]
 8108cfa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8108cfc:	68fb      	ldr	r3, [r7, #12]
 8108cfe:	6819      	ldr	r1, [r3, #0]
 8108d00:	68bb      	ldr	r3, [r7, #8]
 8108d02:	fb03 f203 	mul.w	r2, r3, r3
 8108d06:	4613      	mov	r3, r2
 8108d08:	005b      	lsls	r3, r3, #1
 8108d0a:	4413      	add	r3, r2
 8108d0c:	43db      	mvns	r3, r3
 8108d0e:	ea01 0203 	and.w	r2, r1, r3
 8108d12:	68bb      	ldr	r3, [r7, #8]
 8108d14:	fb03 f303 	mul.w	r3, r3, r3
 8108d18:	6879      	ldr	r1, [r7, #4]
 8108d1a:	fb01 f303 	mul.w	r3, r1, r3
 8108d1e:	431a      	orrs	r2, r3
 8108d20:	68fb      	ldr	r3, [r7, #12]
 8108d22:	601a      	str	r2, [r3, #0]
}
 8108d24:	bf00      	nop
 8108d26:	3714      	adds	r7, #20
 8108d28:	46bd      	mov	sp, r7
 8108d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d2e:	4770      	bx	lr

08108d30 <LL_GPIO_SetPinOutputType>:
{
 8108d30:	b480      	push	{r7}
 8108d32:	b085      	sub	sp, #20
 8108d34:	af00      	add	r7, sp, #0
 8108d36:	60f8      	str	r0, [r7, #12]
 8108d38:	60b9      	str	r1, [r7, #8]
 8108d3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8108d3c:	68fb      	ldr	r3, [r7, #12]
 8108d3e:	685a      	ldr	r2, [r3, #4]
 8108d40:	68bb      	ldr	r3, [r7, #8]
 8108d42:	43db      	mvns	r3, r3
 8108d44:	401a      	ands	r2, r3
 8108d46:	68bb      	ldr	r3, [r7, #8]
 8108d48:	6879      	ldr	r1, [r7, #4]
 8108d4a:	fb01 f303 	mul.w	r3, r1, r3
 8108d4e:	431a      	orrs	r2, r3
 8108d50:	68fb      	ldr	r3, [r7, #12]
 8108d52:	605a      	str	r2, [r3, #4]
}
 8108d54:	bf00      	nop
 8108d56:	3714      	adds	r7, #20
 8108d58:	46bd      	mov	sp, r7
 8108d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d5e:	4770      	bx	lr

08108d60 <LL_GPIO_SetPinSpeed>:
{
 8108d60:	b480      	push	{r7}
 8108d62:	b085      	sub	sp, #20
 8108d64:	af00      	add	r7, sp, #0
 8108d66:	60f8      	str	r0, [r7, #12]
 8108d68:	60b9      	str	r1, [r7, #8]
 8108d6a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8108d6c:	68fb      	ldr	r3, [r7, #12]
 8108d6e:	6899      	ldr	r1, [r3, #8]
 8108d70:	68bb      	ldr	r3, [r7, #8]
 8108d72:	fb03 f203 	mul.w	r2, r3, r3
 8108d76:	4613      	mov	r3, r2
 8108d78:	005b      	lsls	r3, r3, #1
 8108d7a:	4413      	add	r3, r2
 8108d7c:	43db      	mvns	r3, r3
 8108d7e:	ea01 0203 	and.w	r2, r1, r3
 8108d82:	68bb      	ldr	r3, [r7, #8]
 8108d84:	fb03 f303 	mul.w	r3, r3, r3
 8108d88:	6879      	ldr	r1, [r7, #4]
 8108d8a:	fb01 f303 	mul.w	r3, r1, r3
 8108d8e:	431a      	orrs	r2, r3
 8108d90:	68fb      	ldr	r3, [r7, #12]
 8108d92:	609a      	str	r2, [r3, #8]
}
 8108d94:	bf00      	nop
 8108d96:	3714      	adds	r7, #20
 8108d98:	46bd      	mov	sp, r7
 8108d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108d9e:	4770      	bx	lr

08108da0 <LL_GPIO_SetPinPull>:
{
 8108da0:	b480      	push	{r7}
 8108da2:	b085      	sub	sp, #20
 8108da4:	af00      	add	r7, sp, #0
 8108da6:	60f8      	str	r0, [r7, #12]
 8108da8:	60b9      	str	r1, [r7, #8]
 8108daa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8108dac:	68fb      	ldr	r3, [r7, #12]
 8108dae:	68d9      	ldr	r1, [r3, #12]
 8108db0:	68bb      	ldr	r3, [r7, #8]
 8108db2:	fb03 f203 	mul.w	r2, r3, r3
 8108db6:	4613      	mov	r3, r2
 8108db8:	005b      	lsls	r3, r3, #1
 8108dba:	4413      	add	r3, r2
 8108dbc:	43db      	mvns	r3, r3
 8108dbe:	ea01 0203 	and.w	r2, r1, r3
 8108dc2:	68bb      	ldr	r3, [r7, #8]
 8108dc4:	fb03 f303 	mul.w	r3, r3, r3
 8108dc8:	6879      	ldr	r1, [r7, #4]
 8108dca:	fb01 f303 	mul.w	r3, r1, r3
 8108dce:	431a      	orrs	r2, r3
 8108dd0:	68fb      	ldr	r3, [r7, #12]
 8108dd2:	60da      	str	r2, [r3, #12]
}
 8108dd4:	bf00      	nop
 8108dd6:	3714      	adds	r7, #20
 8108dd8:	46bd      	mov	sp, r7
 8108dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108dde:	4770      	bx	lr

08108de0 <LL_GPIO_SetAFPin_0_7>:
{
 8108de0:	b480      	push	{r7}
 8108de2:	b085      	sub	sp, #20
 8108de4:	af00      	add	r7, sp, #0
 8108de6:	60f8      	str	r0, [r7, #12]
 8108de8:	60b9      	str	r1, [r7, #8]
 8108dea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8108dec:	68fb      	ldr	r3, [r7, #12]
 8108dee:	6a19      	ldr	r1, [r3, #32]
 8108df0:	68bb      	ldr	r3, [r7, #8]
 8108df2:	fb03 f303 	mul.w	r3, r3, r3
 8108df6:	68ba      	ldr	r2, [r7, #8]
 8108df8:	fb02 f303 	mul.w	r3, r2, r3
 8108dfc:	68ba      	ldr	r2, [r7, #8]
 8108dfe:	fb03 f202 	mul.w	r2, r3, r2
 8108e02:	4613      	mov	r3, r2
 8108e04:	011b      	lsls	r3, r3, #4
 8108e06:	1a9b      	subs	r3, r3, r2
 8108e08:	43db      	mvns	r3, r3
 8108e0a:	ea01 0203 	and.w	r2, r1, r3
 8108e0e:	68bb      	ldr	r3, [r7, #8]
 8108e10:	fb03 f303 	mul.w	r3, r3, r3
 8108e14:	68b9      	ldr	r1, [r7, #8]
 8108e16:	fb01 f303 	mul.w	r3, r1, r3
 8108e1a:	68b9      	ldr	r1, [r7, #8]
 8108e1c:	fb01 f303 	mul.w	r3, r1, r3
 8108e20:	6879      	ldr	r1, [r7, #4]
 8108e22:	fb01 f303 	mul.w	r3, r1, r3
 8108e26:	431a      	orrs	r2, r3
 8108e28:	68fb      	ldr	r3, [r7, #12]
 8108e2a:	621a      	str	r2, [r3, #32]
}
 8108e2c:	bf00      	nop
 8108e2e:	3714      	adds	r7, #20
 8108e30:	46bd      	mov	sp, r7
 8108e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108e36:	4770      	bx	lr

08108e38 <LL_GPIO_SetAFPin_8_15>:
{
 8108e38:	b480      	push	{r7}
 8108e3a:	b085      	sub	sp, #20
 8108e3c:	af00      	add	r7, sp, #0
 8108e3e:	60f8      	str	r0, [r7, #12]
 8108e40:	60b9      	str	r1, [r7, #8]
 8108e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8108e44:	68fb      	ldr	r3, [r7, #12]
 8108e46:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8108e48:	68bb      	ldr	r3, [r7, #8]
 8108e4a:	0a1b      	lsrs	r3, r3, #8
 8108e4c:	68ba      	ldr	r2, [r7, #8]
 8108e4e:	0a12      	lsrs	r2, r2, #8
 8108e50:	fb02 f303 	mul.w	r3, r2, r3
 8108e54:	68ba      	ldr	r2, [r7, #8]
 8108e56:	0a12      	lsrs	r2, r2, #8
 8108e58:	fb02 f303 	mul.w	r3, r2, r3
 8108e5c:	68ba      	ldr	r2, [r7, #8]
 8108e5e:	0a12      	lsrs	r2, r2, #8
 8108e60:	fb03 f202 	mul.w	r2, r3, r2
 8108e64:	4613      	mov	r3, r2
 8108e66:	011b      	lsls	r3, r3, #4
 8108e68:	1a9b      	subs	r3, r3, r2
 8108e6a:	43db      	mvns	r3, r3
 8108e6c:	ea01 0203 	and.w	r2, r1, r3
 8108e70:	68bb      	ldr	r3, [r7, #8]
 8108e72:	0a1b      	lsrs	r3, r3, #8
 8108e74:	68b9      	ldr	r1, [r7, #8]
 8108e76:	0a09      	lsrs	r1, r1, #8
 8108e78:	fb01 f303 	mul.w	r3, r1, r3
 8108e7c:	68b9      	ldr	r1, [r7, #8]
 8108e7e:	0a09      	lsrs	r1, r1, #8
 8108e80:	fb01 f303 	mul.w	r3, r1, r3
 8108e84:	68b9      	ldr	r1, [r7, #8]
 8108e86:	0a09      	lsrs	r1, r1, #8
 8108e88:	fb01 f303 	mul.w	r3, r1, r3
 8108e8c:	6879      	ldr	r1, [r7, #4]
 8108e8e:	fb01 f303 	mul.w	r3, r1, r3
 8108e92:	431a      	orrs	r2, r3
 8108e94:	68fb      	ldr	r3, [r7, #12]
 8108e96:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8108e98:	bf00      	nop
 8108e9a:	3714      	adds	r7, #20
 8108e9c:	46bd      	mov	sp, r7
 8108e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108ea2:	4770      	bx	lr

08108ea4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8108ea4:	b580      	push	{r7, lr}
 8108ea6:	b088      	sub	sp, #32
 8108ea8:	af00      	add	r7, sp, #0
 8108eaa:	6078      	str	r0, [r7, #4]
 8108eac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8108eae:	683b      	ldr	r3, [r7, #0]
 8108eb0:	681b      	ldr	r3, [r3, #0]
 8108eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8108eb4:	693b      	ldr	r3, [r7, #16]
 8108eb6:	fa93 f3a3 	rbit	r3, r3
 8108eba:	60fb      	str	r3, [r7, #12]
  return result;
 8108ebc:	68fb      	ldr	r3, [r7, #12]
 8108ebe:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8108ec0:	697b      	ldr	r3, [r7, #20]
 8108ec2:	2b00      	cmp	r3, #0
 8108ec4:	d101      	bne.n	8108eca <LL_GPIO_Init+0x26>
    return 32U;
 8108ec6:	2320      	movs	r3, #32
 8108ec8:	e003      	b.n	8108ed2 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8108eca:	697b      	ldr	r3, [r7, #20]
 8108ecc:	fab3 f383 	clz	r3, r3
 8108ed0:	b2db      	uxtb	r3, r3
 8108ed2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8108ed4:	e048      	b.n	8108f68 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8108ed6:	683b      	ldr	r3, [r7, #0]
 8108ed8:	681a      	ldr	r2, [r3, #0]
 8108eda:	2101      	movs	r1, #1
 8108edc:	69fb      	ldr	r3, [r7, #28]
 8108ede:	fa01 f303 	lsl.w	r3, r1, r3
 8108ee2:	4013      	ands	r3, r2
 8108ee4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8108ee6:	69bb      	ldr	r3, [r7, #24]
 8108ee8:	2b00      	cmp	r3, #0
 8108eea:	d03a      	beq.n	8108f62 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8108eec:	683b      	ldr	r3, [r7, #0]
 8108eee:	685b      	ldr	r3, [r3, #4]
 8108ef0:	2b01      	cmp	r3, #1
 8108ef2:	d003      	beq.n	8108efc <LL_GPIO_Init+0x58>
 8108ef4:	683b      	ldr	r3, [r7, #0]
 8108ef6:	685b      	ldr	r3, [r3, #4]
 8108ef8:	2b02      	cmp	r3, #2
 8108efa:	d10e      	bne.n	8108f1a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8108efc:	683b      	ldr	r3, [r7, #0]
 8108efe:	689b      	ldr	r3, [r3, #8]
 8108f00:	461a      	mov	r2, r3
 8108f02:	69b9      	ldr	r1, [r7, #24]
 8108f04:	6878      	ldr	r0, [r7, #4]
 8108f06:	f7ff ff2b 	bl	8108d60 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8108f0a:	683b      	ldr	r3, [r7, #0]
 8108f0c:	6819      	ldr	r1, [r3, #0]
 8108f0e:	683b      	ldr	r3, [r7, #0]
 8108f10:	68db      	ldr	r3, [r3, #12]
 8108f12:	461a      	mov	r2, r3
 8108f14:	6878      	ldr	r0, [r7, #4]
 8108f16:	f7ff ff0b 	bl	8108d30 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8108f1a:	683b      	ldr	r3, [r7, #0]
 8108f1c:	691b      	ldr	r3, [r3, #16]
 8108f1e:	461a      	mov	r2, r3
 8108f20:	69b9      	ldr	r1, [r7, #24]
 8108f22:	6878      	ldr	r0, [r7, #4]
 8108f24:	f7ff ff3c 	bl	8108da0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8108f28:	683b      	ldr	r3, [r7, #0]
 8108f2a:	685b      	ldr	r3, [r3, #4]
 8108f2c:	2b02      	cmp	r3, #2
 8108f2e:	d111      	bne.n	8108f54 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8108f30:	69bb      	ldr	r3, [r7, #24]
 8108f32:	2bff      	cmp	r3, #255	@ 0xff
 8108f34:	d807      	bhi.n	8108f46 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8108f36:	683b      	ldr	r3, [r7, #0]
 8108f38:	695b      	ldr	r3, [r3, #20]
 8108f3a:	461a      	mov	r2, r3
 8108f3c:	69b9      	ldr	r1, [r7, #24]
 8108f3e:	6878      	ldr	r0, [r7, #4]
 8108f40:	f7ff ff4e 	bl	8108de0 <LL_GPIO_SetAFPin_0_7>
 8108f44:	e006      	b.n	8108f54 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8108f46:	683b      	ldr	r3, [r7, #0]
 8108f48:	695b      	ldr	r3, [r3, #20]
 8108f4a:	461a      	mov	r2, r3
 8108f4c:	69b9      	ldr	r1, [r7, #24]
 8108f4e:	6878      	ldr	r0, [r7, #4]
 8108f50:	f7ff ff72 	bl	8108e38 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8108f54:	683b      	ldr	r3, [r7, #0]
 8108f56:	685b      	ldr	r3, [r3, #4]
 8108f58:	461a      	mov	r2, r3
 8108f5a:	69b9      	ldr	r1, [r7, #24]
 8108f5c:	6878      	ldr	r0, [r7, #4]
 8108f5e:	f7ff fec7 	bl	8108cf0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8108f62:	69fb      	ldr	r3, [r7, #28]
 8108f64:	3301      	adds	r3, #1
 8108f66:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8108f68:	683b      	ldr	r3, [r7, #0]
 8108f6a:	681a      	ldr	r2, [r3, #0]
 8108f6c:	69fb      	ldr	r3, [r7, #28]
 8108f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8108f72:	2b00      	cmp	r3, #0
 8108f74:	d1af      	bne.n	8108ed6 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8108f76:	2300      	movs	r3, #0
}
 8108f78:	4618      	mov	r0, r3
 8108f7a:	3720      	adds	r7, #32
 8108f7c:	46bd      	mov	sp, r7
 8108f7e:	bd80      	pop	{r7, pc}

08108f80 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 8108f80:	b480      	push	{r7}
 8108f82:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8108f84:	4b07      	ldr	r3, [pc, #28]	@ (8108fa4 <LL_RCC_HSE_IsReady+0x24>)
 8108f86:	681b      	ldr	r3, [r3, #0]
 8108f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8108f8c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8108f90:	d101      	bne.n	8108f96 <LL_RCC_HSE_IsReady+0x16>
 8108f92:	2301      	movs	r3, #1
 8108f94:	e000      	b.n	8108f98 <LL_RCC_HSE_IsReady+0x18>
 8108f96:	2300      	movs	r3, #0
}
 8108f98:	4618      	mov	r0, r3
 8108f9a:	46bd      	mov	sp, r7
 8108f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fa0:	4770      	bx	lr
 8108fa2:	bf00      	nop
 8108fa4:	58024400 	.word	0x58024400

08108fa8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8108fa8:	b480      	push	{r7}
 8108faa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8108fac:	4b06      	ldr	r3, [pc, #24]	@ (8108fc8 <LL_RCC_HSI_IsReady+0x20>)
 8108fae:	681b      	ldr	r3, [r3, #0]
 8108fb0:	f003 0304 	and.w	r3, r3, #4
 8108fb4:	2b04      	cmp	r3, #4
 8108fb6:	d101      	bne.n	8108fbc <LL_RCC_HSI_IsReady+0x14>
 8108fb8:	2301      	movs	r3, #1
 8108fba:	e000      	b.n	8108fbe <LL_RCC_HSI_IsReady+0x16>
 8108fbc:	2300      	movs	r3, #0
}
 8108fbe:	4618      	mov	r0, r3
 8108fc0:	46bd      	mov	sp, r7
 8108fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fc6:	4770      	bx	lr
 8108fc8:	58024400 	.word	0x58024400

08108fcc <LL_RCC_HSI_GetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV2
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_GetDivider(void)
{
 8108fcc:	b480      	push	{r7}
 8108fce:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8108fd0:	4b04      	ldr	r3, [pc, #16]	@ (8108fe4 <LL_RCC_HSI_GetDivider+0x18>)
 8108fd2:	681b      	ldr	r3, [r3, #0]
 8108fd4:	f003 0318 	and.w	r3, r3, #24
}
 8108fd8:	4618      	mov	r0, r3
 8108fda:	46bd      	mov	sp, r7
 8108fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8108fe0:	4770      	bx	lr
 8108fe2:	bf00      	nop
 8108fe4:	58024400 	.word	0x58024400

08108fe8 <LL_RCC_CSI_IsReady>:
  * @brief  Check if CSI clock is ready
  * @rmtoll CR           CSIRDY        LL_RCC_CSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CSI_IsReady(void)
{
 8108fe8:	b480      	push	{r7}
 8108fea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8108fec:	4b07      	ldr	r3, [pc, #28]	@ (810900c <LL_RCC_CSI_IsReady+0x24>)
 8108fee:	681b      	ldr	r3, [r3, #0]
 8108ff0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8108ff4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8108ff8:	d101      	bne.n	8108ffe <LL_RCC_CSI_IsReady+0x16>
 8108ffa:	2301      	movs	r3, #1
 8108ffc:	e000      	b.n	8109000 <LL_RCC_CSI_IsReady+0x18>
 8108ffe:	2300      	movs	r3, #0
}
 8109000:	4618      	mov	r0, r3
 8109002:	46bd      	mov	sp, r7
 8109004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109008:	4770      	bx	lr
 810900a:	bf00      	nop
 810900c:	58024400 	.word	0x58024400

08109010 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8109010:	b480      	push	{r7}
 8109012:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8109014:	4b06      	ldr	r3, [pc, #24]	@ (8109030 <LL_RCC_LSE_IsReady+0x20>)
 8109016:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8109018:	f003 0302 	and.w	r3, r3, #2
 810901c:	2b02      	cmp	r3, #2
 810901e:	d101      	bne.n	8109024 <LL_RCC_LSE_IsReady+0x14>
 8109020:	2301      	movs	r3, #1
 8109022:	e000      	b.n	8109026 <LL_RCC_LSE_IsReady+0x16>
 8109024:	2300      	movs	r3, #0
}
 8109026:	4618      	mov	r0, r3
 8109028:	46bd      	mov	sp, r7
 810902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810902e:	4770      	bx	lr
 8109030:	58024400 	.word	0x58024400

08109034 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8109034:	b480      	push	{r7}
 8109036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8109038:	4b04      	ldr	r3, [pc, #16]	@ (810904c <LL_RCC_GetSysClkSource+0x18>)
 810903a:	691b      	ldr	r3, [r3, #16]
 810903c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
}
 8109040:	4618      	mov	r0, r3
 8109042:	46bd      	mov	sp, r7
 8109044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109048:	4770      	bx	lr
 810904a:	bf00      	nop
 810904c:	58024400 	.word	0x58024400

08109050 <LL_RCC_GetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysPrescaler(void)
{
 8109050:	b480      	push	{r7}
 8109052:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_D1CPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8109054:	4b04      	ldr	r3, [pc, #16]	@ (8109068 <LL_RCC_GetSysPrescaler+0x18>)
 8109056:	699b      	ldr	r3, [r3, #24]
 8109058:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE));
#endif /* RCC_D1CFGR_D1CPRE */
}
 810905c:	4618      	mov	r0, r3
 810905e:	46bd      	mov	sp, r7
 8109060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109064:	4770      	bx	lr
 8109066:	bf00      	nop
 8109068:	58024400 	.word	0x58024400

0810906c <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_128
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 810906c:	b480      	push	{r7}
 810906e:	af00      	add	r7, sp, #0
#if defined(RCC_D1CFGR_HPRE)
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8109070:	4b04      	ldr	r3, [pc, #16]	@ (8109084 <LL_RCC_GetAHBPrescaler+0x18>)
 8109072:	699b      	ldr	r3, [r3, #24]
 8109074:	f003 030f 	and.w	r3, r3, #15
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR1, RCC_CDCFGR1_HPRE));
#endif /* RCC_D1CFGR_HPRE */
}
 8109078:	4618      	mov	r0, r3
 810907a:	46bd      	mov	sp, r7
 810907c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109080:	4770      	bx	lr
 8109082:	bf00      	nop
 8109084:	58024400 	.word	0x58024400

08109088 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8109088:	b480      	push	{r7}
 810908a:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE1)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 810908c:	4b04      	ldr	r3, [pc, #16]	@ (81090a0 <LL_RCC_GetAPB1Prescaler+0x18>)
 810908e:	69db      	ldr	r3, [r3, #28]
 8109090:	f003 0370 	and.w	r3, r3, #112	@ 0x70
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1));
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8109094:	4618      	mov	r0, r3
 8109096:	46bd      	mov	sp, r7
 8109098:	f85d 7b04 	ldr.w	r7, [sp], #4
 810909c:	4770      	bx	lr
 810909e:	bf00      	nop
 81090a0:	58024400 	.word	0x58024400

081090a4 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 81090a4:	b480      	push	{r7}
 81090a6:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 81090a8:	4b04      	ldr	r3, [pc, #16]	@ (81090bc <LL_RCC_GetAPB2Prescaler+0x18>)
 81090aa:	69db      	ldr	r3, [r3, #28]
 81090ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 81090b0:	4618      	mov	r0, r3
 81090b2:	46bd      	mov	sp, r7
 81090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81090b8:	4770      	bx	lr
 81090ba:	bf00      	nop
 81090bc:	58024400 	.word	0x58024400

081090c0 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 81090c0:	b480      	push	{r7}
 81090c2:	b085      	sub	sp, #20
 81090c4:	af00      	add	r7, sp, #0
 81090c6:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 81090c8:	687b      	ldr	r3, [r7, #4]
 81090ca:	b2da      	uxtb	r2, r3
 81090cc:	4b0e      	ldr	r3, [pc, #56]	@ (8109108 <LL_RCC_GetClockSource+0x48>)
 81090ce:	4413      	add	r3, r2
 81090d0:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 81090d2:	68fb      	ldr	r3, [r7, #12]
 81090d4:	681a      	ldr	r2, [r3, #0]
 81090d6:	687b      	ldr	r3, [r7, #4]
 81090d8:	0e19      	lsrs	r1, r3, #24
 81090da:	687b      	ldr	r3, [r7, #4]
 81090dc:	0a1b      	lsrs	r3, r3, #8
 81090de:	f003 031f 	and.w	r3, r3, #31
 81090e2:	fa01 f303 	lsl.w	r3, r1, r3
 81090e6:	401a      	ands	r2, r3
 81090e8:	687b      	ldr	r3, [r7, #4]
 81090ea:	0a1b      	lsrs	r3, r3, #8
 81090ec:	f003 031f 	and.w	r3, r3, #31
 81090f0:	fa22 f303 	lsr.w	r3, r2, r3
 81090f4:	041a      	lsls	r2, r3, #16
 81090f6:	687b      	ldr	r3, [r7, #4]
 81090f8:	4313      	orrs	r3, r2
}
 81090fa:	4618      	mov	r0, r3
 81090fc:	3714      	adds	r7, #20
 81090fe:	46bd      	mov	sp, r7
 8109100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109104:	4770      	bx	lr
 8109106:	bf00      	nop
 8109108:	5802444c 	.word	0x5802444c

0810910c <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 810910c:	b580      	push	{r7, lr}
 810910e:	b082      	sub	sp, #8
 8109110:	af00      	add	r7, sp, #0
 8109112:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8109114:	6878      	ldr	r0, [r7, #4]
 8109116:	f7ff ffd3 	bl	81090c0 <LL_RCC_GetClockSource>
 810911a:	4603      	mov	r3, r0
}
 810911c:	4618      	mov	r0, r3
 810911e:	3708      	adds	r7, #8
 8109120:	46bd      	mov	sp, r7
 8109122:	bd80      	pop	{r7, pc}

08109124 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8109124:	b480      	push	{r7}
 8109126:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8109128:	4b04      	ldr	r3, [pc, #16]	@ (810913c <LL_RCC_PLL_GetSource+0x18>)
 810912a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810912c:	f003 0303 	and.w	r3, r3, #3
}
 8109130:	4618      	mov	r0, r3
 8109132:	46bd      	mov	sp, r7
 8109134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109138:	4770      	bx	lr
 810913a:	bf00      	nop
 810913c:	58024400 	.word	0x58024400

08109140 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8109140:	b480      	push	{r7}
 8109142:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8109144:	4b07      	ldr	r3, [pc, #28]	@ (8109164 <LL_RCC_PLL1P_IsEnabled+0x24>)
 8109146:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810914c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8109150:	d101      	bne.n	8109156 <LL_RCC_PLL1P_IsEnabled+0x16>
 8109152:	2301      	movs	r3, #1
 8109154:	e000      	b.n	8109158 <LL_RCC_PLL1P_IsEnabled+0x18>
 8109156:	2300      	movs	r3, #0
}
 8109158:	4618      	mov	r0, r3
 810915a:	46bd      	mov	sp, r7
 810915c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109160:	4770      	bx	lr
 8109162:	bf00      	nop
 8109164:	58024400 	.word	0x58024400

08109168 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8109168:	b480      	push	{r7}
 810916a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 810916c:	4b07      	ldr	r3, [pc, #28]	@ (810918c <LL_RCC_PLL1Q_IsEnabled+0x24>)
 810916e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109170:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8109174:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8109178:	d101      	bne.n	810917e <LL_RCC_PLL1Q_IsEnabled+0x16>
 810917a:	2301      	movs	r3, #1
 810917c:	e000      	b.n	8109180 <LL_RCC_PLL1Q_IsEnabled+0x18>
 810917e:	2300      	movs	r3, #0
}
 8109180:	4618      	mov	r0, r3
 8109182:	46bd      	mov	sp, r7
 8109184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109188:	4770      	bx	lr
 810918a:	bf00      	nop
 810918c:	58024400 	.word	0x58024400

08109190 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8109190:	b480      	push	{r7}
 8109192:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8109194:	4b07      	ldr	r3, [pc, #28]	@ (81091b4 <LL_RCC_PLL1R_IsEnabled+0x24>)
 8109196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109198:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810919c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 81091a0:	d101      	bne.n	81091a6 <LL_RCC_PLL1R_IsEnabled+0x16>
 81091a2:	2301      	movs	r3, #1
 81091a4:	e000      	b.n	81091a8 <LL_RCC_PLL1R_IsEnabled+0x18>
 81091a6:	2300      	movs	r3, #0
}
 81091a8:	4618      	mov	r0, r3
 81091aa:	46bd      	mov	sp, r7
 81091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091b0:	4770      	bx	lr
 81091b2:	bf00      	nop
 81091b4:	58024400 	.word	0x58024400

081091b8 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 81091b8:	b480      	push	{r7}
 81091ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 81091bc:	4b06      	ldr	r3, [pc, #24]	@ (81091d8 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 81091be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81091c0:	f003 0301 	and.w	r3, r3, #1
 81091c4:	2b01      	cmp	r3, #1
 81091c6:	d101      	bne.n	81091cc <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 81091c8:	2301      	movs	r3, #1
 81091ca:	e000      	b.n	81091ce <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 81091cc:	2300      	movs	r3, #0
}
 81091ce:	4618      	mov	r0, r3
 81091d0:	46bd      	mov	sp, r7
 81091d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091d6:	4770      	bx	lr
 81091d8:	58024400 	.word	0x58024400

081091dc <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 81091dc:	b480      	push	{r7}
 81091de:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 81091e0:	4b04      	ldr	r3, [pc, #16]	@ (81091f4 <LL_RCC_PLL1_GetN+0x18>)
 81091e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81091e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81091e8:	3301      	adds	r3, #1
}
 81091ea:	4618      	mov	r0, r3
 81091ec:	46bd      	mov	sp, r7
 81091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81091f2:	4770      	bx	lr
 81091f4:	58024400 	.word	0x58024400

081091f8 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 81091f8:	b480      	push	{r7}
 81091fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 81091fc:	4b04      	ldr	r3, [pc, #16]	@ (8109210 <LL_RCC_PLL1_GetM+0x18>)
 81091fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109200:	091b      	lsrs	r3, r3, #4
 8109202:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 8109206:	4618      	mov	r0, r3
 8109208:	46bd      	mov	sp, r7
 810920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810920e:	4770      	bx	lr
 8109210:	58024400 	.word	0x58024400

08109214 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 8109214:	b480      	push	{r7}
 8109216:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 8109218:	4b05      	ldr	r3, [pc, #20]	@ (8109230 <LL_RCC_PLL1_GetP+0x1c>)
 810921a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810921c:	0a5b      	lsrs	r3, r3, #9
 810921e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109222:	3301      	adds	r3, #1
}
 8109224:	4618      	mov	r0, r3
 8109226:	46bd      	mov	sp, r7
 8109228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810922c:	4770      	bx	lr
 810922e:	bf00      	nop
 8109230:	58024400 	.word	0x58024400

08109234 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8109234:	b480      	push	{r7}
 8109236:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8109238:	4b05      	ldr	r3, [pc, #20]	@ (8109250 <LL_RCC_PLL1_GetQ+0x1c>)
 810923a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810923c:	0c1b      	lsrs	r3, r3, #16
 810923e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109242:	3301      	adds	r3, #1
}
 8109244:	4618      	mov	r0, r3
 8109246:	46bd      	mov	sp, r7
 8109248:	f85d 7b04 	ldr.w	r7, [sp], #4
 810924c:	4770      	bx	lr
 810924e:	bf00      	nop
 8109250:	58024400 	.word	0x58024400

08109254 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8109254:	b480      	push	{r7}
 8109256:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8109258:	4b05      	ldr	r3, [pc, #20]	@ (8109270 <LL_RCC_PLL1_GetR+0x1c>)
 810925a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810925c:	0e1b      	lsrs	r3, r3, #24
 810925e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109262:	3301      	adds	r3, #1
}
 8109264:	4618      	mov	r0, r3
 8109266:	46bd      	mov	sp, r7
 8109268:	f85d 7b04 	ldr.w	r7, [sp], #4
 810926c:	4770      	bx	lr
 810926e:	bf00      	nop
 8109270:	58024400 	.word	0x58024400

08109274 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8109274:	b480      	push	{r7}
 8109276:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8109278:	4b04      	ldr	r3, [pc, #16]	@ (810928c <LL_RCC_PLL1_GetFRACN+0x18>)
 810927a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810927c:	08db      	lsrs	r3, r3, #3
 810927e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8109282:	4618      	mov	r0, r3
 8109284:	46bd      	mov	sp, r7
 8109286:	f85d 7b04 	ldr.w	r7, [sp], #4
 810928a:	4770      	bx	lr
 810928c:	58024400 	.word	0x58024400

08109290 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8109290:	b480      	push	{r7}
 8109292:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8109294:	4b07      	ldr	r3, [pc, #28]	@ (81092b4 <LL_RCC_PLL2_IsReady+0x24>)
 8109296:	681b      	ldr	r3, [r3, #0]
 8109298:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810929c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 81092a0:	d101      	bne.n	81092a6 <LL_RCC_PLL2_IsReady+0x16>
 81092a2:	2301      	movs	r3, #1
 81092a4:	e000      	b.n	81092a8 <LL_RCC_PLL2_IsReady+0x18>
 81092a6:	2300      	movs	r3, #0
}
 81092a8:	4618      	mov	r0, r3
 81092aa:	46bd      	mov	sp, r7
 81092ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092b0:	4770      	bx	lr
 81092b2:	bf00      	nop
 81092b4:	58024400 	.word	0x58024400

081092b8 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 81092b8:	b480      	push	{r7}
 81092ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 81092bc:	4b07      	ldr	r3, [pc, #28]	@ (81092dc <LL_RCC_PLL2P_IsEnabled+0x24>)
 81092be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81092c0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 81092c4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 81092c8:	d101      	bne.n	81092ce <LL_RCC_PLL2P_IsEnabled+0x16>
 81092ca:	2301      	movs	r3, #1
 81092cc:	e000      	b.n	81092d0 <LL_RCC_PLL2P_IsEnabled+0x18>
 81092ce:	2300      	movs	r3, #0
}
 81092d0:	4618      	mov	r0, r3
 81092d2:	46bd      	mov	sp, r7
 81092d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81092d8:	4770      	bx	lr
 81092da:	bf00      	nop
 81092dc:	58024400 	.word	0x58024400

081092e0 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 81092e0:	b480      	push	{r7}
 81092e2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 81092e4:	4b07      	ldr	r3, [pc, #28]	@ (8109304 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 81092e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81092e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81092ec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81092f0:	d101      	bne.n	81092f6 <LL_RCC_PLL2Q_IsEnabled+0x16>
 81092f2:	2301      	movs	r3, #1
 81092f4:	e000      	b.n	81092f8 <LL_RCC_PLL2Q_IsEnabled+0x18>
 81092f6:	2300      	movs	r3, #0
}
 81092f8:	4618      	mov	r0, r3
 81092fa:	46bd      	mov	sp, r7
 81092fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109300:	4770      	bx	lr
 8109302:	bf00      	nop
 8109304:	58024400 	.word	0x58024400

08109308 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 8109308:	b480      	push	{r7}
 810930a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 810930c:	4b07      	ldr	r3, [pc, #28]	@ (810932c <LL_RCC_PLL2R_IsEnabled+0x24>)
 810930e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8109314:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8109318:	d101      	bne.n	810931e <LL_RCC_PLL2R_IsEnabled+0x16>
 810931a:	2301      	movs	r3, #1
 810931c:	e000      	b.n	8109320 <LL_RCC_PLL2R_IsEnabled+0x18>
 810931e:	2300      	movs	r3, #0
}
 8109320:	4618      	mov	r0, r3
 8109322:	46bd      	mov	sp, r7
 8109324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109328:	4770      	bx	lr
 810932a:	bf00      	nop
 810932c:	58024400 	.word	0x58024400

08109330 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8109330:	b480      	push	{r7}
 8109332:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8109334:	4b06      	ldr	r3, [pc, #24]	@ (8109350 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8109336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109338:	f003 0310 	and.w	r3, r3, #16
 810933c:	2b10      	cmp	r3, #16
 810933e:	d101      	bne.n	8109344 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8109340:	2301      	movs	r3, #1
 8109342:	e000      	b.n	8109346 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8109344:	2300      	movs	r3, #0
}
 8109346:	4618      	mov	r0, r3
 8109348:	46bd      	mov	sp, r7
 810934a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810934e:	4770      	bx	lr
 8109350:	58024400 	.word	0x58024400

08109354 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8109354:	b480      	push	{r7}
 8109356:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8109358:	4b04      	ldr	r3, [pc, #16]	@ (810936c <LL_RCC_PLL2_GetN+0x18>)
 810935a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810935c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8109360:	3301      	adds	r3, #1
}
 8109362:	4618      	mov	r0, r3
 8109364:	46bd      	mov	sp, r7
 8109366:	f85d 7b04 	ldr.w	r7, [sp], #4
 810936a:	4770      	bx	lr
 810936c:	58024400 	.word	0x58024400

08109370 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8109370:	b480      	push	{r7}
 8109372:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8109374:	4b04      	ldr	r3, [pc, #16]	@ (8109388 <LL_RCC_PLL2_GetM+0x18>)
 8109376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8109378:	0b1b      	lsrs	r3, r3, #12
 810937a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 810937e:	4618      	mov	r0, r3
 8109380:	46bd      	mov	sp, r7
 8109382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109386:	4770      	bx	lr
 8109388:	58024400 	.word	0x58024400

0810938c <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 810938c:	b480      	push	{r7}
 810938e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8109390:	4b05      	ldr	r3, [pc, #20]	@ (81093a8 <LL_RCC_PLL2_GetP+0x1c>)
 8109392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8109394:	0a5b      	lsrs	r3, r3, #9
 8109396:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810939a:	3301      	adds	r3, #1
}
 810939c:	4618      	mov	r0, r3
 810939e:	46bd      	mov	sp, r7
 81093a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093a4:	4770      	bx	lr
 81093a6:	bf00      	nop
 81093a8:	58024400 	.word	0x58024400

081093ac <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 81093ac:	b480      	push	{r7}
 81093ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 81093b0:	4b05      	ldr	r3, [pc, #20]	@ (81093c8 <LL_RCC_PLL2_GetQ+0x1c>)
 81093b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81093b4:	0c1b      	lsrs	r3, r3, #16
 81093b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81093ba:	3301      	adds	r3, #1
}
 81093bc:	4618      	mov	r0, r3
 81093be:	46bd      	mov	sp, r7
 81093c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093c4:	4770      	bx	lr
 81093c6:	bf00      	nop
 81093c8:	58024400 	.word	0x58024400

081093cc <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 81093cc:	b480      	push	{r7}
 81093ce:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 81093d0:	4b05      	ldr	r3, [pc, #20]	@ (81093e8 <LL_RCC_PLL2_GetR+0x1c>)
 81093d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 81093d4:	0e1b      	lsrs	r3, r3, #24
 81093d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81093da:	3301      	adds	r3, #1
}
 81093dc:	4618      	mov	r0, r3
 81093de:	46bd      	mov	sp, r7
 81093e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81093e4:	4770      	bx	lr
 81093e6:	bf00      	nop
 81093e8:	58024400 	.word	0x58024400

081093ec <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 81093ec:	b480      	push	{r7}
 81093ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 81093f0:	4b04      	ldr	r3, [pc, #16]	@ (8109404 <LL_RCC_PLL2_GetFRACN+0x18>)
 81093f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81093f4:	08db      	lsrs	r3, r3, #3
 81093f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 81093fa:	4618      	mov	r0, r3
 81093fc:	46bd      	mov	sp, r7
 81093fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109402:	4770      	bx	lr
 8109404:	58024400 	.word	0x58024400

08109408 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 8109408:	b480      	push	{r7}
 810940a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 810940c:	4b07      	ldr	r3, [pc, #28]	@ (810942c <LL_RCC_PLL3_IsReady+0x24>)
 810940e:	681b      	ldr	r3, [r3, #0]
 8109410:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8109414:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8109418:	d101      	bne.n	810941e <LL_RCC_PLL3_IsReady+0x16>
 810941a:	2301      	movs	r3, #1
 810941c:	e000      	b.n	8109420 <LL_RCC_PLL3_IsReady+0x18>
 810941e:	2300      	movs	r3, #0
}
 8109420:	4618      	mov	r0, r3
 8109422:	46bd      	mov	sp, r7
 8109424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109428:	4770      	bx	lr
 810942a:	bf00      	nop
 810942c:	58024400 	.word	0x58024400

08109430 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8109430:	b480      	push	{r7}
 8109432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8109434:	4b07      	ldr	r3, [pc, #28]	@ (8109454 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8109436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109438:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810943c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8109440:	d101      	bne.n	8109446 <LL_RCC_PLL3P_IsEnabled+0x16>
 8109442:	2301      	movs	r3, #1
 8109444:	e000      	b.n	8109448 <LL_RCC_PLL3P_IsEnabled+0x18>
 8109446:	2300      	movs	r3, #0
}
 8109448:	4618      	mov	r0, r3
 810944a:	46bd      	mov	sp, r7
 810944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109450:	4770      	bx	lr
 8109452:	bf00      	nop
 8109454:	58024400 	.word	0x58024400

08109458 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8109458:	b480      	push	{r7}
 810945a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 810945c:	4b07      	ldr	r3, [pc, #28]	@ (810947c <LL_RCC_PLL3Q_IsEnabled+0x24>)
 810945e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109460:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8109464:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8109468:	d101      	bne.n	810946e <LL_RCC_PLL3Q_IsEnabled+0x16>
 810946a:	2301      	movs	r3, #1
 810946c:	e000      	b.n	8109470 <LL_RCC_PLL3Q_IsEnabled+0x18>
 810946e:	2300      	movs	r3, #0
}
 8109470:	4618      	mov	r0, r3
 8109472:	46bd      	mov	sp, r7
 8109474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109478:	4770      	bx	lr
 810947a:	bf00      	nop
 810947c:	58024400 	.word	0x58024400

08109480 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8109480:	b480      	push	{r7}
 8109482:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8109484:	4b07      	ldr	r3, [pc, #28]	@ (81094a4 <LL_RCC_PLL3R_IsEnabled+0x24>)
 8109486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109488:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810948c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8109490:	d101      	bne.n	8109496 <LL_RCC_PLL3R_IsEnabled+0x16>
 8109492:	2301      	movs	r3, #1
 8109494:	e000      	b.n	8109498 <LL_RCC_PLL3R_IsEnabled+0x18>
 8109496:	2300      	movs	r3, #0
}
 8109498:	4618      	mov	r0, r3
 810949a:	46bd      	mov	sp, r7
 810949c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094a0:	4770      	bx	lr
 81094a2:	bf00      	nop
 81094a4:	58024400 	.word	0x58024400

081094a8 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 81094a8:	b480      	push	{r7}
 81094aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 81094ac:	4b07      	ldr	r3, [pc, #28]	@ (81094cc <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 81094ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81094b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81094b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81094b8:	d101      	bne.n	81094be <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 81094ba:	2301      	movs	r3, #1
 81094bc:	e000      	b.n	81094c0 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 81094be:	2300      	movs	r3, #0
}
 81094c0:	4618      	mov	r0, r3
 81094c2:	46bd      	mov	sp, r7
 81094c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094c8:	4770      	bx	lr
 81094ca:	bf00      	nop
 81094cc:	58024400 	.word	0x58024400

081094d0 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 81094d0:	b480      	push	{r7}
 81094d2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 81094d4:	4b04      	ldr	r3, [pc, #16]	@ (81094e8 <LL_RCC_PLL3_GetN+0x18>)
 81094d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 81094d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81094dc:	3301      	adds	r3, #1
}
 81094de:	4618      	mov	r0, r3
 81094e0:	46bd      	mov	sp, r7
 81094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81094e6:	4770      	bx	lr
 81094e8:	58024400 	.word	0x58024400

081094ec <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 81094ec:	b480      	push	{r7}
 81094ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 81094f0:	4b04      	ldr	r3, [pc, #16]	@ (8109504 <LL_RCC_PLL3_GetM+0x18>)
 81094f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81094f4:	0d1b      	lsrs	r3, r3, #20
 81094f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
}
 81094fa:	4618      	mov	r0, r3
 81094fc:	46bd      	mov	sp, r7
 81094fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109502:	4770      	bx	lr
 8109504:	58024400 	.word	0x58024400

08109508 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 8109508:	b480      	push	{r7}
 810950a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 810950c:	4b05      	ldr	r3, [pc, #20]	@ (8109524 <LL_RCC_PLL3_GetP+0x1c>)
 810950e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109510:	0a5b      	lsrs	r3, r3, #9
 8109512:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109516:	3301      	adds	r3, #1
}
 8109518:	4618      	mov	r0, r3
 810951a:	46bd      	mov	sp, r7
 810951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109520:	4770      	bx	lr
 8109522:	bf00      	nop
 8109524:	58024400 	.word	0x58024400

08109528 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8109528:	b480      	push	{r7}
 810952a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 810952c:	4b05      	ldr	r3, [pc, #20]	@ (8109544 <LL_RCC_PLL3_GetQ+0x1c>)
 810952e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109530:	0c1b      	lsrs	r3, r3, #16
 8109532:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109536:	3301      	adds	r3, #1
}
 8109538:	4618      	mov	r0, r3
 810953a:	46bd      	mov	sp, r7
 810953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109540:	4770      	bx	lr
 8109542:	bf00      	nop
 8109544:	58024400 	.word	0x58024400

08109548 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8109548:	b480      	push	{r7}
 810954a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 810954c:	4b05      	ldr	r3, [pc, #20]	@ (8109564 <LL_RCC_PLL3_GetR+0x1c>)
 810954e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8109550:	0e1b      	lsrs	r3, r3, #24
 8109552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8109556:	3301      	adds	r3, #1
}
 8109558:	4618      	mov	r0, r3
 810955a:	46bd      	mov	sp, r7
 810955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109560:	4770      	bx	lr
 8109562:	bf00      	nop
 8109564:	58024400 	.word	0x58024400

08109568 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8109568:	b480      	push	{r7}
 810956a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 810956c:	4b04      	ldr	r3, [pc, #16]	@ (8109580 <LL_RCC_PLL3_GetFRACN+0x18>)
 810956e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8109570:	08db      	lsrs	r3, r3, #3
 8109572:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8109576:	4618      	mov	r0, r3
 8109578:	46bd      	mov	sp, r7
 810957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810957e:	4770      	bx	lr
 8109580:	58024400 	.word	0x58024400

08109584 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8109584:	b580      	push	{r7, lr}
 8109586:	b08a      	sub	sp, #40	@ 0x28
 8109588:	af02      	add	r7, sp, #8
 810958a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 810958c:	2300      	movs	r3, #0
 810958e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8109590:	2300      	movs	r3, #0
 8109592:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8109594:	f7ff fdc6 	bl	8109124 <LL_RCC_PLL_GetSource>
 8109598:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 810959a:	697b      	ldr	r3, [r7, #20]
 810959c:	2b02      	cmp	r3, #2
 810959e:	d01f      	beq.n	81095e0 <LL_RCC_GetPLL1ClockFreq+0x5c>
 81095a0:	697b      	ldr	r3, [r7, #20]
 81095a2:	2b02      	cmp	r3, #2
 81095a4:	d824      	bhi.n	81095f0 <LL_RCC_GetPLL1ClockFreq+0x6c>
 81095a6:	697b      	ldr	r3, [r7, #20]
 81095a8:	2b00      	cmp	r3, #0
 81095aa:	d003      	beq.n	81095b4 <LL_RCC_GetPLL1ClockFreq+0x30>
 81095ac:	697b      	ldr	r3, [r7, #20]
 81095ae:	2b01      	cmp	r3, #1
 81095b0:	d00e      	beq.n	81095d0 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 81095b2:	e01d      	b.n	81095f0 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 81095b4:	f7ff fcf8 	bl	8108fa8 <LL_RCC_HSI_IsReady>
 81095b8:	4603      	mov	r3, r0
 81095ba:	2b00      	cmp	r3, #0
 81095bc:	d01a      	beq.n	81095f4 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 81095be:	f7ff fd05 	bl	8108fcc <LL_RCC_HSI_GetDivider>
 81095c2:	4603      	mov	r3, r0
 81095c4:	08db      	lsrs	r3, r3, #3
 81095c6:	4a38      	ldr	r2, [pc, #224]	@ (81096a8 <LL_RCC_GetPLL1ClockFreq+0x124>)
 81095c8:	fa22 f303 	lsr.w	r3, r2, r3
 81095cc:	61fb      	str	r3, [r7, #28]
      break;
 81095ce:	e011      	b.n	81095f4 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 81095d0:	f7ff fd0a 	bl	8108fe8 <LL_RCC_CSI_IsReady>
 81095d4:	4603      	mov	r3, r0
 81095d6:	2b00      	cmp	r3, #0
 81095d8:	d00e      	beq.n	81095f8 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 81095da:	4b34      	ldr	r3, [pc, #208]	@ (81096ac <LL_RCC_GetPLL1ClockFreq+0x128>)
 81095dc:	61fb      	str	r3, [r7, #28]
      break;
 81095de:	e00b      	b.n	81095f8 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 81095e0:	f7ff fcce 	bl	8108f80 <LL_RCC_HSE_IsReady>
 81095e4:	4603      	mov	r3, r0
 81095e6:	2b00      	cmp	r3, #0
 81095e8:	d008      	beq.n	81095fc <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 81095ea:	4b31      	ldr	r3, [pc, #196]	@ (81096b0 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 81095ec:	61fb      	str	r3, [r7, #28]
      break;
 81095ee:	e005      	b.n	81095fc <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 81095f0:	bf00      	nop
 81095f2:	e004      	b.n	81095fe <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81095f4:	bf00      	nop
 81095f6:	e002      	b.n	81095fe <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81095f8:	bf00      	nop
 81095fa:	e000      	b.n	81095fe <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81095fc:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 81095fe:	687b      	ldr	r3, [r7, #4]
 8109600:	2200      	movs	r2, #0
 8109602:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8109604:	687b      	ldr	r3, [r7, #4]
 8109606:	2200      	movs	r2, #0
 8109608:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 810960a:	687b      	ldr	r3, [r7, #4]
 810960c:	2200      	movs	r2, #0
 810960e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 8109610:	f7ff fdf2 	bl	81091f8 <LL_RCC_PLL1_GetM>
 8109614:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 8109616:	f7ff fde1 	bl	81091dc <LL_RCC_PLL1_GetN>
 810961a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 810961c:	f7ff fdcc 	bl	81091b8 <LL_RCC_PLL1FRACN_IsEnabled>
 8109620:	4603      	mov	r3, r0
 8109622:	2b00      	cmp	r3, #0
 8109624:	d002      	beq.n	810962c <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8109626:	f7ff fe25 	bl	8109274 <LL_RCC_PLL1_GetFRACN>
 810962a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 810962c:	693b      	ldr	r3, [r7, #16]
 810962e:	2b00      	cmp	r3, #0
 8109630:	d035      	beq.n	810969e <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8109632:	f7ff fd85 	bl	8109140 <LL_RCC_PLL1P_IsEnabled>
 8109636:	4603      	mov	r3, r0
 8109638:	2b00      	cmp	r3, #0
 810963a:	d00c      	beq.n	8109656 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 810963c:	f7ff fdea 	bl	8109214 <LL_RCC_PLL1_GetP>
 8109640:	4603      	mov	r3, r0
 8109642:	9300      	str	r3, [sp, #0]
 8109644:	69bb      	ldr	r3, [r7, #24]
 8109646:	68fa      	ldr	r2, [r7, #12]
 8109648:	6939      	ldr	r1, [r7, #16]
 810964a:	69f8      	ldr	r0, [r7, #28]
 810964c:	f000 f964 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 8109650:	4602      	mov	r2, r0
 8109652:	687b      	ldr	r3, [r7, #4]
 8109654:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8109656:	f7ff fd87 	bl	8109168 <LL_RCC_PLL1Q_IsEnabled>
 810965a:	4603      	mov	r3, r0
 810965c:	2b00      	cmp	r3, #0
 810965e:	d00c      	beq.n	810967a <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8109660:	f7ff fde8 	bl	8109234 <LL_RCC_PLL1_GetQ>
 8109664:	4603      	mov	r3, r0
 8109666:	9300      	str	r3, [sp, #0]
 8109668:	69bb      	ldr	r3, [r7, #24]
 810966a:	68fa      	ldr	r2, [r7, #12]
 810966c:	6939      	ldr	r1, [r7, #16]
 810966e:	69f8      	ldr	r0, [r7, #28]
 8109670:	f000 f952 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 8109674:	4602      	mov	r2, r0
 8109676:	687b      	ldr	r3, [r7, #4]
 8109678:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 810967a:	f7ff fd89 	bl	8109190 <LL_RCC_PLL1R_IsEnabled>
 810967e:	4603      	mov	r3, r0
 8109680:	2b00      	cmp	r3, #0
 8109682:	d00c      	beq.n	810969e <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8109684:	f7ff fde6 	bl	8109254 <LL_RCC_PLL1_GetR>
 8109688:	4603      	mov	r3, r0
 810968a:	9300      	str	r3, [sp, #0]
 810968c:	69bb      	ldr	r3, [r7, #24]
 810968e:	68fa      	ldr	r2, [r7, #12]
 8109690:	6939      	ldr	r1, [r7, #16]
 8109692:	69f8      	ldr	r0, [r7, #28]
 8109694:	f000 f940 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 8109698:	4602      	mov	r2, r0
 810969a:	687b      	ldr	r3, [r7, #4]
 810969c:	609a      	str	r2, [r3, #8]
    }
  }
}
 810969e:	bf00      	nop
 81096a0:	3720      	adds	r7, #32
 81096a2:	46bd      	mov	sp, r7
 81096a4:	bd80      	pop	{r7, pc}
 81096a6:	bf00      	nop
 81096a8:	03d09000 	.word	0x03d09000
 81096ac:	003d0900 	.word	0x003d0900
 81096b0:	017d7840 	.word	0x017d7840

081096b4 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 81096b4:	b580      	push	{r7, lr}
 81096b6:	b08a      	sub	sp, #40	@ 0x28
 81096b8:	af02      	add	r7, sp, #8
 81096ba:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 81096bc:	2300      	movs	r3, #0
 81096be:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 81096c0:	2300      	movs	r3, #0
 81096c2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 81096c4:	f7ff fd2e 	bl	8109124 <LL_RCC_PLL_GetSource>
 81096c8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 81096ca:	697b      	ldr	r3, [r7, #20]
 81096cc:	2b02      	cmp	r3, #2
 81096ce:	d01f      	beq.n	8109710 <LL_RCC_GetPLL2ClockFreq+0x5c>
 81096d0:	697b      	ldr	r3, [r7, #20]
 81096d2:	2b02      	cmp	r3, #2
 81096d4:	d824      	bhi.n	8109720 <LL_RCC_GetPLL2ClockFreq+0x6c>
 81096d6:	697b      	ldr	r3, [r7, #20]
 81096d8:	2b00      	cmp	r3, #0
 81096da:	d003      	beq.n	81096e4 <LL_RCC_GetPLL2ClockFreq+0x30>
 81096dc:	697b      	ldr	r3, [r7, #20]
 81096de:	2b01      	cmp	r3, #1
 81096e0:	d00e      	beq.n	8109700 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 81096e2:	e01d      	b.n	8109720 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 81096e4:	f7ff fc60 	bl	8108fa8 <LL_RCC_HSI_IsReady>
 81096e8:	4603      	mov	r3, r0
 81096ea:	2b00      	cmp	r3, #0
 81096ec:	d01a      	beq.n	8109724 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 81096ee:	f7ff fc6d 	bl	8108fcc <LL_RCC_HSI_GetDivider>
 81096f2:	4603      	mov	r3, r0
 81096f4:	08db      	lsrs	r3, r3, #3
 81096f6:	4a38      	ldr	r2, [pc, #224]	@ (81097d8 <LL_RCC_GetPLL2ClockFreq+0x124>)
 81096f8:	fa22 f303 	lsr.w	r3, r2, r3
 81096fc:	61fb      	str	r3, [r7, #28]
      break;
 81096fe:	e011      	b.n	8109724 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8109700:	f7ff fc72 	bl	8108fe8 <LL_RCC_CSI_IsReady>
 8109704:	4603      	mov	r3, r0
 8109706:	2b00      	cmp	r3, #0
 8109708:	d00e      	beq.n	8109728 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 810970a:	4b34      	ldr	r3, [pc, #208]	@ (81097dc <LL_RCC_GetPLL2ClockFreq+0x128>)
 810970c:	61fb      	str	r3, [r7, #28]
      break;
 810970e:	e00b      	b.n	8109728 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8109710:	f7ff fc36 	bl	8108f80 <LL_RCC_HSE_IsReady>
 8109714:	4603      	mov	r3, r0
 8109716:	2b00      	cmp	r3, #0
 8109718:	d008      	beq.n	810972c <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 810971a:	4b31      	ldr	r3, [pc, #196]	@ (81097e0 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 810971c:	61fb      	str	r3, [r7, #28]
      break;
 810971e:	e005      	b.n	810972c <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8109720:	bf00      	nop
 8109722:	e004      	b.n	810972e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8109724:	bf00      	nop
 8109726:	e002      	b.n	810972e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8109728:	bf00      	nop
 810972a:	e000      	b.n	810972e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 810972c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 810972e:	687b      	ldr	r3, [r7, #4]
 8109730:	2200      	movs	r2, #0
 8109732:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8109734:	687b      	ldr	r3, [r7, #4]
 8109736:	2200      	movs	r2, #0
 8109738:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 810973a:	687b      	ldr	r3, [r7, #4]
 810973c:	2200      	movs	r2, #0
 810973e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8109740:	f7ff fe16 	bl	8109370 <LL_RCC_PLL2_GetM>
 8109744:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8109746:	f7ff fe05 	bl	8109354 <LL_RCC_PLL2_GetN>
 810974a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 810974c:	f7ff fdf0 	bl	8109330 <LL_RCC_PLL2FRACN_IsEnabled>
 8109750:	4603      	mov	r3, r0
 8109752:	2b00      	cmp	r3, #0
 8109754:	d002      	beq.n	810975c <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8109756:	f7ff fe49 	bl	81093ec <LL_RCC_PLL2_GetFRACN>
 810975a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 810975c:	693b      	ldr	r3, [r7, #16]
 810975e:	2b00      	cmp	r3, #0
 8109760:	d035      	beq.n	81097ce <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8109762:	f7ff fda9 	bl	81092b8 <LL_RCC_PLL2P_IsEnabled>
 8109766:	4603      	mov	r3, r0
 8109768:	2b00      	cmp	r3, #0
 810976a:	d00c      	beq.n	8109786 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 810976c:	f7ff fe0e 	bl	810938c <LL_RCC_PLL2_GetP>
 8109770:	4603      	mov	r3, r0
 8109772:	9300      	str	r3, [sp, #0]
 8109774:	69bb      	ldr	r3, [r7, #24]
 8109776:	68fa      	ldr	r2, [r7, #12]
 8109778:	6939      	ldr	r1, [r7, #16]
 810977a:	69f8      	ldr	r0, [r7, #28]
 810977c:	f000 f8cc 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 8109780:	4602      	mov	r2, r0
 8109782:	687b      	ldr	r3, [r7, #4]
 8109784:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8109786:	f7ff fdab 	bl	81092e0 <LL_RCC_PLL2Q_IsEnabled>
 810978a:	4603      	mov	r3, r0
 810978c:	2b00      	cmp	r3, #0
 810978e:	d00c      	beq.n	81097aa <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8109790:	f7ff fe0c 	bl	81093ac <LL_RCC_PLL2_GetQ>
 8109794:	4603      	mov	r3, r0
 8109796:	9300      	str	r3, [sp, #0]
 8109798:	69bb      	ldr	r3, [r7, #24]
 810979a:	68fa      	ldr	r2, [r7, #12]
 810979c:	6939      	ldr	r1, [r7, #16]
 810979e:	69f8      	ldr	r0, [r7, #28]
 81097a0:	f000 f8ba 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 81097a4:	4602      	mov	r2, r0
 81097a6:	687b      	ldr	r3, [r7, #4]
 81097a8:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 81097aa:	f7ff fdad 	bl	8109308 <LL_RCC_PLL2R_IsEnabled>
 81097ae:	4603      	mov	r3, r0
 81097b0:	2b00      	cmp	r3, #0
 81097b2:	d00c      	beq.n	81097ce <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 81097b4:	f7ff fe0a 	bl	81093cc <LL_RCC_PLL2_GetR>
 81097b8:	4603      	mov	r3, r0
 81097ba:	9300      	str	r3, [sp, #0]
 81097bc:	69bb      	ldr	r3, [r7, #24]
 81097be:	68fa      	ldr	r2, [r7, #12]
 81097c0:	6939      	ldr	r1, [r7, #16]
 81097c2:	69f8      	ldr	r0, [r7, #28]
 81097c4:	f000 f8a8 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 81097c8:	4602      	mov	r2, r0
 81097ca:	687b      	ldr	r3, [r7, #4]
 81097cc:	609a      	str	r2, [r3, #8]
    }
  }
}
 81097ce:	bf00      	nop
 81097d0:	3720      	adds	r7, #32
 81097d2:	46bd      	mov	sp, r7
 81097d4:	bd80      	pop	{r7, pc}
 81097d6:	bf00      	nop
 81097d8:	03d09000 	.word	0x03d09000
 81097dc:	003d0900 	.word	0x003d0900
 81097e0:	017d7840 	.word	0x017d7840

081097e4 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 81097e4:	b580      	push	{r7, lr}
 81097e6:	b08a      	sub	sp, #40	@ 0x28
 81097e8:	af02      	add	r7, sp, #8
 81097ea:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 81097ec:	2300      	movs	r3, #0
 81097ee:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 81097f0:	2300      	movs	r3, #0
 81097f2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 81097f4:	f7ff fc96 	bl	8109124 <LL_RCC_PLL_GetSource>
 81097f8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 81097fa:	697b      	ldr	r3, [r7, #20]
 81097fc:	2b02      	cmp	r3, #2
 81097fe:	d01f      	beq.n	8109840 <LL_RCC_GetPLL3ClockFreq+0x5c>
 8109800:	697b      	ldr	r3, [r7, #20]
 8109802:	2b02      	cmp	r3, #2
 8109804:	d824      	bhi.n	8109850 <LL_RCC_GetPLL3ClockFreq+0x6c>
 8109806:	697b      	ldr	r3, [r7, #20]
 8109808:	2b00      	cmp	r3, #0
 810980a:	d003      	beq.n	8109814 <LL_RCC_GetPLL3ClockFreq+0x30>
 810980c:	697b      	ldr	r3, [r7, #20]
 810980e:	2b01      	cmp	r3, #1
 8109810:	d00e      	beq.n	8109830 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8109812:	e01d      	b.n	8109850 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8109814:	f7ff fbc8 	bl	8108fa8 <LL_RCC_HSI_IsReady>
 8109818:	4603      	mov	r3, r0
 810981a:	2b00      	cmp	r3, #0
 810981c:	d01a      	beq.n	8109854 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 810981e:	f7ff fbd5 	bl	8108fcc <LL_RCC_HSI_GetDivider>
 8109822:	4603      	mov	r3, r0
 8109824:	08db      	lsrs	r3, r3, #3
 8109826:	4a39      	ldr	r2, [pc, #228]	@ (810990c <LL_RCC_GetPLL3ClockFreq+0x128>)
 8109828:	fa22 f303 	lsr.w	r3, r2, r3
 810982c:	61fb      	str	r3, [r7, #28]
      break;
 810982e:	e011      	b.n	8109854 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8109830:	f7ff fbda 	bl	8108fe8 <LL_RCC_CSI_IsReady>
 8109834:	4603      	mov	r3, r0
 8109836:	2b00      	cmp	r3, #0
 8109838:	d00e      	beq.n	8109858 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 810983a:	4b35      	ldr	r3, [pc, #212]	@ (8109910 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 810983c:	61fb      	str	r3, [r7, #28]
      break;
 810983e:	e00b      	b.n	8109858 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8109840:	f7ff fb9e 	bl	8108f80 <LL_RCC_HSE_IsReady>
 8109844:	4603      	mov	r3, r0
 8109846:	2b00      	cmp	r3, #0
 8109848:	d008      	beq.n	810985c <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 810984a:	4b32      	ldr	r3, [pc, #200]	@ (8109914 <LL_RCC_GetPLL3ClockFreq+0x130>)
 810984c:	61fb      	str	r3, [r7, #28]
      break;
 810984e:	e005      	b.n	810985c <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8109850:	bf00      	nop
 8109852:	e004      	b.n	810985e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8109854:	bf00      	nop
 8109856:	e002      	b.n	810985e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8109858:	bf00      	nop
 810985a:	e000      	b.n	810985e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 810985c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 810985e:	687b      	ldr	r3, [r7, #4]
 8109860:	2200      	movs	r2, #0
 8109862:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8109864:	687b      	ldr	r3, [r7, #4]
 8109866:	2200      	movs	r2, #0
 8109868:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 810986a:	687b      	ldr	r3, [r7, #4]
 810986c:	2200      	movs	r2, #0
 810986e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8109870:	f7ff fe3c 	bl	81094ec <LL_RCC_PLL3_GetM>
 8109874:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8109876:	f7ff fe2b 	bl	81094d0 <LL_RCC_PLL3_GetN>
 810987a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 810987c:	f7ff fe14 	bl	81094a8 <LL_RCC_PLL3FRACN_IsEnabled>
 8109880:	4603      	mov	r3, r0
 8109882:	2b00      	cmp	r3, #0
 8109884:	d002      	beq.n	810988c <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8109886:	f7ff fe6f 	bl	8109568 <LL_RCC_PLL3_GetFRACN>
 810988a:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 810988c:	693b      	ldr	r3, [r7, #16]
 810988e:	2b00      	cmp	r3, #0
 8109890:	d038      	beq.n	8109904 <LL_RCC_GetPLL3ClockFreq+0x120>
 8109892:	69fb      	ldr	r3, [r7, #28]
 8109894:	2b00      	cmp	r3, #0
 8109896:	d035      	beq.n	8109904 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8109898:	f7ff fdca 	bl	8109430 <LL_RCC_PLL3P_IsEnabled>
 810989c:	4603      	mov	r3, r0
 810989e:	2b00      	cmp	r3, #0
 81098a0:	d00c      	beq.n	81098bc <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 81098a2:	f7ff fe31 	bl	8109508 <LL_RCC_PLL3_GetP>
 81098a6:	4603      	mov	r3, r0
 81098a8:	9300      	str	r3, [sp, #0]
 81098aa:	69bb      	ldr	r3, [r7, #24]
 81098ac:	68fa      	ldr	r2, [r7, #12]
 81098ae:	6939      	ldr	r1, [r7, #16]
 81098b0:	69f8      	ldr	r0, [r7, #28]
 81098b2:	f000 f831 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 81098b6:	4602      	mov	r2, r0
 81098b8:	687b      	ldr	r3, [r7, #4]
 81098ba:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 81098bc:	f7ff fdcc 	bl	8109458 <LL_RCC_PLL3Q_IsEnabled>
 81098c0:	4603      	mov	r3, r0
 81098c2:	2b00      	cmp	r3, #0
 81098c4:	d00c      	beq.n	81098e0 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 81098c6:	f7ff fe2f 	bl	8109528 <LL_RCC_PLL3_GetQ>
 81098ca:	4603      	mov	r3, r0
 81098cc:	9300      	str	r3, [sp, #0]
 81098ce:	69bb      	ldr	r3, [r7, #24]
 81098d0:	68fa      	ldr	r2, [r7, #12]
 81098d2:	6939      	ldr	r1, [r7, #16]
 81098d4:	69f8      	ldr	r0, [r7, #28]
 81098d6:	f000 f81f 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 81098da:	4602      	mov	r2, r0
 81098dc:	687b      	ldr	r3, [r7, #4]
 81098de:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 81098e0:	f7ff fdce 	bl	8109480 <LL_RCC_PLL3R_IsEnabled>
 81098e4:	4603      	mov	r3, r0
 81098e6:	2b00      	cmp	r3, #0
 81098e8:	d00c      	beq.n	8109904 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 81098ea:	f7ff fe2d 	bl	8109548 <LL_RCC_PLL3_GetR>
 81098ee:	4603      	mov	r3, r0
 81098f0:	9300      	str	r3, [sp, #0]
 81098f2:	69bb      	ldr	r3, [r7, #24]
 81098f4:	68fa      	ldr	r2, [r7, #12]
 81098f6:	6939      	ldr	r1, [r7, #16]
 81098f8:	69f8      	ldr	r0, [r7, #28]
 81098fa:	f000 f80d 	bl	8109918 <LL_RCC_CalcPLLClockFreq>
 81098fe:	4602      	mov	r2, r0
 8109900:	687b      	ldr	r3, [r7, #4]
 8109902:	609a      	str	r2, [r3, #8]
    }
  }
}
 8109904:	bf00      	nop
 8109906:	3720      	adds	r7, #32
 8109908:	46bd      	mov	sp, r7
 810990a:	bd80      	pop	{r7, pc}
 810990c:	03d09000 	.word	0x03d09000
 8109910:	003d0900 	.word	0x003d0900
 8109914:	017d7840 	.word	0x017d7840

08109918 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 8109918:	b480      	push	{r7}
 810991a:	b087      	sub	sp, #28
 810991c:	af00      	add	r7, sp, #0
 810991e:	60f8      	str	r0, [r7, #12]
 8109920:	60b9      	str	r1, [r7, #8]
 8109922:	607a      	str	r2, [r7, #4]
 8109924:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8109926:	68fb      	ldr	r3, [r7, #12]
 8109928:	ee07 3a90 	vmov	s15, r3
 810992c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109930:	68bb      	ldr	r3, [r7, #8]
 8109932:	ee07 3a90 	vmov	s15, r3
 8109936:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810993a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810993e:	687b      	ldr	r3, [r7, #4]
 8109940:	ee07 3a90 	vmov	s15, r3
 8109944:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8109948:	683b      	ldr	r3, [r7, #0]
 810994a:	ee07 3a90 	vmov	s15, r3
 810994e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8109952:	eddf 5a10 	vldr	s11, [pc, #64]	@ 8109994 <LL_RCC_CalcPLLClockFreq+0x7c>
 8109956:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810995a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810995e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8109962:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8109966:	6a3b      	ldr	r3, [r7, #32]
 8109968:	ee07 3a90 	vmov	s15, r3
 810996c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8109970:	edd7 6a05 	vldr	s13, [r7, #20]
 8109974:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8109978:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 810997c:	edd7 7a05 	vldr	s15, [r7, #20]
 8109980:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8109984:	ee17 3a90 	vmov	r3, s15
}
 8109988:	4618      	mov	r0, r3
 810998a:	371c      	adds	r7, #28
 810998c:	46bd      	mov	sp, r7
 810998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109992:	4770      	bx	lr
 8109994:	46000000 	.word	0x46000000

08109998 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8109998:	b590      	push	{r4, r7, lr}
 810999a:	b087      	sub	sp, #28
 810999c:	af00      	add	r7, sp, #0
 810999e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 81099a0:	2300      	movs	r3, #0
 81099a2:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 81099a4:	6878      	ldr	r0, [r7, #4]
 81099a6:	f7ff fbb1 	bl	810910c <LL_RCC_GetUSARTClockSource>
 81099aa:	4603      	mov	r3, r0
 81099ac:	4a62      	ldr	r2, [pc, #392]	@ (8109b38 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 81099ae:	4293      	cmp	r3, r2
 81099b0:	f000 80a9 	beq.w	8109b06 <LL_RCC_GetUSARTClockFreq+0x16e>
 81099b4:	4a60      	ldr	r2, [pc, #384]	@ (8109b38 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 81099b6:	4293      	cmp	r3, r2
 81099b8:	f200 80ae 	bhi.w	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 81099bc:	4a5f      	ldr	r2, [pc, #380]	@ (8109b3c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 81099be:	4293      	cmp	r3, r2
 81099c0:	f000 80a1 	beq.w	8109b06 <LL_RCC_GetUSARTClockFreq+0x16e>
 81099c4:	4a5d      	ldr	r2, [pc, #372]	@ (8109b3c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 81099c6:	4293      	cmp	r3, r2
 81099c8:	f200 80a6 	bhi.w	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 81099cc:	4a5c      	ldr	r2, [pc, #368]	@ (8109b40 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 81099ce:	4293      	cmp	r3, r2
 81099d0:	f000 8091 	beq.w	8109af6 <LL_RCC_GetUSARTClockFreq+0x15e>
 81099d4:	4a5a      	ldr	r2, [pc, #360]	@ (8109b40 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 81099d6:	4293      	cmp	r3, r2
 81099d8:	f200 809e 	bhi.w	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 81099dc:	4a59      	ldr	r2, [pc, #356]	@ (8109b44 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 81099de:	4293      	cmp	r3, r2
 81099e0:	f000 8089 	beq.w	8109af6 <LL_RCC_GetUSARTClockFreq+0x15e>
 81099e4:	4a57      	ldr	r2, [pc, #348]	@ (8109b44 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 81099e6:	4293      	cmp	r3, r2
 81099e8:	f200 8096 	bhi.w	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 81099ec:	4a56      	ldr	r2, [pc, #344]	@ (8109b48 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 81099ee:	4293      	cmp	r3, r2
 81099f0:	d073      	beq.n	8109ada <LL_RCC_GetUSARTClockFreq+0x142>
 81099f2:	4a55      	ldr	r2, [pc, #340]	@ (8109b48 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 81099f4:	4293      	cmp	r3, r2
 81099f6:	f200 808f 	bhi.w	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 81099fa:	4a54      	ldr	r2, [pc, #336]	@ (8109b4c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 81099fc:	4293      	cmp	r3, r2
 81099fe:	d06c      	beq.n	8109ada <LL_RCC_GetUSARTClockFreq+0x142>
 8109a00:	4a52      	ldr	r2, [pc, #328]	@ (8109b4c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8109a02:	4293      	cmp	r3, r2
 8109a04:	f200 8088 	bhi.w	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 8109a08:	4a51      	ldr	r2, [pc, #324]	@ (8109b50 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8109a0a:	4293      	cmp	r3, r2
 8109a0c:	d058      	beq.n	8109ac0 <LL_RCC_GetUSARTClockFreq+0x128>
 8109a0e:	4a50      	ldr	r2, [pc, #320]	@ (8109b50 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8109a10:	4293      	cmp	r3, r2
 8109a12:	f200 8081 	bhi.w	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 8109a16:	4a4f      	ldr	r2, [pc, #316]	@ (8109b54 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8109a18:	4293      	cmp	r3, r2
 8109a1a:	d051      	beq.n	8109ac0 <LL_RCC_GetUSARTClockFreq+0x128>
 8109a1c:	4a4d      	ldr	r2, [pc, #308]	@ (8109b54 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8109a1e:	4293      	cmp	r3, r2
 8109a20:	d87a      	bhi.n	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 8109a22:	4a4d      	ldr	r2, [pc, #308]	@ (8109b58 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8109a24:	4293      	cmp	r3, r2
 8109a26:	d03e      	beq.n	8109aa6 <LL_RCC_GetUSARTClockFreq+0x10e>
 8109a28:	4a4b      	ldr	r2, [pc, #300]	@ (8109b58 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8109a2a:	4293      	cmp	r3, r2
 8109a2c:	d874      	bhi.n	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 8109a2e:	4a4b      	ldr	r2, [pc, #300]	@ (8109b5c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8109a30:	4293      	cmp	r3, r2
 8109a32:	d038      	beq.n	8109aa6 <LL_RCC_GetUSARTClockFreq+0x10e>
 8109a34:	4a49      	ldr	r2, [pc, #292]	@ (8109b5c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8109a36:	4293      	cmp	r3, r2
 8109a38:	d86e      	bhi.n	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
 8109a3a:	4a49      	ldr	r2, [pc, #292]	@ (8109b60 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 8109a3c:	4293      	cmp	r3, r2
 8109a3e:	d01a      	beq.n	8109a76 <LL_RCC_GetUSARTClockFreq+0xde>
 8109a40:	4a48      	ldr	r2, [pc, #288]	@ (8109b64 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8109a42:	4293      	cmp	r3, r2
 8109a44:	d168      	bne.n	8109b18 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8109a46:	f000 f895 	bl	8109b74 <RCC_GetSystemClockFreq>
 8109a4a:	4604      	mov	r4, r0
 8109a4c:	f7ff fb00 	bl	8109050 <LL_RCC_GetSysPrescaler>
 8109a50:	4603      	mov	r3, r0
 8109a52:	0a1b      	lsrs	r3, r3, #8
 8109a54:	f003 030f 	and.w	r3, r3, #15
 8109a58:	4a43      	ldr	r2, [pc, #268]	@ (8109b68 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8109a5a:	5cd3      	ldrb	r3, [r2, r3]
 8109a5c:	f003 031f 	and.w	r3, r3, #31
 8109a60:	fa24 f303 	lsr.w	r3, r4, r3
 8109a64:	4618      	mov	r0, r3
 8109a66:	f000 f8e7 	bl	8109c38 <RCC_GetHCLKClockFreq>
 8109a6a:	4603      	mov	r3, r0
 8109a6c:	4618      	mov	r0, r3
 8109a6e:	f000 f911 	bl	8109c94 <RCC_GetPCLK2ClockFreq>
 8109a72:	6178      	str	r0, [r7, #20]
      break;
 8109a74:	e05b      	b.n	8109b2e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8109a76:	f000 f87d 	bl	8109b74 <RCC_GetSystemClockFreq>
 8109a7a:	4604      	mov	r4, r0
 8109a7c:	f7ff fae8 	bl	8109050 <LL_RCC_GetSysPrescaler>
 8109a80:	4603      	mov	r3, r0
 8109a82:	0a1b      	lsrs	r3, r3, #8
 8109a84:	f003 030f 	and.w	r3, r3, #15
 8109a88:	4a37      	ldr	r2, [pc, #220]	@ (8109b68 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 8109a8a:	5cd3      	ldrb	r3, [r2, r3]
 8109a8c:	f003 031f 	and.w	r3, r3, #31
 8109a90:	fa24 f303 	lsr.w	r3, r4, r3
 8109a94:	4618      	mov	r0, r3
 8109a96:	f000 f8cf 	bl	8109c38 <RCC_GetHCLKClockFreq>
 8109a9a:	4603      	mov	r3, r0
 8109a9c:	4618      	mov	r0, r3
 8109a9e:	f000 f8e1 	bl	8109c64 <RCC_GetPCLK1ClockFreq>
 8109aa2:	6178      	str	r0, [r7, #20]
      break;
 8109aa4:	e043      	b.n	8109b2e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8109aa6:	f7ff fbf3 	bl	8109290 <LL_RCC_PLL2_IsReady>
 8109aaa:	4603      	mov	r3, r0
 8109aac:	2b00      	cmp	r3, #0
 8109aae:	d035      	beq.n	8109b1c <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8109ab0:	f107 0308 	add.w	r3, r7, #8
 8109ab4:	4618      	mov	r0, r3
 8109ab6:	f7ff fdfd 	bl	81096b4 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8109aba:	68fb      	ldr	r3, [r7, #12]
 8109abc:	617b      	str	r3, [r7, #20]
      }
      break;
 8109abe:	e02d      	b.n	8109b1c <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 8109ac0:	f7ff fca2 	bl	8109408 <LL_RCC_PLL3_IsReady>
 8109ac4:	4603      	mov	r3, r0
 8109ac6:	2b00      	cmp	r3, #0
 8109ac8:	d02a      	beq.n	8109b20 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 8109aca:	f107 0308 	add.w	r3, r7, #8
 8109ace:	4618      	mov	r0, r3
 8109ad0:	f7ff fe88 	bl	81097e4 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 8109ad4:	68fb      	ldr	r3, [r7, #12]
 8109ad6:	617b      	str	r3, [r7, #20]
      }
      break;
 8109ad8:	e022      	b.n	8109b20 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 8109ada:	f7ff fa65 	bl	8108fa8 <LL_RCC_HSI_IsReady>
 8109ade:	4603      	mov	r3, r0
 8109ae0:	2b00      	cmp	r3, #0
 8109ae2:	d01f      	beq.n	8109b24 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8109ae4:	f7ff fa72 	bl	8108fcc <LL_RCC_HSI_GetDivider>
 8109ae8:	4603      	mov	r3, r0
 8109aea:	08db      	lsrs	r3, r3, #3
 8109aec:	4a1f      	ldr	r2, [pc, #124]	@ (8109b6c <LL_RCC_GetUSARTClockFreq+0x1d4>)
 8109aee:	fa22 f303 	lsr.w	r3, r2, r3
 8109af2:	617b      	str	r3, [r7, #20]
      }
      break;
 8109af4:	e016      	b.n	8109b24 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 8109af6:	f7ff fa77 	bl	8108fe8 <LL_RCC_CSI_IsReady>
 8109afa:	4603      	mov	r3, r0
 8109afc:	2b00      	cmp	r3, #0
 8109afe:	d013      	beq.n	8109b28 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 8109b00:	4b1b      	ldr	r3, [pc, #108]	@ (8109b70 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 8109b02:	617b      	str	r3, [r7, #20]
      }
      break;
 8109b04:	e010      	b.n	8109b28 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 8109b06:	f7ff fa83 	bl	8109010 <LL_RCC_LSE_IsReady>
 8109b0a:	4603      	mov	r3, r0
 8109b0c:	2b00      	cmp	r3, #0
 8109b0e:	d00d      	beq.n	8109b2c <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 8109b10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8109b14:	617b      	str	r3, [r7, #20]
      }
      break;
 8109b16:	e009      	b.n	8109b2c <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 8109b18:	bf00      	nop
 8109b1a:	e008      	b.n	8109b2e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b1c:	bf00      	nop
 8109b1e:	e006      	b.n	8109b2e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b20:	bf00      	nop
 8109b22:	e004      	b.n	8109b2e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b24:	bf00      	nop
 8109b26:	e002      	b.n	8109b2e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b28:	bf00      	nop
 8109b2a:	e000      	b.n	8109b2e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8109b2c:	bf00      	nop
  }

  return usart_frequency;
 8109b2e:	697b      	ldr	r3, [r7, #20]
}
 8109b30:	4618      	mov	r0, r3
 8109b32:	371c      	adds	r7, #28
 8109b34:	46bd      	mov	sp, r7
 8109b36:	bd90      	pop	{r4, r7, pc}
 8109b38:	07050308 	.word	0x07050308
 8109b3c:	07050008 	.word	0x07050008
 8109b40:	07040308 	.word	0x07040308
 8109b44:	07040008 	.word	0x07040008
 8109b48:	07030308 	.word	0x07030308
 8109b4c:	07030008 	.word	0x07030008
 8109b50:	07020308 	.word	0x07020308
 8109b54:	07020008 	.word	0x07020008
 8109b58:	07010308 	.word	0x07010308
 8109b5c:	07010008 	.word	0x07010008
 8109b60:	07000008 	.word	0x07000008
 8109b64:	07000308 	.word	0x07000308
 8109b68:	0810ec60 	.word	0x0810ec60
 8109b6c:	03d09000 	.word	0x03d09000
 8109b70:	003d0900 	.word	0x003d0900

08109b74 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8109b74:	b580      	push	{r7, lr}
 8109b76:	b084      	sub	sp, #16
 8109b78:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8109b7a:	2300      	movs	r3, #0
 8109b7c:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8109b7e:	f7ff fa59 	bl	8109034 <LL_RCC_GetSysClkSource>
 8109b82:	4603      	mov	r3, r0
 8109b84:	2b18      	cmp	r3, #24
 8109b86:	d84b      	bhi.n	8109c20 <RCC_GetSystemClockFreq+0xac>
 8109b88:	a201      	add	r2, pc, #4	@ (adr r2, 8109b90 <RCC_GetSystemClockFreq+0x1c>)
 8109b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8109b8e:	bf00      	nop
 8109b90:	08109bf5 	.word	0x08109bf5
 8109b94:	08109c21 	.word	0x08109c21
 8109b98:	08109c21 	.word	0x08109c21
 8109b9c:	08109c21 	.word	0x08109c21
 8109ba0:	08109c21 	.word	0x08109c21
 8109ba4:	08109c21 	.word	0x08109c21
 8109ba8:	08109c21 	.word	0x08109c21
 8109bac:	08109c21 	.word	0x08109c21
 8109bb0:	08109c07 	.word	0x08109c07
 8109bb4:	08109c21 	.word	0x08109c21
 8109bb8:	08109c21 	.word	0x08109c21
 8109bbc:	08109c21 	.word	0x08109c21
 8109bc0:	08109c21 	.word	0x08109c21
 8109bc4:	08109c21 	.word	0x08109c21
 8109bc8:	08109c21 	.word	0x08109c21
 8109bcc:	08109c21 	.word	0x08109c21
 8109bd0:	08109c0d 	.word	0x08109c0d
 8109bd4:	08109c21 	.word	0x08109c21
 8109bd8:	08109c21 	.word	0x08109c21
 8109bdc:	08109c21 	.word	0x08109c21
 8109be0:	08109c21 	.word	0x08109c21
 8109be4:	08109c21 	.word	0x08109c21
 8109be8:	08109c21 	.word	0x08109c21
 8109bec:	08109c21 	.word	0x08109c21
 8109bf0:	08109c13 	.word	0x08109c13
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8109bf4:	f7ff f9ea 	bl	8108fcc <LL_RCC_HSI_GetDivider>
 8109bf8:	4603      	mov	r3, r0
 8109bfa:	08db      	lsrs	r3, r3, #3
 8109bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8109c2c <RCC_GetSystemClockFreq+0xb8>)
 8109bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8109c02:	60fb      	str	r3, [r7, #12]
      break;
 8109c04:	e00d      	b.n	8109c22 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8109c06:	4b0a      	ldr	r3, [pc, #40]	@ (8109c30 <RCC_GetSystemClockFreq+0xbc>)
 8109c08:	60fb      	str	r3, [r7, #12]
      break;
 8109c0a:	e00a      	b.n	8109c22 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8109c0c:	4b09      	ldr	r3, [pc, #36]	@ (8109c34 <RCC_GetSystemClockFreq+0xc0>)
 8109c0e:	60fb      	str	r3, [r7, #12]
      break;
 8109c10:	e007      	b.n	8109c22 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8109c12:	463b      	mov	r3, r7
 8109c14:	4618      	mov	r0, r3
 8109c16:	f7ff fcb5 	bl	8109584 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8109c1a:	683b      	ldr	r3, [r7, #0]
 8109c1c:	60fb      	str	r3, [r7, #12]
      break;
 8109c1e:	e000      	b.n	8109c22 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8109c20:	bf00      	nop
  }

  return frequency;
 8109c22:	68fb      	ldr	r3, [r7, #12]
}
 8109c24:	4618      	mov	r0, r3
 8109c26:	3710      	adds	r7, #16
 8109c28:	46bd      	mov	sp, r7
 8109c2a:	bd80      	pop	{r7, pc}
 8109c2c:	03d09000 	.word	0x03d09000
 8109c30:	003d0900 	.word	0x003d0900
 8109c34:	017d7840 	.word	0x017d7840

08109c38 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8109c38:	b580      	push	{r7, lr}
 8109c3a:	b082      	sub	sp, #8
 8109c3c:	af00      	add	r7, sp, #0
 8109c3e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8109c40:	f7ff fa14 	bl	810906c <LL_RCC_GetAHBPrescaler>
 8109c44:	4603      	mov	r3, r0
 8109c46:	f003 030f 	and.w	r3, r3, #15
 8109c4a:	4a05      	ldr	r2, [pc, #20]	@ (8109c60 <RCC_GetHCLKClockFreq+0x28>)
 8109c4c:	5cd3      	ldrb	r3, [r2, r3]
 8109c4e:	f003 031f 	and.w	r3, r3, #31
 8109c52:	687a      	ldr	r2, [r7, #4]
 8109c54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8109c58:	4618      	mov	r0, r3
 8109c5a:	3708      	adds	r7, #8
 8109c5c:	46bd      	mov	sp, r7
 8109c5e:	bd80      	pop	{r7, pc}
 8109c60:	0810ec60 	.word	0x0810ec60

08109c64 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8109c64:	b580      	push	{r7, lr}
 8109c66:	b082      	sub	sp, #8
 8109c68:	af00      	add	r7, sp, #0
 8109c6a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8109c6c:	f7ff fa0c 	bl	8109088 <LL_RCC_GetAPB1Prescaler>
 8109c70:	4603      	mov	r3, r0
 8109c72:	091b      	lsrs	r3, r3, #4
 8109c74:	f003 0307 	and.w	r3, r3, #7
 8109c78:	4a05      	ldr	r2, [pc, #20]	@ (8109c90 <RCC_GetPCLK1ClockFreq+0x2c>)
 8109c7a:	5cd3      	ldrb	r3, [r2, r3]
 8109c7c:	f003 031f 	and.w	r3, r3, #31
 8109c80:	687a      	ldr	r2, [r7, #4]
 8109c82:	fa22 f303 	lsr.w	r3, r2, r3
}
 8109c86:	4618      	mov	r0, r3
 8109c88:	3708      	adds	r7, #8
 8109c8a:	46bd      	mov	sp, r7
 8109c8c:	bd80      	pop	{r7, pc}
 8109c8e:	bf00      	nop
 8109c90:	0810ec60 	.word	0x0810ec60

08109c94 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8109c94:	b580      	push	{r7, lr}
 8109c96:	b082      	sub	sp, #8
 8109c98:	af00      	add	r7, sp, #0
 8109c9a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8109c9c:	f7ff fa02 	bl	81090a4 <LL_RCC_GetAPB2Prescaler>
 8109ca0:	4603      	mov	r3, r0
 8109ca2:	0a1b      	lsrs	r3, r3, #8
 8109ca4:	f003 0307 	and.w	r3, r3, #7
 8109ca8:	4a05      	ldr	r2, [pc, #20]	@ (8109cc0 <RCC_GetPCLK2ClockFreq+0x2c>)
 8109caa:	5cd3      	ldrb	r3, [r2, r3]
 8109cac:	f003 031f 	and.w	r3, r3, #31
 8109cb0:	687a      	ldr	r2, [r7, #4]
 8109cb2:	fa22 f303 	lsr.w	r3, r2, r3
}
 8109cb6:	4618      	mov	r0, r3
 8109cb8:	3708      	adds	r7, #8
 8109cba:	46bd      	mov	sp, r7
 8109cbc:	bd80      	pop	{r7, pc}
 8109cbe:	bf00      	nop
 8109cc0:	0810ec60 	.word	0x0810ec60

08109cc4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8109cc4:	b084      	sub	sp, #16
 8109cc6:	b480      	push	{r7}
 8109cc8:	b085      	sub	sp, #20
 8109cca:	af00      	add	r7, sp, #0
 8109ccc:	6078      	str	r0, [r7, #4]
 8109cce:	f107 001c 	add.w	r0, r7, #28
 8109cd2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8109cd6:	2300      	movs	r3, #0
 8109cd8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 8109cda:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8109cdc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8109cde:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8109ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8109ce2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8109ce4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8109ce6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8109ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 8109cea:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8109cec:	68fa      	ldr	r2, [r7, #12]
 8109cee:	4313      	orrs	r3, r2
 8109cf0:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8109cf2:	687b      	ldr	r3, [r7, #4]
 8109cf4:	685a      	ldr	r2, [r3, #4]
 8109cf6:	4b07      	ldr	r3, [pc, #28]	@ (8109d14 <SDMMC_Init+0x50>)
 8109cf8:	4013      	ands	r3, r2
 8109cfa:	68fa      	ldr	r2, [r7, #12]
 8109cfc:	431a      	orrs	r2, r3
 8109cfe:	687b      	ldr	r3, [r7, #4]
 8109d00:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8109d02:	2300      	movs	r3, #0
}
 8109d04:	4618      	mov	r0, r3
 8109d06:	3714      	adds	r7, #20
 8109d08:	46bd      	mov	sp, r7
 8109d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d0e:	b004      	add	sp, #16
 8109d10:	4770      	bx	lr
 8109d12:	bf00      	nop
 8109d14:	ffc02c00 	.word	0xffc02c00

08109d18 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8109d18:	b480      	push	{r7}
 8109d1a:	b083      	sub	sp, #12
 8109d1c:	af00      	add	r7, sp, #0
 8109d1e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8109d20:	687b      	ldr	r3, [r7, #4]
 8109d22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8109d26:	4618      	mov	r0, r3
 8109d28:	370c      	adds	r7, #12
 8109d2a:	46bd      	mov	sp, r7
 8109d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d30:	4770      	bx	lr

08109d32 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8109d32:	b480      	push	{r7}
 8109d34:	b083      	sub	sp, #12
 8109d36:	af00      	add	r7, sp, #0
 8109d38:	6078      	str	r0, [r7, #4]
 8109d3a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8109d3c:	683b      	ldr	r3, [r7, #0]
 8109d3e:	681a      	ldr	r2, [r3, #0]
 8109d40:	687b      	ldr	r3, [r7, #4]
 8109d42:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8109d46:	2300      	movs	r3, #0
}
 8109d48:	4618      	mov	r0, r3
 8109d4a:	370c      	adds	r7, #12
 8109d4c:	46bd      	mov	sp, r7
 8109d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d52:	4770      	bx	lr

08109d54 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8109d54:	b480      	push	{r7}
 8109d56:	b083      	sub	sp, #12
 8109d58:	af00      	add	r7, sp, #0
 8109d5a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8109d5c:	687b      	ldr	r3, [r7, #4]
 8109d5e:	681b      	ldr	r3, [r3, #0]
 8109d60:	f043 0203 	orr.w	r2, r3, #3
 8109d64:	687b      	ldr	r3, [r7, #4]
 8109d66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8109d68:	2300      	movs	r3, #0
}
 8109d6a:	4618      	mov	r0, r3
 8109d6c:	370c      	adds	r7, #12
 8109d6e:	46bd      	mov	sp, r7
 8109d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d74:	4770      	bx	lr

08109d76 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 8109d76:	b480      	push	{r7}
 8109d78:	b083      	sub	sp, #12
 8109d7a:	af00      	add	r7, sp, #0
 8109d7c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8109d7e:	687b      	ldr	r3, [r7, #4]
 8109d80:	681b      	ldr	r3, [r3, #0]
 8109d82:	f003 0303 	and.w	r3, r3, #3
}
 8109d86:	4618      	mov	r0, r3
 8109d88:	370c      	adds	r7, #12
 8109d8a:	46bd      	mov	sp, r7
 8109d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109d90:	4770      	bx	lr
	...

08109d94 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 8109d94:	b480      	push	{r7}
 8109d96:	b085      	sub	sp, #20
 8109d98:	af00      	add	r7, sp, #0
 8109d9a:	6078      	str	r0, [r7, #4]
 8109d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8109d9e:	2300      	movs	r3, #0
 8109da0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8109da2:	683b      	ldr	r3, [r7, #0]
 8109da4:	681a      	ldr	r2, [r3, #0]
 8109da6:	687b      	ldr	r3, [r7, #4]
 8109da8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109daa:	683b      	ldr	r3, [r7, #0]
 8109dac:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 8109dae:	683b      	ldr	r3, [r7, #0]
 8109db0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109db2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 8109db4:	683b      	ldr	r3, [r7, #0]
 8109db6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 8109db8:	431a      	orrs	r2, r3
                       Command->CPSM);
 8109dba:	683b      	ldr	r3, [r7, #0]
 8109dbc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8109dbe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8109dc0:	68fa      	ldr	r2, [r7, #12]
 8109dc2:	4313      	orrs	r3, r2
 8109dc4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8109dc6:	687b      	ldr	r3, [r7, #4]
 8109dc8:	68da      	ldr	r2, [r3, #12]
 8109dca:	4b06      	ldr	r3, [pc, #24]	@ (8109de4 <SDMMC_SendCommand+0x50>)
 8109dcc:	4013      	ands	r3, r2
 8109dce:	68fa      	ldr	r2, [r7, #12]
 8109dd0:	431a      	orrs	r2, r3
 8109dd2:	687b      	ldr	r3, [r7, #4]
 8109dd4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8109dd6:	2300      	movs	r3, #0
}
 8109dd8:	4618      	mov	r0, r3
 8109dda:	3714      	adds	r7, #20
 8109ddc:	46bd      	mov	sp, r7
 8109dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109de2:	4770      	bx	lr
 8109de4:	fffee0c0 	.word	0xfffee0c0

08109de8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8109de8:	b480      	push	{r7}
 8109dea:	b083      	sub	sp, #12
 8109dec:	af00      	add	r7, sp, #0
 8109dee:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8109df0:	687b      	ldr	r3, [r7, #4]
 8109df2:	691b      	ldr	r3, [r3, #16]
 8109df4:	b2db      	uxtb	r3, r3
}
 8109df6:	4618      	mov	r0, r3
 8109df8:	370c      	adds	r7, #12
 8109dfa:	46bd      	mov	sp, r7
 8109dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e00:	4770      	bx	lr

08109e02 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8109e02:	b480      	push	{r7}
 8109e04:	b085      	sub	sp, #20
 8109e06:	af00      	add	r7, sp, #0
 8109e08:	6078      	str	r0, [r7, #4]
 8109e0a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8109e0c:	687b      	ldr	r3, [r7, #4]
 8109e0e:	3314      	adds	r3, #20
 8109e10:	461a      	mov	r2, r3
 8109e12:	683b      	ldr	r3, [r7, #0]
 8109e14:	4413      	add	r3, r2
 8109e16:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8109e18:	68fb      	ldr	r3, [r7, #12]
 8109e1a:	681b      	ldr	r3, [r3, #0]
}
 8109e1c:	4618      	mov	r0, r3
 8109e1e:	3714      	adds	r7, #20
 8109e20:	46bd      	mov	sp, r7
 8109e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e26:	4770      	bx	lr

08109e28 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8109e28:	b480      	push	{r7}
 8109e2a:	b085      	sub	sp, #20
 8109e2c:	af00      	add	r7, sp, #0
 8109e2e:	6078      	str	r0, [r7, #4]
 8109e30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8109e32:	2300      	movs	r3, #0
 8109e34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8109e36:	683b      	ldr	r3, [r7, #0]
 8109e38:	681a      	ldr	r2, [r3, #0]
 8109e3a:	687b      	ldr	r3, [r7, #4]
 8109e3c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8109e3e:	683b      	ldr	r3, [r7, #0]
 8109e40:	685a      	ldr	r2, [r3, #4]
 8109e42:	687b      	ldr	r3, [r7, #4]
 8109e44:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109e46:	683b      	ldr	r3, [r7, #0]
 8109e48:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8109e4a:	683b      	ldr	r3, [r7, #0]
 8109e4c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109e4e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8109e50:	683b      	ldr	r3, [r7, #0]
 8109e52:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8109e54:	431a      	orrs	r2, r3
                       Data->DPSM);
 8109e56:	683b      	ldr	r3, [r7, #0]
 8109e58:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8109e5a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8109e5c:	68fa      	ldr	r2, [r7, #12]
 8109e5e:	4313      	orrs	r3, r2
 8109e60:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8109e62:	687b      	ldr	r3, [r7, #4]
 8109e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8109e66:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8109e6a:	68fb      	ldr	r3, [r7, #12]
 8109e6c:	431a      	orrs	r2, r3
 8109e6e:	687b      	ldr	r3, [r7, #4]
 8109e70:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8109e72:	2300      	movs	r3, #0

}
 8109e74:	4618      	mov	r0, r3
 8109e76:	3714      	adds	r7, #20
 8109e78:	46bd      	mov	sp, r7
 8109e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8109e7e:	4770      	bx	lr

08109e80 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8109e80:	b580      	push	{r7, lr}
 8109e82:	b088      	sub	sp, #32
 8109e84:	af00      	add	r7, sp, #0
 8109e86:	6078      	str	r0, [r7, #4]
 8109e88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8109e8a:	683b      	ldr	r3, [r7, #0]
 8109e8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8109e8e:	2310      	movs	r3, #16
 8109e90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109e92:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8109e96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109e98:	2300      	movs	r3, #0
 8109e9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109e9c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109ea0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109ea2:	f107 0308 	add.w	r3, r7, #8
 8109ea6:	4619      	mov	r1, r3
 8109ea8:	6878      	ldr	r0, [r7, #4]
 8109eaa:	f7ff ff73 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8109eae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109eb2:	2110      	movs	r1, #16
 8109eb4:	6878      	ldr	r0, [r7, #4]
 8109eb6:	f000 f971 	bl	810a19c <SDMMC_GetCmdResp1>
 8109eba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109ebc:	69fb      	ldr	r3, [r7, #28]
}
 8109ebe:	4618      	mov	r0, r3
 8109ec0:	3720      	adds	r7, #32
 8109ec2:	46bd      	mov	sp, r7
 8109ec4:	bd80      	pop	{r7, pc}
	...

08109ec8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8109ec8:	b580      	push	{r7, lr}
 8109eca:	b088      	sub	sp, #32
 8109ecc:	af00      	add	r7, sp, #0
 8109ece:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8109ed0:	2300      	movs	r3, #0
 8109ed2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8109ed4:	230c      	movs	r3, #12
 8109ed6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109ed8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8109edc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109ede:	2300      	movs	r3, #0
 8109ee0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109ee2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109ee6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8109ee8:	687b      	ldr	r3, [r7, #4]
 8109eea:	68db      	ldr	r3, [r3, #12]
 8109eec:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8109ef0:	687b      	ldr	r3, [r7, #4]
 8109ef2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8109ef4:	687b      	ldr	r3, [r7, #4]
 8109ef6:	68db      	ldr	r3, [r3, #12]
 8109ef8:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8109efc:	687b      	ldr	r3, [r7, #4]
 8109efe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109f00:	f107 0308 	add.w	r3, r7, #8
 8109f04:	4619      	mov	r1, r3
 8109f06:	6878      	ldr	r0, [r7, #4]
 8109f08:	f7ff ff44 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8109f0c:	4a0b      	ldr	r2, [pc, #44]	@ (8109f3c <SDMMC_CmdStopTransfer+0x74>)
 8109f0e:	210c      	movs	r1, #12
 8109f10:	6878      	ldr	r0, [r7, #4]
 8109f12:	f000 f943 	bl	810a19c <SDMMC_GetCmdResp1>
 8109f16:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8109f18:	687b      	ldr	r3, [r7, #4]
 8109f1a:	68db      	ldr	r3, [r3, #12]
 8109f1c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8109f20:	687b      	ldr	r3, [r7, #4]
 8109f22:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8109f24:	69fb      	ldr	r3, [r7, #28]
 8109f26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8109f2a:	d101      	bne.n	8109f30 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8109f2c:	2300      	movs	r3, #0
 8109f2e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8109f30:	69fb      	ldr	r3, [r7, #28]
}
 8109f32:	4618      	mov	r0, r3
 8109f34:	3720      	adds	r7, #32
 8109f36:	46bd      	mov	sp, r7
 8109f38:	bd80      	pop	{r7, pc}
 8109f3a:	bf00      	nop
 8109f3c:	05f5e100 	.word	0x05f5e100

08109f40 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8109f40:	b580      	push	{r7, lr}
 8109f42:	b088      	sub	sp, #32
 8109f44:	af00      	add	r7, sp, #0
 8109f46:	6078      	str	r0, [r7, #4]
 8109f48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8109f4a:	683b      	ldr	r3, [r7, #0]
 8109f4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8109f4e:	2307      	movs	r3, #7
 8109f50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8109f52:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8109f56:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109f58:	2300      	movs	r3, #0
 8109f5a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109f5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109f60:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109f62:	f107 0308 	add.w	r3, r7, #8
 8109f66:	4619      	mov	r1, r3
 8109f68:	6878      	ldr	r0, [r7, #4]
 8109f6a:	f7ff ff13 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8109f6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8109f72:	2107      	movs	r1, #7
 8109f74:	6878      	ldr	r0, [r7, #4]
 8109f76:	f000 f911 	bl	810a19c <SDMMC_GetCmdResp1>
 8109f7a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109f7c:	69fb      	ldr	r3, [r7, #28]
}
 8109f7e:	4618      	mov	r0, r3
 8109f80:	3720      	adds	r7, #32
 8109f82:	46bd      	mov	sp, r7
 8109f84:	bd80      	pop	{r7, pc}

08109f86 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8109f86:	b580      	push	{r7, lr}
 8109f88:	b088      	sub	sp, #32
 8109f8a:	af00      	add	r7, sp, #0
 8109f8c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8109f8e:	2300      	movs	r3, #0
 8109f90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8109f92:	2300      	movs	r3, #0
 8109f94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8109f96:	2300      	movs	r3, #0
 8109f98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109f9a:	2300      	movs	r3, #0
 8109f9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109f9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109fa2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109fa4:	f107 0308 	add.w	r3, r7, #8
 8109fa8:	4619      	mov	r1, r3
 8109faa:	6878      	ldr	r0, [r7, #4]
 8109fac:	f7ff fef2 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8109fb0:	6878      	ldr	r0, [r7, #4]
 8109fb2:	f000 fa6f 	bl	810a494 <SDMMC_GetCmdError>
 8109fb6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109fb8:	69fb      	ldr	r3, [r7, #28]
}
 8109fba:	4618      	mov	r0, r3
 8109fbc:	3720      	adds	r7, #32
 8109fbe:	46bd      	mov	sp, r7
 8109fc0:	bd80      	pop	{r7, pc}

08109fc2 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8109fc2:	b580      	push	{r7, lr}
 8109fc4:	b088      	sub	sp, #32
 8109fc6:	af00      	add	r7, sp, #0
 8109fc8:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8109fca:	2300      	movs	r3, #0
 8109fcc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8109fce:	2302      	movs	r3, #2
 8109fd0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8109fd2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8109fd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8109fd8:	2300      	movs	r3, #0
 8109fda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8109fdc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8109fe0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8109fe2:	f107 0308 	add.w	r3, r7, #8
 8109fe6:	4619      	mov	r1, r3
 8109fe8:	6878      	ldr	r0, [r7, #4]
 8109fea:	f7ff fed3 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8109fee:	6878      	ldr	r0, [r7, #4]
 8109ff0:	f000 f9c6 	bl	810a380 <SDMMC_GetCmdResp2>
 8109ff4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8109ff6:	69fb      	ldr	r3, [r7, #28]
}
 8109ff8:	4618      	mov	r0, r3
 8109ffa:	3720      	adds	r7, #32
 8109ffc:	46bd      	mov	sp, r7
 8109ffe:	bd80      	pop	{r7, pc}

0810a000 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a000:	b580      	push	{r7, lr}
 810a002:	b088      	sub	sp, #32
 810a004:	af00      	add	r7, sp, #0
 810a006:	6078      	str	r0, [r7, #4]
 810a008:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810a00a:	683b      	ldr	r3, [r7, #0]
 810a00c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 810a00e:	2309      	movs	r3, #9
 810a010:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 810a012:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810a016:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a018:	2300      	movs	r3, #0
 810a01a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a01c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a020:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a022:	f107 0308 	add.w	r3, r7, #8
 810a026:	4619      	mov	r1, r3
 810a028:	6878      	ldr	r0, [r7, #4]
 810a02a:	f7ff feb3 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 810a02e:	6878      	ldr	r0, [r7, #4]
 810a030:	f000 f9a6 	bl	810a380 <SDMMC_GetCmdResp2>
 810a034:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a036:	69fb      	ldr	r3, [r7, #28]
}
 810a038:	4618      	mov	r0, r3
 810a03a:	3720      	adds	r7, #32
 810a03c:	46bd      	mov	sp, r7
 810a03e:	bd80      	pop	{r7, pc}

0810a040 <SDMMC_CmdSetRelAddMmc>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  RCA Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAddMmc(SDMMC_TypeDef *SDMMCx, uint16_t RCA)
{
 810a040:	b580      	push	{r7, lr}
 810a042:	b088      	sub	sp, #32
 810a044:	af00      	add	r7, sp, #0
 810a046:	6078      	str	r0, [r7, #4]
 810a048:	460b      	mov	r3, r1
 810a04a:	807b      	strh	r3, [r7, #2]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = ((uint32_t)RCA << 16U);
 810a04c:	887b      	ldrh	r3, [r7, #2]
 810a04e:	041b      	lsls	r3, r3, #16
 810a050:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 810a052:	2303      	movs	r3, #3
 810a054:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a056:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a05a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a05c:	2300      	movs	r3, #0
 810a05e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a060:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a064:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a066:	f107 0308 	add.w	r3, r7, #8
 810a06a:	4619      	mov	r1, r3
 810a06c:	6878      	ldr	r0, [r7, #4]
 810a06e:	f7ff fe91 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_REL_ADDR, SDMMC_CMDTIMEOUT);
 810a072:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a076:	2103      	movs	r1, #3
 810a078:	6878      	ldr	r0, [r7, #4]
 810a07a:	f000 f88f 	bl	810a19c <SDMMC_GetCmdResp1>
 810a07e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a080:	69fb      	ldr	r3, [r7, #28]
}
 810a082:	4618      	mov	r0, r3
 810a084:	3720      	adds	r7, #32
 810a086:	46bd      	mov	sp, r7
 810a088:	bd80      	pop	{r7, pc}

0810a08a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a08a:	b580      	push	{r7, lr}
 810a08c:	b088      	sub	sp, #32
 810a08e:	af00      	add	r7, sp, #0
 810a090:	6078      	str	r0, [r7, #4]
 810a092:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810a094:	683b      	ldr	r3, [r7, #0]
 810a096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 810a098:	230d      	movs	r3, #13
 810a09a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a09c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a0a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a0a2:	2300      	movs	r3, #0
 810a0a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a0a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a0aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a0ac:	f107 0308 	add.w	r3, r7, #8
 810a0b0:	4619      	mov	r1, r3
 810a0b2:	6878      	ldr	r0, [r7, #4]
 810a0b4:	f7ff fe6e 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 810a0b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a0bc:	210d      	movs	r1, #13
 810a0be:	6878      	ldr	r0, [r7, #4]
 810a0c0:	f000 f86c 	bl	810a19c <SDMMC_GetCmdResp1>
 810a0c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a0c6:	69fb      	ldr	r3, [r7, #28]
}
 810a0c8:	4618      	mov	r0, r3
 810a0ca:	3720      	adds	r7, #32
 810a0cc:	46bd      	mov	sp, r7
 810a0ce:	bd80      	pop	{r7, pc}

0810a0d0 <SDMMC_CmdOpCondition>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdOpCondition(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a0d0:	b580      	push	{r7, lr}
 810a0d2:	b088      	sub	sp, #32
 810a0d4:	af00      	add	r7, sp, #0
 810a0d6:	6078      	str	r0, [r7, #4]
 810a0d8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 810a0da:	683b      	ldr	r3, [r7, #0]
 810a0dc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_OP_COND;
 810a0de:	2301      	movs	r3, #1
 810a0e0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a0e2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a0e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a0e8:	2300      	movs	r3, #0
 810a0ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a0ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a0f0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a0f2:	f107 0308 	add.w	r3, r7, #8
 810a0f6:	4619      	mov	r1, r3
 810a0f8:	6878      	ldr	r0, [r7, #4]
 810a0fa:	f7ff fe4b 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 810a0fe:	6878      	ldr	r0, [r7, #4]
 810a100:	f000 f988 	bl	810a414 <SDMMC_GetCmdResp3>
 810a104:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a106:	69fb      	ldr	r3, [r7, #28]
}
 810a108:	4618      	mov	r0, r3
 810a10a:	3720      	adds	r7, #32
 810a10c:	46bd      	mov	sp, r7
 810a10e:	bd80      	pop	{r7, pc}

0810a110 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a110:	b580      	push	{r7, lr}
 810a112:	b088      	sub	sp, #32
 810a114:	af00      	add	r7, sp, #0
 810a116:	6078      	str	r0, [r7, #4]
 810a118:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 810a11a:	683b      	ldr	r3, [r7, #0]
 810a11c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 810a11e:	2306      	movs	r3, #6
 810a120:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a122:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a128:	2300      	movs	r3, #0
 810a12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a12c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a130:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a132:	f107 0308 	add.w	r3, r7, #8
 810a136:	4619      	mov	r1, r3
 810a138:	6878      	ldr	r0, [r7, #4]
 810a13a:	f7ff fe2b 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 810a13e:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a142:	2106      	movs	r1, #6
 810a144:	6878      	ldr	r0, [r7, #4]
 810a146:	f000 f829 	bl	810a19c <SDMMC_GetCmdResp1>
 810a14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a14c:	69fb      	ldr	r3, [r7, #28]
}
 810a14e:	4618      	mov	r0, r3
 810a150:	3720      	adds	r7, #32
 810a152:	46bd      	mov	sp, r7
 810a154:	bd80      	pop	{r7, pc}

0810a156 <SDMMC_CmdSendEXTCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendEXTCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 810a156:	b580      	push	{r7, lr}
 810a158:	b088      	sub	sp, #32
 810a15a:	af00      	add	r7, sp, #0
 810a15c:	6078      	str	r0, [r7, #4]
 810a15e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 810a160:	683b      	ldr	r3, [r7, #0]
 810a162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 810a164:	2308      	movs	r3, #8
 810a166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 810a168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a16c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 810a16e:	2300      	movs	r3, #0
 810a170:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 810a172:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a176:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 810a178:	f107 0308 	add.w	r3, r7, #8
 810a17c:	4619      	mov	r1, r3
 810a17e:	6878      	ldr	r0, [r7, #4]
 810a180:	f7ff fe08 	bl	8109d94 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SEND_EXT_CSD, SDMMC_CMDTIMEOUT);
 810a184:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a188:	2108      	movs	r1, #8
 810a18a:	6878      	ldr	r0, [r7, #4]
 810a18c:	f000 f806 	bl	810a19c <SDMMC_GetCmdResp1>
 810a190:	61f8      	str	r0, [r7, #28]

  return errorstate;
 810a192:	69fb      	ldr	r3, [r7, #28]
}
 810a194:	4618      	mov	r0, r3
 810a196:	3720      	adds	r7, #32
 810a198:	46bd      	mov	sp, r7
 810a19a:	bd80      	pop	{r7, pc}

0810a19c <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 810a19c:	b580      	push	{r7, lr}
 810a19e:	b088      	sub	sp, #32
 810a1a0:	af00      	add	r7, sp, #0
 810a1a2:	60f8      	str	r0, [r7, #12]
 810a1a4:	460b      	mov	r3, r1
 810a1a6:	607a      	str	r2, [r7, #4]
 810a1a8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 810a1aa:	4b70      	ldr	r3, [pc, #448]	@ (810a36c <SDMMC_GetCmdResp1+0x1d0>)
 810a1ac:	681b      	ldr	r3, [r3, #0]
 810a1ae:	4a70      	ldr	r2, [pc, #448]	@ (810a370 <SDMMC_GetCmdResp1+0x1d4>)
 810a1b0:	fba2 2303 	umull	r2, r3, r2, r3
 810a1b4:	0a5a      	lsrs	r2, r3, #9
 810a1b6:	687b      	ldr	r3, [r7, #4]
 810a1b8:	fb02 f303 	mul.w	r3, r2, r3
 810a1bc:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 810a1be:	69fb      	ldr	r3, [r7, #28]
 810a1c0:	1e5a      	subs	r2, r3, #1
 810a1c2:	61fa      	str	r2, [r7, #28]
 810a1c4:	2b00      	cmp	r3, #0
 810a1c6:	d102      	bne.n	810a1ce <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a1c8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a1cc:	e0c9      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 810a1ce:	68fb      	ldr	r3, [r7, #12]
 810a1d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a1d2:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 810a1d4:	69ba      	ldr	r2, [r7, #24]
 810a1d6:	4b67      	ldr	r3, [pc, #412]	@ (810a374 <SDMMC_GetCmdResp1+0x1d8>)
 810a1d8:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a1da:	2b00      	cmp	r3, #0
 810a1dc:	d0ef      	beq.n	810a1be <SDMMC_GetCmdResp1+0x22>
 810a1de:	69bb      	ldr	r3, [r7, #24]
 810a1e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810a1e4:	2b00      	cmp	r3, #0
 810a1e6:	d1ea      	bne.n	810a1be <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a1e8:	68fb      	ldr	r3, [r7, #12]
 810a1ea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a1ec:	f003 0304 	and.w	r3, r3, #4
 810a1f0:	2b00      	cmp	r3, #0
 810a1f2:	d004      	beq.n	810a1fe <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a1f4:	68fb      	ldr	r3, [r7, #12]
 810a1f6:	2204      	movs	r2, #4
 810a1f8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a1fa:	2304      	movs	r3, #4
 810a1fc:	e0b1      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810a1fe:	68fb      	ldr	r3, [r7, #12]
 810a200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a202:	f003 0301 	and.w	r3, r3, #1
 810a206:	2b00      	cmp	r3, #0
 810a208:	d004      	beq.n	810a214 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810a20a:	68fb      	ldr	r3, [r7, #12]
 810a20c:	2201      	movs	r2, #1
 810a20e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a210:	2301      	movs	r3, #1
 810a212:	e0a6      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a214:	68fb      	ldr	r3, [r7, #12]
 810a216:	4a58      	ldr	r2, [pc, #352]	@ (810a378 <SDMMC_GetCmdResp1+0x1dc>)
 810a218:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 810a21a:	68f8      	ldr	r0, [r7, #12]
 810a21c:	f7ff fde4 	bl	8109de8 <SDMMC_GetCommandResponse>
 810a220:	4603      	mov	r3, r0
 810a222:	461a      	mov	r2, r3
 810a224:	7afb      	ldrb	r3, [r7, #11]
 810a226:	4293      	cmp	r3, r2
 810a228:	d001      	beq.n	810a22e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a22a:	2301      	movs	r3, #1
 810a22c:	e099      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 810a22e:	2100      	movs	r1, #0
 810a230:	68f8      	ldr	r0, [r7, #12]
 810a232:	f7ff fde6 	bl	8109e02 <SDMMC_GetResponse>
 810a236:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 810a238:	697a      	ldr	r2, [r7, #20]
 810a23a:	4b50      	ldr	r3, [pc, #320]	@ (810a37c <SDMMC_GetCmdResp1+0x1e0>)
 810a23c:	4013      	ands	r3, r2
 810a23e:	2b00      	cmp	r3, #0
 810a240:	d101      	bne.n	810a246 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 810a242:	2300      	movs	r3, #0
 810a244:	e08d      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 810a246:	697b      	ldr	r3, [r7, #20]
 810a248:	2b00      	cmp	r3, #0
 810a24a:	da02      	bge.n	810a252 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 810a24c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 810a250:	e087      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 810a252:	697b      	ldr	r3, [r7, #20]
 810a254:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 810a258:	2b00      	cmp	r3, #0
 810a25a:	d001      	beq.n	810a260 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 810a25c:	2340      	movs	r3, #64	@ 0x40
 810a25e:	e080      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 810a260:	697b      	ldr	r3, [r7, #20]
 810a262:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810a266:	2b00      	cmp	r3, #0
 810a268:	d001      	beq.n	810a26e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 810a26a:	2380      	movs	r3, #128	@ 0x80
 810a26c:	e079      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 810a26e:	697b      	ldr	r3, [r7, #20]
 810a270:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 810a274:	2b00      	cmp	r3, #0
 810a276:	d002      	beq.n	810a27e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 810a278:	f44f 7380 	mov.w	r3, #256	@ 0x100
 810a27c:	e071      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 810a27e:	697b      	ldr	r3, [r7, #20]
 810a280:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810a284:	2b00      	cmp	r3, #0
 810a286:	d002      	beq.n	810a28e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 810a288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810a28c:	e069      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 810a28e:	697b      	ldr	r3, [r7, #20]
 810a290:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 810a294:	2b00      	cmp	r3, #0
 810a296:	d002      	beq.n	810a29e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 810a298:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810a29c:	e061      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 810a29e:	697b      	ldr	r3, [r7, #20]
 810a2a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 810a2a4:	2b00      	cmp	r3, #0
 810a2a6:	d002      	beq.n	810a2ae <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 810a2a8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810a2ac:	e059      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 810a2ae:	697b      	ldr	r3, [r7, #20]
 810a2b0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 810a2b4:	2b00      	cmp	r3, #0
 810a2b6:	d002      	beq.n	810a2be <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 810a2b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 810a2bc:	e051      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 810a2be:	697b      	ldr	r3, [r7, #20]
 810a2c0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 810a2c4:	2b00      	cmp	r3, #0
 810a2c6:	d002      	beq.n	810a2ce <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 810a2c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 810a2cc:	e049      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 810a2ce:	697b      	ldr	r3, [r7, #20]
 810a2d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810a2d4:	2b00      	cmp	r3, #0
 810a2d6:	d002      	beq.n	810a2de <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 810a2d8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 810a2dc:	e041      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 810a2de:	697b      	ldr	r3, [r7, #20]
 810a2e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 810a2e4:	2b00      	cmp	r3, #0
 810a2e6:	d002      	beq.n	810a2ee <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 810a2e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 810a2ec:	e039      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 810a2ee:	697b      	ldr	r3, [r7, #20]
 810a2f0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 810a2f4:	2b00      	cmp	r3, #0
 810a2f6:	d002      	beq.n	810a2fe <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 810a2f8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 810a2fc:	e031      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 810a2fe:	697b      	ldr	r3, [r7, #20]
 810a300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810a304:	2b00      	cmp	r3, #0
 810a306:	d002      	beq.n	810a30e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 810a308:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 810a30c:	e029      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 810a30e:	697b      	ldr	r3, [r7, #20]
 810a310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810a314:	2b00      	cmp	r3, #0
 810a316:	d002      	beq.n	810a31e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 810a318:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 810a31c:	e021      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 810a31e:	697b      	ldr	r3, [r7, #20]
 810a320:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810a324:	2b00      	cmp	r3, #0
 810a326:	d002      	beq.n	810a32e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 810a328:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 810a32c:	e019      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 810a32e:	697b      	ldr	r3, [r7, #20]
 810a330:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810a334:	2b00      	cmp	r3, #0
 810a336:	d002      	beq.n	810a33e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 810a338:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810a33c:	e011      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 810a33e:	697b      	ldr	r3, [r7, #20]
 810a340:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 810a344:	2b00      	cmp	r3, #0
 810a346:	d002      	beq.n	810a34e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 810a348:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 810a34c:	e009      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 810a34e:	697b      	ldr	r3, [r7, #20]
 810a350:	f003 0308 	and.w	r3, r3, #8
 810a354:	2b00      	cmp	r3, #0
 810a356:	d002      	beq.n	810a35e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 810a358:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 810a35c:	e001      	b.n	810a362 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 810a35e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 810a362:	4618      	mov	r0, r3
 810a364:	3720      	adds	r7, #32
 810a366:	46bd      	mov	sp, r7
 810a368:	bd80      	pop	{r7, pc}
 810a36a:	bf00      	nop
 810a36c:	100320f0 	.word	0x100320f0
 810a370:	10624dd3 	.word	0x10624dd3
 810a374:	00200045 	.word	0x00200045
 810a378:	002000c5 	.word	0x002000c5
 810a37c:	fdffe008 	.word	0xfdffe008

0810a380 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 810a380:	b480      	push	{r7}
 810a382:	b085      	sub	sp, #20
 810a384:	af00      	add	r7, sp, #0
 810a386:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a388:	4b1f      	ldr	r3, [pc, #124]	@ (810a408 <SDMMC_GetCmdResp2+0x88>)
 810a38a:	681b      	ldr	r3, [r3, #0]
 810a38c:	4a1f      	ldr	r2, [pc, #124]	@ (810a40c <SDMMC_GetCmdResp2+0x8c>)
 810a38e:	fba2 2303 	umull	r2, r3, r2, r3
 810a392:	0a5b      	lsrs	r3, r3, #9
 810a394:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a398:	fb02 f303 	mul.w	r3, r2, r3
 810a39c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a39e:	68fb      	ldr	r3, [r7, #12]
 810a3a0:	1e5a      	subs	r2, r3, #1
 810a3a2:	60fa      	str	r2, [r7, #12]
 810a3a4:	2b00      	cmp	r3, #0
 810a3a6:	d102      	bne.n	810a3ae <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a3a8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a3ac:	e026      	b.n	810a3fc <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 810a3ae:	687b      	ldr	r3, [r7, #4]
 810a3b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3b2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a3b4:	68bb      	ldr	r3, [r7, #8]
 810a3b6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810a3ba:	2b00      	cmp	r3, #0
 810a3bc:	d0ef      	beq.n	810a39e <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a3be:	68bb      	ldr	r3, [r7, #8]
 810a3c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a3c4:	2b00      	cmp	r3, #0
 810a3c6:	d1ea      	bne.n	810a39e <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a3c8:	687b      	ldr	r3, [r7, #4]
 810a3ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3cc:	f003 0304 	and.w	r3, r3, #4
 810a3d0:	2b00      	cmp	r3, #0
 810a3d2:	d004      	beq.n	810a3de <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a3d4:	687b      	ldr	r3, [r7, #4]
 810a3d6:	2204      	movs	r2, #4
 810a3d8:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a3da:	2304      	movs	r3, #4
 810a3dc:	e00e      	b.n	810a3fc <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 810a3de:	687b      	ldr	r3, [r7, #4]
 810a3e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a3e2:	f003 0301 	and.w	r3, r3, #1
 810a3e6:	2b00      	cmp	r3, #0
 810a3e8:	d004      	beq.n	810a3f4 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 810a3ea:	687b      	ldr	r3, [r7, #4]
 810a3ec:	2201      	movs	r2, #1
 810a3ee:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 810a3f0:	2301      	movs	r3, #1
 810a3f2:	e003      	b.n	810a3fc <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a3f4:	687b      	ldr	r3, [r7, #4]
 810a3f6:	4a06      	ldr	r2, [pc, #24]	@ (810a410 <SDMMC_GetCmdResp2+0x90>)
 810a3f8:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810a3fa:	2300      	movs	r3, #0
}
 810a3fc:	4618      	mov	r0, r3
 810a3fe:	3714      	adds	r7, #20
 810a400:	46bd      	mov	sp, r7
 810a402:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a406:	4770      	bx	lr
 810a408:	100320f0 	.word	0x100320f0
 810a40c:	10624dd3 	.word	0x10624dd3
 810a410:	002000c5 	.word	0x002000c5

0810a414 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 810a414:	b480      	push	{r7}
 810a416:	b085      	sub	sp, #20
 810a418:	af00      	add	r7, sp, #0
 810a41a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a41c:	4b1a      	ldr	r3, [pc, #104]	@ (810a488 <SDMMC_GetCmdResp3+0x74>)
 810a41e:	681b      	ldr	r3, [r3, #0]
 810a420:	4a1a      	ldr	r2, [pc, #104]	@ (810a48c <SDMMC_GetCmdResp3+0x78>)
 810a422:	fba2 2303 	umull	r2, r3, r2, r3
 810a426:	0a5b      	lsrs	r3, r3, #9
 810a428:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a42c:	fb02 f303 	mul.w	r3, r2, r3
 810a430:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a432:	68fb      	ldr	r3, [r7, #12]
 810a434:	1e5a      	subs	r2, r3, #1
 810a436:	60fa      	str	r2, [r7, #12]
 810a438:	2b00      	cmp	r3, #0
 810a43a:	d102      	bne.n	810a442 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a43c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a440:	e01b      	b.n	810a47a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 810a442:	687b      	ldr	r3, [r7, #4]
 810a444:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a446:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a448:	68bb      	ldr	r3, [r7, #8]
 810a44a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 810a44e:	2b00      	cmp	r3, #0
 810a450:	d0ef      	beq.n	810a432 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 810a452:	68bb      	ldr	r3, [r7, #8]
 810a454:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 810a458:	2b00      	cmp	r3, #0
 810a45a:	d1ea      	bne.n	810a432 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 810a45c:	687b      	ldr	r3, [r7, #4]
 810a45e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a460:	f003 0304 	and.w	r3, r3, #4
 810a464:	2b00      	cmp	r3, #0
 810a466:	d004      	beq.n	810a472 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 810a468:	687b      	ldr	r3, [r7, #4]
 810a46a:	2204      	movs	r2, #4
 810a46c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 810a46e:	2304      	movs	r3, #4
 810a470:	e003      	b.n	810a47a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a472:	687b      	ldr	r3, [r7, #4]
 810a474:	4a06      	ldr	r2, [pc, #24]	@ (810a490 <SDMMC_GetCmdResp3+0x7c>)
 810a476:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 810a478:	2300      	movs	r3, #0
}
 810a47a:	4618      	mov	r0, r3
 810a47c:	3714      	adds	r7, #20
 810a47e:	46bd      	mov	sp, r7
 810a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a484:	4770      	bx	lr
 810a486:	bf00      	nop
 810a488:	100320f0 	.word	0x100320f0
 810a48c:	10624dd3 	.word	0x10624dd3
 810a490:	002000c5 	.word	0x002000c5

0810a494 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 810a494:	b480      	push	{r7}
 810a496:	b085      	sub	sp, #20
 810a498:	af00      	add	r7, sp, #0
 810a49a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 810a49c:	4b11      	ldr	r3, [pc, #68]	@ (810a4e4 <SDMMC_GetCmdError+0x50>)
 810a49e:	681b      	ldr	r3, [r3, #0]
 810a4a0:	4a11      	ldr	r2, [pc, #68]	@ (810a4e8 <SDMMC_GetCmdError+0x54>)
 810a4a2:	fba2 2303 	umull	r2, r3, r2, r3
 810a4a6:	0a5b      	lsrs	r3, r3, #9
 810a4a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 810a4ac:	fb02 f303 	mul.w	r3, r2, r3
 810a4b0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 810a4b2:	68fb      	ldr	r3, [r7, #12]
 810a4b4:	1e5a      	subs	r2, r3, #1
 810a4b6:	60fa      	str	r2, [r7, #12]
 810a4b8:	2b00      	cmp	r3, #0
 810a4ba:	d102      	bne.n	810a4c2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 810a4bc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 810a4c0:	e009      	b.n	810a4d6 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 810a4c2:	687b      	ldr	r3, [r7, #4]
 810a4c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810a4c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 810a4ca:	2b00      	cmp	r3, #0
 810a4cc:	d0f1      	beq.n	810a4b2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 810a4ce:	687b      	ldr	r3, [r7, #4]
 810a4d0:	4a06      	ldr	r2, [pc, #24]	@ (810a4ec <SDMMC_GetCmdError+0x58>)
 810a4d2:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 810a4d4:	2300      	movs	r3, #0
}
 810a4d6:	4618      	mov	r0, r3
 810a4d8:	3714      	adds	r7, #20
 810a4da:	46bd      	mov	sp, r7
 810a4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a4e0:	4770      	bx	lr
 810a4e2:	bf00      	nop
 810a4e4:	100320f0 	.word	0x100320f0
 810a4e8:	10624dd3 	.word	0x10624dd3
 810a4ec:	002000c5 	.word	0x002000c5

0810a4f0 <LL_TIM_SetPrescaler>:
{
 810a4f0:	b480      	push	{r7}
 810a4f2:	b083      	sub	sp, #12
 810a4f4:	af00      	add	r7, sp, #0
 810a4f6:	6078      	str	r0, [r7, #4]
 810a4f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 810a4fa:	687b      	ldr	r3, [r7, #4]
 810a4fc:	683a      	ldr	r2, [r7, #0]
 810a4fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 810a500:	bf00      	nop
 810a502:	370c      	adds	r7, #12
 810a504:	46bd      	mov	sp, r7
 810a506:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a50a:	4770      	bx	lr

0810a50c <LL_TIM_SetAutoReload>:
{
 810a50c:	b480      	push	{r7}
 810a50e:	b083      	sub	sp, #12
 810a510:	af00      	add	r7, sp, #0
 810a512:	6078      	str	r0, [r7, #4]
 810a514:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 810a516:	687b      	ldr	r3, [r7, #4]
 810a518:	683a      	ldr	r2, [r7, #0]
 810a51a:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 810a51c:	bf00      	nop
 810a51e:	370c      	adds	r7, #12
 810a520:	46bd      	mov	sp, r7
 810a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a526:	4770      	bx	lr

0810a528 <LL_TIM_SetRepetitionCounter>:
{
 810a528:	b480      	push	{r7}
 810a52a:	b083      	sub	sp, #12
 810a52c:	af00      	add	r7, sp, #0
 810a52e:	6078      	str	r0, [r7, #4]
 810a530:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 810a532:	687b      	ldr	r3, [r7, #4]
 810a534:	683a      	ldr	r2, [r7, #0]
 810a536:	631a      	str	r2, [r3, #48]	@ 0x30
}
 810a538:	bf00      	nop
 810a53a:	370c      	adds	r7, #12
 810a53c:	46bd      	mov	sp, r7
 810a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a542:	4770      	bx	lr

0810a544 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 810a544:	b480      	push	{r7}
 810a546:	b083      	sub	sp, #12
 810a548:	af00      	add	r7, sp, #0
 810a54a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 810a54c:	687b      	ldr	r3, [r7, #4]
 810a54e:	695b      	ldr	r3, [r3, #20]
 810a550:	f043 0201 	orr.w	r2, r3, #1
 810a554:	687b      	ldr	r3, [r7, #4]
 810a556:	615a      	str	r2, [r3, #20]
}
 810a558:	bf00      	nop
 810a55a:	370c      	adds	r7, #12
 810a55c:	46bd      	mov	sp, r7
 810a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a562:	4770      	bx	lr

0810a564 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 810a564:	b580      	push	{r7, lr}
 810a566:	b084      	sub	sp, #16
 810a568:	af00      	add	r7, sp, #0
 810a56a:	6078      	str	r0, [r7, #4]
 810a56c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 810a56e:	687b      	ldr	r3, [r7, #4]
 810a570:	681b      	ldr	r3, [r3, #0]
 810a572:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 810a574:	687b      	ldr	r3, [r7, #4]
 810a576:	4a3d      	ldr	r2, [pc, #244]	@ (810a66c <LL_TIM_Init+0x108>)
 810a578:	4293      	cmp	r3, r2
 810a57a:	d013      	beq.n	810a5a4 <LL_TIM_Init+0x40>
 810a57c:	687b      	ldr	r3, [r7, #4]
 810a57e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a582:	d00f      	beq.n	810a5a4 <LL_TIM_Init+0x40>
 810a584:	687b      	ldr	r3, [r7, #4]
 810a586:	4a3a      	ldr	r2, [pc, #232]	@ (810a670 <LL_TIM_Init+0x10c>)
 810a588:	4293      	cmp	r3, r2
 810a58a:	d00b      	beq.n	810a5a4 <LL_TIM_Init+0x40>
 810a58c:	687b      	ldr	r3, [r7, #4]
 810a58e:	4a39      	ldr	r2, [pc, #228]	@ (810a674 <LL_TIM_Init+0x110>)
 810a590:	4293      	cmp	r3, r2
 810a592:	d007      	beq.n	810a5a4 <LL_TIM_Init+0x40>
 810a594:	687b      	ldr	r3, [r7, #4]
 810a596:	4a38      	ldr	r2, [pc, #224]	@ (810a678 <LL_TIM_Init+0x114>)
 810a598:	4293      	cmp	r3, r2
 810a59a:	d003      	beq.n	810a5a4 <LL_TIM_Init+0x40>
 810a59c:	687b      	ldr	r3, [r7, #4]
 810a59e:	4a37      	ldr	r2, [pc, #220]	@ (810a67c <LL_TIM_Init+0x118>)
 810a5a0:	4293      	cmp	r3, r2
 810a5a2:	d106      	bne.n	810a5b2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 810a5a4:	68fb      	ldr	r3, [r7, #12]
 810a5a6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 810a5aa:	683b      	ldr	r3, [r7, #0]
 810a5ac:	685b      	ldr	r3, [r3, #4]
 810a5ae:	4313      	orrs	r3, r2
 810a5b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 810a5b2:	687b      	ldr	r3, [r7, #4]
 810a5b4:	4a2d      	ldr	r2, [pc, #180]	@ (810a66c <LL_TIM_Init+0x108>)
 810a5b6:	4293      	cmp	r3, r2
 810a5b8:	d01f      	beq.n	810a5fa <LL_TIM_Init+0x96>
 810a5ba:	687b      	ldr	r3, [r7, #4]
 810a5bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810a5c0:	d01b      	beq.n	810a5fa <LL_TIM_Init+0x96>
 810a5c2:	687b      	ldr	r3, [r7, #4]
 810a5c4:	4a2a      	ldr	r2, [pc, #168]	@ (810a670 <LL_TIM_Init+0x10c>)
 810a5c6:	4293      	cmp	r3, r2
 810a5c8:	d017      	beq.n	810a5fa <LL_TIM_Init+0x96>
 810a5ca:	687b      	ldr	r3, [r7, #4]
 810a5cc:	4a29      	ldr	r2, [pc, #164]	@ (810a674 <LL_TIM_Init+0x110>)
 810a5ce:	4293      	cmp	r3, r2
 810a5d0:	d013      	beq.n	810a5fa <LL_TIM_Init+0x96>
 810a5d2:	687b      	ldr	r3, [r7, #4]
 810a5d4:	4a28      	ldr	r2, [pc, #160]	@ (810a678 <LL_TIM_Init+0x114>)
 810a5d6:	4293      	cmp	r3, r2
 810a5d8:	d00f      	beq.n	810a5fa <LL_TIM_Init+0x96>
 810a5da:	687b      	ldr	r3, [r7, #4]
 810a5dc:	4a27      	ldr	r2, [pc, #156]	@ (810a67c <LL_TIM_Init+0x118>)
 810a5de:	4293      	cmp	r3, r2
 810a5e0:	d00b      	beq.n	810a5fa <LL_TIM_Init+0x96>
 810a5e2:	687b      	ldr	r3, [r7, #4]
 810a5e4:	4a26      	ldr	r2, [pc, #152]	@ (810a680 <LL_TIM_Init+0x11c>)
 810a5e6:	4293      	cmp	r3, r2
 810a5e8:	d007      	beq.n	810a5fa <LL_TIM_Init+0x96>
 810a5ea:	687b      	ldr	r3, [r7, #4]
 810a5ec:	4a25      	ldr	r2, [pc, #148]	@ (810a684 <LL_TIM_Init+0x120>)
 810a5ee:	4293      	cmp	r3, r2
 810a5f0:	d003      	beq.n	810a5fa <LL_TIM_Init+0x96>
 810a5f2:	687b      	ldr	r3, [r7, #4]
 810a5f4:	4a24      	ldr	r2, [pc, #144]	@ (810a688 <LL_TIM_Init+0x124>)
 810a5f6:	4293      	cmp	r3, r2
 810a5f8:	d106      	bne.n	810a608 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 810a5fa:	68fb      	ldr	r3, [r7, #12]
 810a5fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810a600:	683b      	ldr	r3, [r7, #0]
 810a602:	68db      	ldr	r3, [r3, #12]
 810a604:	4313      	orrs	r3, r2
 810a606:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 810a608:	687b      	ldr	r3, [r7, #4]
 810a60a:	68fa      	ldr	r2, [r7, #12]
 810a60c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 810a60e:	683b      	ldr	r3, [r7, #0]
 810a610:	689b      	ldr	r3, [r3, #8]
 810a612:	4619      	mov	r1, r3
 810a614:	6878      	ldr	r0, [r7, #4]
 810a616:	f7ff ff79 	bl	810a50c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 810a61a:	683b      	ldr	r3, [r7, #0]
 810a61c:	881b      	ldrh	r3, [r3, #0]
 810a61e:	4619      	mov	r1, r3
 810a620:	6878      	ldr	r0, [r7, #4]
 810a622:	f7ff ff65 	bl	810a4f0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 810a626:	687b      	ldr	r3, [r7, #4]
 810a628:	4a10      	ldr	r2, [pc, #64]	@ (810a66c <LL_TIM_Init+0x108>)
 810a62a:	4293      	cmp	r3, r2
 810a62c:	d00f      	beq.n	810a64e <LL_TIM_Init+0xea>
 810a62e:	687b      	ldr	r3, [r7, #4]
 810a630:	4a12      	ldr	r2, [pc, #72]	@ (810a67c <LL_TIM_Init+0x118>)
 810a632:	4293      	cmp	r3, r2
 810a634:	d00b      	beq.n	810a64e <LL_TIM_Init+0xea>
 810a636:	687b      	ldr	r3, [r7, #4]
 810a638:	4a11      	ldr	r2, [pc, #68]	@ (810a680 <LL_TIM_Init+0x11c>)
 810a63a:	4293      	cmp	r3, r2
 810a63c:	d007      	beq.n	810a64e <LL_TIM_Init+0xea>
 810a63e:	687b      	ldr	r3, [r7, #4]
 810a640:	4a10      	ldr	r2, [pc, #64]	@ (810a684 <LL_TIM_Init+0x120>)
 810a642:	4293      	cmp	r3, r2
 810a644:	d003      	beq.n	810a64e <LL_TIM_Init+0xea>
 810a646:	687b      	ldr	r3, [r7, #4]
 810a648:	4a0f      	ldr	r2, [pc, #60]	@ (810a688 <LL_TIM_Init+0x124>)
 810a64a:	4293      	cmp	r3, r2
 810a64c:	d105      	bne.n	810a65a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 810a64e:	683b      	ldr	r3, [r7, #0]
 810a650:	691b      	ldr	r3, [r3, #16]
 810a652:	4619      	mov	r1, r3
 810a654:	6878      	ldr	r0, [r7, #4]
 810a656:	f7ff ff67 	bl	810a528 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 810a65a:	6878      	ldr	r0, [r7, #4]
 810a65c:	f7ff ff72 	bl	810a544 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 810a660:	2300      	movs	r3, #0
}
 810a662:	4618      	mov	r0, r3
 810a664:	3710      	adds	r7, #16
 810a666:	46bd      	mov	sp, r7
 810a668:	bd80      	pop	{r7, pc}
 810a66a:	bf00      	nop
 810a66c:	40010000 	.word	0x40010000
 810a670:	40000400 	.word	0x40000400
 810a674:	40000800 	.word	0x40000800
 810a678:	40000c00 	.word	0x40000c00
 810a67c:	40010400 	.word	0x40010400
 810a680:	40014000 	.word	0x40014000
 810a684:	40014400 	.word	0x40014400
 810a688:	40014800 	.word	0x40014800

0810a68c <LL_USART_IsEnabled>:
{
 810a68c:	b480      	push	{r7}
 810a68e:	b083      	sub	sp, #12
 810a690:	af00      	add	r7, sp, #0
 810a692:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 810a694:	687b      	ldr	r3, [r7, #4]
 810a696:	681b      	ldr	r3, [r3, #0]
 810a698:	f003 0301 	and.w	r3, r3, #1
 810a69c:	2b01      	cmp	r3, #1
 810a69e:	d101      	bne.n	810a6a4 <LL_USART_IsEnabled+0x18>
 810a6a0:	2301      	movs	r3, #1
 810a6a2:	e000      	b.n	810a6a6 <LL_USART_IsEnabled+0x1a>
 810a6a4:	2300      	movs	r3, #0
}
 810a6a6:	4618      	mov	r0, r3
 810a6a8:	370c      	adds	r7, #12
 810a6aa:	46bd      	mov	sp, r7
 810a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6b0:	4770      	bx	lr

0810a6b2 <LL_USART_SetPrescaler>:
{
 810a6b2:	b480      	push	{r7}
 810a6b4:	b083      	sub	sp, #12
 810a6b6:	af00      	add	r7, sp, #0
 810a6b8:	6078      	str	r0, [r7, #4]
 810a6ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 810a6bc:	687b      	ldr	r3, [r7, #4]
 810a6be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810a6c0:	f023 030f 	bic.w	r3, r3, #15
 810a6c4:	683a      	ldr	r2, [r7, #0]
 810a6c6:	b292      	uxth	r2, r2
 810a6c8:	431a      	orrs	r2, r3
 810a6ca:	687b      	ldr	r3, [r7, #4]
 810a6cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 810a6ce:	bf00      	nop
 810a6d0:	370c      	adds	r7, #12
 810a6d2:	46bd      	mov	sp, r7
 810a6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6d8:	4770      	bx	lr

0810a6da <LL_USART_SetStopBitsLength>:
{
 810a6da:	b480      	push	{r7}
 810a6dc:	b083      	sub	sp, #12
 810a6de:	af00      	add	r7, sp, #0
 810a6e0:	6078      	str	r0, [r7, #4]
 810a6e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 810a6e4:	687b      	ldr	r3, [r7, #4]
 810a6e6:	685b      	ldr	r3, [r3, #4]
 810a6e8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 810a6ec:	683b      	ldr	r3, [r7, #0]
 810a6ee:	431a      	orrs	r2, r3
 810a6f0:	687b      	ldr	r3, [r7, #4]
 810a6f2:	605a      	str	r2, [r3, #4]
}
 810a6f4:	bf00      	nop
 810a6f6:	370c      	adds	r7, #12
 810a6f8:	46bd      	mov	sp, r7
 810a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a6fe:	4770      	bx	lr

0810a700 <LL_USART_SetHWFlowCtrl>:
{
 810a700:	b480      	push	{r7}
 810a702:	b083      	sub	sp, #12
 810a704:	af00      	add	r7, sp, #0
 810a706:	6078      	str	r0, [r7, #4]
 810a708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 810a70a:	687b      	ldr	r3, [r7, #4]
 810a70c:	689b      	ldr	r3, [r3, #8]
 810a70e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 810a712:	683b      	ldr	r3, [r7, #0]
 810a714:	431a      	orrs	r2, r3
 810a716:	687b      	ldr	r3, [r7, #4]
 810a718:	609a      	str	r2, [r3, #8]
}
 810a71a:	bf00      	nop
 810a71c:	370c      	adds	r7, #12
 810a71e:	46bd      	mov	sp, r7
 810a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a724:	4770      	bx	lr
	...

0810a728 <LL_USART_SetBaudRate>:
{
 810a728:	b480      	push	{r7}
 810a72a:	b087      	sub	sp, #28
 810a72c:	af00      	add	r7, sp, #0
 810a72e:	60f8      	str	r0, [r7, #12]
 810a730:	60b9      	str	r1, [r7, #8]
 810a732:	607a      	str	r2, [r7, #4]
 810a734:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 810a736:	687b      	ldr	r3, [r7, #4]
 810a738:	2b0b      	cmp	r3, #11
 810a73a:	d83c      	bhi.n	810a7b6 <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 810a73c:	6a3b      	ldr	r3, [r7, #32]
 810a73e:	2b00      	cmp	r3, #0
 810a740:	d039      	beq.n	810a7b6 <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 810a742:	683b      	ldr	r3, [r7, #0]
 810a744:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810a748:	d122      	bne.n	810a790 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 810a74a:	687b      	ldr	r3, [r7, #4]
 810a74c:	b2db      	uxtb	r3, r3
 810a74e:	461a      	mov	r2, r3
 810a750:	4b1c      	ldr	r3, [pc, #112]	@ (810a7c4 <LL_USART_SetBaudRate+0x9c>)
 810a752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810a756:	68ba      	ldr	r2, [r7, #8]
 810a758:	fbb2 f3f3 	udiv	r3, r2, r3
 810a75c:	005a      	lsls	r2, r3, #1
 810a75e:	6a3b      	ldr	r3, [r7, #32]
 810a760:	085b      	lsrs	r3, r3, #1
 810a762:	441a      	add	r2, r3
 810a764:	6a3b      	ldr	r3, [r7, #32]
 810a766:	fbb2 f3f3 	udiv	r3, r2, r3
 810a76a:	b29b      	uxth	r3, r3
 810a76c:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 810a76e:	697a      	ldr	r2, [r7, #20]
 810a770:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 810a774:	4013      	ands	r3, r2
 810a776:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 810a778:	697b      	ldr	r3, [r7, #20]
 810a77a:	085b      	lsrs	r3, r3, #1
 810a77c:	b29b      	uxth	r3, r3
 810a77e:	f003 0307 	and.w	r3, r3, #7
 810a782:	693a      	ldr	r2, [r7, #16]
 810a784:	4313      	orrs	r3, r2
 810a786:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 810a788:	68fb      	ldr	r3, [r7, #12]
 810a78a:	693a      	ldr	r2, [r7, #16]
 810a78c:	60da      	str	r2, [r3, #12]
}
 810a78e:	e012      	b.n	810a7b6 <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 810a790:	687b      	ldr	r3, [r7, #4]
 810a792:	b2db      	uxtb	r3, r3
 810a794:	461a      	mov	r2, r3
 810a796:	4b0b      	ldr	r3, [pc, #44]	@ (810a7c4 <LL_USART_SetBaudRate+0x9c>)
 810a798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810a79c:	68ba      	ldr	r2, [r7, #8]
 810a79e:	fbb2 f2f3 	udiv	r2, r2, r3
 810a7a2:	6a3b      	ldr	r3, [r7, #32]
 810a7a4:	085b      	lsrs	r3, r3, #1
 810a7a6:	441a      	add	r2, r3
 810a7a8:	6a3b      	ldr	r3, [r7, #32]
 810a7aa:	fbb2 f3f3 	udiv	r3, r2, r3
 810a7ae:	b29b      	uxth	r3, r3
 810a7b0:	461a      	mov	r2, r3
 810a7b2:	68fb      	ldr	r3, [r7, #12]
 810a7b4:	60da      	str	r2, [r3, #12]
}
 810a7b6:	bf00      	nop
 810a7b8:	371c      	adds	r7, #28
 810a7ba:	46bd      	mov	sp, r7
 810a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810a7c0:	4770      	bx	lr
 810a7c2:	bf00      	nop
 810a7c4:	0810ec70 	.word	0x0810ec70

0810a7c8 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 810a7c8:	b580      	push	{r7, lr}
 810a7ca:	b086      	sub	sp, #24
 810a7cc:	af02      	add	r7, sp, #8
 810a7ce:	6078      	str	r0, [r7, #4]
 810a7d0:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 810a7d2:	2301      	movs	r3, #1
 810a7d4:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 810a7d6:	2300      	movs	r3, #0
 810a7d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 810a7da:	6878      	ldr	r0, [r7, #4]
 810a7dc:	f7ff ff56 	bl	810a68c <LL_USART_IsEnabled>
 810a7e0:	4603      	mov	r3, r0
 810a7e2:	2b00      	cmp	r3, #0
 810a7e4:	d17f      	bne.n	810a8e6 <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 810a7e6:	687b      	ldr	r3, [r7, #4]
 810a7e8:	681a      	ldr	r2, [r3, #0]
 810a7ea:	4b41      	ldr	r3, [pc, #260]	@ (810a8f0 <LL_USART_Init+0x128>)
 810a7ec:	4013      	ands	r3, r2
 810a7ee:	683a      	ldr	r2, [r7, #0]
 810a7f0:	6891      	ldr	r1, [r2, #8]
 810a7f2:	683a      	ldr	r2, [r7, #0]
 810a7f4:	6912      	ldr	r2, [r2, #16]
 810a7f6:	4311      	orrs	r1, r2
 810a7f8:	683a      	ldr	r2, [r7, #0]
 810a7fa:	6952      	ldr	r2, [r2, #20]
 810a7fc:	4311      	orrs	r1, r2
 810a7fe:	683a      	ldr	r2, [r7, #0]
 810a800:	69d2      	ldr	r2, [r2, #28]
 810a802:	430a      	orrs	r2, r1
 810a804:	431a      	orrs	r2, r3
 810a806:	687b      	ldr	r3, [r7, #4]
 810a808:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 810a80a:	683b      	ldr	r3, [r7, #0]
 810a80c:	68db      	ldr	r3, [r3, #12]
 810a80e:	4619      	mov	r1, r3
 810a810:	6878      	ldr	r0, [r7, #4]
 810a812:	f7ff ff62 	bl	810a6da <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 810a816:	683b      	ldr	r3, [r7, #0]
 810a818:	699b      	ldr	r3, [r3, #24]
 810a81a:	4619      	mov	r1, r3
 810a81c:	6878      	ldr	r0, [r7, #4]
 810a81e:	f7ff ff6f 	bl	810a700 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 810a822:	687b      	ldr	r3, [r7, #4]
 810a824:	4a33      	ldr	r2, [pc, #204]	@ (810a8f4 <LL_USART_Init+0x12c>)
 810a826:	4293      	cmp	r3, r2
 810a828:	d104      	bne.n	810a834 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 810a82a:	4833      	ldr	r0, [pc, #204]	@ (810a8f8 <LL_USART_Init+0x130>)
 810a82c:	f7ff f8b4 	bl	8109998 <LL_RCC_GetUSARTClockFreq>
 810a830:	60b8      	str	r0, [r7, #8]
 810a832:	e03d      	b.n	810a8b0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 810a834:	687b      	ldr	r3, [r7, #4]
 810a836:	4a31      	ldr	r2, [pc, #196]	@ (810a8fc <LL_USART_Init+0x134>)
 810a838:	4293      	cmp	r3, r2
 810a83a:	d104      	bne.n	810a846 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a83c:	4830      	ldr	r0, [pc, #192]	@ (810a900 <LL_USART_Init+0x138>)
 810a83e:	f7ff f8ab 	bl	8109998 <LL_RCC_GetUSARTClockFreq>
 810a842:	60b8      	str	r0, [r7, #8]
 810a844:	e034      	b.n	810a8b0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 810a846:	687b      	ldr	r3, [r7, #4]
 810a848:	4a2e      	ldr	r2, [pc, #184]	@ (810a904 <LL_USART_Init+0x13c>)
 810a84a:	4293      	cmp	r3, r2
 810a84c:	d104      	bne.n	810a858 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a84e:	482c      	ldr	r0, [pc, #176]	@ (810a900 <LL_USART_Init+0x138>)
 810a850:	f7ff f8a2 	bl	8109998 <LL_RCC_GetUSARTClockFreq>
 810a854:	60b8      	str	r0, [r7, #8]
 810a856:	e02b      	b.n	810a8b0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 810a858:	687b      	ldr	r3, [r7, #4]
 810a85a:	4a2b      	ldr	r2, [pc, #172]	@ (810a908 <LL_USART_Init+0x140>)
 810a85c:	4293      	cmp	r3, r2
 810a85e:	d104      	bne.n	810a86a <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a860:	4827      	ldr	r0, [pc, #156]	@ (810a900 <LL_USART_Init+0x138>)
 810a862:	f7ff f899 	bl	8109998 <LL_RCC_GetUSARTClockFreq>
 810a866:	60b8      	str	r0, [r7, #8]
 810a868:	e022      	b.n	810a8b0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 810a86a:	687b      	ldr	r3, [r7, #4]
 810a86c:	4a27      	ldr	r2, [pc, #156]	@ (810a90c <LL_USART_Init+0x144>)
 810a86e:	4293      	cmp	r3, r2
 810a870:	d104      	bne.n	810a87c <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a872:	4823      	ldr	r0, [pc, #140]	@ (810a900 <LL_USART_Init+0x138>)
 810a874:	f7ff f890 	bl	8109998 <LL_RCC_GetUSARTClockFreq>
 810a878:	60b8      	str	r0, [r7, #8]
 810a87a:	e019      	b.n	810a8b0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 810a87c:	687b      	ldr	r3, [r7, #4]
 810a87e:	4a24      	ldr	r2, [pc, #144]	@ (810a910 <LL_USART_Init+0x148>)
 810a880:	4293      	cmp	r3, r2
 810a882:	d104      	bne.n	810a88e <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 810a884:	481c      	ldr	r0, [pc, #112]	@ (810a8f8 <LL_USART_Init+0x130>)
 810a886:	f7ff f887 	bl	8109998 <LL_RCC_GetUSARTClockFreq>
 810a88a:	60b8      	str	r0, [r7, #8]
 810a88c:	e010      	b.n	810a8b0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 810a88e:	687b      	ldr	r3, [r7, #4]
 810a890:	4a20      	ldr	r2, [pc, #128]	@ (810a914 <LL_USART_Init+0x14c>)
 810a892:	4293      	cmp	r3, r2
 810a894:	d104      	bne.n	810a8a0 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a896:	481a      	ldr	r0, [pc, #104]	@ (810a900 <LL_USART_Init+0x138>)
 810a898:	f7ff f87e 	bl	8109998 <LL_RCC_GetUSARTClockFreq>
 810a89c:	60b8      	str	r0, [r7, #8]
 810a89e:	e007      	b.n	810a8b0 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 810a8a0:	687b      	ldr	r3, [r7, #4]
 810a8a2:	4a1d      	ldr	r2, [pc, #116]	@ (810a918 <LL_USART_Init+0x150>)
 810a8a4:	4293      	cmp	r3, r2
 810a8a6:	d103      	bne.n	810a8b0 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 810a8a8:	4815      	ldr	r0, [pc, #84]	@ (810a900 <LL_USART_Init+0x138>)
 810a8aa:	f7ff f875 	bl	8109998 <LL_RCC_GetUSARTClockFreq>
 810a8ae:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 810a8b0:	68bb      	ldr	r3, [r7, #8]
 810a8b2:	2b00      	cmp	r3, #0
 810a8b4:	d011      	beq.n	810a8da <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 810a8b6:	683b      	ldr	r3, [r7, #0]
 810a8b8:	685b      	ldr	r3, [r3, #4]
 810a8ba:	2b00      	cmp	r3, #0
 810a8bc:	d00d      	beq.n	810a8da <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 810a8be:	2300      	movs	r3, #0
 810a8c0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 810a8c2:	683b      	ldr	r3, [r7, #0]
 810a8c4:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 810a8c6:	683b      	ldr	r3, [r7, #0]
 810a8c8:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 810a8ca:	683b      	ldr	r3, [r7, #0]
 810a8cc:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 810a8ce:	9300      	str	r3, [sp, #0]
 810a8d0:	460b      	mov	r3, r1
 810a8d2:	68b9      	ldr	r1, [r7, #8]
 810a8d4:	6878      	ldr	r0, [r7, #4]
 810a8d6:	f7ff ff27 	bl	810a728 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 810a8da:	683b      	ldr	r3, [r7, #0]
 810a8dc:	681b      	ldr	r3, [r3, #0]
 810a8de:	4619      	mov	r1, r3
 810a8e0:	6878      	ldr	r0, [r7, #4]
 810a8e2:	f7ff fee6 	bl	810a6b2 <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 810a8e6:	7bfb      	ldrb	r3, [r7, #15]
}
 810a8e8:	4618      	mov	r0, r3
 810a8ea:	3710      	adds	r7, #16
 810a8ec:	46bd      	mov	sp, r7
 810a8ee:	bd80      	pop	{r7, pc}
 810a8f0:	efff69f3 	.word	0xefff69f3
 810a8f4:	40011000 	.word	0x40011000
 810a8f8:	07000308 	.word	0x07000308
 810a8fc:	40004400 	.word	0x40004400
 810a900:	07000008 	.word	0x07000008
 810a904:	40004800 	.word	0x40004800
 810a908:	40004c00 	.word	0x40004c00
 810a90c:	40005000 	.word	0x40005000
 810a910:	40011400 	.word	0x40011400
 810a914:	40007800 	.word	0x40007800
 810a918:	40007c00 	.word	0x40007c00

0810a91c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810a91c:	b084      	sub	sp, #16
 810a91e:	b580      	push	{r7, lr}
 810a920:	b084      	sub	sp, #16
 810a922:	af00      	add	r7, sp, #0
 810a924:	6078      	str	r0, [r7, #4]
 810a926:	f107 001c 	add.w	r0, r7, #28
 810a92a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810a92e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 810a932:	2b01      	cmp	r3, #1
 810a934:	d123      	bne.n	810a97e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810a936:	687b      	ldr	r3, [r7, #4]
 810a938:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a93a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810a93e:	687b      	ldr	r3, [r7, #4]
 810a940:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 810a942:	687b      	ldr	r3, [r7, #4]
 810a944:	68db      	ldr	r3, [r3, #12]
 810a946:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 810a94a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 810a94e:	687a      	ldr	r2, [r7, #4]
 810a950:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 810a952:	687b      	ldr	r3, [r7, #4]
 810a954:	68db      	ldr	r3, [r3, #12]
 810a956:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 810a95a:	687b      	ldr	r3, [r7, #4]
 810a95c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 810a95e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810a962:	2b01      	cmp	r3, #1
 810a964:	d105      	bne.n	810a972 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 810a966:	687b      	ldr	r3, [r7, #4]
 810a968:	68db      	ldr	r3, [r3, #12]
 810a96a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 810a96e:	687b      	ldr	r3, [r7, #4]
 810a970:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810a972:	6878      	ldr	r0, [r7, #4]
 810a974:	f001 faf0 	bl	810bf58 <USB_CoreReset>
 810a978:	4603      	mov	r3, r0
 810a97a:	73fb      	strb	r3, [r7, #15]
 810a97c:	e01b      	b.n	810a9b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 810a97e:	687b      	ldr	r3, [r7, #4]
 810a980:	68db      	ldr	r3, [r3, #12]
 810a982:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810a986:	687b      	ldr	r3, [r7, #4]
 810a988:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 810a98a:	6878      	ldr	r0, [r7, #4]
 810a98c:	f001 fae4 	bl	810bf58 <USB_CoreReset>
 810a990:	4603      	mov	r3, r0
 810a992:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 810a994:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 810a998:	2b00      	cmp	r3, #0
 810a99a:	d106      	bne.n	810a9aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 810a99c:	687b      	ldr	r3, [r7, #4]
 810a99e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a9a0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 810a9a4:	687b      	ldr	r3, [r7, #4]
 810a9a6:	639a      	str	r2, [r3, #56]	@ 0x38
 810a9a8:	e005      	b.n	810a9b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 810a9aa:	687b      	ldr	r3, [r7, #4]
 810a9ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810a9ae:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 810a9b2:	687b      	ldr	r3, [r7, #4]
 810a9b4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 810a9b6:	7fbb      	ldrb	r3, [r7, #30]
 810a9b8:	2b01      	cmp	r3, #1
 810a9ba:	d118      	bne.n	810a9ee <USB_CoreInit+0xd2>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 810a9bc:	687b      	ldr	r3, [r7, #4]
 810a9be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a9c0:	b29a      	uxth	r2, r3
 810a9c2:	687b      	ldr	r3, [r7, #4]
 810a9c4:	65da      	str	r2, [r3, #92]	@ 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 810a9c6:	687b      	ldr	r3, [r7, #4]
 810a9c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810a9ca:	f043 737b 	orr.w	r3, r3, #65798144	@ 0x3ec0000
 810a9ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810a9d2:	687a      	ldr	r2, [r7, #4]
 810a9d4:	65d3      	str	r3, [r2, #92]	@ 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 810a9d6:	687b      	ldr	r3, [r7, #4]
 810a9d8:	689b      	ldr	r3, [r3, #8]
 810a9da:	f043 0206 	orr.w	r2, r3, #6
 810a9de:	687b      	ldr	r3, [r7, #4]
 810a9e0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 810a9e2:	687b      	ldr	r3, [r7, #4]
 810a9e4:	689b      	ldr	r3, [r3, #8]
 810a9e6:	f043 0220 	orr.w	r2, r3, #32
 810a9ea:	687b      	ldr	r3, [r7, #4]
 810a9ec:	609a      	str	r2, [r3, #8]
  }

  return ret;
 810a9ee:	7bfb      	ldrb	r3, [r7, #15]
}
 810a9f0:	4618      	mov	r0, r3
 810a9f2:	3710      	adds	r7, #16
 810a9f4:	46bd      	mov	sp, r7
 810a9f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810a9fa:	b004      	add	sp, #16
 810a9fc:	4770      	bx	lr
	...

0810aa00 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 810aa00:	b480      	push	{r7}
 810aa02:	b087      	sub	sp, #28
 810aa04:	af00      	add	r7, sp, #0
 810aa06:	60f8      	str	r0, [r7, #12]
 810aa08:	60b9      	str	r1, [r7, #8]
 810aa0a:	4613      	mov	r3, r2
 810aa0c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 810aa0e:	79fb      	ldrb	r3, [r7, #7]
 810aa10:	2b02      	cmp	r3, #2
 810aa12:	d165      	bne.n	810aae0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 810aa14:	68bb      	ldr	r3, [r7, #8]
 810aa16:	4a41      	ldr	r2, [pc, #260]	@ (810ab1c <USB_SetTurnaroundTime+0x11c>)
 810aa18:	4293      	cmp	r3, r2
 810aa1a:	d906      	bls.n	810aa2a <USB_SetTurnaroundTime+0x2a>
 810aa1c:	68bb      	ldr	r3, [r7, #8]
 810aa1e:	4a40      	ldr	r2, [pc, #256]	@ (810ab20 <USB_SetTurnaroundTime+0x120>)
 810aa20:	4293      	cmp	r3, r2
 810aa22:	d202      	bcs.n	810aa2a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 810aa24:	230f      	movs	r3, #15
 810aa26:	617b      	str	r3, [r7, #20]
 810aa28:	e062      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 810aa2a:	68bb      	ldr	r3, [r7, #8]
 810aa2c:	4a3c      	ldr	r2, [pc, #240]	@ (810ab20 <USB_SetTurnaroundTime+0x120>)
 810aa2e:	4293      	cmp	r3, r2
 810aa30:	d306      	bcc.n	810aa40 <USB_SetTurnaroundTime+0x40>
 810aa32:	68bb      	ldr	r3, [r7, #8]
 810aa34:	4a3b      	ldr	r2, [pc, #236]	@ (810ab24 <USB_SetTurnaroundTime+0x124>)
 810aa36:	4293      	cmp	r3, r2
 810aa38:	d202      	bcs.n	810aa40 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 810aa3a:	230e      	movs	r3, #14
 810aa3c:	617b      	str	r3, [r7, #20]
 810aa3e:	e057      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 810aa40:	68bb      	ldr	r3, [r7, #8]
 810aa42:	4a38      	ldr	r2, [pc, #224]	@ (810ab24 <USB_SetTurnaroundTime+0x124>)
 810aa44:	4293      	cmp	r3, r2
 810aa46:	d306      	bcc.n	810aa56 <USB_SetTurnaroundTime+0x56>
 810aa48:	68bb      	ldr	r3, [r7, #8]
 810aa4a:	4a37      	ldr	r2, [pc, #220]	@ (810ab28 <USB_SetTurnaroundTime+0x128>)
 810aa4c:	4293      	cmp	r3, r2
 810aa4e:	d202      	bcs.n	810aa56 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 810aa50:	230d      	movs	r3, #13
 810aa52:	617b      	str	r3, [r7, #20]
 810aa54:	e04c      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 810aa56:	68bb      	ldr	r3, [r7, #8]
 810aa58:	4a33      	ldr	r2, [pc, #204]	@ (810ab28 <USB_SetTurnaroundTime+0x128>)
 810aa5a:	4293      	cmp	r3, r2
 810aa5c:	d306      	bcc.n	810aa6c <USB_SetTurnaroundTime+0x6c>
 810aa5e:	68bb      	ldr	r3, [r7, #8]
 810aa60:	4a32      	ldr	r2, [pc, #200]	@ (810ab2c <USB_SetTurnaroundTime+0x12c>)
 810aa62:	4293      	cmp	r3, r2
 810aa64:	d802      	bhi.n	810aa6c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 810aa66:	230c      	movs	r3, #12
 810aa68:	617b      	str	r3, [r7, #20]
 810aa6a:	e041      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 810aa6c:	68bb      	ldr	r3, [r7, #8]
 810aa6e:	4a2f      	ldr	r2, [pc, #188]	@ (810ab2c <USB_SetTurnaroundTime+0x12c>)
 810aa70:	4293      	cmp	r3, r2
 810aa72:	d906      	bls.n	810aa82 <USB_SetTurnaroundTime+0x82>
 810aa74:	68bb      	ldr	r3, [r7, #8]
 810aa76:	4a2e      	ldr	r2, [pc, #184]	@ (810ab30 <USB_SetTurnaroundTime+0x130>)
 810aa78:	4293      	cmp	r3, r2
 810aa7a:	d802      	bhi.n	810aa82 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 810aa7c:	230b      	movs	r3, #11
 810aa7e:	617b      	str	r3, [r7, #20]
 810aa80:	e036      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 810aa82:	68bb      	ldr	r3, [r7, #8]
 810aa84:	4a2a      	ldr	r2, [pc, #168]	@ (810ab30 <USB_SetTurnaroundTime+0x130>)
 810aa86:	4293      	cmp	r3, r2
 810aa88:	d906      	bls.n	810aa98 <USB_SetTurnaroundTime+0x98>
 810aa8a:	68bb      	ldr	r3, [r7, #8]
 810aa8c:	4a29      	ldr	r2, [pc, #164]	@ (810ab34 <USB_SetTurnaroundTime+0x134>)
 810aa8e:	4293      	cmp	r3, r2
 810aa90:	d802      	bhi.n	810aa98 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 810aa92:	230a      	movs	r3, #10
 810aa94:	617b      	str	r3, [r7, #20]
 810aa96:	e02b      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 810aa98:	68bb      	ldr	r3, [r7, #8]
 810aa9a:	4a26      	ldr	r2, [pc, #152]	@ (810ab34 <USB_SetTurnaroundTime+0x134>)
 810aa9c:	4293      	cmp	r3, r2
 810aa9e:	d906      	bls.n	810aaae <USB_SetTurnaroundTime+0xae>
 810aaa0:	68bb      	ldr	r3, [r7, #8]
 810aaa2:	4a25      	ldr	r2, [pc, #148]	@ (810ab38 <USB_SetTurnaroundTime+0x138>)
 810aaa4:	4293      	cmp	r3, r2
 810aaa6:	d202      	bcs.n	810aaae <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 810aaa8:	2309      	movs	r3, #9
 810aaaa:	617b      	str	r3, [r7, #20]
 810aaac:	e020      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 810aaae:	68bb      	ldr	r3, [r7, #8]
 810aab0:	4a21      	ldr	r2, [pc, #132]	@ (810ab38 <USB_SetTurnaroundTime+0x138>)
 810aab2:	4293      	cmp	r3, r2
 810aab4:	d306      	bcc.n	810aac4 <USB_SetTurnaroundTime+0xc4>
 810aab6:	68bb      	ldr	r3, [r7, #8]
 810aab8:	4a20      	ldr	r2, [pc, #128]	@ (810ab3c <USB_SetTurnaroundTime+0x13c>)
 810aaba:	4293      	cmp	r3, r2
 810aabc:	d802      	bhi.n	810aac4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 810aabe:	2308      	movs	r3, #8
 810aac0:	617b      	str	r3, [r7, #20]
 810aac2:	e015      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 810aac4:	68bb      	ldr	r3, [r7, #8]
 810aac6:	4a1d      	ldr	r2, [pc, #116]	@ (810ab3c <USB_SetTurnaroundTime+0x13c>)
 810aac8:	4293      	cmp	r3, r2
 810aaca:	d906      	bls.n	810aada <USB_SetTurnaroundTime+0xda>
 810aacc:	68bb      	ldr	r3, [r7, #8]
 810aace:	4a1c      	ldr	r2, [pc, #112]	@ (810ab40 <USB_SetTurnaroundTime+0x140>)
 810aad0:	4293      	cmp	r3, r2
 810aad2:	d202      	bcs.n	810aada <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 810aad4:	2307      	movs	r3, #7
 810aad6:	617b      	str	r3, [r7, #20]
 810aad8:	e00a      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 810aada:	2306      	movs	r3, #6
 810aadc:	617b      	str	r3, [r7, #20]
 810aade:	e007      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 810aae0:	79fb      	ldrb	r3, [r7, #7]
 810aae2:	2b00      	cmp	r3, #0
 810aae4:	d102      	bne.n	810aaec <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 810aae6:	2309      	movs	r3, #9
 810aae8:	617b      	str	r3, [r7, #20]
 810aaea:	e001      	b.n	810aaf0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 810aaec:	2309      	movs	r3, #9
 810aaee:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 810aaf0:	68fb      	ldr	r3, [r7, #12]
 810aaf2:	68db      	ldr	r3, [r3, #12]
 810aaf4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 810aaf8:	68fb      	ldr	r3, [r7, #12]
 810aafa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 810aafc:	68fb      	ldr	r3, [r7, #12]
 810aafe:	68da      	ldr	r2, [r3, #12]
 810ab00:	697b      	ldr	r3, [r7, #20]
 810ab02:	029b      	lsls	r3, r3, #10
 810ab04:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 810ab08:	431a      	orrs	r2, r3
 810ab0a:	68fb      	ldr	r3, [r7, #12]
 810ab0c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 810ab0e:	2300      	movs	r3, #0
}
 810ab10:	4618      	mov	r0, r3
 810ab12:	371c      	adds	r7, #28
 810ab14:	46bd      	mov	sp, r7
 810ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab1a:	4770      	bx	lr
 810ab1c:	00d8acbf 	.word	0x00d8acbf
 810ab20:	00e4e1c0 	.word	0x00e4e1c0
 810ab24:	00f42400 	.word	0x00f42400
 810ab28:	01067380 	.word	0x01067380
 810ab2c:	011a499f 	.word	0x011a499f
 810ab30:	01312cff 	.word	0x01312cff
 810ab34:	014ca43f 	.word	0x014ca43f
 810ab38:	016e3600 	.word	0x016e3600
 810ab3c:	01a6ab1f 	.word	0x01a6ab1f
 810ab40:	01e84800 	.word	0x01e84800

0810ab44 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810ab44:	b480      	push	{r7}
 810ab46:	b083      	sub	sp, #12
 810ab48:	af00      	add	r7, sp, #0
 810ab4a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 810ab4c:	687b      	ldr	r3, [r7, #4]
 810ab4e:	689b      	ldr	r3, [r3, #8]
 810ab50:	f043 0201 	orr.w	r2, r3, #1
 810ab54:	687b      	ldr	r3, [r7, #4]
 810ab56:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810ab58:	2300      	movs	r3, #0
}
 810ab5a:	4618      	mov	r0, r3
 810ab5c:	370c      	adds	r7, #12
 810ab5e:	46bd      	mov	sp, r7
 810ab60:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab64:	4770      	bx	lr

0810ab66 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 810ab66:	b480      	push	{r7}
 810ab68:	b083      	sub	sp, #12
 810ab6a:	af00      	add	r7, sp, #0
 810ab6c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 810ab6e:	687b      	ldr	r3, [r7, #4]
 810ab70:	689b      	ldr	r3, [r3, #8]
 810ab72:	f023 0201 	bic.w	r2, r3, #1
 810ab76:	687b      	ldr	r3, [r7, #4]
 810ab78:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 810ab7a:	2300      	movs	r3, #0
}
 810ab7c:	4618      	mov	r0, r3
 810ab7e:	370c      	adds	r7, #12
 810ab80:	46bd      	mov	sp, r7
 810ab82:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ab86:	4770      	bx	lr

0810ab88 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 810ab88:	b580      	push	{r7, lr}
 810ab8a:	b084      	sub	sp, #16
 810ab8c:	af00      	add	r7, sp, #0
 810ab8e:	6078      	str	r0, [r7, #4]
 810ab90:	460b      	mov	r3, r1
 810ab92:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 810ab94:	2300      	movs	r3, #0
 810ab96:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 810ab98:	687b      	ldr	r3, [r7, #4]
 810ab9a:	68db      	ldr	r3, [r3, #12]
 810ab9c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 810aba0:	687b      	ldr	r3, [r7, #4]
 810aba2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 810aba4:	78fb      	ldrb	r3, [r7, #3]
 810aba6:	2b01      	cmp	r3, #1
 810aba8:	d115      	bne.n	810abd6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 810abaa:	687b      	ldr	r3, [r7, #4]
 810abac:	68db      	ldr	r3, [r3, #12]
 810abae:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 810abb2:	687b      	ldr	r3, [r7, #4]
 810abb4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810abb6:	200a      	movs	r0, #10
 810abb8:	f7f7 ff10 	bl	81029dc <HAL_Delay>
      ms += 10U;
 810abbc:	68fb      	ldr	r3, [r7, #12]
 810abbe:	330a      	adds	r3, #10
 810abc0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810abc2:	6878      	ldr	r0, [r7, #4]
 810abc4:	f001 f939 	bl	810be3a <USB_GetMode>
 810abc8:	4603      	mov	r3, r0
 810abca:	2b01      	cmp	r3, #1
 810abcc:	d01e      	beq.n	810ac0c <USB_SetCurrentMode+0x84>
 810abce:	68fb      	ldr	r3, [r7, #12]
 810abd0:	2bc7      	cmp	r3, #199	@ 0xc7
 810abd2:	d9f0      	bls.n	810abb6 <USB_SetCurrentMode+0x2e>
 810abd4:	e01a      	b.n	810ac0c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 810abd6:	78fb      	ldrb	r3, [r7, #3]
 810abd8:	2b00      	cmp	r3, #0
 810abda:	d115      	bne.n	810ac08 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 810abdc:	687b      	ldr	r3, [r7, #4]
 810abde:	68db      	ldr	r3, [r3, #12]
 810abe0:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 810abe4:	687b      	ldr	r3, [r7, #4]
 810abe6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 810abe8:	200a      	movs	r0, #10
 810abea:	f7f7 fef7 	bl	81029dc <HAL_Delay>
      ms += 10U;
 810abee:	68fb      	ldr	r3, [r7, #12]
 810abf0:	330a      	adds	r3, #10
 810abf2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 810abf4:	6878      	ldr	r0, [r7, #4]
 810abf6:	f001 f920 	bl	810be3a <USB_GetMode>
 810abfa:	4603      	mov	r3, r0
 810abfc:	2b00      	cmp	r3, #0
 810abfe:	d005      	beq.n	810ac0c <USB_SetCurrentMode+0x84>
 810ac00:	68fb      	ldr	r3, [r7, #12]
 810ac02:	2bc7      	cmp	r3, #199	@ 0xc7
 810ac04:	d9f0      	bls.n	810abe8 <USB_SetCurrentMode+0x60>
 810ac06:	e001      	b.n	810ac0c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 810ac08:	2301      	movs	r3, #1
 810ac0a:	e005      	b.n	810ac18 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 810ac0c:	68fb      	ldr	r3, [r7, #12]
 810ac0e:	2bc8      	cmp	r3, #200	@ 0xc8
 810ac10:	d101      	bne.n	810ac16 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 810ac12:	2301      	movs	r3, #1
 810ac14:	e000      	b.n	810ac18 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 810ac16:	2300      	movs	r3, #0
}
 810ac18:	4618      	mov	r0, r3
 810ac1a:	3710      	adds	r7, #16
 810ac1c:	46bd      	mov	sp, r7
 810ac1e:	bd80      	pop	{r7, pc}

0810ac20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 810ac20:	b084      	sub	sp, #16
 810ac22:	b580      	push	{r7, lr}
 810ac24:	b086      	sub	sp, #24
 810ac26:	af00      	add	r7, sp, #0
 810ac28:	6078      	str	r0, [r7, #4]
 810ac2a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 810ac2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 810ac32:	2300      	movs	r3, #0
 810ac34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810ac36:	687b      	ldr	r3, [r7, #4]
 810ac38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 810ac3a:	2300      	movs	r3, #0
 810ac3c:	613b      	str	r3, [r7, #16]
 810ac3e:	e009      	b.n	810ac54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 810ac40:	687a      	ldr	r2, [r7, #4]
 810ac42:	693b      	ldr	r3, [r7, #16]
 810ac44:	3340      	adds	r3, #64	@ 0x40
 810ac46:	009b      	lsls	r3, r3, #2
 810ac48:	4413      	add	r3, r2
 810ac4a:	2200      	movs	r2, #0
 810ac4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 810ac4e:	693b      	ldr	r3, [r7, #16]
 810ac50:	3301      	adds	r3, #1
 810ac52:	613b      	str	r3, [r7, #16]
 810ac54:	693b      	ldr	r3, [r7, #16]
 810ac56:	2b0e      	cmp	r3, #14
 810ac58:	d9f2      	bls.n	810ac40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 810ac5a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810ac5e:	2b00      	cmp	r3, #0
 810ac60:	d11c      	bne.n	810ac9c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810ac62:	68fb      	ldr	r3, [r7, #12]
 810ac64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ac68:	685b      	ldr	r3, [r3, #4]
 810ac6a:	68fa      	ldr	r2, [r7, #12]
 810ac6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810ac70:	f043 0302 	orr.w	r3, r3, #2
 810ac74:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 810ac76:	687b      	ldr	r3, [r7, #4]
 810ac78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810ac7a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 810ac7e:	687b      	ldr	r3, [r7, #4]
 810ac80:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 810ac82:	687b      	ldr	r3, [r7, #4]
 810ac84:	681b      	ldr	r3, [r3, #0]
 810ac86:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 810ac8a:	687b      	ldr	r3, [r7, #4]
 810ac8c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 810ac8e:	687b      	ldr	r3, [r7, #4]
 810ac90:	681b      	ldr	r3, [r3, #0]
 810ac92:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 810ac96:	687b      	ldr	r3, [r7, #4]
 810ac98:	601a      	str	r2, [r3, #0]
 810ac9a:	e005      	b.n	810aca8 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 810ac9c:	687b      	ldr	r3, [r7, #4]
 810ac9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 810aca0:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 810aca4:	687b      	ldr	r3, [r7, #4]
 810aca6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 810aca8:	68fb      	ldr	r3, [r7, #12]
 810acaa:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810acae:	461a      	mov	r2, r3
 810acb0:	2300      	movs	r3, #0
 810acb2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 810acb4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 810acb8:	2b01      	cmp	r3, #1
 810acba:	d10d      	bne.n	810acd8 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 810acbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810acc0:	2b00      	cmp	r3, #0
 810acc2:	d104      	bne.n	810acce <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 810acc4:	2100      	movs	r1, #0
 810acc6:	6878      	ldr	r0, [r7, #4]
 810acc8:	f000 f968 	bl	810af9c <USB_SetDevSpeed>
 810accc:	e008      	b.n	810ace0 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 810acce:	2101      	movs	r1, #1
 810acd0:	6878      	ldr	r0, [r7, #4]
 810acd2:	f000 f963 	bl	810af9c <USB_SetDevSpeed>
 810acd6:	e003      	b.n	810ace0 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 810acd8:	2103      	movs	r1, #3
 810acda:	6878      	ldr	r0, [r7, #4]
 810acdc:	f000 f95e 	bl	810af9c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 810ace0:	2110      	movs	r1, #16
 810ace2:	6878      	ldr	r0, [r7, #4]
 810ace4:	f000 f8fa 	bl	810aedc <USB_FlushTxFifo>
 810ace8:	4603      	mov	r3, r0
 810acea:	2b00      	cmp	r3, #0
 810acec:	d001      	beq.n	810acf2 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 810acee:	2301      	movs	r3, #1
 810acf0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 810acf2:	6878      	ldr	r0, [r7, #4]
 810acf4:	f000 f924 	bl	810af40 <USB_FlushRxFifo>
 810acf8:	4603      	mov	r3, r0
 810acfa:	2b00      	cmp	r3, #0
 810acfc:	d001      	beq.n	810ad02 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 810acfe:	2301      	movs	r3, #1
 810ad00:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 810ad02:	68fb      	ldr	r3, [r7, #12]
 810ad04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ad08:	461a      	mov	r2, r3
 810ad0a:	2300      	movs	r3, #0
 810ad0c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 810ad0e:	68fb      	ldr	r3, [r7, #12]
 810ad10:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ad14:	461a      	mov	r2, r3
 810ad16:	2300      	movs	r3, #0
 810ad18:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 810ad1a:	68fb      	ldr	r3, [r7, #12]
 810ad1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ad20:	461a      	mov	r2, r3
 810ad22:	2300      	movs	r3, #0
 810ad24:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810ad26:	2300      	movs	r3, #0
 810ad28:	613b      	str	r3, [r7, #16]
 810ad2a:	e043      	b.n	810adb4 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810ad2c:	693b      	ldr	r3, [r7, #16]
 810ad2e:	015a      	lsls	r2, r3, #5
 810ad30:	68fb      	ldr	r3, [r7, #12]
 810ad32:	4413      	add	r3, r2
 810ad34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad38:	681b      	ldr	r3, [r3, #0]
 810ad3a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810ad3e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810ad42:	d118      	bne.n	810ad76 <USB_DevInit+0x156>
    {
      if (i == 0U)
 810ad44:	693b      	ldr	r3, [r7, #16]
 810ad46:	2b00      	cmp	r3, #0
 810ad48:	d10a      	bne.n	810ad60 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 810ad4a:	693b      	ldr	r3, [r7, #16]
 810ad4c:	015a      	lsls	r2, r3, #5
 810ad4e:	68fb      	ldr	r3, [r7, #12]
 810ad50:	4413      	add	r3, r2
 810ad52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad56:	461a      	mov	r2, r3
 810ad58:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810ad5c:	6013      	str	r3, [r2, #0]
 810ad5e:	e013      	b.n	810ad88 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 810ad60:	693b      	ldr	r3, [r7, #16]
 810ad62:	015a      	lsls	r2, r3, #5
 810ad64:	68fb      	ldr	r3, [r7, #12]
 810ad66:	4413      	add	r3, r2
 810ad68:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad6c:	461a      	mov	r2, r3
 810ad6e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810ad72:	6013      	str	r3, [r2, #0]
 810ad74:	e008      	b.n	810ad88 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 810ad76:	693b      	ldr	r3, [r7, #16]
 810ad78:	015a      	lsls	r2, r3, #5
 810ad7a:	68fb      	ldr	r3, [r7, #12]
 810ad7c:	4413      	add	r3, r2
 810ad7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad82:	461a      	mov	r2, r3
 810ad84:	2300      	movs	r3, #0
 810ad86:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 810ad88:	693b      	ldr	r3, [r7, #16]
 810ad8a:	015a      	lsls	r2, r3, #5
 810ad8c:	68fb      	ldr	r3, [r7, #12]
 810ad8e:	4413      	add	r3, r2
 810ad90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ad94:	461a      	mov	r2, r3
 810ad96:	2300      	movs	r3, #0
 810ad98:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 810ad9a:	693b      	ldr	r3, [r7, #16]
 810ad9c:	015a      	lsls	r2, r3, #5
 810ad9e:	68fb      	ldr	r3, [r7, #12]
 810ada0:	4413      	add	r3, r2
 810ada2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810ada6:	461a      	mov	r2, r3
 810ada8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810adac:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810adae:	693b      	ldr	r3, [r7, #16]
 810adb0:	3301      	adds	r3, #1
 810adb2:	613b      	str	r3, [r7, #16]
 810adb4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810adb8:	461a      	mov	r2, r3
 810adba:	693b      	ldr	r3, [r7, #16]
 810adbc:	4293      	cmp	r3, r2
 810adbe:	d3b5      	bcc.n	810ad2c <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 810adc0:	2300      	movs	r3, #0
 810adc2:	613b      	str	r3, [r7, #16]
 810adc4:	e043      	b.n	810ae4e <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810adc6:	693b      	ldr	r3, [r7, #16]
 810adc8:	015a      	lsls	r2, r3, #5
 810adca:	68fb      	ldr	r3, [r7, #12]
 810adcc:	4413      	add	r3, r2
 810adce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810add2:	681b      	ldr	r3, [r3, #0]
 810add4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810add8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810addc:	d118      	bne.n	810ae10 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 810adde:	693b      	ldr	r3, [r7, #16]
 810ade0:	2b00      	cmp	r3, #0
 810ade2:	d10a      	bne.n	810adfa <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 810ade4:	693b      	ldr	r3, [r7, #16]
 810ade6:	015a      	lsls	r2, r3, #5
 810ade8:	68fb      	ldr	r3, [r7, #12]
 810adea:	4413      	add	r3, r2
 810adec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810adf0:	461a      	mov	r2, r3
 810adf2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 810adf6:	6013      	str	r3, [r2, #0]
 810adf8:	e013      	b.n	810ae22 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 810adfa:	693b      	ldr	r3, [r7, #16]
 810adfc:	015a      	lsls	r2, r3, #5
 810adfe:	68fb      	ldr	r3, [r7, #12]
 810ae00:	4413      	add	r3, r2
 810ae02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ae06:	461a      	mov	r2, r3
 810ae08:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 810ae0c:	6013      	str	r3, [r2, #0]
 810ae0e:	e008      	b.n	810ae22 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 810ae10:	693b      	ldr	r3, [r7, #16]
 810ae12:	015a      	lsls	r2, r3, #5
 810ae14:	68fb      	ldr	r3, [r7, #12]
 810ae16:	4413      	add	r3, r2
 810ae18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ae1c:	461a      	mov	r2, r3
 810ae1e:	2300      	movs	r3, #0
 810ae20:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 810ae22:	693b      	ldr	r3, [r7, #16]
 810ae24:	015a      	lsls	r2, r3, #5
 810ae26:	68fb      	ldr	r3, [r7, #12]
 810ae28:	4413      	add	r3, r2
 810ae2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ae2e:	461a      	mov	r2, r3
 810ae30:	2300      	movs	r3, #0
 810ae32:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 810ae34:	693b      	ldr	r3, [r7, #16]
 810ae36:	015a      	lsls	r2, r3, #5
 810ae38:	68fb      	ldr	r3, [r7, #12]
 810ae3a:	4413      	add	r3, r2
 810ae3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810ae40:	461a      	mov	r2, r3
 810ae42:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 810ae46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 810ae48:	693b      	ldr	r3, [r7, #16]
 810ae4a:	3301      	adds	r3, #1
 810ae4c:	613b      	str	r3, [r7, #16]
 810ae4e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 810ae52:	461a      	mov	r2, r3
 810ae54:	693b      	ldr	r3, [r7, #16]
 810ae56:	4293      	cmp	r3, r2
 810ae58:	d3b5      	bcc.n	810adc6 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 810ae5a:	68fb      	ldr	r3, [r7, #12]
 810ae5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810ae60:	691b      	ldr	r3, [r3, #16]
 810ae62:	68fa      	ldr	r2, [r7, #12]
 810ae64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810ae68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810ae6c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 810ae6e:	687b      	ldr	r3, [r7, #4]
 810ae70:	2200      	movs	r2, #0
 810ae72:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 810ae74:	687b      	ldr	r3, [r7, #4]
 810ae76:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 810ae7a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 810ae7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 810ae80:	2b00      	cmp	r3, #0
 810ae82:	d105      	bne.n	810ae90 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 810ae84:	687b      	ldr	r3, [r7, #4]
 810ae86:	699b      	ldr	r3, [r3, #24]
 810ae88:	f043 0210 	orr.w	r2, r3, #16
 810ae8c:	687b      	ldr	r3, [r7, #4]
 810ae8e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 810ae90:	687b      	ldr	r3, [r7, #4]
 810ae92:	699a      	ldr	r2, [r3, #24]
 810ae94:	4b10      	ldr	r3, [pc, #64]	@ (810aed8 <USB_DevInit+0x2b8>)
 810ae96:	4313      	orrs	r3, r2
 810ae98:	687a      	ldr	r2, [r7, #4]
 810ae9a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 810ae9c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 810aea0:	2b00      	cmp	r3, #0
 810aea2:	d005      	beq.n	810aeb0 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 810aea4:	687b      	ldr	r3, [r7, #4]
 810aea6:	699b      	ldr	r3, [r3, #24]
 810aea8:	f043 0208 	orr.w	r2, r3, #8
 810aeac:	687b      	ldr	r3, [r7, #4]
 810aeae:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 810aeb0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 810aeb4:	2b01      	cmp	r3, #1
 810aeb6:	d107      	bne.n	810aec8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 810aeb8:	687b      	ldr	r3, [r7, #4]
 810aeba:	699b      	ldr	r3, [r3, #24]
 810aebc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810aec0:	f043 0304 	orr.w	r3, r3, #4
 810aec4:	687a      	ldr	r2, [r7, #4]
 810aec6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 810aec8:	7dfb      	ldrb	r3, [r7, #23]
}
 810aeca:	4618      	mov	r0, r3
 810aecc:	3718      	adds	r7, #24
 810aece:	46bd      	mov	sp, r7
 810aed0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 810aed4:	b004      	add	sp, #16
 810aed6:	4770      	bx	lr
 810aed8:	803c3800 	.word	0x803c3800

0810aedc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 810aedc:	b480      	push	{r7}
 810aede:	b085      	sub	sp, #20
 810aee0:	af00      	add	r7, sp, #0
 810aee2:	6078      	str	r0, [r7, #4]
 810aee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810aee6:	2300      	movs	r3, #0
 810aee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810aeea:	68fb      	ldr	r3, [r7, #12]
 810aeec:	3301      	adds	r3, #1
 810aeee:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810aef0:	68fb      	ldr	r3, [r7, #12]
 810aef2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810aef6:	d901      	bls.n	810aefc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 810aef8:	2303      	movs	r3, #3
 810aefa:	e01b      	b.n	810af34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810aefc:	687b      	ldr	r3, [r7, #4]
 810aefe:	691b      	ldr	r3, [r3, #16]
 810af00:	2b00      	cmp	r3, #0
 810af02:	daf2      	bge.n	810aeea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 810af04:	2300      	movs	r3, #0
 810af06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 810af08:	683b      	ldr	r3, [r7, #0]
 810af0a:	019b      	lsls	r3, r3, #6
 810af0c:	f043 0220 	orr.w	r2, r3, #32
 810af10:	687b      	ldr	r3, [r7, #4]
 810af12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810af14:	68fb      	ldr	r3, [r7, #12]
 810af16:	3301      	adds	r3, #1
 810af18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810af1a:	68fb      	ldr	r3, [r7, #12]
 810af1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810af20:	d901      	bls.n	810af26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 810af22:	2303      	movs	r3, #3
 810af24:	e006      	b.n	810af34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 810af26:	687b      	ldr	r3, [r7, #4]
 810af28:	691b      	ldr	r3, [r3, #16]
 810af2a:	f003 0320 	and.w	r3, r3, #32
 810af2e:	2b20      	cmp	r3, #32
 810af30:	d0f0      	beq.n	810af14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 810af32:	2300      	movs	r3, #0
}
 810af34:	4618      	mov	r0, r3
 810af36:	3714      	adds	r7, #20
 810af38:	46bd      	mov	sp, r7
 810af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af3e:	4770      	bx	lr

0810af40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 810af40:	b480      	push	{r7}
 810af42:	b085      	sub	sp, #20
 810af44:	af00      	add	r7, sp, #0
 810af46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810af48:	2300      	movs	r3, #0
 810af4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810af4c:	68fb      	ldr	r3, [r7, #12]
 810af4e:	3301      	adds	r3, #1
 810af50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810af52:	68fb      	ldr	r3, [r7, #12]
 810af54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810af58:	d901      	bls.n	810af5e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 810af5a:	2303      	movs	r3, #3
 810af5c:	e018      	b.n	810af90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810af5e:	687b      	ldr	r3, [r7, #4]
 810af60:	691b      	ldr	r3, [r3, #16]
 810af62:	2b00      	cmp	r3, #0
 810af64:	daf2      	bge.n	810af4c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 810af66:	2300      	movs	r3, #0
 810af68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 810af6a:	687b      	ldr	r3, [r7, #4]
 810af6c:	2210      	movs	r2, #16
 810af6e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810af70:	68fb      	ldr	r3, [r7, #12]
 810af72:	3301      	adds	r3, #1
 810af74:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810af76:	68fb      	ldr	r3, [r7, #12]
 810af78:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810af7c:	d901      	bls.n	810af82 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 810af7e:	2303      	movs	r3, #3
 810af80:	e006      	b.n	810af90 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 810af82:	687b      	ldr	r3, [r7, #4]
 810af84:	691b      	ldr	r3, [r3, #16]
 810af86:	f003 0310 	and.w	r3, r3, #16
 810af8a:	2b10      	cmp	r3, #16
 810af8c:	d0f0      	beq.n	810af70 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 810af8e:	2300      	movs	r3, #0
}
 810af90:	4618      	mov	r0, r3
 810af92:	3714      	adds	r7, #20
 810af94:	46bd      	mov	sp, r7
 810af96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810af9a:	4770      	bx	lr

0810af9c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 810af9c:	b480      	push	{r7}
 810af9e:	b085      	sub	sp, #20
 810afa0:	af00      	add	r7, sp, #0
 810afa2:	6078      	str	r0, [r7, #4]
 810afa4:	460b      	mov	r3, r1
 810afa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810afa8:	687b      	ldr	r3, [r7, #4]
 810afaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 810afac:	68fb      	ldr	r3, [r7, #12]
 810afae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810afb2:	681a      	ldr	r2, [r3, #0]
 810afb4:	78fb      	ldrb	r3, [r7, #3]
 810afb6:	68f9      	ldr	r1, [r7, #12]
 810afb8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810afbc:	4313      	orrs	r3, r2
 810afbe:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 810afc0:	2300      	movs	r3, #0
}
 810afc2:	4618      	mov	r0, r3
 810afc4:	3714      	adds	r7, #20
 810afc6:	46bd      	mov	sp, r7
 810afc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810afcc:	4770      	bx	lr

0810afce <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 810afce:	b480      	push	{r7}
 810afd0:	b087      	sub	sp, #28
 810afd2:	af00      	add	r7, sp, #0
 810afd4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810afd6:	687b      	ldr	r3, [r7, #4]
 810afd8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 810afda:	693b      	ldr	r3, [r7, #16]
 810afdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810afe0:	689b      	ldr	r3, [r3, #8]
 810afe2:	f003 0306 	and.w	r3, r3, #6
 810afe6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 810afe8:	68fb      	ldr	r3, [r7, #12]
 810afea:	2b00      	cmp	r3, #0
 810afec:	d102      	bne.n	810aff4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 810afee:	2300      	movs	r3, #0
 810aff0:	75fb      	strb	r3, [r7, #23]
 810aff2:	e00a      	b.n	810b00a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 810aff4:	68fb      	ldr	r3, [r7, #12]
 810aff6:	2b02      	cmp	r3, #2
 810aff8:	d002      	beq.n	810b000 <USB_GetDevSpeed+0x32>
 810affa:	68fb      	ldr	r3, [r7, #12]
 810affc:	2b06      	cmp	r3, #6
 810affe:	d102      	bne.n	810b006 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 810b000:	2302      	movs	r3, #2
 810b002:	75fb      	strb	r3, [r7, #23]
 810b004:	e001      	b.n	810b00a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 810b006:	230f      	movs	r3, #15
 810b008:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 810b00a:	7dfb      	ldrb	r3, [r7, #23]
}
 810b00c:	4618      	mov	r0, r3
 810b00e:	371c      	adds	r7, #28
 810b010:	46bd      	mov	sp, r7
 810b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b016:	4770      	bx	lr

0810b018 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 810b018:	b480      	push	{r7}
 810b01a:	b085      	sub	sp, #20
 810b01c:	af00      	add	r7, sp, #0
 810b01e:	6078      	str	r0, [r7, #4]
 810b020:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b022:	687b      	ldr	r3, [r7, #4]
 810b024:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810b026:	683b      	ldr	r3, [r7, #0]
 810b028:	781b      	ldrb	r3, [r3, #0]
 810b02a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810b02c:	683b      	ldr	r3, [r7, #0]
 810b02e:	785b      	ldrb	r3, [r3, #1]
 810b030:	2b01      	cmp	r3, #1
 810b032:	d13a      	bne.n	810b0aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 810b034:	68fb      	ldr	r3, [r7, #12]
 810b036:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b03a:	69da      	ldr	r2, [r3, #28]
 810b03c:	683b      	ldr	r3, [r7, #0]
 810b03e:	781b      	ldrb	r3, [r3, #0]
 810b040:	f003 030f 	and.w	r3, r3, #15
 810b044:	2101      	movs	r1, #1
 810b046:	fa01 f303 	lsl.w	r3, r1, r3
 810b04a:	b29b      	uxth	r3, r3
 810b04c:	68f9      	ldr	r1, [r7, #12]
 810b04e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b052:	4313      	orrs	r3, r2
 810b054:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 810b056:	68bb      	ldr	r3, [r7, #8]
 810b058:	015a      	lsls	r2, r3, #5
 810b05a:	68fb      	ldr	r3, [r7, #12]
 810b05c:	4413      	add	r3, r2
 810b05e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b062:	681b      	ldr	r3, [r3, #0]
 810b064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810b068:	2b00      	cmp	r3, #0
 810b06a:	d155      	bne.n	810b118 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 810b06c:	68bb      	ldr	r3, [r7, #8]
 810b06e:	015a      	lsls	r2, r3, #5
 810b070:	68fb      	ldr	r3, [r7, #12]
 810b072:	4413      	add	r3, r2
 810b074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b078:	681a      	ldr	r2, [r3, #0]
 810b07a:	683b      	ldr	r3, [r7, #0]
 810b07c:	689b      	ldr	r3, [r3, #8]
 810b07e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 810b082:	683b      	ldr	r3, [r7, #0]
 810b084:	791b      	ldrb	r3, [r3, #4]
 810b086:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 810b088:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 810b08a:	68bb      	ldr	r3, [r7, #8]
 810b08c:	059b      	lsls	r3, r3, #22
 810b08e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 810b090:	4313      	orrs	r3, r2
 810b092:	68ba      	ldr	r2, [r7, #8]
 810b094:	0151      	lsls	r1, r2, #5
 810b096:	68fa      	ldr	r2, [r7, #12]
 810b098:	440a      	add	r2, r1
 810b09a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b09e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b0a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810b0a6:	6013      	str	r3, [r2, #0]
 810b0a8:	e036      	b.n	810b118 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 810b0aa:	68fb      	ldr	r3, [r7, #12]
 810b0ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b0b0:	69da      	ldr	r2, [r3, #28]
 810b0b2:	683b      	ldr	r3, [r7, #0]
 810b0b4:	781b      	ldrb	r3, [r3, #0]
 810b0b6:	f003 030f 	and.w	r3, r3, #15
 810b0ba:	2101      	movs	r1, #1
 810b0bc:	fa01 f303 	lsl.w	r3, r1, r3
 810b0c0:	041b      	lsls	r3, r3, #16
 810b0c2:	68f9      	ldr	r1, [r7, #12]
 810b0c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b0c8:	4313      	orrs	r3, r2
 810b0ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 810b0cc:	68bb      	ldr	r3, [r7, #8]
 810b0ce:	015a      	lsls	r2, r3, #5
 810b0d0:	68fb      	ldr	r3, [r7, #12]
 810b0d2:	4413      	add	r3, r2
 810b0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b0d8:	681b      	ldr	r3, [r3, #0]
 810b0da:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 810b0de:	2b00      	cmp	r3, #0
 810b0e0:	d11a      	bne.n	810b118 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 810b0e2:	68bb      	ldr	r3, [r7, #8]
 810b0e4:	015a      	lsls	r2, r3, #5
 810b0e6:	68fb      	ldr	r3, [r7, #12]
 810b0e8:	4413      	add	r3, r2
 810b0ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b0ee:	681a      	ldr	r2, [r3, #0]
 810b0f0:	683b      	ldr	r3, [r7, #0]
 810b0f2:	689b      	ldr	r3, [r3, #8]
 810b0f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 810b0f8:	683b      	ldr	r3, [r7, #0]
 810b0fa:	791b      	ldrb	r3, [r3, #4]
 810b0fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 810b0fe:	430b      	orrs	r3, r1
 810b100:	4313      	orrs	r3, r2
 810b102:	68ba      	ldr	r2, [r7, #8]
 810b104:	0151      	lsls	r1, r2, #5
 810b106:	68fa      	ldr	r2, [r7, #12]
 810b108:	440a      	add	r2, r1
 810b10a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b10e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b112:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 810b116:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 810b118:	2300      	movs	r3, #0
}
 810b11a:	4618      	mov	r0, r3
 810b11c:	3714      	adds	r7, #20
 810b11e:	46bd      	mov	sp, r7
 810b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b124:	4770      	bx	lr
	...

0810b128 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 810b128:	b480      	push	{r7}
 810b12a:	b085      	sub	sp, #20
 810b12c:	af00      	add	r7, sp, #0
 810b12e:	6078      	str	r0, [r7, #4]
 810b130:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b132:	687b      	ldr	r3, [r7, #4]
 810b134:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810b136:	683b      	ldr	r3, [r7, #0]
 810b138:	781b      	ldrb	r3, [r3, #0]
 810b13a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 810b13c:	683b      	ldr	r3, [r7, #0]
 810b13e:	785b      	ldrb	r3, [r3, #1]
 810b140:	2b01      	cmp	r3, #1
 810b142:	d161      	bne.n	810b208 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810b144:	68bb      	ldr	r3, [r7, #8]
 810b146:	015a      	lsls	r2, r3, #5
 810b148:	68fb      	ldr	r3, [r7, #12]
 810b14a:	4413      	add	r3, r2
 810b14c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b150:	681b      	ldr	r3, [r3, #0]
 810b152:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b156:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b15a:	d11f      	bne.n	810b19c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 810b15c:	68bb      	ldr	r3, [r7, #8]
 810b15e:	015a      	lsls	r2, r3, #5
 810b160:	68fb      	ldr	r3, [r7, #12]
 810b162:	4413      	add	r3, r2
 810b164:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b168:	681b      	ldr	r3, [r3, #0]
 810b16a:	68ba      	ldr	r2, [r7, #8]
 810b16c:	0151      	lsls	r1, r2, #5
 810b16e:	68fa      	ldr	r2, [r7, #12]
 810b170:	440a      	add	r2, r1
 810b172:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b176:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810b17a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 810b17c:	68bb      	ldr	r3, [r7, #8]
 810b17e:	015a      	lsls	r2, r3, #5
 810b180:	68fb      	ldr	r3, [r7, #12]
 810b182:	4413      	add	r3, r2
 810b184:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b188:	681b      	ldr	r3, [r3, #0]
 810b18a:	68ba      	ldr	r2, [r7, #8]
 810b18c:	0151      	lsls	r1, r2, #5
 810b18e:	68fa      	ldr	r2, [r7, #12]
 810b190:	440a      	add	r2, r1
 810b192:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b196:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810b19a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 810b19c:	68fb      	ldr	r3, [r7, #12]
 810b19e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b1a2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810b1a4:	683b      	ldr	r3, [r7, #0]
 810b1a6:	781b      	ldrb	r3, [r3, #0]
 810b1a8:	f003 030f 	and.w	r3, r3, #15
 810b1ac:	2101      	movs	r1, #1
 810b1ae:	fa01 f303 	lsl.w	r3, r1, r3
 810b1b2:	b29b      	uxth	r3, r3
 810b1b4:	43db      	mvns	r3, r3
 810b1b6:	68f9      	ldr	r1, [r7, #12]
 810b1b8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b1bc:	4013      	ands	r3, r2
 810b1be:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 810b1c0:	68fb      	ldr	r3, [r7, #12]
 810b1c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b1c6:	69da      	ldr	r2, [r3, #28]
 810b1c8:	683b      	ldr	r3, [r7, #0]
 810b1ca:	781b      	ldrb	r3, [r3, #0]
 810b1cc:	f003 030f 	and.w	r3, r3, #15
 810b1d0:	2101      	movs	r1, #1
 810b1d2:	fa01 f303 	lsl.w	r3, r1, r3
 810b1d6:	b29b      	uxth	r3, r3
 810b1d8:	43db      	mvns	r3, r3
 810b1da:	68f9      	ldr	r1, [r7, #12]
 810b1dc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b1e0:	4013      	ands	r3, r2
 810b1e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 810b1e4:	68bb      	ldr	r3, [r7, #8]
 810b1e6:	015a      	lsls	r2, r3, #5
 810b1e8:	68fb      	ldr	r3, [r7, #12]
 810b1ea:	4413      	add	r3, r2
 810b1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b1f0:	681a      	ldr	r2, [r3, #0]
 810b1f2:	68bb      	ldr	r3, [r7, #8]
 810b1f4:	0159      	lsls	r1, r3, #5
 810b1f6:	68fb      	ldr	r3, [r7, #12]
 810b1f8:	440b      	add	r3, r1
 810b1fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b1fe:	4619      	mov	r1, r3
 810b200:	4b35      	ldr	r3, [pc, #212]	@ (810b2d8 <USB_DeactivateEndpoint+0x1b0>)
 810b202:	4013      	ands	r3, r2
 810b204:	600b      	str	r3, [r1, #0]
 810b206:	e060      	b.n	810b2ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810b208:	68bb      	ldr	r3, [r7, #8]
 810b20a:	015a      	lsls	r2, r3, #5
 810b20c:	68fb      	ldr	r3, [r7, #12]
 810b20e:	4413      	add	r3, r2
 810b210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b214:	681b      	ldr	r3, [r3, #0]
 810b216:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b21a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b21e:	d11f      	bne.n	810b260 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 810b220:	68bb      	ldr	r3, [r7, #8]
 810b222:	015a      	lsls	r2, r3, #5
 810b224:	68fb      	ldr	r3, [r7, #12]
 810b226:	4413      	add	r3, r2
 810b228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b22c:	681b      	ldr	r3, [r3, #0]
 810b22e:	68ba      	ldr	r2, [r7, #8]
 810b230:	0151      	lsls	r1, r2, #5
 810b232:	68fa      	ldr	r2, [r7, #12]
 810b234:	440a      	add	r2, r1
 810b236:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b23a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810b23e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 810b240:	68bb      	ldr	r3, [r7, #8]
 810b242:	015a      	lsls	r2, r3, #5
 810b244:	68fb      	ldr	r3, [r7, #12]
 810b246:	4413      	add	r3, r2
 810b248:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b24c:	681b      	ldr	r3, [r3, #0]
 810b24e:	68ba      	ldr	r2, [r7, #8]
 810b250:	0151      	lsls	r1, r2, #5
 810b252:	68fa      	ldr	r2, [r7, #12]
 810b254:	440a      	add	r2, r1
 810b256:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b25a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810b25e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 810b260:	68fb      	ldr	r3, [r7, #12]
 810b262:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 810b268:	683b      	ldr	r3, [r7, #0]
 810b26a:	781b      	ldrb	r3, [r3, #0]
 810b26c:	f003 030f 	and.w	r3, r3, #15
 810b270:	2101      	movs	r1, #1
 810b272:	fa01 f303 	lsl.w	r3, r1, r3
 810b276:	041b      	lsls	r3, r3, #16
 810b278:	43db      	mvns	r3, r3
 810b27a:	68f9      	ldr	r1, [r7, #12]
 810b27c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b280:	4013      	ands	r3, r2
 810b282:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 810b284:	68fb      	ldr	r3, [r7, #12]
 810b286:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b28a:	69da      	ldr	r2, [r3, #28]
 810b28c:	683b      	ldr	r3, [r7, #0]
 810b28e:	781b      	ldrb	r3, [r3, #0]
 810b290:	f003 030f 	and.w	r3, r3, #15
 810b294:	2101      	movs	r1, #1
 810b296:	fa01 f303 	lsl.w	r3, r1, r3
 810b29a:	041b      	lsls	r3, r3, #16
 810b29c:	43db      	mvns	r3, r3
 810b29e:	68f9      	ldr	r1, [r7, #12]
 810b2a0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b2a4:	4013      	ands	r3, r2
 810b2a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 810b2a8:	68bb      	ldr	r3, [r7, #8]
 810b2aa:	015a      	lsls	r2, r3, #5
 810b2ac:	68fb      	ldr	r3, [r7, #12]
 810b2ae:	4413      	add	r3, r2
 810b2b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b2b4:	681a      	ldr	r2, [r3, #0]
 810b2b6:	68bb      	ldr	r3, [r7, #8]
 810b2b8:	0159      	lsls	r1, r3, #5
 810b2ba:	68fb      	ldr	r3, [r7, #12]
 810b2bc:	440b      	add	r3, r1
 810b2be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b2c2:	4619      	mov	r1, r3
 810b2c4:	4b05      	ldr	r3, [pc, #20]	@ (810b2dc <USB_DeactivateEndpoint+0x1b4>)
 810b2c6:	4013      	ands	r3, r2
 810b2c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 810b2ca:	2300      	movs	r3, #0
}
 810b2cc:	4618      	mov	r0, r3
 810b2ce:	3714      	adds	r7, #20
 810b2d0:	46bd      	mov	sp, r7
 810b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b2d6:	4770      	bx	lr
 810b2d8:	ec337800 	.word	0xec337800
 810b2dc:	eff37800 	.word	0xeff37800

0810b2e0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 810b2e0:	b580      	push	{r7, lr}
 810b2e2:	b08a      	sub	sp, #40	@ 0x28
 810b2e4:	af02      	add	r7, sp, #8
 810b2e6:	60f8      	str	r0, [r7, #12]
 810b2e8:	60b9      	str	r1, [r7, #8]
 810b2ea:	4613      	mov	r3, r2
 810b2ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b2ee:	68fb      	ldr	r3, [r7, #12]
 810b2f0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 810b2f2:	68bb      	ldr	r3, [r7, #8]
 810b2f4:	781b      	ldrb	r3, [r3, #0]
 810b2f6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 810b2f8:	68bb      	ldr	r3, [r7, #8]
 810b2fa:	785b      	ldrb	r3, [r3, #1]
 810b2fc:	2b01      	cmp	r3, #1
 810b2fe:	f040 817f 	bne.w	810b600 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 810b302:	68bb      	ldr	r3, [r7, #8]
 810b304:	691b      	ldr	r3, [r3, #16]
 810b306:	2b00      	cmp	r3, #0
 810b308:	d132      	bne.n	810b370 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 810b30a:	69bb      	ldr	r3, [r7, #24]
 810b30c:	015a      	lsls	r2, r3, #5
 810b30e:	69fb      	ldr	r3, [r7, #28]
 810b310:	4413      	add	r3, r2
 810b312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b316:	691b      	ldr	r3, [r3, #16]
 810b318:	69ba      	ldr	r2, [r7, #24]
 810b31a:	0151      	lsls	r1, r2, #5
 810b31c:	69fa      	ldr	r2, [r7, #28]
 810b31e:	440a      	add	r2, r1
 810b320:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b324:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 810b328:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 810b32c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 810b32e:	69bb      	ldr	r3, [r7, #24]
 810b330:	015a      	lsls	r2, r3, #5
 810b332:	69fb      	ldr	r3, [r7, #28]
 810b334:	4413      	add	r3, r2
 810b336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b33a:	691b      	ldr	r3, [r3, #16]
 810b33c:	69ba      	ldr	r2, [r7, #24]
 810b33e:	0151      	lsls	r1, r2, #5
 810b340:	69fa      	ldr	r2, [r7, #28]
 810b342:	440a      	add	r2, r1
 810b344:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b348:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b34c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 810b34e:	69bb      	ldr	r3, [r7, #24]
 810b350:	015a      	lsls	r2, r3, #5
 810b352:	69fb      	ldr	r3, [r7, #28]
 810b354:	4413      	add	r3, r2
 810b356:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b35a:	691b      	ldr	r3, [r3, #16]
 810b35c:	69ba      	ldr	r2, [r7, #24]
 810b35e:	0151      	lsls	r1, r2, #5
 810b360:	69fa      	ldr	r2, [r7, #28]
 810b362:	440a      	add	r2, r1
 810b364:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b368:	0cdb      	lsrs	r3, r3, #19
 810b36a:	04db      	lsls	r3, r3, #19
 810b36c:	6113      	str	r3, [r2, #16]
 810b36e:	e097      	b.n	810b4a0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 810b370:	69bb      	ldr	r3, [r7, #24]
 810b372:	015a      	lsls	r2, r3, #5
 810b374:	69fb      	ldr	r3, [r7, #28]
 810b376:	4413      	add	r3, r2
 810b378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b37c:	691b      	ldr	r3, [r3, #16]
 810b37e:	69ba      	ldr	r2, [r7, #24]
 810b380:	0151      	lsls	r1, r2, #5
 810b382:	69fa      	ldr	r2, [r7, #28]
 810b384:	440a      	add	r2, r1
 810b386:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b38a:	0cdb      	lsrs	r3, r3, #19
 810b38c:	04db      	lsls	r3, r3, #19
 810b38e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 810b390:	69bb      	ldr	r3, [r7, #24]
 810b392:	015a      	lsls	r2, r3, #5
 810b394:	69fb      	ldr	r3, [r7, #28]
 810b396:	4413      	add	r3, r2
 810b398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b39c:	691b      	ldr	r3, [r3, #16]
 810b39e:	69ba      	ldr	r2, [r7, #24]
 810b3a0:	0151      	lsls	r1, r2, #5
 810b3a2:	69fa      	ldr	r2, [r7, #28]
 810b3a4:	440a      	add	r2, r1
 810b3a6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b3aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 810b3ae:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 810b3b2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 810b3b4:	69bb      	ldr	r3, [r7, #24]
 810b3b6:	2b00      	cmp	r3, #0
 810b3b8:	d11a      	bne.n	810b3f0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 810b3ba:	68bb      	ldr	r3, [r7, #8]
 810b3bc:	691a      	ldr	r2, [r3, #16]
 810b3be:	68bb      	ldr	r3, [r7, #8]
 810b3c0:	689b      	ldr	r3, [r3, #8]
 810b3c2:	429a      	cmp	r2, r3
 810b3c4:	d903      	bls.n	810b3ce <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 810b3c6:	68bb      	ldr	r3, [r7, #8]
 810b3c8:	689a      	ldr	r2, [r3, #8]
 810b3ca:	68bb      	ldr	r3, [r7, #8]
 810b3cc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 810b3ce:	69bb      	ldr	r3, [r7, #24]
 810b3d0:	015a      	lsls	r2, r3, #5
 810b3d2:	69fb      	ldr	r3, [r7, #28]
 810b3d4:	4413      	add	r3, r2
 810b3d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b3da:	691b      	ldr	r3, [r3, #16]
 810b3dc:	69ba      	ldr	r2, [r7, #24]
 810b3de:	0151      	lsls	r1, r2, #5
 810b3e0:	69fa      	ldr	r2, [r7, #28]
 810b3e2:	440a      	add	r2, r1
 810b3e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b3e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b3ec:	6113      	str	r3, [r2, #16]
 810b3ee:	e044      	b.n	810b47a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 810b3f0:	68bb      	ldr	r3, [r7, #8]
 810b3f2:	691a      	ldr	r2, [r3, #16]
 810b3f4:	68bb      	ldr	r3, [r7, #8]
 810b3f6:	689b      	ldr	r3, [r3, #8]
 810b3f8:	4413      	add	r3, r2
 810b3fa:	1e5a      	subs	r2, r3, #1
 810b3fc:	68bb      	ldr	r3, [r7, #8]
 810b3fe:	689b      	ldr	r3, [r3, #8]
 810b400:	fbb2 f3f3 	udiv	r3, r2, r3
 810b404:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 810b406:	69bb      	ldr	r3, [r7, #24]
 810b408:	015a      	lsls	r2, r3, #5
 810b40a:	69fb      	ldr	r3, [r7, #28]
 810b40c:	4413      	add	r3, r2
 810b40e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b412:	691a      	ldr	r2, [r3, #16]
 810b414:	8afb      	ldrh	r3, [r7, #22]
 810b416:	04d9      	lsls	r1, r3, #19
 810b418:	4ba4      	ldr	r3, [pc, #656]	@ (810b6ac <USB_EPStartXfer+0x3cc>)
 810b41a:	400b      	ands	r3, r1
 810b41c:	69b9      	ldr	r1, [r7, #24]
 810b41e:	0148      	lsls	r0, r1, #5
 810b420:	69f9      	ldr	r1, [r7, #28]
 810b422:	4401      	add	r1, r0
 810b424:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 810b428:	4313      	orrs	r3, r2
 810b42a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 810b42c:	68bb      	ldr	r3, [r7, #8]
 810b42e:	791b      	ldrb	r3, [r3, #4]
 810b430:	2b01      	cmp	r3, #1
 810b432:	d122      	bne.n	810b47a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 810b434:	69bb      	ldr	r3, [r7, #24]
 810b436:	015a      	lsls	r2, r3, #5
 810b438:	69fb      	ldr	r3, [r7, #28]
 810b43a:	4413      	add	r3, r2
 810b43c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b440:	691b      	ldr	r3, [r3, #16]
 810b442:	69ba      	ldr	r2, [r7, #24]
 810b444:	0151      	lsls	r1, r2, #5
 810b446:	69fa      	ldr	r2, [r7, #28]
 810b448:	440a      	add	r2, r1
 810b44a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b44e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 810b452:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 810b454:	69bb      	ldr	r3, [r7, #24]
 810b456:	015a      	lsls	r2, r3, #5
 810b458:	69fb      	ldr	r3, [r7, #28]
 810b45a:	4413      	add	r3, r2
 810b45c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b460:	691a      	ldr	r2, [r3, #16]
 810b462:	8afb      	ldrh	r3, [r7, #22]
 810b464:	075b      	lsls	r3, r3, #29
 810b466:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 810b46a:	69b9      	ldr	r1, [r7, #24]
 810b46c:	0148      	lsls	r0, r1, #5
 810b46e:	69f9      	ldr	r1, [r7, #28]
 810b470:	4401      	add	r1, r0
 810b472:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 810b476:	4313      	orrs	r3, r2
 810b478:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 810b47a:	69bb      	ldr	r3, [r7, #24]
 810b47c:	015a      	lsls	r2, r3, #5
 810b47e:	69fb      	ldr	r3, [r7, #28]
 810b480:	4413      	add	r3, r2
 810b482:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b486:	691a      	ldr	r2, [r3, #16]
 810b488:	68bb      	ldr	r3, [r7, #8]
 810b48a:	691b      	ldr	r3, [r3, #16]
 810b48c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810b490:	69b9      	ldr	r1, [r7, #24]
 810b492:	0148      	lsls	r0, r1, #5
 810b494:	69f9      	ldr	r1, [r7, #28]
 810b496:	4401      	add	r1, r0
 810b498:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 810b49c:	4313      	orrs	r3, r2
 810b49e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 810b4a0:	79fb      	ldrb	r3, [r7, #7]
 810b4a2:	2b01      	cmp	r3, #1
 810b4a4:	d14b      	bne.n	810b53e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 810b4a6:	68bb      	ldr	r3, [r7, #8]
 810b4a8:	69db      	ldr	r3, [r3, #28]
 810b4aa:	2b00      	cmp	r3, #0
 810b4ac:	d009      	beq.n	810b4c2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 810b4ae:	69bb      	ldr	r3, [r7, #24]
 810b4b0:	015a      	lsls	r2, r3, #5
 810b4b2:	69fb      	ldr	r3, [r7, #28]
 810b4b4:	4413      	add	r3, r2
 810b4b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b4ba:	461a      	mov	r2, r3
 810b4bc:	68bb      	ldr	r3, [r7, #8]
 810b4be:	69db      	ldr	r3, [r3, #28]
 810b4c0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 810b4c2:	68bb      	ldr	r3, [r7, #8]
 810b4c4:	791b      	ldrb	r3, [r3, #4]
 810b4c6:	2b01      	cmp	r3, #1
 810b4c8:	d128      	bne.n	810b51c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 810b4ca:	69fb      	ldr	r3, [r7, #28]
 810b4cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b4d0:	689b      	ldr	r3, [r3, #8]
 810b4d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b4d6:	2b00      	cmp	r3, #0
 810b4d8:	d110      	bne.n	810b4fc <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 810b4da:	69bb      	ldr	r3, [r7, #24]
 810b4dc:	015a      	lsls	r2, r3, #5
 810b4de:	69fb      	ldr	r3, [r7, #28]
 810b4e0:	4413      	add	r3, r2
 810b4e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b4e6:	681b      	ldr	r3, [r3, #0]
 810b4e8:	69ba      	ldr	r2, [r7, #24]
 810b4ea:	0151      	lsls	r1, r2, #5
 810b4ec:	69fa      	ldr	r2, [r7, #28]
 810b4ee:	440a      	add	r2, r1
 810b4f0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b4f4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 810b4f8:	6013      	str	r3, [r2, #0]
 810b4fa:	e00f      	b.n	810b51c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 810b4fc:	69bb      	ldr	r3, [r7, #24]
 810b4fe:	015a      	lsls	r2, r3, #5
 810b500:	69fb      	ldr	r3, [r7, #28]
 810b502:	4413      	add	r3, r2
 810b504:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b508:	681b      	ldr	r3, [r3, #0]
 810b50a:	69ba      	ldr	r2, [r7, #24]
 810b50c:	0151      	lsls	r1, r2, #5
 810b50e:	69fa      	ldr	r2, [r7, #28]
 810b510:	440a      	add	r2, r1
 810b512:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b516:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b51a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 810b51c:	69bb      	ldr	r3, [r7, #24]
 810b51e:	015a      	lsls	r2, r3, #5
 810b520:	69fb      	ldr	r3, [r7, #28]
 810b522:	4413      	add	r3, r2
 810b524:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b528:	681b      	ldr	r3, [r3, #0]
 810b52a:	69ba      	ldr	r2, [r7, #24]
 810b52c:	0151      	lsls	r1, r2, #5
 810b52e:	69fa      	ldr	r2, [r7, #28]
 810b530:	440a      	add	r2, r1
 810b532:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b536:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 810b53a:	6013      	str	r3, [r2, #0]
 810b53c:	e166      	b.n	810b80c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 810b53e:	69bb      	ldr	r3, [r7, #24]
 810b540:	015a      	lsls	r2, r3, #5
 810b542:	69fb      	ldr	r3, [r7, #28]
 810b544:	4413      	add	r3, r2
 810b546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b54a:	681b      	ldr	r3, [r3, #0]
 810b54c:	69ba      	ldr	r2, [r7, #24]
 810b54e:	0151      	lsls	r1, r2, #5
 810b550:	69fa      	ldr	r2, [r7, #28]
 810b552:	440a      	add	r2, r1
 810b554:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b558:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 810b55c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 810b55e:	68bb      	ldr	r3, [r7, #8]
 810b560:	791b      	ldrb	r3, [r3, #4]
 810b562:	2b01      	cmp	r3, #1
 810b564:	d015      	beq.n	810b592 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 810b566:	68bb      	ldr	r3, [r7, #8]
 810b568:	691b      	ldr	r3, [r3, #16]
 810b56a:	2b00      	cmp	r3, #0
 810b56c:	f000 814e 	beq.w	810b80c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 810b570:	69fb      	ldr	r3, [r7, #28]
 810b572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 810b578:	68bb      	ldr	r3, [r7, #8]
 810b57a:	781b      	ldrb	r3, [r3, #0]
 810b57c:	f003 030f 	and.w	r3, r3, #15
 810b580:	2101      	movs	r1, #1
 810b582:	fa01 f303 	lsl.w	r3, r1, r3
 810b586:	69f9      	ldr	r1, [r7, #28]
 810b588:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810b58c:	4313      	orrs	r3, r2
 810b58e:	634b      	str	r3, [r1, #52]	@ 0x34
 810b590:	e13c      	b.n	810b80c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 810b592:	69fb      	ldr	r3, [r7, #28]
 810b594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b598:	689b      	ldr	r3, [r3, #8]
 810b59a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b59e:	2b00      	cmp	r3, #0
 810b5a0:	d110      	bne.n	810b5c4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 810b5a2:	69bb      	ldr	r3, [r7, #24]
 810b5a4:	015a      	lsls	r2, r3, #5
 810b5a6:	69fb      	ldr	r3, [r7, #28]
 810b5a8:	4413      	add	r3, r2
 810b5aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b5ae:	681b      	ldr	r3, [r3, #0]
 810b5b0:	69ba      	ldr	r2, [r7, #24]
 810b5b2:	0151      	lsls	r1, r2, #5
 810b5b4:	69fa      	ldr	r2, [r7, #28]
 810b5b6:	440a      	add	r2, r1
 810b5b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b5bc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 810b5c0:	6013      	str	r3, [r2, #0]
 810b5c2:	e00f      	b.n	810b5e4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 810b5c4:	69bb      	ldr	r3, [r7, #24]
 810b5c6:	015a      	lsls	r2, r3, #5
 810b5c8:	69fb      	ldr	r3, [r7, #28]
 810b5ca:	4413      	add	r3, r2
 810b5cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b5d0:	681b      	ldr	r3, [r3, #0]
 810b5d2:	69ba      	ldr	r2, [r7, #24]
 810b5d4:	0151      	lsls	r1, r2, #5
 810b5d6:	69fa      	ldr	r2, [r7, #28]
 810b5d8:	440a      	add	r2, r1
 810b5da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b5de:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b5e2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 810b5e4:	68bb      	ldr	r3, [r7, #8]
 810b5e6:	68d9      	ldr	r1, [r3, #12]
 810b5e8:	68bb      	ldr	r3, [r7, #8]
 810b5ea:	781a      	ldrb	r2, [r3, #0]
 810b5ec:	68bb      	ldr	r3, [r7, #8]
 810b5ee:	691b      	ldr	r3, [r3, #16]
 810b5f0:	b298      	uxth	r0, r3
 810b5f2:	79fb      	ldrb	r3, [r7, #7]
 810b5f4:	9300      	str	r3, [sp, #0]
 810b5f6:	4603      	mov	r3, r0
 810b5f8:	68f8      	ldr	r0, [r7, #12]
 810b5fa:	f000 f9b9 	bl	810b970 <USB_WritePacket>
 810b5fe:	e105      	b.n	810b80c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 810b600:	69bb      	ldr	r3, [r7, #24]
 810b602:	015a      	lsls	r2, r3, #5
 810b604:	69fb      	ldr	r3, [r7, #28]
 810b606:	4413      	add	r3, r2
 810b608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b60c:	691b      	ldr	r3, [r3, #16]
 810b60e:	69ba      	ldr	r2, [r7, #24]
 810b610:	0151      	lsls	r1, r2, #5
 810b612:	69fa      	ldr	r2, [r7, #28]
 810b614:	440a      	add	r2, r1
 810b616:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b61a:	0cdb      	lsrs	r3, r3, #19
 810b61c:	04db      	lsls	r3, r3, #19
 810b61e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 810b620:	69bb      	ldr	r3, [r7, #24]
 810b622:	015a      	lsls	r2, r3, #5
 810b624:	69fb      	ldr	r3, [r7, #28]
 810b626:	4413      	add	r3, r2
 810b628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b62c:	691b      	ldr	r3, [r3, #16]
 810b62e:	69ba      	ldr	r2, [r7, #24]
 810b630:	0151      	lsls	r1, r2, #5
 810b632:	69fa      	ldr	r2, [r7, #28]
 810b634:	440a      	add	r2, r1
 810b636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b63a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 810b63e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 810b642:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 810b644:	69bb      	ldr	r3, [r7, #24]
 810b646:	2b00      	cmp	r3, #0
 810b648:	d132      	bne.n	810b6b0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 810b64a:	68bb      	ldr	r3, [r7, #8]
 810b64c:	691b      	ldr	r3, [r3, #16]
 810b64e:	2b00      	cmp	r3, #0
 810b650:	d003      	beq.n	810b65a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 810b652:	68bb      	ldr	r3, [r7, #8]
 810b654:	689a      	ldr	r2, [r3, #8]
 810b656:	68bb      	ldr	r3, [r7, #8]
 810b658:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 810b65a:	68bb      	ldr	r3, [r7, #8]
 810b65c:	689a      	ldr	r2, [r3, #8]
 810b65e:	68bb      	ldr	r3, [r7, #8]
 810b660:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 810b662:	69bb      	ldr	r3, [r7, #24]
 810b664:	015a      	lsls	r2, r3, #5
 810b666:	69fb      	ldr	r3, [r7, #28]
 810b668:	4413      	add	r3, r2
 810b66a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b66e:	691a      	ldr	r2, [r3, #16]
 810b670:	68bb      	ldr	r3, [r7, #8]
 810b672:	6a1b      	ldr	r3, [r3, #32]
 810b674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810b678:	69b9      	ldr	r1, [r7, #24]
 810b67a:	0148      	lsls	r0, r1, #5
 810b67c:	69f9      	ldr	r1, [r7, #28]
 810b67e:	4401      	add	r1, r0
 810b680:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 810b684:	4313      	orrs	r3, r2
 810b686:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 810b688:	69bb      	ldr	r3, [r7, #24]
 810b68a:	015a      	lsls	r2, r3, #5
 810b68c:	69fb      	ldr	r3, [r7, #28]
 810b68e:	4413      	add	r3, r2
 810b690:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b694:	691b      	ldr	r3, [r3, #16]
 810b696:	69ba      	ldr	r2, [r7, #24]
 810b698:	0151      	lsls	r1, r2, #5
 810b69a:	69fa      	ldr	r2, [r7, #28]
 810b69c:	440a      	add	r2, r1
 810b69e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b6a2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b6a6:	6113      	str	r3, [r2, #16]
 810b6a8:	e062      	b.n	810b770 <USB_EPStartXfer+0x490>
 810b6aa:	bf00      	nop
 810b6ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 810b6b0:	68bb      	ldr	r3, [r7, #8]
 810b6b2:	691b      	ldr	r3, [r3, #16]
 810b6b4:	2b00      	cmp	r3, #0
 810b6b6:	d123      	bne.n	810b700 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 810b6b8:	69bb      	ldr	r3, [r7, #24]
 810b6ba:	015a      	lsls	r2, r3, #5
 810b6bc:	69fb      	ldr	r3, [r7, #28]
 810b6be:	4413      	add	r3, r2
 810b6c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b6c4:	691a      	ldr	r2, [r3, #16]
 810b6c6:	68bb      	ldr	r3, [r7, #8]
 810b6c8:	689b      	ldr	r3, [r3, #8]
 810b6ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810b6ce:	69b9      	ldr	r1, [r7, #24]
 810b6d0:	0148      	lsls	r0, r1, #5
 810b6d2:	69f9      	ldr	r1, [r7, #28]
 810b6d4:	4401      	add	r1, r0
 810b6d6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 810b6da:	4313      	orrs	r3, r2
 810b6dc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 810b6de:	69bb      	ldr	r3, [r7, #24]
 810b6e0:	015a      	lsls	r2, r3, #5
 810b6e2:	69fb      	ldr	r3, [r7, #28]
 810b6e4:	4413      	add	r3, r2
 810b6e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b6ea:	691b      	ldr	r3, [r3, #16]
 810b6ec:	69ba      	ldr	r2, [r7, #24]
 810b6ee:	0151      	lsls	r1, r2, #5
 810b6f0:	69fa      	ldr	r2, [r7, #28]
 810b6f2:	440a      	add	r2, r1
 810b6f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b6f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810b6fc:	6113      	str	r3, [r2, #16]
 810b6fe:	e037      	b.n	810b770 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 810b700:	68bb      	ldr	r3, [r7, #8]
 810b702:	691a      	ldr	r2, [r3, #16]
 810b704:	68bb      	ldr	r3, [r7, #8]
 810b706:	689b      	ldr	r3, [r3, #8]
 810b708:	4413      	add	r3, r2
 810b70a:	1e5a      	subs	r2, r3, #1
 810b70c:	68bb      	ldr	r3, [r7, #8]
 810b70e:	689b      	ldr	r3, [r3, #8]
 810b710:	fbb2 f3f3 	udiv	r3, r2, r3
 810b714:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 810b716:	68bb      	ldr	r3, [r7, #8]
 810b718:	689b      	ldr	r3, [r3, #8]
 810b71a:	8afa      	ldrh	r2, [r7, #22]
 810b71c:	fb03 f202 	mul.w	r2, r3, r2
 810b720:	68bb      	ldr	r3, [r7, #8]
 810b722:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 810b724:	69bb      	ldr	r3, [r7, #24]
 810b726:	015a      	lsls	r2, r3, #5
 810b728:	69fb      	ldr	r3, [r7, #28]
 810b72a:	4413      	add	r3, r2
 810b72c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b730:	691a      	ldr	r2, [r3, #16]
 810b732:	8afb      	ldrh	r3, [r7, #22]
 810b734:	04d9      	lsls	r1, r3, #19
 810b736:	4b38      	ldr	r3, [pc, #224]	@ (810b818 <USB_EPStartXfer+0x538>)
 810b738:	400b      	ands	r3, r1
 810b73a:	69b9      	ldr	r1, [r7, #24]
 810b73c:	0148      	lsls	r0, r1, #5
 810b73e:	69f9      	ldr	r1, [r7, #28]
 810b740:	4401      	add	r1, r0
 810b742:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 810b746:	4313      	orrs	r3, r2
 810b748:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 810b74a:	69bb      	ldr	r3, [r7, #24]
 810b74c:	015a      	lsls	r2, r3, #5
 810b74e:	69fb      	ldr	r3, [r7, #28]
 810b750:	4413      	add	r3, r2
 810b752:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b756:	691a      	ldr	r2, [r3, #16]
 810b758:	68bb      	ldr	r3, [r7, #8]
 810b75a:	6a1b      	ldr	r3, [r3, #32]
 810b75c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 810b760:	69b9      	ldr	r1, [r7, #24]
 810b762:	0148      	lsls	r0, r1, #5
 810b764:	69f9      	ldr	r1, [r7, #28]
 810b766:	4401      	add	r1, r0
 810b768:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 810b76c:	4313      	orrs	r3, r2
 810b76e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 810b770:	79fb      	ldrb	r3, [r7, #7]
 810b772:	2b01      	cmp	r3, #1
 810b774:	d10d      	bne.n	810b792 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 810b776:	68bb      	ldr	r3, [r7, #8]
 810b778:	68db      	ldr	r3, [r3, #12]
 810b77a:	2b00      	cmp	r3, #0
 810b77c:	d009      	beq.n	810b792 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 810b77e:	68bb      	ldr	r3, [r7, #8]
 810b780:	68d9      	ldr	r1, [r3, #12]
 810b782:	69bb      	ldr	r3, [r7, #24]
 810b784:	015a      	lsls	r2, r3, #5
 810b786:	69fb      	ldr	r3, [r7, #28]
 810b788:	4413      	add	r3, r2
 810b78a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b78e:	460a      	mov	r2, r1
 810b790:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 810b792:	68bb      	ldr	r3, [r7, #8]
 810b794:	791b      	ldrb	r3, [r3, #4]
 810b796:	2b01      	cmp	r3, #1
 810b798:	d128      	bne.n	810b7ec <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 810b79a:	69fb      	ldr	r3, [r7, #28]
 810b79c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810b7a0:	689b      	ldr	r3, [r3, #8]
 810b7a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 810b7a6:	2b00      	cmp	r3, #0
 810b7a8:	d110      	bne.n	810b7cc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 810b7aa:	69bb      	ldr	r3, [r7, #24]
 810b7ac:	015a      	lsls	r2, r3, #5
 810b7ae:	69fb      	ldr	r3, [r7, #28]
 810b7b0:	4413      	add	r3, r2
 810b7b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b7b6:	681b      	ldr	r3, [r3, #0]
 810b7b8:	69ba      	ldr	r2, [r7, #24]
 810b7ba:	0151      	lsls	r1, r2, #5
 810b7bc:	69fa      	ldr	r2, [r7, #28]
 810b7be:	440a      	add	r2, r1
 810b7c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b7c4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 810b7c8:	6013      	str	r3, [r2, #0]
 810b7ca:	e00f      	b.n	810b7ec <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 810b7cc:	69bb      	ldr	r3, [r7, #24]
 810b7ce:	015a      	lsls	r2, r3, #5
 810b7d0:	69fb      	ldr	r3, [r7, #28]
 810b7d2:	4413      	add	r3, r2
 810b7d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b7d8:	681b      	ldr	r3, [r3, #0]
 810b7da:	69ba      	ldr	r2, [r7, #24]
 810b7dc:	0151      	lsls	r1, r2, #5
 810b7de:	69fa      	ldr	r2, [r7, #28]
 810b7e0:	440a      	add	r2, r1
 810b7e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b7e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810b7ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 810b7ec:	69bb      	ldr	r3, [r7, #24]
 810b7ee:	015a      	lsls	r2, r3, #5
 810b7f0:	69fb      	ldr	r3, [r7, #28]
 810b7f2:	4413      	add	r3, r2
 810b7f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b7f8:	681b      	ldr	r3, [r3, #0]
 810b7fa:	69ba      	ldr	r2, [r7, #24]
 810b7fc:	0151      	lsls	r1, r2, #5
 810b7fe:	69fa      	ldr	r2, [r7, #28]
 810b800:	440a      	add	r2, r1
 810b802:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b806:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 810b80a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 810b80c:	2300      	movs	r3, #0
}
 810b80e:	4618      	mov	r0, r3
 810b810:	3720      	adds	r7, #32
 810b812:	46bd      	mov	sp, r7
 810b814:	bd80      	pop	{r7, pc}
 810b816:	bf00      	nop
 810b818:	1ff80000 	.word	0x1ff80000

0810b81c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 810b81c:	b480      	push	{r7}
 810b81e:	b087      	sub	sp, #28
 810b820:	af00      	add	r7, sp, #0
 810b822:	6078      	str	r0, [r7, #4]
 810b824:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 810b826:	2300      	movs	r3, #0
 810b828:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 810b82a:	2300      	movs	r3, #0
 810b82c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b82e:	687b      	ldr	r3, [r7, #4]
 810b830:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 810b832:	683b      	ldr	r3, [r7, #0]
 810b834:	785b      	ldrb	r3, [r3, #1]
 810b836:	2b01      	cmp	r3, #1
 810b838:	d14a      	bne.n	810b8d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 810b83a:	683b      	ldr	r3, [r7, #0]
 810b83c:	781b      	ldrb	r3, [r3, #0]
 810b83e:	015a      	lsls	r2, r3, #5
 810b840:	693b      	ldr	r3, [r7, #16]
 810b842:	4413      	add	r3, r2
 810b844:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b848:	681b      	ldr	r3, [r3, #0]
 810b84a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b84e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b852:	f040 8086 	bne.w	810b962 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 810b856:	683b      	ldr	r3, [r7, #0]
 810b858:	781b      	ldrb	r3, [r3, #0]
 810b85a:	015a      	lsls	r2, r3, #5
 810b85c:	693b      	ldr	r3, [r7, #16]
 810b85e:	4413      	add	r3, r2
 810b860:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b864:	681b      	ldr	r3, [r3, #0]
 810b866:	683a      	ldr	r2, [r7, #0]
 810b868:	7812      	ldrb	r2, [r2, #0]
 810b86a:	0151      	lsls	r1, r2, #5
 810b86c:	693a      	ldr	r2, [r7, #16]
 810b86e:	440a      	add	r2, r1
 810b870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b874:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810b878:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 810b87a:	683b      	ldr	r3, [r7, #0]
 810b87c:	781b      	ldrb	r3, [r3, #0]
 810b87e:	015a      	lsls	r2, r3, #5
 810b880:	693b      	ldr	r3, [r7, #16]
 810b882:	4413      	add	r3, r2
 810b884:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b888:	681b      	ldr	r3, [r3, #0]
 810b88a:	683a      	ldr	r2, [r7, #0]
 810b88c:	7812      	ldrb	r2, [r2, #0]
 810b88e:	0151      	lsls	r1, r2, #5
 810b890:	693a      	ldr	r2, [r7, #16]
 810b892:	440a      	add	r2, r1
 810b894:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810b898:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810b89c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 810b89e:	68fb      	ldr	r3, [r7, #12]
 810b8a0:	3301      	adds	r3, #1
 810b8a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 810b8a4:	68fb      	ldr	r3, [r7, #12]
 810b8a6:	f242 7210 	movw	r2, #10000	@ 0x2710
 810b8aa:	4293      	cmp	r3, r2
 810b8ac:	d902      	bls.n	810b8b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 810b8ae:	2301      	movs	r3, #1
 810b8b0:	75fb      	strb	r3, [r7, #23]
          break;
 810b8b2:	e056      	b.n	810b962 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 810b8b4:	683b      	ldr	r3, [r7, #0]
 810b8b6:	781b      	ldrb	r3, [r3, #0]
 810b8b8:	015a      	lsls	r2, r3, #5
 810b8ba:	693b      	ldr	r3, [r7, #16]
 810b8bc:	4413      	add	r3, r2
 810b8be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810b8c2:	681b      	ldr	r3, [r3, #0]
 810b8c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b8c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b8cc:	d0e7      	beq.n	810b89e <USB_EPStopXfer+0x82>
 810b8ce:	e048      	b.n	810b962 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810b8d0:	683b      	ldr	r3, [r7, #0]
 810b8d2:	781b      	ldrb	r3, [r3, #0]
 810b8d4:	015a      	lsls	r2, r3, #5
 810b8d6:	693b      	ldr	r3, [r7, #16]
 810b8d8:	4413      	add	r3, r2
 810b8da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b8de:	681b      	ldr	r3, [r3, #0]
 810b8e0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b8e4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b8e8:	d13b      	bne.n	810b962 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 810b8ea:	683b      	ldr	r3, [r7, #0]
 810b8ec:	781b      	ldrb	r3, [r3, #0]
 810b8ee:	015a      	lsls	r2, r3, #5
 810b8f0:	693b      	ldr	r3, [r7, #16]
 810b8f2:	4413      	add	r3, r2
 810b8f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b8f8:	681b      	ldr	r3, [r3, #0]
 810b8fa:	683a      	ldr	r2, [r7, #0]
 810b8fc:	7812      	ldrb	r2, [r2, #0]
 810b8fe:	0151      	lsls	r1, r2, #5
 810b900:	693a      	ldr	r2, [r7, #16]
 810b902:	440a      	add	r2, r1
 810b904:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b908:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810b90c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 810b90e:	683b      	ldr	r3, [r7, #0]
 810b910:	781b      	ldrb	r3, [r3, #0]
 810b912:	015a      	lsls	r2, r3, #5
 810b914:	693b      	ldr	r3, [r7, #16]
 810b916:	4413      	add	r3, r2
 810b918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b91c:	681b      	ldr	r3, [r3, #0]
 810b91e:	683a      	ldr	r2, [r7, #0]
 810b920:	7812      	ldrb	r2, [r2, #0]
 810b922:	0151      	lsls	r1, r2, #5
 810b924:	693a      	ldr	r2, [r7, #16]
 810b926:	440a      	add	r2, r1
 810b928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810b92c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 810b930:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 810b932:	68fb      	ldr	r3, [r7, #12]
 810b934:	3301      	adds	r3, #1
 810b936:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 810b938:	68fb      	ldr	r3, [r7, #12]
 810b93a:	f242 7210 	movw	r2, #10000	@ 0x2710
 810b93e:	4293      	cmp	r3, r2
 810b940:	d902      	bls.n	810b948 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 810b942:	2301      	movs	r3, #1
 810b944:	75fb      	strb	r3, [r7, #23]
          break;
 810b946:	e00c      	b.n	810b962 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 810b948:	683b      	ldr	r3, [r7, #0]
 810b94a:	781b      	ldrb	r3, [r3, #0]
 810b94c:	015a      	lsls	r2, r3, #5
 810b94e:	693b      	ldr	r3, [r7, #16]
 810b950:	4413      	add	r3, r2
 810b952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810b956:	681b      	ldr	r3, [r3, #0]
 810b958:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810b95c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810b960:	d0e7      	beq.n	810b932 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 810b962:	7dfb      	ldrb	r3, [r7, #23]
}
 810b964:	4618      	mov	r0, r3
 810b966:	371c      	adds	r7, #28
 810b968:	46bd      	mov	sp, r7
 810b96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b96e:	4770      	bx	lr

0810b970 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 810b970:	b480      	push	{r7}
 810b972:	b089      	sub	sp, #36	@ 0x24
 810b974:	af00      	add	r7, sp, #0
 810b976:	60f8      	str	r0, [r7, #12]
 810b978:	60b9      	str	r1, [r7, #8]
 810b97a:	4611      	mov	r1, r2
 810b97c:	461a      	mov	r2, r3
 810b97e:	460b      	mov	r3, r1
 810b980:	71fb      	strb	r3, [r7, #7]
 810b982:	4613      	mov	r3, r2
 810b984:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b986:	68fb      	ldr	r3, [r7, #12]
 810b988:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 810b98a:	68bb      	ldr	r3, [r7, #8]
 810b98c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 810b98e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 810b992:	2b00      	cmp	r3, #0
 810b994:	d123      	bne.n	810b9de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 810b996:	88bb      	ldrh	r3, [r7, #4]
 810b998:	3303      	adds	r3, #3
 810b99a:	089b      	lsrs	r3, r3, #2
 810b99c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 810b99e:	2300      	movs	r3, #0
 810b9a0:	61bb      	str	r3, [r7, #24]
 810b9a2:	e018      	b.n	810b9d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 810b9a4:	79fb      	ldrb	r3, [r7, #7]
 810b9a6:	031a      	lsls	r2, r3, #12
 810b9a8:	697b      	ldr	r3, [r7, #20]
 810b9aa:	4413      	add	r3, r2
 810b9ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810b9b0:	461a      	mov	r2, r3
 810b9b2:	69fb      	ldr	r3, [r7, #28]
 810b9b4:	681b      	ldr	r3, [r3, #0]
 810b9b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 810b9b8:	69fb      	ldr	r3, [r7, #28]
 810b9ba:	3301      	adds	r3, #1
 810b9bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810b9be:	69fb      	ldr	r3, [r7, #28]
 810b9c0:	3301      	adds	r3, #1
 810b9c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810b9c4:	69fb      	ldr	r3, [r7, #28]
 810b9c6:	3301      	adds	r3, #1
 810b9c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 810b9ca:	69fb      	ldr	r3, [r7, #28]
 810b9cc:	3301      	adds	r3, #1
 810b9ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 810b9d0:	69bb      	ldr	r3, [r7, #24]
 810b9d2:	3301      	adds	r3, #1
 810b9d4:	61bb      	str	r3, [r7, #24]
 810b9d6:	69ba      	ldr	r2, [r7, #24]
 810b9d8:	693b      	ldr	r3, [r7, #16]
 810b9da:	429a      	cmp	r2, r3
 810b9dc:	d3e2      	bcc.n	810b9a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 810b9de:	2300      	movs	r3, #0
}
 810b9e0:	4618      	mov	r0, r3
 810b9e2:	3724      	adds	r7, #36	@ 0x24
 810b9e4:	46bd      	mov	sp, r7
 810b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 810b9ea:	4770      	bx	lr

0810b9ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 810b9ec:	b480      	push	{r7}
 810b9ee:	b08b      	sub	sp, #44	@ 0x2c
 810b9f0:	af00      	add	r7, sp, #0
 810b9f2:	60f8      	str	r0, [r7, #12]
 810b9f4:	60b9      	str	r1, [r7, #8]
 810b9f6:	4613      	mov	r3, r2
 810b9f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810b9fa:	68fb      	ldr	r3, [r7, #12]
 810b9fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 810b9fe:	68bb      	ldr	r3, [r7, #8]
 810ba00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 810ba02:	88fb      	ldrh	r3, [r7, #6]
 810ba04:	089b      	lsrs	r3, r3, #2
 810ba06:	b29b      	uxth	r3, r3
 810ba08:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 810ba0a:	88fb      	ldrh	r3, [r7, #6]
 810ba0c:	f003 0303 	and.w	r3, r3, #3
 810ba10:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 810ba12:	2300      	movs	r3, #0
 810ba14:	623b      	str	r3, [r7, #32]
 810ba16:	e014      	b.n	810ba42 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 810ba18:	69bb      	ldr	r3, [r7, #24]
 810ba1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810ba1e:	681a      	ldr	r2, [r3, #0]
 810ba20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba22:	601a      	str	r2, [r3, #0]
    pDest++;
 810ba24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba26:	3301      	adds	r3, #1
 810ba28:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 810ba2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba2c:	3301      	adds	r3, #1
 810ba2e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 810ba30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba32:	3301      	adds	r3, #1
 810ba34:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 810ba36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba38:	3301      	adds	r3, #1
 810ba3a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 810ba3c:	6a3b      	ldr	r3, [r7, #32]
 810ba3e:	3301      	adds	r3, #1
 810ba40:	623b      	str	r3, [r7, #32]
 810ba42:	6a3a      	ldr	r2, [r7, #32]
 810ba44:	697b      	ldr	r3, [r7, #20]
 810ba46:	429a      	cmp	r2, r3
 810ba48:	d3e6      	bcc.n	810ba18 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 810ba4a:	8bfb      	ldrh	r3, [r7, #30]
 810ba4c:	2b00      	cmp	r3, #0
 810ba4e:	d01e      	beq.n	810ba8e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 810ba50:	2300      	movs	r3, #0
 810ba52:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 810ba54:	69bb      	ldr	r3, [r7, #24]
 810ba56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 810ba5a:	461a      	mov	r2, r3
 810ba5c:	f107 0310 	add.w	r3, r7, #16
 810ba60:	6812      	ldr	r2, [r2, #0]
 810ba62:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 810ba64:	693a      	ldr	r2, [r7, #16]
 810ba66:	6a3b      	ldr	r3, [r7, #32]
 810ba68:	b2db      	uxtb	r3, r3
 810ba6a:	00db      	lsls	r3, r3, #3
 810ba6c:	fa22 f303 	lsr.w	r3, r2, r3
 810ba70:	b2da      	uxtb	r2, r3
 810ba72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba74:	701a      	strb	r2, [r3, #0]
      i++;
 810ba76:	6a3b      	ldr	r3, [r7, #32]
 810ba78:	3301      	adds	r3, #1
 810ba7a:	623b      	str	r3, [r7, #32]
      pDest++;
 810ba7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 810ba7e:	3301      	adds	r3, #1
 810ba80:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 810ba82:	8bfb      	ldrh	r3, [r7, #30]
 810ba84:	3b01      	subs	r3, #1
 810ba86:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 810ba88:	8bfb      	ldrh	r3, [r7, #30]
 810ba8a:	2b00      	cmp	r3, #0
 810ba8c:	d1ea      	bne.n	810ba64 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 810ba8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 810ba90:	4618      	mov	r0, r3
 810ba92:	372c      	adds	r7, #44	@ 0x2c
 810ba94:	46bd      	mov	sp, r7
 810ba96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ba9a:	4770      	bx	lr

0810ba9c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 810ba9c:	b480      	push	{r7}
 810ba9e:	b085      	sub	sp, #20
 810baa0:	af00      	add	r7, sp, #0
 810baa2:	6078      	str	r0, [r7, #4]
 810baa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810baa6:	687b      	ldr	r3, [r7, #4]
 810baa8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810baaa:	683b      	ldr	r3, [r7, #0]
 810baac:	781b      	ldrb	r3, [r3, #0]
 810baae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810bab0:	683b      	ldr	r3, [r7, #0]
 810bab2:	785b      	ldrb	r3, [r3, #1]
 810bab4:	2b01      	cmp	r3, #1
 810bab6:	d12c      	bne.n	810bb12 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 810bab8:	68bb      	ldr	r3, [r7, #8]
 810baba:	015a      	lsls	r2, r3, #5
 810babc:	68fb      	ldr	r3, [r7, #12]
 810babe:	4413      	add	r3, r2
 810bac0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810bac4:	681b      	ldr	r3, [r3, #0]
 810bac6:	2b00      	cmp	r3, #0
 810bac8:	db12      	blt.n	810baf0 <USB_EPSetStall+0x54>
 810baca:	68bb      	ldr	r3, [r7, #8]
 810bacc:	2b00      	cmp	r3, #0
 810bace:	d00f      	beq.n	810baf0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 810bad0:	68bb      	ldr	r3, [r7, #8]
 810bad2:	015a      	lsls	r2, r3, #5
 810bad4:	68fb      	ldr	r3, [r7, #12]
 810bad6:	4413      	add	r3, r2
 810bad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810badc:	681b      	ldr	r3, [r3, #0]
 810bade:	68ba      	ldr	r2, [r7, #8]
 810bae0:	0151      	lsls	r1, r2, #5
 810bae2:	68fa      	ldr	r2, [r7, #12]
 810bae4:	440a      	add	r2, r1
 810bae6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810baea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 810baee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 810baf0:	68bb      	ldr	r3, [r7, #8]
 810baf2:	015a      	lsls	r2, r3, #5
 810baf4:	68fb      	ldr	r3, [r7, #12]
 810baf6:	4413      	add	r3, r2
 810baf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810bafc:	681b      	ldr	r3, [r3, #0]
 810bafe:	68ba      	ldr	r2, [r7, #8]
 810bb00:	0151      	lsls	r1, r2, #5
 810bb02:	68fa      	ldr	r2, [r7, #12]
 810bb04:	440a      	add	r2, r1
 810bb06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810bb0a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810bb0e:	6013      	str	r3, [r2, #0]
 810bb10:	e02b      	b.n	810bb6a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 810bb12:	68bb      	ldr	r3, [r7, #8]
 810bb14:	015a      	lsls	r2, r3, #5
 810bb16:	68fb      	ldr	r3, [r7, #12]
 810bb18:	4413      	add	r3, r2
 810bb1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bb1e:	681b      	ldr	r3, [r3, #0]
 810bb20:	2b00      	cmp	r3, #0
 810bb22:	db12      	blt.n	810bb4a <USB_EPSetStall+0xae>
 810bb24:	68bb      	ldr	r3, [r7, #8]
 810bb26:	2b00      	cmp	r3, #0
 810bb28:	d00f      	beq.n	810bb4a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 810bb2a:	68bb      	ldr	r3, [r7, #8]
 810bb2c:	015a      	lsls	r2, r3, #5
 810bb2e:	68fb      	ldr	r3, [r7, #12]
 810bb30:	4413      	add	r3, r2
 810bb32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bb36:	681b      	ldr	r3, [r3, #0]
 810bb38:	68ba      	ldr	r2, [r7, #8]
 810bb3a:	0151      	lsls	r1, r2, #5
 810bb3c:	68fa      	ldr	r2, [r7, #12]
 810bb3e:	440a      	add	r2, r1
 810bb40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bb44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 810bb48:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 810bb4a:	68bb      	ldr	r3, [r7, #8]
 810bb4c:	015a      	lsls	r2, r3, #5
 810bb4e:	68fb      	ldr	r3, [r7, #12]
 810bb50:	4413      	add	r3, r2
 810bb52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bb56:	681b      	ldr	r3, [r3, #0]
 810bb58:	68ba      	ldr	r2, [r7, #8]
 810bb5a:	0151      	lsls	r1, r2, #5
 810bb5c:	68fa      	ldr	r2, [r7, #12]
 810bb5e:	440a      	add	r2, r1
 810bb60:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bb64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 810bb68:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 810bb6a:	2300      	movs	r3, #0
}
 810bb6c:	4618      	mov	r0, r3
 810bb6e:	3714      	adds	r7, #20
 810bb70:	46bd      	mov	sp, r7
 810bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bb76:	4770      	bx	lr

0810bb78 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 810bb78:	b480      	push	{r7}
 810bb7a:	b085      	sub	sp, #20
 810bb7c:	af00      	add	r7, sp, #0
 810bb7e:	6078      	str	r0, [r7, #4]
 810bb80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bb82:	687b      	ldr	r3, [r7, #4]
 810bb84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 810bb86:	683b      	ldr	r3, [r7, #0]
 810bb88:	781b      	ldrb	r3, [r3, #0]
 810bb8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 810bb8c:	683b      	ldr	r3, [r7, #0]
 810bb8e:	785b      	ldrb	r3, [r3, #1]
 810bb90:	2b01      	cmp	r3, #1
 810bb92:	d128      	bne.n	810bbe6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 810bb94:	68bb      	ldr	r3, [r7, #8]
 810bb96:	015a      	lsls	r2, r3, #5
 810bb98:	68fb      	ldr	r3, [r7, #12]
 810bb9a:	4413      	add	r3, r2
 810bb9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810bba0:	681b      	ldr	r3, [r3, #0]
 810bba2:	68ba      	ldr	r2, [r7, #8]
 810bba4:	0151      	lsls	r1, r2, #5
 810bba6:	68fa      	ldr	r2, [r7, #12]
 810bba8:	440a      	add	r2, r1
 810bbaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810bbae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810bbb2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 810bbb4:	683b      	ldr	r3, [r7, #0]
 810bbb6:	791b      	ldrb	r3, [r3, #4]
 810bbb8:	2b03      	cmp	r3, #3
 810bbba:	d003      	beq.n	810bbc4 <USB_EPClearStall+0x4c>
 810bbbc:	683b      	ldr	r3, [r7, #0]
 810bbbe:	791b      	ldrb	r3, [r3, #4]
 810bbc0:	2b02      	cmp	r3, #2
 810bbc2:	d138      	bne.n	810bc36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 810bbc4:	68bb      	ldr	r3, [r7, #8]
 810bbc6:	015a      	lsls	r2, r3, #5
 810bbc8:	68fb      	ldr	r3, [r7, #12]
 810bbca:	4413      	add	r3, r2
 810bbcc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810bbd0:	681b      	ldr	r3, [r3, #0]
 810bbd2:	68ba      	ldr	r2, [r7, #8]
 810bbd4:	0151      	lsls	r1, r2, #5
 810bbd6:	68fa      	ldr	r2, [r7, #12]
 810bbd8:	440a      	add	r2, r1
 810bbda:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810bbde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810bbe2:	6013      	str	r3, [r2, #0]
 810bbe4:	e027      	b.n	810bc36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 810bbe6:	68bb      	ldr	r3, [r7, #8]
 810bbe8:	015a      	lsls	r2, r3, #5
 810bbea:	68fb      	ldr	r3, [r7, #12]
 810bbec:	4413      	add	r3, r2
 810bbee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bbf2:	681b      	ldr	r3, [r3, #0]
 810bbf4:	68ba      	ldr	r2, [r7, #8]
 810bbf6:	0151      	lsls	r1, r2, #5
 810bbf8:	68fa      	ldr	r2, [r7, #12]
 810bbfa:	440a      	add	r2, r1
 810bbfc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bc00:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 810bc04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 810bc06:	683b      	ldr	r3, [r7, #0]
 810bc08:	791b      	ldrb	r3, [r3, #4]
 810bc0a:	2b03      	cmp	r3, #3
 810bc0c:	d003      	beq.n	810bc16 <USB_EPClearStall+0x9e>
 810bc0e:	683b      	ldr	r3, [r7, #0]
 810bc10:	791b      	ldrb	r3, [r3, #4]
 810bc12:	2b02      	cmp	r3, #2
 810bc14:	d10f      	bne.n	810bc36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 810bc16:	68bb      	ldr	r3, [r7, #8]
 810bc18:	015a      	lsls	r2, r3, #5
 810bc1a:	68fb      	ldr	r3, [r7, #12]
 810bc1c:	4413      	add	r3, r2
 810bc1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bc22:	681b      	ldr	r3, [r3, #0]
 810bc24:	68ba      	ldr	r2, [r7, #8]
 810bc26:	0151      	lsls	r1, r2, #5
 810bc28:	68fa      	ldr	r2, [r7, #12]
 810bc2a:	440a      	add	r2, r1
 810bc2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bc30:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810bc34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 810bc36:	2300      	movs	r3, #0
}
 810bc38:	4618      	mov	r0, r3
 810bc3a:	3714      	adds	r7, #20
 810bc3c:	46bd      	mov	sp, r7
 810bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc42:	4770      	bx	lr

0810bc44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 810bc44:	b480      	push	{r7}
 810bc46:	b085      	sub	sp, #20
 810bc48:	af00      	add	r7, sp, #0
 810bc4a:	6078      	str	r0, [r7, #4]
 810bc4c:	460b      	mov	r3, r1
 810bc4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bc50:	687b      	ldr	r3, [r7, #4]
 810bc52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 810bc54:	68fb      	ldr	r3, [r7, #12]
 810bc56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bc5a:	681b      	ldr	r3, [r3, #0]
 810bc5c:	68fa      	ldr	r2, [r7, #12]
 810bc5e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810bc62:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 810bc66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 810bc68:	68fb      	ldr	r3, [r7, #12]
 810bc6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bc6e:	681a      	ldr	r2, [r3, #0]
 810bc70:	78fb      	ldrb	r3, [r7, #3]
 810bc72:	011b      	lsls	r3, r3, #4
 810bc74:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 810bc78:	68f9      	ldr	r1, [r7, #12]
 810bc7a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 810bc7e:	4313      	orrs	r3, r2
 810bc80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 810bc82:	2300      	movs	r3, #0
}
 810bc84:	4618      	mov	r0, r3
 810bc86:	3714      	adds	r7, #20
 810bc88:	46bd      	mov	sp, r7
 810bc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bc8e:	4770      	bx	lr

0810bc90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810bc90:	b480      	push	{r7}
 810bc92:	b085      	sub	sp, #20
 810bc94:	af00      	add	r7, sp, #0
 810bc96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bc98:	687b      	ldr	r3, [r7, #4]
 810bc9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810bc9c:	68fb      	ldr	r3, [r7, #12]
 810bc9e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810bca2:	681b      	ldr	r3, [r3, #0]
 810bca4:	68fa      	ldr	r2, [r7, #12]
 810bca6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810bcaa:	f023 0303 	bic.w	r3, r3, #3
 810bcae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 810bcb0:	68fb      	ldr	r3, [r7, #12]
 810bcb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bcb6:	685b      	ldr	r3, [r3, #4]
 810bcb8:	68fa      	ldr	r2, [r7, #12]
 810bcba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810bcbe:	f023 0302 	bic.w	r3, r3, #2
 810bcc2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810bcc4:	2300      	movs	r3, #0
}
 810bcc6:	4618      	mov	r0, r3
 810bcc8:	3714      	adds	r7, #20
 810bcca:	46bd      	mov	sp, r7
 810bccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bcd0:	4770      	bx	lr

0810bcd2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 810bcd2:	b480      	push	{r7}
 810bcd4:	b085      	sub	sp, #20
 810bcd6:	af00      	add	r7, sp, #0
 810bcd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bcda:	687b      	ldr	r3, [r7, #4]
 810bcdc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 810bcde:	68fb      	ldr	r3, [r7, #12]
 810bce0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810bce4:	681b      	ldr	r3, [r3, #0]
 810bce6:	68fa      	ldr	r2, [r7, #12]
 810bce8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810bcec:	f023 0303 	bic.w	r3, r3, #3
 810bcf0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 810bcf2:	68fb      	ldr	r3, [r7, #12]
 810bcf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bcf8:	685b      	ldr	r3, [r3, #4]
 810bcfa:	68fa      	ldr	r2, [r7, #12]
 810bcfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810bd00:	f043 0302 	orr.w	r3, r3, #2
 810bd04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810bd06:	2300      	movs	r3, #0
}
 810bd08:	4618      	mov	r0, r3
 810bd0a:	3714      	adds	r7, #20
 810bd0c:	46bd      	mov	sp, r7
 810bd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd12:	4770      	bx	lr

0810bd14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 810bd14:	b480      	push	{r7}
 810bd16:	b085      	sub	sp, #20
 810bd18:	af00      	add	r7, sp, #0
 810bd1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 810bd1c:	687b      	ldr	r3, [r7, #4]
 810bd1e:	695b      	ldr	r3, [r3, #20]
 810bd20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 810bd22:	687b      	ldr	r3, [r7, #4]
 810bd24:	699b      	ldr	r3, [r3, #24]
 810bd26:	68fa      	ldr	r2, [r7, #12]
 810bd28:	4013      	ands	r3, r2
 810bd2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 810bd2c:	68fb      	ldr	r3, [r7, #12]
}
 810bd2e:	4618      	mov	r0, r3
 810bd30:	3714      	adds	r7, #20
 810bd32:	46bd      	mov	sp, r7
 810bd34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd38:	4770      	bx	lr

0810bd3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 810bd3a:	b480      	push	{r7}
 810bd3c:	b085      	sub	sp, #20
 810bd3e:	af00      	add	r7, sp, #0
 810bd40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bd42:	687b      	ldr	r3, [r7, #4]
 810bd44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 810bd46:	68fb      	ldr	r3, [r7, #12]
 810bd48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bd4c:	699b      	ldr	r3, [r3, #24]
 810bd4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 810bd50:	68fb      	ldr	r3, [r7, #12]
 810bd52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bd56:	69db      	ldr	r3, [r3, #28]
 810bd58:	68ba      	ldr	r2, [r7, #8]
 810bd5a:	4013      	ands	r3, r2
 810bd5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 810bd5e:	68bb      	ldr	r3, [r7, #8]
 810bd60:	0c1b      	lsrs	r3, r3, #16
}
 810bd62:	4618      	mov	r0, r3
 810bd64:	3714      	adds	r7, #20
 810bd66:	46bd      	mov	sp, r7
 810bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bd6c:	4770      	bx	lr

0810bd6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 810bd6e:	b480      	push	{r7}
 810bd70:	b085      	sub	sp, #20
 810bd72:	af00      	add	r7, sp, #0
 810bd74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bd76:	687b      	ldr	r3, [r7, #4]
 810bd78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 810bd7a:	68fb      	ldr	r3, [r7, #12]
 810bd7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bd80:	699b      	ldr	r3, [r3, #24]
 810bd82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 810bd84:	68fb      	ldr	r3, [r7, #12]
 810bd86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bd8a:	69db      	ldr	r3, [r3, #28]
 810bd8c:	68ba      	ldr	r2, [r7, #8]
 810bd8e:	4013      	ands	r3, r2
 810bd90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 810bd92:	68bb      	ldr	r3, [r7, #8]
 810bd94:	b29b      	uxth	r3, r3
}
 810bd96:	4618      	mov	r0, r3
 810bd98:	3714      	adds	r7, #20
 810bd9a:	46bd      	mov	sp, r7
 810bd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bda0:	4770      	bx	lr

0810bda2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 810bda2:	b480      	push	{r7}
 810bda4:	b085      	sub	sp, #20
 810bda6:	af00      	add	r7, sp, #0
 810bda8:	6078      	str	r0, [r7, #4]
 810bdaa:	460b      	mov	r3, r1
 810bdac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bdae:	687b      	ldr	r3, [r7, #4]
 810bdb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 810bdb2:	78fb      	ldrb	r3, [r7, #3]
 810bdb4:	015a      	lsls	r2, r3, #5
 810bdb6:	68fb      	ldr	r3, [r7, #12]
 810bdb8:	4413      	add	r3, r2
 810bdba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bdbe:	689b      	ldr	r3, [r3, #8]
 810bdc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 810bdc2:	68fb      	ldr	r3, [r7, #12]
 810bdc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bdc8:	695b      	ldr	r3, [r3, #20]
 810bdca:	68ba      	ldr	r2, [r7, #8]
 810bdcc:	4013      	ands	r3, r2
 810bdce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 810bdd0:	68bb      	ldr	r3, [r7, #8]
}
 810bdd2:	4618      	mov	r0, r3
 810bdd4:	3714      	adds	r7, #20
 810bdd6:	46bd      	mov	sp, r7
 810bdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bddc:	4770      	bx	lr

0810bdde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 810bdde:	b480      	push	{r7}
 810bde0:	b087      	sub	sp, #28
 810bde2:	af00      	add	r7, sp, #0
 810bde4:	6078      	str	r0, [r7, #4]
 810bde6:	460b      	mov	r3, r1
 810bde8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810bdea:	687b      	ldr	r3, [r7, #4]
 810bdec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 810bdee:	697b      	ldr	r3, [r7, #20]
 810bdf0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bdf4:	691b      	ldr	r3, [r3, #16]
 810bdf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 810bdf8:	697b      	ldr	r3, [r7, #20]
 810bdfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810bdfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810be00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 810be02:	78fb      	ldrb	r3, [r7, #3]
 810be04:	f003 030f 	and.w	r3, r3, #15
 810be08:	68fa      	ldr	r2, [r7, #12]
 810be0a:	fa22 f303 	lsr.w	r3, r2, r3
 810be0e:	01db      	lsls	r3, r3, #7
 810be10:	b2db      	uxtb	r3, r3
 810be12:	693a      	ldr	r2, [r7, #16]
 810be14:	4313      	orrs	r3, r2
 810be16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 810be18:	78fb      	ldrb	r3, [r7, #3]
 810be1a:	015a      	lsls	r2, r3, #5
 810be1c:	697b      	ldr	r3, [r7, #20]
 810be1e:	4413      	add	r3, r2
 810be20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810be24:	689b      	ldr	r3, [r3, #8]
 810be26:	693a      	ldr	r2, [r7, #16]
 810be28:	4013      	ands	r3, r2
 810be2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 810be2c:	68bb      	ldr	r3, [r7, #8]
}
 810be2e:	4618      	mov	r0, r3
 810be30:	371c      	adds	r7, #28
 810be32:	46bd      	mov	sp, r7
 810be34:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be38:	4770      	bx	lr

0810be3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 810be3a:	b480      	push	{r7}
 810be3c:	b083      	sub	sp, #12
 810be3e:	af00      	add	r7, sp, #0
 810be40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 810be42:	687b      	ldr	r3, [r7, #4]
 810be44:	695b      	ldr	r3, [r3, #20]
 810be46:	f003 0301 	and.w	r3, r3, #1
}
 810be4a:	4618      	mov	r0, r3
 810be4c:	370c      	adds	r7, #12
 810be4e:	46bd      	mov	sp, r7
 810be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be54:	4770      	bx	lr

0810be56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 810be56:	b480      	push	{r7}
 810be58:	b085      	sub	sp, #20
 810be5a:	af00      	add	r7, sp, #0
 810be5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810be5e:	687b      	ldr	r3, [r7, #4]
 810be60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 810be62:	68fb      	ldr	r3, [r7, #12]
 810be64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 810be68:	681b      	ldr	r3, [r3, #0]
 810be6a:	68fa      	ldr	r2, [r7, #12]
 810be6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 810be70:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 810be74:	f023 0307 	bic.w	r3, r3, #7
 810be78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 810be7a:	68fb      	ldr	r3, [r7, #12]
 810be7c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 810be80:	685b      	ldr	r3, [r3, #4]
 810be82:	68fa      	ldr	r2, [r7, #12]
 810be84:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 810be88:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810be8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 810be8e:	2300      	movs	r3, #0
}
 810be90:	4618      	mov	r0, r3
 810be92:	3714      	adds	r7, #20
 810be94:	46bd      	mov	sp, r7
 810be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 810be9a:	4770      	bx	lr

0810be9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 810be9c:	b480      	push	{r7}
 810be9e:	b087      	sub	sp, #28
 810bea0:	af00      	add	r7, sp, #0
 810bea2:	60f8      	str	r0, [r7, #12]
 810bea4:	460b      	mov	r3, r1
 810bea6:	607a      	str	r2, [r7, #4]
 810bea8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 810beaa:	68fb      	ldr	r3, [r7, #12]
 810beac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 810beae:	68fb      	ldr	r3, [r7, #12]
 810beb0:	333c      	adds	r3, #60	@ 0x3c
 810beb2:	3304      	adds	r3, #4
 810beb4:	681b      	ldr	r3, [r3, #0]
 810beb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 810beb8:	693b      	ldr	r3, [r7, #16]
 810beba:	4a26      	ldr	r2, [pc, #152]	@ (810bf54 <USB_EP0_OutStart+0xb8>)
 810bebc:	4293      	cmp	r3, r2
 810bebe:	d90a      	bls.n	810bed6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 810bec0:	697b      	ldr	r3, [r7, #20]
 810bec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bec6:	681b      	ldr	r3, [r3, #0]
 810bec8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 810becc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 810bed0:	d101      	bne.n	810bed6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 810bed2:	2300      	movs	r3, #0
 810bed4:	e037      	b.n	810bf46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 810bed6:	697b      	ldr	r3, [r7, #20]
 810bed8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bedc:	461a      	mov	r2, r3
 810bede:	2300      	movs	r3, #0
 810bee0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 810bee2:	697b      	ldr	r3, [r7, #20]
 810bee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bee8:	691b      	ldr	r3, [r3, #16]
 810beea:	697a      	ldr	r2, [r7, #20]
 810beec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bef0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810bef4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 810bef6:	697b      	ldr	r3, [r7, #20]
 810bef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810befc:	691b      	ldr	r3, [r3, #16]
 810befe:	697a      	ldr	r2, [r7, #20]
 810bf00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bf04:	f043 0318 	orr.w	r3, r3, #24
 810bf08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 810bf0a:	697b      	ldr	r3, [r7, #20]
 810bf0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bf10:	691b      	ldr	r3, [r3, #16]
 810bf12:	697a      	ldr	r2, [r7, #20]
 810bf14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bf18:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 810bf1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 810bf1e:	7afb      	ldrb	r3, [r7, #11]
 810bf20:	2b01      	cmp	r3, #1
 810bf22:	d10f      	bne.n	810bf44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 810bf24:	697b      	ldr	r3, [r7, #20]
 810bf26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bf2a:	461a      	mov	r2, r3
 810bf2c:	687b      	ldr	r3, [r7, #4]
 810bf2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 810bf30:	697b      	ldr	r3, [r7, #20]
 810bf32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 810bf36:	681b      	ldr	r3, [r3, #0]
 810bf38:	697a      	ldr	r2, [r7, #20]
 810bf3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 810bf3e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 810bf42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 810bf44:	2300      	movs	r3, #0
}
 810bf46:	4618      	mov	r0, r3
 810bf48:	371c      	adds	r7, #28
 810bf4a:	46bd      	mov	sp, r7
 810bf4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bf50:	4770      	bx	lr
 810bf52:	bf00      	nop
 810bf54:	4f54300a 	.word	0x4f54300a

0810bf58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 810bf58:	b480      	push	{r7}
 810bf5a:	b085      	sub	sp, #20
 810bf5c:	af00      	add	r7, sp, #0
 810bf5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 810bf60:	2300      	movs	r3, #0
 810bf62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 810bf64:	68fb      	ldr	r3, [r7, #12]
 810bf66:	3301      	adds	r3, #1
 810bf68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810bf6a:	68fb      	ldr	r3, [r7, #12]
 810bf6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810bf70:	d901      	bls.n	810bf76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 810bf72:	2303      	movs	r3, #3
 810bf74:	e01b      	b.n	810bfae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 810bf76:	687b      	ldr	r3, [r7, #4]
 810bf78:	691b      	ldr	r3, [r3, #16]
 810bf7a:	2b00      	cmp	r3, #0
 810bf7c:	daf2      	bge.n	810bf64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 810bf7e:	2300      	movs	r3, #0
 810bf80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 810bf82:	687b      	ldr	r3, [r7, #4]
 810bf84:	691b      	ldr	r3, [r3, #16]
 810bf86:	f043 0201 	orr.w	r2, r3, #1
 810bf8a:	687b      	ldr	r3, [r7, #4]
 810bf8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 810bf8e:	68fb      	ldr	r3, [r7, #12]
 810bf90:	3301      	adds	r3, #1
 810bf92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 810bf94:	68fb      	ldr	r3, [r7, #12]
 810bf96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 810bf9a:	d901      	bls.n	810bfa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 810bf9c:	2303      	movs	r3, #3
 810bf9e:	e006      	b.n	810bfae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 810bfa0:	687b      	ldr	r3, [r7, #4]
 810bfa2:	691b      	ldr	r3, [r3, #16]
 810bfa4:	f003 0301 	and.w	r3, r3, #1
 810bfa8:	2b01      	cmp	r3, #1
 810bfaa:	d0f0      	beq.n	810bf8e <USB_CoreReset+0x36>

  return HAL_OK;
 810bfac:	2300      	movs	r3, #0
}
 810bfae:	4618      	mov	r0, r3
 810bfb0:	3714      	adds	r7, #20
 810bfb2:	46bd      	mov	sp, r7
 810bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810bfb8:	4770      	bx	lr
	...

0810bfbc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 810bfbc:	b580      	push	{r7, lr}
 810bfbe:	b084      	sub	sp, #16
 810bfc0:	af00      	add	r7, sp, #0
 810bfc2:	6078      	str	r0, [r7, #4]
 810bfc4:	460b      	mov	r3, r1
 810bfc6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 810bfc8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 810bfcc:	f002 fd54 	bl	810ea78 <USBD_static_malloc>
 810bfd0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 810bfd2:	68fb      	ldr	r3, [r7, #12]
 810bfd4:	2b00      	cmp	r3, #0
 810bfd6:	d109      	bne.n	810bfec <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 810bfd8:	687b      	ldr	r3, [r7, #4]
 810bfda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810bfde:	687b      	ldr	r3, [r7, #4]
 810bfe0:	32b0      	adds	r2, #176	@ 0xb0
 810bfe2:	2100      	movs	r1, #0
 810bfe4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 810bfe8:	2302      	movs	r3, #2
 810bfea:	e0d4      	b.n	810c196 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 810bfec:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 810bff0:	2100      	movs	r1, #0
 810bff2:	68f8      	ldr	r0, [r7, #12]
 810bff4:	f002 fd84 	bl	810eb00 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 810bff8:	687b      	ldr	r3, [r7, #4]
 810bffa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810bffe:	687b      	ldr	r3, [r7, #4]
 810c000:	32b0      	adds	r2, #176	@ 0xb0
 810c002:	68f9      	ldr	r1, [r7, #12]
 810c004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 810c008:	687b      	ldr	r3, [r7, #4]
 810c00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c00e:	687b      	ldr	r3, [r7, #4]
 810c010:	32b0      	adds	r2, #176	@ 0xb0
 810c012:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 810c016:	687b      	ldr	r3, [r7, #4]
 810c018:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 810c01c:	687b      	ldr	r3, [r7, #4]
 810c01e:	7c1b      	ldrb	r3, [r3, #16]
 810c020:	2b00      	cmp	r3, #0
 810c022:	d138      	bne.n	810c096 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 810c024:	4b5e      	ldr	r3, [pc, #376]	@ (810c1a0 <USBD_CDC_Init+0x1e4>)
 810c026:	7819      	ldrb	r1, [r3, #0]
 810c028:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c02c:	2202      	movs	r2, #2
 810c02e:	6878      	ldr	r0, [r7, #4]
 810c030:	f002 fbff 	bl	810e832 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 810c034:	4b5a      	ldr	r3, [pc, #360]	@ (810c1a0 <USBD_CDC_Init+0x1e4>)
 810c036:	781b      	ldrb	r3, [r3, #0]
 810c038:	f003 020f 	and.w	r2, r3, #15
 810c03c:	6879      	ldr	r1, [r7, #4]
 810c03e:	4613      	mov	r3, r2
 810c040:	009b      	lsls	r3, r3, #2
 810c042:	4413      	add	r3, r2
 810c044:	009b      	lsls	r3, r3, #2
 810c046:	440b      	add	r3, r1
 810c048:	3324      	adds	r3, #36	@ 0x24
 810c04a:	2201      	movs	r2, #1
 810c04c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 810c04e:	4b55      	ldr	r3, [pc, #340]	@ (810c1a4 <USBD_CDC_Init+0x1e8>)
 810c050:	7819      	ldrb	r1, [r3, #0]
 810c052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c056:	2202      	movs	r2, #2
 810c058:	6878      	ldr	r0, [r7, #4]
 810c05a:	f002 fbea 	bl	810e832 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 810c05e:	4b51      	ldr	r3, [pc, #324]	@ (810c1a4 <USBD_CDC_Init+0x1e8>)
 810c060:	781b      	ldrb	r3, [r3, #0]
 810c062:	f003 020f 	and.w	r2, r3, #15
 810c066:	6879      	ldr	r1, [r7, #4]
 810c068:	4613      	mov	r3, r2
 810c06a:	009b      	lsls	r3, r3, #2
 810c06c:	4413      	add	r3, r2
 810c06e:	009b      	lsls	r3, r3, #2
 810c070:	440b      	add	r3, r1
 810c072:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 810c076:	2201      	movs	r2, #1
 810c078:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 810c07a:	4b4b      	ldr	r3, [pc, #300]	@ (810c1a8 <USBD_CDC_Init+0x1ec>)
 810c07c:	781b      	ldrb	r3, [r3, #0]
 810c07e:	f003 020f 	and.w	r2, r3, #15
 810c082:	6879      	ldr	r1, [r7, #4]
 810c084:	4613      	mov	r3, r2
 810c086:	009b      	lsls	r3, r3, #2
 810c088:	4413      	add	r3, r2
 810c08a:	009b      	lsls	r3, r3, #2
 810c08c:	440b      	add	r3, r1
 810c08e:	3326      	adds	r3, #38	@ 0x26
 810c090:	2210      	movs	r2, #16
 810c092:	801a      	strh	r2, [r3, #0]
 810c094:	e035      	b.n	810c102 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 810c096:	4b42      	ldr	r3, [pc, #264]	@ (810c1a0 <USBD_CDC_Init+0x1e4>)
 810c098:	7819      	ldrb	r1, [r3, #0]
 810c09a:	2340      	movs	r3, #64	@ 0x40
 810c09c:	2202      	movs	r2, #2
 810c09e:	6878      	ldr	r0, [r7, #4]
 810c0a0:	f002 fbc7 	bl	810e832 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 810c0a4:	4b3e      	ldr	r3, [pc, #248]	@ (810c1a0 <USBD_CDC_Init+0x1e4>)
 810c0a6:	781b      	ldrb	r3, [r3, #0]
 810c0a8:	f003 020f 	and.w	r2, r3, #15
 810c0ac:	6879      	ldr	r1, [r7, #4]
 810c0ae:	4613      	mov	r3, r2
 810c0b0:	009b      	lsls	r3, r3, #2
 810c0b2:	4413      	add	r3, r2
 810c0b4:	009b      	lsls	r3, r3, #2
 810c0b6:	440b      	add	r3, r1
 810c0b8:	3324      	adds	r3, #36	@ 0x24
 810c0ba:	2201      	movs	r2, #1
 810c0bc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 810c0be:	4b39      	ldr	r3, [pc, #228]	@ (810c1a4 <USBD_CDC_Init+0x1e8>)
 810c0c0:	7819      	ldrb	r1, [r3, #0]
 810c0c2:	2340      	movs	r3, #64	@ 0x40
 810c0c4:	2202      	movs	r2, #2
 810c0c6:	6878      	ldr	r0, [r7, #4]
 810c0c8:	f002 fbb3 	bl	810e832 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 810c0cc:	4b35      	ldr	r3, [pc, #212]	@ (810c1a4 <USBD_CDC_Init+0x1e8>)
 810c0ce:	781b      	ldrb	r3, [r3, #0]
 810c0d0:	f003 020f 	and.w	r2, r3, #15
 810c0d4:	6879      	ldr	r1, [r7, #4]
 810c0d6:	4613      	mov	r3, r2
 810c0d8:	009b      	lsls	r3, r3, #2
 810c0da:	4413      	add	r3, r2
 810c0dc:	009b      	lsls	r3, r3, #2
 810c0de:	440b      	add	r3, r1
 810c0e0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 810c0e4:	2201      	movs	r2, #1
 810c0e6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 810c0e8:	4b2f      	ldr	r3, [pc, #188]	@ (810c1a8 <USBD_CDC_Init+0x1ec>)
 810c0ea:	781b      	ldrb	r3, [r3, #0]
 810c0ec:	f003 020f 	and.w	r2, r3, #15
 810c0f0:	6879      	ldr	r1, [r7, #4]
 810c0f2:	4613      	mov	r3, r2
 810c0f4:	009b      	lsls	r3, r3, #2
 810c0f6:	4413      	add	r3, r2
 810c0f8:	009b      	lsls	r3, r3, #2
 810c0fa:	440b      	add	r3, r1
 810c0fc:	3326      	adds	r3, #38	@ 0x26
 810c0fe:	2210      	movs	r2, #16
 810c100:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 810c102:	4b29      	ldr	r3, [pc, #164]	@ (810c1a8 <USBD_CDC_Init+0x1ec>)
 810c104:	7819      	ldrb	r1, [r3, #0]
 810c106:	2308      	movs	r3, #8
 810c108:	2203      	movs	r2, #3
 810c10a:	6878      	ldr	r0, [r7, #4]
 810c10c:	f002 fb91 	bl	810e832 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 810c110:	4b25      	ldr	r3, [pc, #148]	@ (810c1a8 <USBD_CDC_Init+0x1ec>)
 810c112:	781b      	ldrb	r3, [r3, #0]
 810c114:	f003 020f 	and.w	r2, r3, #15
 810c118:	6879      	ldr	r1, [r7, #4]
 810c11a:	4613      	mov	r3, r2
 810c11c:	009b      	lsls	r3, r3, #2
 810c11e:	4413      	add	r3, r2
 810c120:	009b      	lsls	r3, r3, #2
 810c122:	440b      	add	r3, r1
 810c124:	3324      	adds	r3, #36	@ 0x24
 810c126:	2201      	movs	r2, #1
 810c128:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 810c12a:	68fb      	ldr	r3, [r7, #12]
 810c12c:	2200      	movs	r2, #0
 810c12e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 810c132:	687b      	ldr	r3, [r7, #4]
 810c134:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c138:	687a      	ldr	r2, [r7, #4]
 810c13a:	33b0      	adds	r3, #176	@ 0xb0
 810c13c:	009b      	lsls	r3, r3, #2
 810c13e:	4413      	add	r3, r2
 810c140:	685b      	ldr	r3, [r3, #4]
 810c142:	681b      	ldr	r3, [r3, #0]
 810c144:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 810c146:	68fb      	ldr	r3, [r7, #12]
 810c148:	2200      	movs	r2, #0
 810c14a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 810c14e:	68fb      	ldr	r3, [r7, #12]
 810c150:	2200      	movs	r2, #0
 810c152:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 810c156:	68fb      	ldr	r3, [r7, #12]
 810c158:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 810c15c:	2b00      	cmp	r3, #0
 810c15e:	d101      	bne.n	810c164 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 810c160:	2302      	movs	r3, #2
 810c162:	e018      	b.n	810c196 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 810c164:	687b      	ldr	r3, [r7, #4]
 810c166:	7c1b      	ldrb	r3, [r3, #16]
 810c168:	2b00      	cmp	r3, #0
 810c16a:	d10a      	bne.n	810c182 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 810c16c:	4b0d      	ldr	r3, [pc, #52]	@ (810c1a4 <USBD_CDC_Init+0x1e8>)
 810c16e:	7819      	ldrb	r1, [r3, #0]
 810c170:	68fb      	ldr	r3, [r7, #12]
 810c172:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 810c176:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c17a:	6878      	ldr	r0, [r7, #4]
 810c17c:	f002 fc48 	bl	810ea10 <USBD_LL_PrepareReceive>
 810c180:	e008      	b.n	810c194 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 810c182:	4b08      	ldr	r3, [pc, #32]	@ (810c1a4 <USBD_CDC_Init+0x1e8>)
 810c184:	7819      	ldrb	r1, [r3, #0]
 810c186:	68fb      	ldr	r3, [r7, #12]
 810c188:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 810c18c:	2340      	movs	r3, #64	@ 0x40
 810c18e:	6878      	ldr	r0, [r7, #4]
 810c190:	f002 fc3e 	bl	810ea10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 810c194:	2300      	movs	r3, #0
}
 810c196:	4618      	mov	r0, r3
 810c198:	3710      	adds	r7, #16
 810c19a:	46bd      	mov	sp, r7
 810c19c:	bd80      	pop	{r7, pc}
 810c19e:	bf00      	nop
 810c1a0:	10032187 	.word	0x10032187
 810c1a4:	10032188 	.word	0x10032188
 810c1a8:	10032189 	.word	0x10032189

0810c1ac <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 810c1ac:	b580      	push	{r7, lr}
 810c1ae:	b082      	sub	sp, #8
 810c1b0:	af00      	add	r7, sp, #0
 810c1b2:	6078      	str	r0, [r7, #4]
 810c1b4:	460b      	mov	r3, r1
 810c1b6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 810c1b8:	4b3a      	ldr	r3, [pc, #232]	@ (810c2a4 <USBD_CDC_DeInit+0xf8>)
 810c1ba:	781b      	ldrb	r3, [r3, #0]
 810c1bc:	4619      	mov	r1, r3
 810c1be:	6878      	ldr	r0, [r7, #4]
 810c1c0:	f002 fb5d 	bl	810e87e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 810c1c4:	4b37      	ldr	r3, [pc, #220]	@ (810c2a4 <USBD_CDC_DeInit+0xf8>)
 810c1c6:	781b      	ldrb	r3, [r3, #0]
 810c1c8:	f003 020f 	and.w	r2, r3, #15
 810c1cc:	6879      	ldr	r1, [r7, #4]
 810c1ce:	4613      	mov	r3, r2
 810c1d0:	009b      	lsls	r3, r3, #2
 810c1d2:	4413      	add	r3, r2
 810c1d4:	009b      	lsls	r3, r3, #2
 810c1d6:	440b      	add	r3, r1
 810c1d8:	3324      	adds	r3, #36	@ 0x24
 810c1da:	2200      	movs	r2, #0
 810c1dc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 810c1de:	4b32      	ldr	r3, [pc, #200]	@ (810c2a8 <USBD_CDC_DeInit+0xfc>)
 810c1e0:	781b      	ldrb	r3, [r3, #0]
 810c1e2:	4619      	mov	r1, r3
 810c1e4:	6878      	ldr	r0, [r7, #4]
 810c1e6:	f002 fb4a 	bl	810e87e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 810c1ea:	4b2f      	ldr	r3, [pc, #188]	@ (810c2a8 <USBD_CDC_DeInit+0xfc>)
 810c1ec:	781b      	ldrb	r3, [r3, #0]
 810c1ee:	f003 020f 	and.w	r2, r3, #15
 810c1f2:	6879      	ldr	r1, [r7, #4]
 810c1f4:	4613      	mov	r3, r2
 810c1f6:	009b      	lsls	r3, r3, #2
 810c1f8:	4413      	add	r3, r2
 810c1fa:	009b      	lsls	r3, r3, #2
 810c1fc:	440b      	add	r3, r1
 810c1fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 810c202:	2200      	movs	r2, #0
 810c204:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 810c206:	4b29      	ldr	r3, [pc, #164]	@ (810c2ac <USBD_CDC_DeInit+0x100>)
 810c208:	781b      	ldrb	r3, [r3, #0]
 810c20a:	4619      	mov	r1, r3
 810c20c:	6878      	ldr	r0, [r7, #4]
 810c20e:	f002 fb36 	bl	810e87e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 810c212:	4b26      	ldr	r3, [pc, #152]	@ (810c2ac <USBD_CDC_DeInit+0x100>)
 810c214:	781b      	ldrb	r3, [r3, #0]
 810c216:	f003 020f 	and.w	r2, r3, #15
 810c21a:	6879      	ldr	r1, [r7, #4]
 810c21c:	4613      	mov	r3, r2
 810c21e:	009b      	lsls	r3, r3, #2
 810c220:	4413      	add	r3, r2
 810c222:	009b      	lsls	r3, r3, #2
 810c224:	440b      	add	r3, r1
 810c226:	3324      	adds	r3, #36	@ 0x24
 810c228:	2200      	movs	r2, #0
 810c22a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 810c22c:	4b1f      	ldr	r3, [pc, #124]	@ (810c2ac <USBD_CDC_DeInit+0x100>)
 810c22e:	781b      	ldrb	r3, [r3, #0]
 810c230:	f003 020f 	and.w	r2, r3, #15
 810c234:	6879      	ldr	r1, [r7, #4]
 810c236:	4613      	mov	r3, r2
 810c238:	009b      	lsls	r3, r3, #2
 810c23a:	4413      	add	r3, r2
 810c23c:	009b      	lsls	r3, r3, #2
 810c23e:	440b      	add	r3, r1
 810c240:	3326      	adds	r3, #38	@ 0x26
 810c242:	2200      	movs	r2, #0
 810c244:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 810c246:	687b      	ldr	r3, [r7, #4]
 810c248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c24c:	687b      	ldr	r3, [r7, #4]
 810c24e:	32b0      	adds	r2, #176	@ 0xb0
 810c250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c254:	2b00      	cmp	r3, #0
 810c256:	d01f      	beq.n	810c298 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 810c258:	687b      	ldr	r3, [r7, #4]
 810c25a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c25e:	687a      	ldr	r2, [r7, #4]
 810c260:	33b0      	adds	r3, #176	@ 0xb0
 810c262:	009b      	lsls	r3, r3, #2
 810c264:	4413      	add	r3, r2
 810c266:	685b      	ldr	r3, [r3, #4]
 810c268:	685b      	ldr	r3, [r3, #4]
 810c26a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 810c26c:	687b      	ldr	r3, [r7, #4]
 810c26e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c272:	687b      	ldr	r3, [r7, #4]
 810c274:	32b0      	adds	r2, #176	@ 0xb0
 810c276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c27a:	4618      	mov	r0, r3
 810c27c:	f002 fc0a 	bl	810ea94 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 810c280:	687b      	ldr	r3, [r7, #4]
 810c282:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c286:	687b      	ldr	r3, [r7, #4]
 810c288:	32b0      	adds	r2, #176	@ 0xb0
 810c28a:	2100      	movs	r1, #0
 810c28c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 810c290:	687b      	ldr	r3, [r7, #4]
 810c292:	2200      	movs	r2, #0
 810c294:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 810c298:	2300      	movs	r3, #0
}
 810c29a:	4618      	mov	r0, r3
 810c29c:	3708      	adds	r7, #8
 810c29e:	46bd      	mov	sp, r7
 810c2a0:	bd80      	pop	{r7, pc}
 810c2a2:	bf00      	nop
 810c2a4:	10032187 	.word	0x10032187
 810c2a8:	10032188 	.word	0x10032188
 810c2ac:	10032189 	.word	0x10032189

0810c2b0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 810c2b0:	b580      	push	{r7, lr}
 810c2b2:	b086      	sub	sp, #24
 810c2b4:	af00      	add	r7, sp, #0
 810c2b6:	6078      	str	r0, [r7, #4]
 810c2b8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c2ba:	687b      	ldr	r3, [r7, #4]
 810c2bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c2c0:	687b      	ldr	r3, [r7, #4]
 810c2c2:	32b0      	adds	r2, #176	@ 0xb0
 810c2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c2c8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 810c2ca:	2300      	movs	r3, #0
 810c2cc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 810c2ce:	2300      	movs	r3, #0
 810c2d0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 810c2d2:	2300      	movs	r3, #0
 810c2d4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 810c2d6:	693b      	ldr	r3, [r7, #16]
 810c2d8:	2b00      	cmp	r3, #0
 810c2da:	d101      	bne.n	810c2e0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 810c2dc:	2303      	movs	r3, #3
 810c2de:	e0bf      	b.n	810c460 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810c2e0:	683b      	ldr	r3, [r7, #0]
 810c2e2:	781b      	ldrb	r3, [r3, #0]
 810c2e4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 810c2e8:	2b00      	cmp	r3, #0
 810c2ea:	d050      	beq.n	810c38e <USBD_CDC_Setup+0xde>
 810c2ec:	2b20      	cmp	r3, #32
 810c2ee:	f040 80af 	bne.w	810c450 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 810c2f2:	683b      	ldr	r3, [r7, #0]
 810c2f4:	88db      	ldrh	r3, [r3, #6]
 810c2f6:	2b00      	cmp	r3, #0
 810c2f8:	d03a      	beq.n	810c370 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 810c2fa:	683b      	ldr	r3, [r7, #0]
 810c2fc:	781b      	ldrb	r3, [r3, #0]
 810c2fe:	b25b      	sxtb	r3, r3
 810c300:	2b00      	cmp	r3, #0
 810c302:	da1b      	bge.n	810c33c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 810c304:	687b      	ldr	r3, [r7, #4]
 810c306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c30a:	687a      	ldr	r2, [r7, #4]
 810c30c:	33b0      	adds	r3, #176	@ 0xb0
 810c30e:	009b      	lsls	r3, r3, #2
 810c310:	4413      	add	r3, r2
 810c312:	685b      	ldr	r3, [r3, #4]
 810c314:	689b      	ldr	r3, [r3, #8]
 810c316:	683a      	ldr	r2, [r7, #0]
 810c318:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 810c31a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 810c31c:	683a      	ldr	r2, [r7, #0]
 810c31e:	88d2      	ldrh	r2, [r2, #6]
 810c320:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 810c322:	683b      	ldr	r3, [r7, #0]
 810c324:	88db      	ldrh	r3, [r3, #6]
 810c326:	2b07      	cmp	r3, #7
 810c328:	bf28      	it	cs
 810c32a:	2307      	movcs	r3, #7
 810c32c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 810c32e:	693b      	ldr	r3, [r7, #16]
 810c330:	89fa      	ldrh	r2, [r7, #14]
 810c332:	4619      	mov	r1, r3
 810c334:	6878      	ldr	r0, [r7, #4]
 810c336:	f001 fdbd 	bl	810deb4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 810c33a:	e090      	b.n	810c45e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 810c33c:	683b      	ldr	r3, [r7, #0]
 810c33e:	785a      	ldrb	r2, [r3, #1]
 810c340:	693b      	ldr	r3, [r7, #16]
 810c342:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 810c346:	683b      	ldr	r3, [r7, #0]
 810c348:	88db      	ldrh	r3, [r3, #6]
 810c34a:	2b3f      	cmp	r3, #63	@ 0x3f
 810c34c:	d803      	bhi.n	810c356 <USBD_CDC_Setup+0xa6>
 810c34e:	683b      	ldr	r3, [r7, #0]
 810c350:	88db      	ldrh	r3, [r3, #6]
 810c352:	b2da      	uxtb	r2, r3
 810c354:	e000      	b.n	810c358 <USBD_CDC_Setup+0xa8>
 810c356:	2240      	movs	r2, #64	@ 0x40
 810c358:	693b      	ldr	r3, [r7, #16]
 810c35a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 810c35e:	6939      	ldr	r1, [r7, #16]
 810c360:	693b      	ldr	r3, [r7, #16]
 810c362:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 810c366:	461a      	mov	r2, r3
 810c368:	6878      	ldr	r0, [r7, #4]
 810c36a:	f001 fdcf 	bl	810df0c <USBD_CtlPrepareRx>
      break;
 810c36e:	e076      	b.n	810c45e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 810c370:	687b      	ldr	r3, [r7, #4]
 810c372:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c376:	687a      	ldr	r2, [r7, #4]
 810c378:	33b0      	adds	r3, #176	@ 0xb0
 810c37a:	009b      	lsls	r3, r3, #2
 810c37c:	4413      	add	r3, r2
 810c37e:	685b      	ldr	r3, [r3, #4]
 810c380:	689b      	ldr	r3, [r3, #8]
 810c382:	683a      	ldr	r2, [r7, #0]
 810c384:	7850      	ldrb	r0, [r2, #1]
 810c386:	2200      	movs	r2, #0
 810c388:	6839      	ldr	r1, [r7, #0]
 810c38a:	4798      	blx	r3
      break;
 810c38c:	e067      	b.n	810c45e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 810c38e:	683b      	ldr	r3, [r7, #0]
 810c390:	785b      	ldrb	r3, [r3, #1]
 810c392:	2b0b      	cmp	r3, #11
 810c394:	d851      	bhi.n	810c43a <USBD_CDC_Setup+0x18a>
 810c396:	a201      	add	r2, pc, #4	@ (adr r2, 810c39c <USBD_CDC_Setup+0xec>)
 810c398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810c39c:	0810c3cd 	.word	0x0810c3cd
 810c3a0:	0810c449 	.word	0x0810c449
 810c3a4:	0810c43b 	.word	0x0810c43b
 810c3a8:	0810c43b 	.word	0x0810c43b
 810c3ac:	0810c43b 	.word	0x0810c43b
 810c3b0:	0810c43b 	.word	0x0810c43b
 810c3b4:	0810c43b 	.word	0x0810c43b
 810c3b8:	0810c43b 	.word	0x0810c43b
 810c3bc:	0810c43b 	.word	0x0810c43b
 810c3c0:	0810c43b 	.word	0x0810c43b
 810c3c4:	0810c3f7 	.word	0x0810c3f7
 810c3c8:	0810c421 	.word	0x0810c421
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810c3cc:	687b      	ldr	r3, [r7, #4]
 810c3ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810c3d2:	b2db      	uxtb	r3, r3
 810c3d4:	2b03      	cmp	r3, #3
 810c3d6:	d107      	bne.n	810c3e8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 810c3d8:	f107 030a 	add.w	r3, r7, #10
 810c3dc:	2202      	movs	r2, #2
 810c3de:	4619      	mov	r1, r3
 810c3e0:	6878      	ldr	r0, [r7, #4]
 810c3e2:	f001 fd67 	bl	810deb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 810c3e6:	e032      	b.n	810c44e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 810c3e8:	6839      	ldr	r1, [r7, #0]
 810c3ea:	6878      	ldr	r0, [r7, #4]
 810c3ec:	f001 fce5 	bl	810ddba <USBD_CtlError>
            ret = USBD_FAIL;
 810c3f0:	2303      	movs	r3, #3
 810c3f2:	75fb      	strb	r3, [r7, #23]
          break;
 810c3f4:	e02b      	b.n	810c44e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810c3f6:	687b      	ldr	r3, [r7, #4]
 810c3f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810c3fc:	b2db      	uxtb	r3, r3
 810c3fe:	2b03      	cmp	r3, #3
 810c400:	d107      	bne.n	810c412 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 810c402:	f107 030d 	add.w	r3, r7, #13
 810c406:	2201      	movs	r2, #1
 810c408:	4619      	mov	r1, r3
 810c40a:	6878      	ldr	r0, [r7, #4]
 810c40c:	f001 fd52 	bl	810deb4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 810c410:	e01d      	b.n	810c44e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 810c412:	6839      	ldr	r1, [r7, #0]
 810c414:	6878      	ldr	r0, [r7, #4]
 810c416:	f001 fcd0 	bl	810ddba <USBD_CtlError>
            ret = USBD_FAIL;
 810c41a:	2303      	movs	r3, #3
 810c41c:	75fb      	strb	r3, [r7, #23]
          break;
 810c41e:	e016      	b.n	810c44e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 810c420:	687b      	ldr	r3, [r7, #4]
 810c422:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810c426:	b2db      	uxtb	r3, r3
 810c428:	2b03      	cmp	r3, #3
 810c42a:	d00f      	beq.n	810c44c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 810c42c:	6839      	ldr	r1, [r7, #0]
 810c42e:	6878      	ldr	r0, [r7, #4]
 810c430:	f001 fcc3 	bl	810ddba <USBD_CtlError>
            ret = USBD_FAIL;
 810c434:	2303      	movs	r3, #3
 810c436:	75fb      	strb	r3, [r7, #23]
          }
          break;
 810c438:	e008      	b.n	810c44c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 810c43a:	6839      	ldr	r1, [r7, #0]
 810c43c:	6878      	ldr	r0, [r7, #4]
 810c43e:	f001 fcbc 	bl	810ddba <USBD_CtlError>
          ret = USBD_FAIL;
 810c442:	2303      	movs	r3, #3
 810c444:	75fb      	strb	r3, [r7, #23]
          break;
 810c446:	e002      	b.n	810c44e <USBD_CDC_Setup+0x19e>
          break;
 810c448:	bf00      	nop
 810c44a:	e008      	b.n	810c45e <USBD_CDC_Setup+0x1ae>
          break;
 810c44c:	bf00      	nop
      }
      break;
 810c44e:	e006      	b.n	810c45e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 810c450:	6839      	ldr	r1, [r7, #0]
 810c452:	6878      	ldr	r0, [r7, #4]
 810c454:	f001 fcb1 	bl	810ddba <USBD_CtlError>
      ret = USBD_FAIL;
 810c458:	2303      	movs	r3, #3
 810c45a:	75fb      	strb	r3, [r7, #23]
      break;
 810c45c:	bf00      	nop
  }

  return (uint8_t)ret;
 810c45e:	7dfb      	ldrb	r3, [r7, #23]
}
 810c460:	4618      	mov	r0, r3
 810c462:	3718      	adds	r7, #24
 810c464:	46bd      	mov	sp, r7
 810c466:	bd80      	pop	{r7, pc}

0810c468 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 810c468:	b580      	push	{r7, lr}
 810c46a:	b084      	sub	sp, #16
 810c46c:	af00      	add	r7, sp, #0
 810c46e:	6078      	str	r0, [r7, #4]
 810c470:	460b      	mov	r3, r1
 810c472:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 810c474:	687b      	ldr	r3, [r7, #4]
 810c476:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810c47a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 810c47c:	687b      	ldr	r3, [r7, #4]
 810c47e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c482:	687b      	ldr	r3, [r7, #4]
 810c484:	32b0      	adds	r2, #176	@ 0xb0
 810c486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c48a:	2b00      	cmp	r3, #0
 810c48c:	d101      	bne.n	810c492 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 810c48e:	2303      	movs	r3, #3
 810c490:	e065      	b.n	810c55e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c492:	687b      	ldr	r3, [r7, #4]
 810c494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c498:	687b      	ldr	r3, [r7, #4]
 810c49a:	32b0      	adds	r2, #176	@ 0xb0
 810c49c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c4a0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 810c4a2:	78fb      	ldrb	r3, [r7, #3]
 810c4a4:	f003 020f 	and.w	r2, r3, #15
 810c4a8:	6879      	ldr	r1, [r7, #4]
 810c4aa:	4613      	mov	r3, r2
 810c4ac:	009b      	lsls	r3, r3, #2
 810c4ae:	4413      	add	r3, r2
 810c4b0:	009b      	lsls	r3, r3, #2
 810c4b2:	440b      	add	r3, r1
 810c4b4:	3318      	adds	r3, #24
 810c4b6:	681b      	ldr	r3, [r3, #0]
 810c4b8:	2b00      	cmp	r3, #0
 810c4ba:	d02f      	beq.n	810c51c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 810c4bc:	78fb      	ldrb	r3, [r7, #3]
 810c4be:	f003 020f 	and.w	r2, r3, #15
 810c4c2:	6879      	ldr	r1, [r7, #4]
 810c4c4:	4613      	mov	r3, r2
 810c4c6:	009b      	lsls	r3, r3, #2
 810c4c8:	4413      	add	r3, r2
 810c4ca:	009b      	lsls	r3, r3, #2
 810c4cc:	440b      	add	r3, r1
 810c4ce:	3318      	adds	r3, #24
 810c4d0:	681a      	ldr	r2, [r3, #0]
 810c4d2:	78fb      	ldrb	r3, [r7, #3]
 810c4d4:	f003 010f 	and.w	r1, r3, #15
 810c4d8:	68f8      	ldr	r0, [r7, #12]
 810c4da:	460b      	mov	r3, r1
 810c4dc:	00db      	lsls	r3, r3, #3
 810c4de:	440b      	add	r3, r1
 810c4e0:	009b      	lsls	r3, r3, #2
 810c4e2:	4403      	add	r3, r0
 810c4e4:	331c      	adds	r3, #28
 810c4e6:	681b      	ldr	r3, [r3, #0]
 810c4e8:	fbb2 f1f3 	udiv	r1, r2, r3
 810c4ec:	fb01 f303 	mul.w	r3, r1, r3
 810c4f0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 810c4f2:	2b00      	cmp	r3, #0
 810c4f4:	d112      	bne.n	810c51c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 810c4f6:	78fb      	ldrb	r3, [r7, #3]
 810c4f8:	f003 020f 	and.w	r2, r3, #15
 810c4fc:	6879      	ldr	r1, [r7, #4]
 810c4fe:	4613      	mov	r3, r2
 810c500:	009b      	lsls	r3, r3, #2
 810c502:	4413      	add	r3, r2
 810c504:	009b      	lsls	r3, r3, #2
 810c506:	440b      	add	r3, r1
 810c508:	3318      	adds	r3, #24
 810c50a:	2200      	movs	r2, #0
 810c50c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 810c50e:	78f9      	ldrb	r1, [r7, #3]
 810c510:	2300      	movs	r3, #0
 810c512:	2200      	movs	r2, #0
 810c514:	6878      	ldr	r0, [r7, #4]
 810c516:	f002 fa5a 	bl	810e9ce <USBD_LL_Transmit>
 810c51a:	e01f      	b.n	810c55c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 810c51c:	68bb      	ldr	r3, [r7, #8]
 810c51e:	2200      	movs	r2, #0
 810c520:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 810c524:	687b      	ldr	r3, [r7, #4]
 810c526:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c52a:	687a      	ldr	r2, [r7, #4]
 810c52c:	33b0      	adds	r3, #176	@ 0xb0
 810c52e:	009b      	lsls	r3, r3, #2
 810c530:	4413      	add	r3, r2
 810c532:	685b      	ldr	r3, [r3, #4]
 810c534:	691b      	ldr	r3, [r3, #16]
 810c536:	2b00      	cmp	r3, #0
 810c538:	d010      	beq.n	810c55c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 810c53a:	687b      	ldr	r3, [r7, #4]
 810c53c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c540:	687a      	ldr	r2, [r7, #4]
 810c542:	33b0      	adds	r3, #176	@ 0xb0
 810c544:	009b      	lsls	r3, r3, #2
 810c546:	4413      	add	r3, r2
 810c548:	685b      	ldr	r3, [r3, #4]
 810c54a:	691b      	ldr	r3, [r3, #16]
 810c54c:	68ba      	ldr	r2, [r7, #8]
 810c54e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 810c552:	68ba      	ldr	r2, [r7, #8]
 810c554:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 810c558:	78fa      	ldrb	r2, [r7, #3]
 810c55a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 810c55c:	2300      	movs	r3, #0
}
 810c55e:	4618      	mov	r0, r3
 810c560:	3710      	adds	r7, #16
 810c562:	46bd      	mov	sp, r7
 810c564:	bd80      	pop	{r7, pc}

0810c566 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 810c566:	b580      	push	{r7, lr}
 810c568:	b084      	sub	sp, #16
 810c56a:	af00      	add	r7, sp, #0
 810c56c:	6078      	str	r0, [r7, #4]
 810c56e:	460b      	mov	r3, r1
 810c570:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c572:	687b      	ldr	r3, [r7, #4]
 810c574:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c578:	687b      	ldr	r3, [r7, #4]
 810c57a:	32b0      	adds	r2, #176	@ 0xb0
 810c57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c580:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 810c582:	687b      	ldr	r3, [r7, #4]
 810c584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c588:	687b      	ldr	r3, [r7, #4]
 810c58a:	32b0      	adds	r2, #176	@ 0xb0
 810c58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c590:	2b00      	cmp	r3, #0
 810c592:	d101      	bne.n	810c598 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 810c594:	2303      	movs	r3, #3
 810c596:	e01a      	b.n	810c5ce <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 810c598:	78fb      	ldrb	r3, [r7, #3]
 810c59a:	4619      	mov	r1, r3
 810c59c:	6878      	ldr	r0, [r7, #4]
 810c59e:	f002 fa58 	bl	810ea52 <USBD_LL_GetRxDataSize>
 810c5a2:	4602      	mov	r2, r0
 810c5a4:	68fb      	ldr	r3, [r7, #12]
 810c5a6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 810c5aa:	687b      	ldr	r3, [r7, #4]
 810c5ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c5b0:	687a      	ldr	r2, [r7, #4]
 810c5b2:	33b0      	adds	r3, #176	@ 0xb0
 810c5b4:	009b      	lsls	r3, r3, #2
 810c5b6:	4413      	add	r3, r2
 810c5b8:	685b      	ldr	r3, [r3, #4]
 810c5ba:	68db      	ldr	r3, [r3, #12]
 810c5bc:	68fa      	ldr	r2, [r7, #12]
 810c5be:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 810c5c2:	68fa      	ldr	r2, [r7, #12]
 810c5c4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 810c5c8:	4611      	mov	r1, r2
 810c5ca:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 810c5cc:	2300      	movs	r3, #0
}
 810c5ce:	4618      	mov	r0, r3
 810c5d0:	3710      	adds	r7, #16
 810c5d2:	46bd      	mov	sp, r7
 810c5d4:	bd80      	pop	{r7, pc}

0810c5d6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 810c5d6:	b580      	push	{r7, lr}
 810c5d8:	b084      	sub	sp, #16
 810c5da:	af00      	add	r7, sp, #0
 810c5dc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c5de:	687b      	ldr	r3, [r7, #4]
 810c5e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c5e4:	687b      	ldr	r3, [r7, #4]
 810c5e6:	32b0      	adds	r2, #176	@ 0xb0
 810c5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c5ec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 810c5ee:	68fb      	ldr	r3, [r7, #12]
 810c5f0:	2b00      	cmp	r3, #0
 810c5f2:	d101      	bne.n	810c5f8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 810c5f4:	2303      	movs	r3, #3
 810c5f6:	e024      	b.n	810c642 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 810c5f8:	687b      	ldr	r3, [r7, #4]
 810c5fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c5fe:	687a      	ldr	r2, [r7, #4]
 810c600:	33b0      	adds	r3, #176	@ 0xb0
 810c602:	009b      	lsls	r3, r3, #2
 810c604:	4413      	add	r3, r2
 810c606:	685b      	ldr	r3, [r3, #4]
 810c608:	2b00      	cmp	r3, #0
 810c60a:	d019      	beq.n	810c640 <USBD_CDC_EP0_RxReady+0x6a>
 810c60c:	68fb      	ldr	r3, [r7, #12]
 810c60e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 810c612:	2bff      	cmp	r3, #255	@ 0xff
 810c614:	d014      	beq.n	810c640 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 810c616:	687b      	ldr	r3, [r7, #4]
 810c618:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c61c:	687a      	ldr	r2, [r7, #4]
 810c61e:	33b0      	adds	r3, #176	@ 0xb0
 810c620:	009b      	lsls	r3, r3, #2
 810c622:	4413      	add	r3, r2
 810c624:	685b      	ldr	r3, [r3, #4]
 810c626:	689b      	ldr	r3, [r3, #8]
 810c628:	68fa      	ldr	r2, [r7, #12]
 810c62a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 810c62e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 810c630:	68fa      	ldr	r2, [r7, #12]
 810c632:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 810c636:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 810c638:	68fb      	ldr	r3, [r7, #12]
 810c63a:	22ff      	movs	r2, #255	@ 0xff
 810c63c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 810c640:	2300      	movs	r3, #0
}
 810c642:	4618      	mov	r0, r3
 810c644:	3710      	adds	r7, #16
 810c646:	46bd      	mov	sp, r7
 810c648:	bd80      	pop	{r7, pc}
	...

0810c64c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 810c64c:	b580      	push	{r7, lr}
 810c64e:	b086      	sub	sp, #24
 810c650:	af00      	add	r7, sp, #0
 810c652:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 810c654:	2182      	movs	r1, #130	@ 0x82
 810c656:	4818      	ldr	r0, [pc, #96]	@ (810c6b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 810c658:	f000 fd4f 	bl	810d0fa <USBD_GetEpDesc>
 810c65c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 810c65e:	2101      	movs	r1, #1
 810c660:	4815      	ldr	r0, [pc, #84]	@ (810c6b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 810c662:	f000 fd4a 	bl	810d0fa <USBD_GetEpDesc>
 810c666:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 810c668:	2181      	movs	r1, #129	@ 0x81
 810c66a:	4813      	ldr	r0, [pc, #76]	@ (810c6b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 810c66c:	f000 fd45 	bl	810d0fa <USBD_GetEpDesc>
 810c670:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 810c672:	697b      	ldr	r3, [r7, #20]
 810c674:	2b00      	cmp	r3, #0
 810c676:	d002      	beq.n	810c67e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 810c678:	697b      	ldr	r3, [r7, #20]
 810c67a:	2210      	movs	r2, #16
 810c67c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 810c67e:	693b      	ldr	r3, [r7, #16]
 810c680:	2b00      	cmp	r3, #0
 810c682:	d006      	beq.n	810c692 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 810c684:	693b      	ldr	r3, [r7, #16]
 810c686:	2200      	movs	r2, #0
 810c688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810c68c:	711a      	strb	r2, [r3, #4]
 810c68e:	2200      	movs	r2, #0
 810c690:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 810c692:	68fb      	ldr	r3, [r7, #12]
 810c694:	2b00      	cmp	r3, #0
 810c696:	d006      	beq.n	810c6a6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 810c698:	68fb      	ldr	r3, [r7, #12]
 810c69a:	2200      	movs	r2, #0
 810c69c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810c6a0:	711a      	strb	r2, [r3, #4]
 810c6a2:	2200      	movs	r2, #0
 810c6a4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 810c6a6:	687b      	ldr	r3, [r7, #4]
 810c6a8:	2243      	movs	r2, #67	@ 0x43
 810c6aa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 810c6ac:	4b02      	ldr	r3, [pc, #8]	@ (810c6b8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 810c6ae:	4618      	mov	r0, r3
 810c6b0:	3718      	adds	r7, #24
 810c6b2:	46bd      	mov	sp, r7
 810c6b4:	bd80      	pop	{r7, pc}
 810c6b6:	bf00      	nop
 810c6b8:	10032144 	.word	0x10032144

0810c6bc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 810c6bc:	b580      	push	{r7, lr}
 810c6be:	b086      	sub	sp, #24
 810c6c0:	af00      	add	r7, sp, #0
 810c6c2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 810c6c4:	2182      	movs	r1, #130	@ 0x82
 810c6c6:	4818      	ldr	r0, [pc, #96]	@ (810c728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 810c6c8:	f000 fd17 	bl	810d0fa <USBD_GetEpDesc>
 810c6cc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 810c6ce:	2101      	movs	r1, #1
 810c6d0:	4815      	ldr	r0, [pc, #84]	@ (810c728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 810c6d2:	f000 fd12 	bl	810d0fa <USBD_GetEpDesc>
 810c6d6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 810c6d8:	2181      	movs	r1, #129	@ 0x81
 810c6da:	4813      	ldr	r0, [pc, #76]	@ (810c728 <USBD_CDC_GetHSCfgDesc+0x6c>)
 810c6dc:	f000 fd0d 	bl	810d0fa <USBD_GetEpDesc>
 810c6e0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 810c6e2:	697b      	ldr	r3, [r7, #20]
 810c6e4:	2b00      	cmp	r3, #0
 810c6e6:	d002      	beq.n	810c6ee <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 810c6e8:	697b      	ldr	r3, [r7, #20]
 810c6ea:	2210      	movs	r2, #16
 810c6ec:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 810c6ee:	693b      	ldr	r3, [r7, #16]
 810c6f0:	2b00      	cmp	r3, #0
 810c6f2:	d006      	beq.n	810c702 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 810c6f4:	693b      	ldr	r3, [r7, #16]
 810c6f6:	2200      	movs	r2, #0
 810c6f8:	711a      	strb	r2, [r3, #4]
 810c6fa:	2200      	movs	r2, #0
 810c6fc:	f042 0202 	orr.w	r2, r2, #2
 810c700:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 810c702:	68fb      	ldr	r3, [r7, #12]
 810c704:	2b00      	cmp	r3, #0
 810c706:	d006      	beq.n	810c716 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 810c708:	68fb      	ldr	r3, [r7, #12]
 810c70a:	2200      	movs	r2, #0
 810c70c:	711a      	strb	r2, [r3, #4]
 810c70e:	2200      	movs	r2, #0
 810c710:	f042 0202 	orr.w	r2, r2, #2
 810c714:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 810c716:	687b      	ldr	r3, [r7, #4]
 810c718:	2243      	movs	r2, #67	@ 0x43
 810c71a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 810c71c:	4b02      	ldr	r3, [pc, #8]	@ (810c728 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 810c71e:	4618      	mov	r0, r3
 810c720:	3718      	adds	r7, #24
 810c722:	46bd      	mov	sp, r7
 810c724:	bd80      	pop	{r7, pc}
 810c726:	bf00      	nop
 810c728:	10032144 	.word	0x10032144

0810c72c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 810c72c:	b580      	push	{r7, lr}
 810c72e:	b086      	sub	sp, #24
 810c730:	af00      	add	r7, sp, #0
 810c732:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 810c734:	2182      	movs	r1, #130	@ 0x82
 810c736:	4818      	ldr	r0, [pc, #96]	@ (810c798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 810c738:	f000 fcdf 	bl	810d0fa <USBD_GetEpDesc>
 810c73c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 810c73e:	2101      	movs	r1, #1
 810c740:	4815      	ldr	r0, [pc, #84]	@ (810c798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 810c742:	f000 fcda 	bl	810d0fa <USBD_GetEpDesc>
 810c746:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 810c748:	2181      	movs	r1, #129	@ 0x81
 810c74a:	4813      	ldr	r0, [pc, #76]	@ (810c798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 810c74c:	f000 fcd5 	bl	810d0fa <USBD_GetEpDesc>
 810c750:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 810c752:	697b      	ldr	r3, [r7, #20]
 810c754:	2b00      	cmp	r3, #0
 810c756:	d002      	beq.n	810c75e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 810c758:	697b      	ldr	r3, [r7, #20]
 810c75a:	2210      	movs	r2, #16
 810c75c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 810c75e:	693b      	ldr	r3, [r7, #16]
 810c760:	2b00      	cmp	r3, #0
 810c762:	d006      	beq.n	810c772 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 810c764:	693b      	ldr	r3, [r7, #16]
 810c766:	2200      	movs	r2, #0
 810c768:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810c76c:	711a      	strb	r2, [r3, #4]
 810c76e:	2200      	movs	r2, #0
 810c770:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 810c772:	68fb      	ldr	r3, [r7, #12]
 810c774:	2b00      	cmp	r3, #0
 810c776:	d006      	beq.n	810c786 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 810c778:	68fb      	ldr	r3, [r7, #12]
 810c77a:	2200      	movs	r2, #0
 810c77c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 810c780:	711a      	strb	r2, [r3, #4]
 810c782:	2200      	movs	r2, #0
 810c784:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 810c786:	687b      	ldr	r3, [r7, #4]
 810c788:	2243      	movs	r2, #67	@ 0x43
 810c78a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 810c78c:	4b02      	ldr	r3, [pc, #8]	@ (810c798 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 810c78e:	4618      	mov	r0, r3
 810c790:	3718      	adds	r7, #24
 810c792:	46bd      	mov	sp, r7
 810c794:	bd80      	pop	{r7, pc}
 810c796:	bf00      	nop
 810c798:	10032144 	.word	0x10032144

0810c79c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 810c79c:	b480      	push	{r7}
 810c79e:	b083      	sub	sp, #12
 810c7a0:	af00      	add	r7, sp, #0
 810c7a2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 810c7a4:	687b      	ldr	r3, [r7, #4]
 810c7a6:	220a      	movs	r2, #10
 810c7a8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 810c7aa:	4b03      	ldr	r3, [pc, #12]	@ (810c7b8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 810c7ac:	4618      	mov	r0, r3
 810c7ae:	370c      	adds	r7, #12
 810c7b0:	46bd      	mov	sp, r7
 810c7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7b6:	4770      	bx	lr
 810c7b8:	10032100 	.word	0x10032100

0810c7bc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 810c7bc:	b480      	push	{r7}
 810c7be:	b083      	sub	sp, #12
 810c7c0:	af00      	add	r7, sp, #0
 810c7c2:	6078      	str	r0, [r7, #4]
 810c7c4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 810c7c6:	683b      	ldr	r3, [r7, #0]
 810c7c8:	2b00      	cmp	r3, #0
 810c7ca:	d101      	bne.n	810c7d0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 810c7cc:	2303      	movs	r3, #3
 810c7ce:	e009      	b.n	810c7e4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 810c7d0:	687b      	ldr	r3, [r7, #4]
 810c7d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 810c7d6:	687a      	ldr	r2, [r7, #4]
 810c7d8:	33b0      	adds	r3, #176	@ 0xb0
 810c7da:	009b      	lsls	r3, r3, #2
 810c7dc:	4413      	add	r3, r2
 810c7de:	683a      	ldr	r2, [r7, #0]
 810c7e0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 810c7e2:	2300      	movs	r3, #0
}
 810c7e4:	4618      	mov	r0, r3
 810c7e6:	370c      	adds	r7, #12
 810c7e8:	46bd      	mov	sp, r7
 810c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c7ee:	4770      	bx	lr

0810c7f0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 810c7f0:	b480      	push	{r7}
 810c7f2:	b087      	sub	sp, #28
 810c7f4:	af00      	add	r7, sp, #0
 810c7f6:	60f8      	str	r0, [r7, #12]
 810c7f8:	60b9      	str	r1, [r7, #8]
 810c7fa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c7fc:	68fb      	ldr	r3, [r7, #12]
 810c7fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c802:	68fb      	ldr	r3, [r7, #12]
 810c804:	32b0      	adds	r2, #176	@ 0xb0
 810c806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c80a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 810c80c:	697b      	ldr	r3, [r7, #20]
 810c80e:	2b00      	cmp	r3, #0
 810c810:	d101      	bne.n	810c816 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 810c812:	2303      	movs	r3, #3
 810c814:	e008      	b.n	810c828 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 810c816:	697b      	ldr	r3, [r7, #20]
 810c818:	68ba      	ldr	r2, [r7, #8]
 810c81a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 810c81e:	697b      	ldr	r3, [r7, #20]
 810c820:	687a      	ldr	r2, [r7, #4]
 810c822:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 810c826:	2300      	movs	r3, #0
}
 810c828:	4618      	mov	r0, r3
 810c82a:	371c      	adds	r7, #28
 810c82c:	46bd      	mov	sp, r7
 810c82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c832:	4770      	bx	lr

0810c834 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 810c834:	b480      	push	{r7}
 810c836:	b085      	sub	sp, #20
 810c838:	af00      	add	r7, sp, #0
 810c83a:	6078      	str	r0, [r7, #4]
 810c83c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c83e:	687b      	ldr	r3, [r7, #4]
 810c840:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c844:	687b      	ldr	r3, [r7, #4]
 810c846:	32b0      	adds	r2, #176	@ 0xb0
 810c848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c84c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 810c84e:	68fb      	ldr	r3, [r7, #12]
 810c850:	2b00      	cmp	r3, #0
 810c852:	d101      	bne.n	810c858 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 810c854:	2303      	movs	r3, #3
 810c856:	e004      	b.n	810c862 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 810c858:	68fb      	ldr	r3, [r7, #12]
 810c85a:	683a      	ldr	r2, [r7, #0]
 810c85c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 810c860:	2300      	movs	r3, #0
}
 810c862:	4618      	mov	r0, r3
 810c864:	3714      	adds	r7, #20
 810c866:	46bd      	mov	sp, r7
 810c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 810c86c:	4770      	bx	lr
	...

0810c870 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 810c870:	b580      	push	{r7, lr}
 810c872:	b084      	sub	sp, #16
 810c874:	af00      	add	r7, sp, #0
 810c876:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c878:	687b      	ldr	r3, [r7, #4]
 810c87a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c87e:	687b      	ldr	r3, [r7, #4]
 810c880:	32b0      	adds	r2, #176	@ 0xb0
 810c882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c886:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 810c888:	2301      	movs	r3, #1
 810c88a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 810c88c:	68bb      	ldr	r3, [r7, #8]
 810c88e:	2b00      	cmp	r3, #0
 810c890:	d101      	bne.n	810c896 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 810c892:	2303      	movs	r3, #3
 810c894:	e025      	b.n	810c8e2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 810c896:	68bb      	ldr	r3, [r7, #8]
 810c898:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 810c89c:	2b00      	cmp	r3, #0
 810c89e:	d11f      	bne.n	810c8e0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 810c8a0:	68bb      	ldr	r3, [r7, #8]
 810c8a2:	2201      	movs	r2, #1
 810c8a4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 810c8a8:	4b10      	ldr	r3, [pc, #64]	@ (810c8ec <USBD_CDC_TransmitPacket+0x7c>)
 810c8aa:	781b      	ldrb	r3, [r3, #0]
 810c8ac:	f003 020f 	and.w	r2, r3, #15
 810c8b0:	68bb      	ldr	r3, [r7, #8]
 810c8b2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 810c8b6:	6878      	ldr	r0, [r7, #4]
 810c8b8:	4613      	mov	r3, r2
 810c8ba:	009b      	lsls	r3, r3, #2
 810c8bc:	4413      	add	r3, r2
 810c8be:	009b      	lsls	r3, r3, #2
 810c8c0:	4403      	add	r3, r0
 810c8c2:	3318      	adds	r3, #24
 810c8c4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 810c8c6:	4b09      	ldr	r3, [pc, #36]	@ (810c8ec <USBD_CDC_TransmitPacket+0x7c>)
 810c8c8:	7819      	ldrb	r1, [r3, #0]
 810c8ca:	68bb      	ldr	r3, [r7, #8]
 810c8cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 810c8d0:	68bb      	ldr	r3, [r7, #8]
 810c8d2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 810c8d6:	6878      	ldr	r0, [r7, #4]
 810c8d8:	f002 f879 	bl	810e9ce <USBD_LL_Transmit>

    ret = USBD_OK;
 810c8dc:	2300      	movs	r3, #0
 810c8de:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 810c8e0:	7bfb      	ldrb	r3, [r7, #15]
}
 810c8e2:	4618      	mov	r0, r3
 810c8e4:	3710      	adds	r7, #16
 810c8e6:	46bd      	mov	sp, r7
 810c8e8:	bd80      	pop	{r7, pc}
 810c8ea:	bf00      	nop
 810c8ec:	10032187 	.word	0x10032187

0810c8f0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 810c8f0:	b580      	push	{r7, lr}
 810c8f2:	b084      	sub	sp, #16
 810c8f4:	af00      	add	r7, sp, #0
 810c8f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 810c8f8:	687b      	ldr	r3, [r7, #4]
 810c8fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c8fe:	687b      	ldr	r3, [r7, #4]
 810c900:	32b0      	adds	r2, #176	@ 0xb0
 810c902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c906:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 810c908:	687b      	ldr	r3, [r7, #4]
 810c90a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c90e:	687b      	ldr	r3, [r7, #4]
 810c910:	32b0      	adds	r2, #176	@ 0xb0
 810c912:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c916:	2b00      	cmp	r3, #0
 810c918:	d101      	bne.n	810c91e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 810c91a:	2303      	movs	r3, #3
 810c91c:	e018      	b.n	810c950 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 810c91e:	687b      	ldr	r3, [r7, #4]
 810c920:	7c1b      	ldrb	r3, [r3, #16]
 810c922:	2b00      	cmp	r3, #0
 810c924:	d10a      	bne.n	810c93c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 810c926:	4b0c      	ldr	r3, [pc, #48]	@ (810c958 <USBD_CDC_ReceivePacket+0x68>)
 810c928:	7819      	ldrb	r1, [r3, #0]
 810c92a:	68fb      	ldr	r3, [r7, #12]
 810c92c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 810c930:	f44f 7300 	mov.w	r3, #512	@ 0x200
 810c934:	6878      	ldr	r0, [r7, #4]
 810c936:	f002 f86b 	bl	810ea10 <USBD_LL_PrepareReceive>
 810c93a:	e008      	b.n	810c94e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 810c93c:	4b06      	ldr	r3, [pc, #24]	@ (810c958 <USBD_CDC_ReceivePacket+0x68>)
 810c93e:	7819      	ldrb	r1, [r3, #0]
 810c940:	68fb      	ldr	r3, [r7, #12]
 810c942:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 810c946:	2340      	movs	r3, #64	@ 0x40
 810c948:	6878      	ldr	r0, [r7, #4]
 810c94a:	f002 f861 	bl	810ea10 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 810c94e:	2300      	movs	r3, #0
}
 810c950:	4618      	mov	r0, r3
 810c952:	3710      	adds	r7, #16
 810c954:	46bd      	mov	sp, r7
 810c956:	bd80      	pop	{r7, pc}
 810c958:	10032188 	.word	0x10032188

0810c95c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 810c95c:	b580      	push	{r7, lr}
 810c95e:	b086      	sub	sp, #24
 810c960:	af00      	add	r7, sp, #0
 810c962:	60f8      	str	r0, [r7, #12]
 810c964:	60b9      	str	r1, [r7, #8]
 810c966:	4613      	mov	r3, r2
 810c968:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 810c96a:	68fb      	ldr	r3, [r7, #12]
 810c96c:	2b00      	cmp	r3, #0
 810c96e:	d101      	bne.n	810c974 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 810c970:	2303      	movs	r3, #3
 810c972:	e01f      	b.n	810c9b4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 810c974:	68fb      	ldr	r3, [r7, #12]
 810c976:	2200      	movs	r2, #0
 810c978:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 810c97c:	68fb      	ldr	r3, [r7, #12]
 810c97e:	2200      	movs	r2, #0
 810c980:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 810c984:	68fb      	ldr	r3, [r7, #12]
 810c986:	2200      	movs	r2, #0
 810c988:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 810c98c:	68bb      	ldr	r3, [r7, #8]
 810c98e:	2b00      	cmp	r3, #0
 810c990:	d003      	beq.n	810c99a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 810c992:	68fb      	ldr	r3, [r7, #12]
 810c994:	68ba      	ldr	r2, [r7, #8]
 810c996:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 810c99a:	68fb      	ldr	r3, [r7, #12]
 810c99c:	2201      	movs	r2, #1
 810c99e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 810c9a2:	68fb      	ldr	r3, [r7, #12]
 810c9a4:	79fa      	ldrb	r2, [r7, #7]
 810c9a6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 810c9a8:	68f8      	ldr	r0, [r7, #12]
 810c9aa:	f001 fed7 	bl	810e75c <USBD_LL_Init>
 810c9ae:	4603      	mov	r3, r0
 810c9b0:	75fb      	strb	r3, [r7, #23]

  return ret;
 810c9b2:	7dfb      	ldrb	r3, [r7, #23]
}
 810c9b4:	4618      	mov	r0, r3
 810c9b6:	3718      	adds	r7, #24
 810c9b8:	46bd      	mov	sp, r7
 810c9ba:	bd80      	pop	{r7, pc}

0810c9bc <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 810c9bc:	b580      	push	{r7, lr}
 810c9be:	b084      	sub	sp, #16
 810c9c0:	af00      	add	r7, sp, #0
 810c9c2:	6078      	str	r0, [r7, #4]
 810c9c4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 810c9c6:	2300      	movs	r3, #0
 810c9c8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 810c9ca:	683b      	ldr	r3, [r7, #0]
 810c9cc:	2b00      	cmp	r3, #0
 810c9ce:	d101      	bne.n	810c9d4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 810c9d0:	2303      	movs	r3, #3
 810c9d2:	e025      	b.n	810ca20 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 810c9d4:	687b      	ldr	r3, [r7, #4]
 810c9d6:	683a      	ldr	r2, [r7, #0]
 810c9d8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 810c9dc:	687b      	ldr	r3, [r7, #4]
 810c9de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c9e2:	687b      	ldr	r3, [r7, #4]
 810c9e4:	32ae      	adds	r2, #174	@ 0xae
 810c9e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c9ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810c9ec:	2b00      	cmp	r3, #0
 810c9ee:	d00f      	beq.n	810ca10 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 810c9f0:	687b      	ldr	r3, [r7, #4]
 810c9f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810c9f6:	687b      	ldr	r3, [r7, #4]
 810c9f8:	32ae      	adds	r2, #174	@ 0xae
 810c9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810c9fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810ca00:	f107 020e 	add.w	r2, r7, #14
 810ca04:	4610      	mov	r0, r2
 810ca06:	4798      	blx	r3
 810ca08:	4602      	mov	r2, r0
 810ca0a:	687b      	ldr	r3, [r7, #4]
 810ca0c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 810ca10:	687b      	ldr	r3, [r7, #4]
 810ca12:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 810ca16:	1c5a      	adds	r2, r3, #1
 810ca18:	687b      	ldr	r3, [r7, #4]
 810ca1a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 810ca1e:	2300      	movs	r3, #0
}
 810ca20:	4618      	mov	r0, r3
 810ca22:	3710      	adds	r7, #16
 810ca24:	46bd      	mov	sp, r7
 810ca26:	bd80      	pop	{r7, pc}

0810ca28 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 810ca28:	b580      	push	{r7, lr}
 810ca2a:	b082      	sub	sp, #8
 810ca2c:	af00      	add	r7, sp, #0
 810ca2e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 810ca30:	6878      	ldr	r0, [r7, #4]
 810ca32:	f001 fee3 	bl	810e7fc <USBD_LL_Start>
 810ca36:	4603      	mov	r3, r0
}
 810ca38:	4618      	mov	r0, r3
 810ca3a:	3708      	adds	r7, #8
 810ca3c:	46bd      	mov	sp, r7
 810ca3e:	bd80      	pop	{r7, pc}

0810ca40 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 810ca40:	b480      	push	{r7}
 810ca42:	b083      	sub	sp, #12
 810ca44:	af00      	add	r7, sp, #0
 810ca46:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 810ca48:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 810ca4a:	4618      	mov	r0, r3
 810ca4c:	370c      	adds	r7, #12
 810ca4e:	46bd      	mov	sp, r7
 810ca50:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ca54:	4770      	bx	lr

0810ca56 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 810ca56:	b580      	push	{r7, lr}
 810ca58:	b084      	sub	sp, #16
 810ca5a:	af00      	add	r7, sp, #0
 810ca5c:	6078      	str	r0, [r7, #4]
 810ca5e:	460b      	mov	r3, r1
 810ca60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 810ca62:	2300      	movs	r3, #0
 810ca64:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 810ca66:	687b      	ldr	r3, [r7, #4]
 810ca68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ca6c:	2b00      	cmp	r3, #0
 810ca6e:	d009      	beq.n	810ca84 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 810ca70:	687b      	ldr	r3, [r7, #4]
 810ca72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ca76:	681b      	ldr	r3, [r3, #0]
 810ca78:	78fa      	ldrb	r2, [r7, #3]
 810ca7a:	4611      	mov	r1, r2
 810ca7c:	6878      	ldr	r0, [r7, #4]
 810ca7e:	4798      	blx	r3
 810ca80:	4603      	mov	r3, r0
 810ca82:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 810ca84:	7bfb      	ldrb	r3, [r7, #15]
}
 810ca86:	4618      	mov	r0, r3
 810ca88:	3710      	adds	r7, #16
 810ca8a:	46bd      	mov	sp, r7
 810ca8c:	bd80      	pop	{r7, pc}

0810ca8e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 810ca8e:	b580      	push	{r7, lr}
 810ca90:	b084      	sub	sp, #16
 810ca92:	af00      	add	r7, sp, #0
 810ca94:	6078      	str	r0, [r7, #4]
 810ca96:	460b      	mov	r3, r1
 810ca98:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 810ca9a:	2300      	movs	r3, #0
 810ca9c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 810ca9e:	687b      	ldr	r3, [r7, #4]
 810caa0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810caa4:	685b      	ldr	r3, [r3, #4]
 810caa6:	78fa      	ldrb	r2, [r7, #3]
 810caa8:	4611      	mov	r1, r2
 810caaa:	6878      	ldr	r0, [r7, #4]
 810caac:	4798      	blx	r3
 810caae:	4603      	mov	r3, r0
 810cab0:	2b00      	cmp	r3, #0
 810cab2:	d001      	beq.n	810cab8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 810cab4:	2303      	movs	r3, #3
 810cab6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 810cab8:	7bfb      	ldrb	r3, [r7, #15]
}
 810caba:	4618      	mov	r0, r3
 810cabc:	3710      	adds	r7, #16
 810cabe:	46bd      	mov	sp, r7
 810cac0:	bd80      	pop	{r7, pc}

0810cac2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 810cac2:	b580      	push	{r7, lr}
 810cac4:	b084      	sub	sp, #16
 810cac6:	af00      	add	r7, sp, #0
 810cac8:	6078      	str	r0, [r7, #4]
 810caca:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 810cacc:	687b      	ldr	r3, [r7, #4]
 810cace:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 810cad2:	6839      	ldr	r1, [r7, #0]
 810cad4:	4618      	mov	r0, r3
 810cad6:	f001 f936 	bl	810dd46 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 810cada:	687b      	ldr	r3, [r7, #4]
 810cadc:	2201      	movs	r2, #1
 810cade:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 810cae2:	687b      	ldr	r3, [r7, #4]
 810cae4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 810cae8:	461a      	mov	r2, r3
 810caea:	687b      	ldr	r3, [r7, #4]
 810caec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 810caf0:	687b      	ldr	r3, [r7, #4]
 810caf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 810caf6:	f003 031f 	and.w	r3, r3, #31
 810cafa:	2b02      	cmp	r3, #2
 810cafc:	d01a      	beq.n	810cb34 <USBD_LL_SetupStage+0x72>
 810cafe:	2b02      	cmp	r3, #2
 810cb00:	d822      	bhi.n	810cb48 <USBD_LL_SetupStage+0x86>
 810cb02:	2b00      	cmp	r3, #0
 810cb04:	d002      	beq.n	810cb0c <USBD_LL_SetupStage+0x4a>
 810cb06:	2b01      	cmp	r3, #1
 810cb08:	d00a      	beq.n	810cb20 <USBD_LL_SetupStage+0x5e>
 810cb0a:	e01d      	b.n	810cb48 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 810cb0c:	687b      	ldr	r3, [r7, #4]
 810cb0e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 810cb12:	4619      	mov	r1, r3
 810cb14:	6878      	ldr	r0, [r7, #4]
 810cb16:	f000 fb63 	bl	810d1e0 <USBD_StdDevReq>
 810cb1a:	4603      	mov	r3, r0
 810cb1c:	73fb      	strb	r3, [r7, #15]
      break;
 810cb1e:	e020      	b.n	810cb62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 810cb20:	687b      	ldr	r3, [r7, #4]
 810cb22:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 810cb26:	4619      	mov	r1, r3
 810cb28:	6878      	ldr	r0, [r7, #4]
 810cb2a:	f000 fbcb 	bl	810d2c4 <USBD_StdItfReq>
 810cb2e:	4603      	mov	r3, r0
 810cb30:	73fb      	strb	r3, [r7, #15]
      break;
 810cb32:	e016      	b.n	810cb62 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 810cb34:	687b      	ldr	r3, [r7, #4]
 810cb36:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 810cb3a:	4619      	mov	r1, r3
 810cb3c:	6878      	ldr	r0, [r7, #4]
 810cb3e:	f000 fc2d 	bl	810d39c <USBD_StdEPReq>
 810cb42:	4603      	mov	r3, r0
 810cb44:	73fb      	strb	r3, [r7, #15]
      break;
 810cb46:	e00c      	b.n	810cb62 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 810cb48:	687b      	ldr	r3, [r7, #4]
 810cb4a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 810cb4e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 810cb52:	b2db      	uxtb	r3, r3
 810cb54:	4619      	mov	r1, r3
 810cb56:	6878      	ldr	r0, [r7, #4]
 810cb58:	f001 feb0 	bl	810e8bc <USBD_LL_StallEP>
 810cb5c:	4603      	mov	r3, r0
 810cb5e:	73fb      	strb	r3, [r7, #15]
      break;
 810cb60:	bf00      	nop
  }

  return ret;
 810cb62:	7bfb      	ldrb	r3, [r7, #15]
}
 810cb64:	4618      	mov	r0, r3
 810cb66:	3710      	adds	r7, #16
 810cb68:	46bd      	mov	sp, r7
 810cb6a:	bd80      	pop	{r7, pc}

0810cb6c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 810cb6c:	b580      	push	{r7, lr}
 810cb6e:	b086      	sub	sp, #24
 810cb70:	af00      	add	r7, sp, #0
 810cb72:	60f8      	str	r0, [r7, #12]
 810cb74:	460b      	mov	r3, r1
 810cb76:	607a      	str	r2, [r7, #4]
 810cb78:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 810cb7a:	2300      	movs	r3, #0
 810cb7c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 810cb7e:	7afb      	ldrb	r3, [r7, #11]
 810cb80:	2b00      	cmp	r3, #0
 810cb82:	d16e      	bne.n	810cc62 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 810cb84:	68fb      	ldr	r3, [r7, #12]
 810cb86:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 810cb8a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 810cb8c:	68fb      	ldr	r3, [r7, #12]
 810cb8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 810cb92:	2b03      	cmp	r3, #3
 810cb94:	f040 8098 	bne.w	810ccc8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 810cb98:	693b      	ldr	r3, [r7, #16]
 810cb9a:	689a      	ldr	r2, [r3, #8]
 810cb9c:	693b      	ldr	r3, [r7, #16]
 810cb9e:	68db      	ldr	r3, [r3, #12]
 810cba0:	429a      	cmp	r2, r3
 810cba2:	d913      	bls.n	810cbcc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 810cba4:	693b      	ldr	r3, [r7, #16]
 810cba6:	689a      	ldr	r2, [r3, #8]
 810cba8:	693b      	ldr	r3, [r7, #16]
 810cbaa:	68db      	ldr	r3, [r3, #12]
 810cbac:	1ad2      	subs	r2, r2, r3
 810cbae:	693b      	ldr	r3, [r7, #16]
 810cbb0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 810cbb2:	693b      	ldr	r3, [r7, #16]
 810cbb4:	68da      	ldr	r2, [r3, #12]
 810cbb6:	693b      	ldr	r3, [r7, #16]
 810cbb8:	689b      	ldr	r3, [r3, #8]
 810cbba:	4293      	cmp	r3, r2
 810cbbc:	bf28      	it	cs
 810cbbe:	4613      	movcs	r3, r2
 810cbc0:	461a      	mov	r2, r3
 810cbc2:	6879      	ldr	r1, [r7, #4]
 810cbc4:	68f8      	ldr	r0, [r7, #12]
 810cbc6:	f001 f9be 	bl	810df46 <USBD_CtlContinueRx>
 810cbca:	e07d      	b.n	810ccc8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 810cbcc:	68fb      	ldr	r3, [r7, #12]
 810cbce:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 810cbd2:	f003 031f 	and.w	r3, r3, #31
 810cbd6:	2b02      	cmp	r3, #2
 810cbd8:	d014      	beq.n	810cc04 <USBD_LL_DataOutStage+0x98>
 810cbda:	2b02      	cmp	r3, #2
 810cbdc:	d81d      	bhi.n	810cc1a <USBD_LL_DataOutStage+0xae>
 810cbde:	2b00      	cmp	r3, #0
 810cbe0:	d002      	beq.n	810cbe8 <USBD_LL_DataOutStage+0x7c>
 810cbe2:	2b01      	cmp	r3, #1
 810cbe4:	d003      	beq.n	810cbee <USBD_LL_DataOutStage+0x82>
 810cbe6:	e018      	b.n	810cc1a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 810cbe8:	2300      	movs	r3, #0
 810cbea:	75bb      	strb	r3, [r7, #22]
            break;
 810cbec:	e018      	b.n	810cc20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 810cbee:	68fb      	ldr	r3, [r7, #12]
 810cbf0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 810cbf4:	b2db      	uxtb	r3, r3
 810cbf6:	4619      	mov	r1, r3
 810cbf8:	68f8      	ldr	r0, [r7, #12]
 810cbfa:	f000 fa64 	bl	810d0c6 <USBD_CoreFindIF>
 810cbfe:	4603      	mov	r3, r0
 810cc00:	75bb      	strb	r3, [r7, #22]
            break;
 810cc02:	e00d      	b.n	810cc20 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 810cc04:	68fb      	ldr	r3, [r7, #12]
 810cc06:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 810cc0a:	b2db      	uxtb	r3, r3
 810cc0c:	4619      	mov	r1, r3
 810cc0e:	68f8      	ldr	r0, [r7, #12]
 810cc10:	f000 fa66 	bl	810d0e0 <USBD_CoreFindEP>
 810cc14:	4603      	mov	r3, r0
 810cc16:	75bb      	strb	r3, [r7, #22]
            break;
 810cc18:	e002      	b.n	810cc20 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 810cc1a:	2300      	movs	r3, #0
 810cc1c:	75bb      	strb	r3, [r7, #22]
            break;
 810cc1e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 810cc20:	7dbb      	ldrb	r3, [r7, #22]
 810cc22:	2b00      	cmp	r3, #0
 810cc24:	d119      	bne.n	810cc5a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cc26:	68fb      	ldr	r3, [r7, #12]
 810cc28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cc2c:	b2db      	uxtb	r3, r3
 810cc2e:	2b03      	cmp	r3, #3
 810cc30:	d113      	bne.n	810cc5a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 810cc32:	7dba      	ldrb	r2, [r7, #22]
 810cc34:	68fb      	ldr	r3, [r7, #12]
 810cc36:	32ae      	adds	r2, #174	@ 0xae
 810cc38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cc3c:	691b      	ldr	r3, [r3, #16]
 810cc3e:	2b00      	cmp	r3, #0
 810cc40:	d00b      	beq.n	810cc5a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 810cc42:	7dba      	ldrb	r2, [r7, #22]
 810cc44:	68fb      	ldr	r3, [r7, #12]
 810cc46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 810cc4a:	7dba      	ldrb	r2, [r7, #22]
 810cc4c:	68fb      	ldr	r3, [r7, #12]
 810cc4e:	32ae      	adds	r2, #174	@ 0xae
 810cc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cc54:	691b      	ldr	r3, [r3, #16]
 810cc56:	68f8      	ldr	r0, [r7, #12]
 810cc58:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 810cc5a:	68f8      	ldr	r0, [r7, #12]
 810cc5c:	f001 f984 	bl	810df68 <USBD_CtlSendStatus>
 810cc60:	e032      	b.n	810ccc8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 810cc62:	7afb      	ldrb	r3, [r7, #11]
 810cc64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810cc68:	b2db      	uxtb	r3, r3
 810cc6a:	4619      	mov	r1, r3
 810cc6c:	68f8      	ldr	r0, [r7, #12]
 810cc6e:	f000 fa37 	bl	810d0e0 <USBD_CoreFindEP>
 810cc72:	4603      	mov	r3, r0
 810cc74:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810cc76:	7dbb      	ldrb	r3, [r7, #22]
 810cc78:	2bff      	cmp	r3, #255	@ 0xff
 810cc7a:	d025      	beq.n	810ccc8 <USBD_LL_DataOutStage+0x15c>
 810cc7c:	7dbb      	ldrb	r3, [r7, #22]
 810cc7e:	2b00      	cmp	r3, #0
 810cc80:	d122      	bne.n	810ccc8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cc82:	68fb      	ldr	r3, [r7, #12]
 810cc84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cc88:	b2db      	uxtb	r3, r3
 810cc8a:	2b03      	cmp	r3, #3
 810cc8c:	d117      	bne.n	810ccbe <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 810cc8e:	7dba      	ldrb	r2, [r7, #22]
 810cc90:	68fb      	ldr	r3, [r7, #12]
 810cc92:	32ae      	adds	r2, #174	@ 0xae
 810cc94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cc98:	699b      	ldr	r3, [r3, #24]
 810cc9a:	2b00      	cmp	r3, #0
 810cc9c:	d00f      	beq.n	810ccbe <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 810cc9e:	7dba      	ldrb	r2, [r7, #22]
 810cca0:	68fb      	ldr	r3, [r7, #12]
 810cca2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 810cca6:	7dba      	ldrb	r2, [r7, #22]
 810cca8:	68fb      	ldr	r3, [r7, #12]
 810ccaa:	32ae      	adds	r2, #174	@ 0xae
 810ccac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810ccb0:	699b      	ldr	r3, [r3, #24]
 810ccb2:	7afa      	ldrb	r2, [r7, #11]
 810ccb4:	4611      	mov	r1, r2
 810ccb6:	68f8      	ldr	r0, [r7, #12]
 810ccb8:	4798      	blx	r3
 810ccba:	4603      	mov	r3, r0
 810ccbc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 810ccbe:	7dfb      	ldrb	r3, [r7, #23]
 810ccc0:	2b00      	cmp	r3, #0
 810ccc2:	d001      	beq.n	810ccc8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 810ccc4:	7dfb      	ldrb	r3, [r7, #23]
 810ccc6:	e000      	b.n	810ccca <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 810ccc8:	2300      	movs	r3, #0
}
 810ccca:	4618      	mov	r0, r3
 810cccc:	3718      	adds	r7, #24
 810ccce:	46bd      	mov	sp, r7
 810ccd0:	bd80      	pop	{r7, pc}

0810ccd2 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 810ccd2:	b580      	push	{r7, lr}
 810ccd4:	b086      	sub	sp, #24
 810ccd6:	af00      	add	r7, sp, #0
 810ccd8:	60f8      	str	r0, [r7, #12]
 810ccda:	460b      	mov	r3, r1
 810ccdc:	607a      	str	r2, [r7, #4]
 810ccde:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 810cce0:	7afb      	ldrb	r3, [r7, #11]
 810cce2:	2b00      	cmp	r3, #0
 810cce4:	d16f      	bne.n	810cdc6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 810cce6:	68fb      	ldr	r3, [r7, #12]
 810cce8:	3314      	adds	r3, #20
 810ccea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 810ccec:	68fb      	ldr	r3, [r7, #12]
 810ccee:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 810ccf2:	2b02      	cmp	r3, #2
 810ccf4:	d15a      	bne.n	810cdac <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 810ccf6:	693b      	ldr	r3, [r7, #16]
 810ccf8:	689a      	ldr	r2, [r3, #8]
 810ccfa:	693b      	ldr	r3, [r7, #16]
 810ccfc:	68db      	ldr	r3, [r3, #12]
 810ccfe:	429a      	cmp	r2, r3
 810cd00:	d914      	bls.n	810cd2c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 810cd02:	693b      	ldr	r3, [r7, #16]
 810cd04:	689a      	ldr	r2, [r3, #8]
 810cd06:	693b      	ldr	r3, [r7, #16]
 810cd08:	68db      	ldr	r3, [r3, #12]
 810cd0a:	1ad2      	subs	r2, r2, r3
 810cd0c:	693b      	ldr	r3, [r7, #16]
 810cd0e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 810cd10:	693b      	ldr	r3, [r7, #16]
 810cd12:	689b      	ldr	r3, [r3, #8]
 810cd14:	461a      	mov	r2, r3
 810cd16:	6879      	ldr	r1, [r7, #4]
 810cd18:	68f8      	ldr	r0, [r7, #12]
 810cd1a:	f001 f8e6 	bl	810deea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 810cd1e:	2300      	movs	r3, #0
 810cd20:	2200      	movs	r2, #0
 810cd22:	2100      	movs	r1, #0
 810cd24:	68f8      	ldr	r0, [r7, #12]
 810cd26:	f001 fe73 	bl	810ea10 <USBD_LL_PrepareReceive>
 810cd2a:	e03f      	b.n	810cdac <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 810cd2c:	693b      	ldr	r3, [r7, #16]
 810cd2e:	68da      	ldr	r2, [r3, #12]
 810cd30:	693b      	ldr	r3, [r7, #16]
 810cd32:	689b      	ldr	r3, [r3, #8]
 810cd34:	429a      	cmp	r2, r3
 810cd36:	d11c      	bne.n	810cd72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 810cd38:	693b      	ldr	r3, [r7, #16]
 810cd3a:	685a      	ldr	r2, [r3, #4]
 810cd3c:	693b      	ldr	r3, [r7, #16]
 810cd3e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 810cd40:	429a      	cmp	r2, r3
 810cd42:	d316      	bcc.n	810cd72 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 810cd44:	693b      	ldr	r3, [r7, #16]
 810cd46:	685a      	ldr	r2, [r3, #4]
 810cd48:	68fb      	ldr	r3, [r7, #12]
 810cd4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 810cd4e:	429a      	cmp	r2, r3
 810cd50:	d20f      	bcs.n	810cd72 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 810cd52:	2200      	movs	r2, #0
 810cd54:	2100      	movs	r1, #0
 810cd56:	68f8      	ldr	r0, [r7, #12]
 810cd58:	f001 f8c7 	bl	810deea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 810cd5c:	68fb      	ldr	r3, [r7, #12]
 810cd5e:	2200      	movs	r2, #0
 810cd60:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 810cd64:	2300      	movs	r3, #0
 810cd66:	2200      	movs	r2, #0
 810cd68:	2100      	movs	r1, #0
 810cd6a:	68f8      	ldr	r0, [r7, #12]
 810cd6c:	f001 fe50 	bl	810ea10 <USBD_LL_PrepareReceive>
 810cd70:	e01c      	b.n	810cdac <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cd72:	68fb      	ldr	r3, [r7, #12]
 810cd74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cd78:	b2db      	uxtb	r3, r3
 810cd7a:	2b03      	cmp	r3, #3
 810cd7c:	d10f      	bne.n	810cd9e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 810cd7e:	68fb      	ldr	r3, [r7, #12]
 810cd80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cd84:	68db      	ldr	r3, [r3, #12]
 810cd86:	2b00      	cmp	r3, #0
 810cd88:	d009      	beq.n	810cd9e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 810cd8a:	68fb      	ldr	r3, [r7, #12]
 810cd8c:	2200      	movs	r2, #0
 810cd8e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 810cd92:	68fb      	ldr	r3, [r7, #12]
 810cd94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cd98:	68db      	ldr	r3, [r3, #12]
 810cd9a:	68f8      	ldr	r0, [r7, #12]
 810cd9c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 810cd9e:	2180      	movs	r1, #128	@ 0x80
 810cda0:	68f8      	ldr	r0, [r7, #12]
 810cda2:	f001 fd8b 	bl	810e8bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 810cda6:	68f8      	ldr	r0, [r7, #12]
 810cda8:	f001 f8f1 	bl	810df8e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 810cdac:	68fb      	ldr	r3, [r7, #12]
 810cdae:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 810cdb2:	2b00      	cmp	r3, #0
 810cdb4:	d03a      	beq.n	810ce2c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 810cdb6:	68f8      	ldr	r0, [r7, #12]
 810cdb8:	f7ff fe42 	bl	810ca40 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 810cdbc:	68fb      	ldr	r3, [r7, #12]
 810cdbe:	2200      	movs	r2, #0
 810cdc0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 810cdc4:	e032      	b.n	810ce2c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 810cdc6:	7afb      	ldrb	r3, [r7, #11]
 810cdc8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 810cdcc:	b2db      	uxtb	r3, r3
 810cdce:	4619      	mov	r1, r3
 810cdd0:	68f8      	ldr	r0, [r7, #12]
 810cdd2:	f000 f985 	bl	810d0e0 <USBD_CoreFindEP>
 810cdd6:	4603      	mov	r3, r0
 810cdd8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810cdda:	7dfb      	ldrb	r3, [r7, #23]
 810cddc:	2bff      	cmp	r3, #255	@ 0xff
 810cdde:	d025      	beq.n	810ce2c <USBD_LL_DataInStage+0x15a>
 810cde0:	7dfb      	ldrb	r3, [r7, #23]
 810cde2:	2b00      	cmp	r3, #0
 810cde4:	d122      	bne.n	810ce2c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cde6:	68fb      	ldr	r3, [r7, #12]
 810cde8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cdec:	b2db      	uxtb	r3, r3
 810cdee:	2b03      	cmp	r3, #3
 810cdf0:	d11c      	bne.n	810ce2c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 810cdf2:	7dfa      	ldrb	r2, [r7, #23]
 810cdf4:	68fb      	ldr	r3, [r7, #12]
 810cdf6:	32ae      	adds	r2, #174	@ 0xae
 810cdf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cdfc:	695b      	ldr	r3, [r3, #20]
 810cdfe:	2b00      	cmp	r3, #0
 810ce00:	d014      	beq.n	810ce2c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 810ce02:	7dfa      	ldrb	r2, [r7, #23]
 810ce04:	68fb      	ldr	r3, [r7, #12]
 810ce06:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 810ce0a:	7dfa      	ldrb	r2, [r7, #23]
 810ce0c:	68fb      	ldr	r3, [r7, #12]
 810ce0e:	32ae      	adds	r2, #174	@ 0xae
 810ce10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810ce14:	695b      	ldr	r3, [r3, #20]
 810ce16:	7afa      	ldrb	r2, [r7, #11]
 810ce18:	4611      	mov	r1, r2
 810ce1a:	68f8      	ldr	r0, [r7, #12]
 810ce1c:	4798      	blx	r3
 810ce1e:	4603      	mov	r3, r0
 810ce20:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 810ce22:	7dbb      	ldrb	r3, [r7, #22]
 810ce24:	2b00      	cmp	r3, #0
 810ce26:	d001      	beq.n	810ce2c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 810ce28:	7dbb      	ldrb	r3, [r7, #22]
 810ce2a:	e000      	b.n	810ce2e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 810ce2c:	2300      	movs	r3, #0
}
 810ce2e:	4618      	mov	r0, r3
 810ce30:	3718      	adds	r7, #24
 810ce32:	46bd      	mov	sp, r7
 810ce34:	bd80      	pop	{r7, pc}

0810ce36 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 810ce36:	b580      	push	{r7, lr}
 810ce38:	b084      	sub	sp, #16
 810ce3a:	af00      	add	r7, sp, #0
 810ce3c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 810ce3e:	2300      	movs	r3, #0
 810ce40:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 810ce42:	687b      	ldr	r3, [r7, #4]
 810ce44:	2201      	movs	r2, #1
 810ce46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 810ce4a:	687b      	ldr	r3, [r7, #4]
 810ce4c:	2200      	movs	r2, #0
 810ce4e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 810ce52:	687b      	ldr	r3, [r7, #4]
 810ce54:	2200      	movs	r2, #0
 810ce56:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 810ce58:	687b      	ldr	r3, [r7, #4]
 810ce5a:	2200      	movs	r2, #0
 810ce5c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 810ce60:	687b      	ldr	r3, [r7, #4]
 810ce62:	2200      	movs	r2, #0
 810ce64:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 810ce68:	687b      	ldr	r3, [r7, #4]
 810ce6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ce6e:	2b00      	cmp	r3, #0
 810ce70:	d014      	beq.n	810ce9c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 810ce72:	687b      	ldr	r3, [r7, #4]
 810ce74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ce78:	685b      	ldr	r3, [r3, #4]
 810ce7a:	2b00      	cmp	r3, #0
 810ce7c:	d00e      	beq.n	810ce9c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 810ce7e:	687b      	ldr	r3, [r7, #4]
 810ce80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810ce84:	685b      	ldr	r3, [r3, #4]
 810ce86:	687a      	ldr	r2, [r7, #4]
 810ce88:	6852      	ldr	r2, [r2, #4]
 810ce8a:	b2d2      	uxtb	r2, r2
 810ce8c:	4611      	mov	r1, r2
 810ce8e:	6878      	ldr	r0, [r7, #4]
 810ce90:	4798      	blx	r3
 810ce92:	4603      	mov	r3, r0
 810ce94:	2b00      	cmp	r3, #0
 810ce96:	d001      	beq.n	810ce9c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 810ce98:	2303      	movs	r3, #3
 810ce9a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 810ce9c:	2340      	movs	r3, #64	@ 0x40
 810ce9e:	2200      	movs	r2, #0
 810cea0:	2100      	movs	r1, #0
 810cea2:	6878      	ldr	r0, [r7, #4]
 810cea4:	f001 fcc5 	bl	810e832 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 810cea8:	687b      	ldr	r3, [r7, #4]
 810ceaa:	2201      	movs	r2, #1
 810ceac:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 810ceb0:	687b      	ldr	r3, [r7, #4]
 810ceb2:	2240      	movs	r2, #64	@ 0x40
 810ceb4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 810ceb8:	2340      	movs	r3, #64	@ 0x40
 810ceba:	2200      	movs	r2, #0
 810cebc:	2180      	movs	r1, #128	@ 0x80
 810cebe:	6878      	ldr	r0, [r7, #4]
 810cec0:	f001 fcb7 	bl	810e832 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 810cec4:	687b      	ldr	r3, [r7, #4]
 810cec6:	2201      	movs	r2, #1
 810cec8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 810ceca:	687b      	ldr	r3, [r7, #4]
 810cecc:	2240      	movs	r2, #64	@ 0x40
 810cece:	621a      	str	r2, [r3, #32]

  return ret;
 810ced0:	7bfb      	ldrb	r3, [r7, #15]
}
 810ced2:	4618      	mov	r0, r3
 810ced4:	3710      	adds	r7, #16
 810ced6:	46bd      	mov	sp, r7
 810ced8:	bd80      	pop	{r7, pc}

0810ceda <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 810ceda:	b480      	push	{r7}
 810cedc:	b083      	sub	sp, #12
 810cede:	af00      	add	r7, sp, #0
 810cee0:	6078      	str	r0, [r7, #4]
 810cee2:	460b      	mov	r3, r1
 810cee4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 810cee6:	687b      	ldr	r3, [r7, #4]
 810cee8:	78fa      	ldrb	r2, [r7, #3]
 810ceea:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 810ceec:	2300      	movs	r3, #0
}
 810ceee:	4618      	mov	r0, r3
 810cef0:	370c      	adds	r7, #12
 810cef2:	46bd      	mov	sp, r7
 810cef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cef8:	4770      	bx	lr

0810cefa <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 810cefa:	b480      	push	{r7}
 810cefc:	b083      	sub	sp, #12
 810cefe:	af00      	add	r7, sp, #0
 810cf00:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 810cf02:	687b      	ldr	r3, [r7, #4]
 810cf04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cf08:	b2db      	uxtb	r3, r3
 810cf0a:	2b04      	cmp	r3, #4
 810cf0c:	d006      	beq.n	810cf1c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 810cf0e:	687b      	ldr	r3, [r7, #4]
 810cf10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cf14:	b2da      	uxtb	r2, r3
 810cf16:	687b      	ldr	r3, [r7, #4]
 810cf18:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 810cf1c:	687b      	ldr	r3, [r7, #4]
 810cf1e:	2204      	movs	r2, #4
 810cf20:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 810cf24:	2300      	movs	r3, #0
}
 810cf26:	4618      	mov	r0, r3
 810cf28:	370c      	adds	r7, #12
 810cf2a:	46bd      	mov	sp, r7
 810cf2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf30:	4770      	bx	lr

0810cf32 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 810cf32:	b480      	push	{r7}
 810cf34:	b083      	sub	sp, #12
 810cf36:	af00      	add	r7, sp, #0
 810cf38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 810cf3a:	687b      	ldr	r3, [r7, #4]
 810cf3c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cf40:	b2db      	uxtb	r3, r3
 810cf42:	2b04      	cmp	r3, #4
 810cf44:	d106      	bne.n	810cf54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 810cf46:	687b      	ldr	r3, [r7, #4]
 810cf48:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 810cf4c:	b2da      	uxtb	r2, r3
 810cf4e:	687b      	ldr	r3, [r7, #4]
 810cf50:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 810cf54:	2300      	movs	r3, #0
}
 810cf56:	4618      	mov	r0, r3
 810cf58:	370c      	adds	r7, #12
 810cf5a:	46bd      	mov	sp, r7
 810cf5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810cf60:	4770      	bx	lr

0810cf62 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 810cf62:	b580      	push	{r7, lr}
 810cf64:	b082      	sub	sp, #8
 810cf66:	af00      	add	r7, sp, #0
 810cf68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cf6a:	687b      	ldr	r3, [r7, #4]
 810cf6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cf70:	b2db      	uxtb	r3, r3
 810cf72:	2b03      	cmp	r3, #3
 810cf74:	d110      	bne.n	810cf98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 810cf76:	687b      	ldr	r3, [r7, #4]
 810cf78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cf7c:	2b00      	cmp	r3, #0
 810cf7e:	d00b      	beq.n	810cf98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 810cf80:	687b      	ldr	r3, [r7, #4]
 810cf82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cf86:	69db      	ldr	r3, [r3, #28]
 810cf88:	2b00      	cmp	r3, #0
 810cf8a:	d005      	beq.n	810cf98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 810cf8c:	687b      	ldr	r3, [r7, #4]
 810cf8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810cf92:	69db      	ldr	r3, [r3, #28]
 810cf94:	6878      	ldr	r0, [r7, #4]
 810cf96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 810cf98:	2300      	movs	r3, #0
}
 810cf9a:	4618      	mov	r0, r3
 810cf9c:	3708      	adds	r7, #8
 810cf9e:	46bd      	mov	sp, r7
 810cfa0:	bd80      	pop	{r7, pc}

0810cfa2 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 810cfa2:	b580      	push	{r7, lr}
 810cfa4:	b082      	sub	sp, #8
 810cfa6:	af00      	add	r7, sp, #0
 810cfa8:	6078      	str	r0, [r7, #4]
 810cfaa:	460b      	mov	r3, r1
 810cfac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 810cfae:	687b      	ldr	r3, [r7, #4]
 810cfb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810cfb4:	687b      	ldr	r3, [r7, #4]
 810cfb6:	32ae      	adds	r2, #174	@ 0xae
 810cfb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cfbc:	2b00      	cmp	r3, #0
 810cfbe:	d101      	bne.n	810cfc4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 810cfc0:	2303      	movs	r3, #3
 810cfc2:	e01c      	b.n	810cffe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810cfc4:	687b      	ldr	r3, [r7, #4]
 810cfc6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810cfca:	b2db      	uxtb	r3, r3
 810cfcc:	2b03      	cmp	r3, #3
 810cfce:	d115      	bne.n	810cffc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 810cfd0:	687b      	ldr	r3, [r7, #4]
 810cfd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810cfd6:	687b      	ldr	r3, [r7, #4]
 810cfd8:	32ae      	adds	r2, #174	@ 0xae
 810cfda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cfde:	6a1b      	ldr	r3, [r3, #32]
 810cfe0:	2b00      	cmp	r3, #0
 810cfe2:	d00b      	beq.n	810cffc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 810cfe4:	687b      	ldr	r3, [r7, #4]
 810cfe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810cfea:	687b      	ldr	r3, [r7, #4]
 810cfec:	32ae      	adds	r2, #174	@ 0xae
 810cfee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810cff2:	6a1b      	ldr	r3, [r3, #32]
 810cff4:	78fa      	ldrb	r2, [r7, #3]
 810cff6:	4611      	mov	r1, r2
 810cff8:	6878      	ldr	r0, [r7, #4]
 810cffa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 810cffc:	2300      	movs	r3, #0
}
 810cffe:	4618      	mov	r0, r3
 810d000:	3708      	adds	r7, #8
 810d002:	46bd      	mov	sp, r7
 810d004:	bd80      	pop	{r7, pc}

0810d006 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 810d006:	b580      	push	{r7, lr}
 810d008:	b082      	sub	sp, #8
 810d00a:	af00      	add	r7, sp, #0
 810d00c:	6078      	str	r0, [r7, #4]
 810d00e:	460b      	mov	r3, r1
 810d010:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 810d012:	687b      	ldr	r3, [r7, #4]
 810d014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810d018:	687b      	ldr	r3, [r7, #4]
 810d01a:	32ae      	adds	r2, #174	@ 0xae
 810d01c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d020:	2b00      	cmp	r3, #0
 810d022:	d101      	bne.n	810d028 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 810d024:	2303      	movs	r3, #3
 810d026:	e01c      	b.n	810d062 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810d028:	687b      	ldr	r3, [r7, #4]
 810d02a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d02e:	b2db      	uxtb	r3, r3
 810d030:	2b03      	cmp	r3, #3
 810d032:	d115      	bne.n	810d060 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 810d034:	687b      	ldr	r3, [r7, #4]
 810d036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810d03a:	687b      	ldr	r3, [r7, #4]
 810d03c:	32ae      	adds	r2, #174	@ 0xae
 810d03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d044:	2b00      	cmp	r3, #0
 810d046:	d00b      	beq.n	810d060 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 810d048:	687b      	ldr	r3, [r7, #4]
 810d04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810d04e:	687b      	ldr	r3, [r7, #4]
 810d050:	32ae      	adds	r2, #174	@ 0xae
 810d052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 810d058:	78fa      	ldrb	r2, [r7, #3]
 810d05a:	4611      	mov	r1, r2
 810d05c:	6878      	ldr	r0, [r7, #4]
 810d05e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 810d060:	2300      	movs	r3, #0
}
 810d062:	4618      	mov	r0, r3
 810d064:	3708      	adds	r7, #8
 810d066:	46bd      	mov	sp, r7
 810d068:	bd80      	pop	{r7, pc}

0810d06a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 810d06a:	b480      	push	{r7}
 810d06c:	b083      	sub	sp, #12
 810d06e:	af00      	add	r7, sp, #0
 810d070:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 810d072:	2300      	movs	r3, #0
}
 810d074:	4618      	mov	r0, r3
 810d076:	370c      	adds	r7, #12
 810d078:	46bd      	mov	sp, r7
 810d07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d07e:	4770      	bx	lr

0810d080 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 810d080:	b580      	push	{r7, lr}
 810d082:	b084      	sub	sp, #16
 810d084:	af00      	add	r7, sp, #0
 810d086:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 810d088:	2300      	movs	r3, #0
 810d08a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 810d08c:	687b      	ldr	r3, [r7, #4]
 810d08e:	2201      	movs	r2, #1
 810d090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 810d094:	687b      	ldr	r3, [r7, #4]
 810d096:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d09a:	2b00      	cmp	r3, #0
 810d09c:	d00e      	beq.n	810d0bc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 810d09e:	687b      	ldr	r3, [r7, #4]
 810d0a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d0a4:	685b      	ldr	r3, [r3, #4]
 810d0a6:	687a      	ldr	r2, [r7, #4]
 810d0a8:	6852      	ldr	r2, [r2, #4]
 810d0aa:	b2d2      	uxtb	r2, r2
 810d0ac:	4611      	mov	r1, r2
 810d0ae:	6878      	ldr	r0, [r7, #4]
 810d0b0:	4798      	blx	r3
 810d0b2:	4603      	mov	r3, r0
 810d0b4:	2b00      	cmp	r3, #0
 810d0b6:	d001      	beq.n	810d0bc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 810d0b8:	2303      	movs	r3, #3
 810d0ba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 810d0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 810d0be:	4618      	mov	r0, r3
 810d0c0:	3710      	adds	r7, #16
 810d0c2:	46bd      	mov	sp, r7
 810d0c4:	bd80      	pop	{r7, pc}

0810d0c6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 810d0c6:	b480      	push	{r7}
 810d0c8:	b083      	sub	sp, #12
 810d0ca:	af00      	add	r7, sp, #0
 810d0cc:	6078      	str	r0, [r7, #4]
 810d0ce:	460b      	mov	r3, r1
 810d0d0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 810d0d2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 810d0d4:	4618      	mov	r0, r3
 810d0d6:	370c      	adds	r7, #12
 810d0d8:	46bd      	mov	sp, r7
 810d0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0de:	4770      	bx	lr

0810d0e0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 810d0e0:	b480      	push	{r7}
 810d0e2:	b083      	sub	sp, #12
 810d0e4:	af00      	add	r7, sp, #0
 810d0e6:	6078      	str	r0, [r7, #4]
 810d0e8:	460b      	mov	r3, r1
 810d0ea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 810d0ec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 810d0ee:	4618      	mov	r0, r3
 810d0f0:	370c      	adds	r7, #12
 810d0f2:	46bd      	mov	sp, r7
 810d0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d0f8:	4770      	bx	lr

0810d0fa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 810d0fa:	b580      	push	{r7, lr}
 810d0fc:	b086      	sub	sp, #24
 810d0fe:	af00      	add	r7, sp, #0
 810d100:	6078      	str	r0, [r7, #4]
 810d102:	460b      	mov	r3, r1
 810d104:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 810d106:	687b      	ldr	r3, [r7, #4]
 810d108:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 810d10a:	687b      	ldr	r3, [r7, #4]
 810d10c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 810d10e:	2300      	movs	r3, #0
 810d110:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 810d112:	68fb      	ldr	r3, [r7, #12]
 810d114:	885b      	ldrh	r3, [r3, #2]
 810d116:	b29b      	uxth	r3, r3
 810d118:	68fa      	ldr	r2, [r7, #12]
 810d11a:	7812      	ldrb	r2, [r2, #0]
 810d11c:	4293      	cmp	r3, r2
 810d11e:	d91f      	bls.n	810d160 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 810d120:	68fb      	ldr	r3, [r7, #12]
 810d122:	781b      	ldrb	r3, [r3, #0]
 810d124:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 810d126:	e013      	b.n	810d150 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 810d128:	f107 030a 	add.w	r3, r7, #10
 810d12c:	4619      	mov	r1, r3
 810d12e:	6978      	ldr	r0, [r7, #20]
 810d130:	f000 f81b 	bl	810d16a <USBD_GetNextDesc>
 810d134:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 810d136:	697b      	ldr	r3, [r7, #20]
 810d138:	785b      	ldrb	r3, [r3, #1]
 810d13a:	2b05      	cmp	r3, #5
 810d13c:	d108      	bne.n	810d150 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 810d13e:	697b      	ldr	r3, [r7, #20]
 810d140:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 810d142:	693b      	ldr	r3, [r7, #16]
 810d144:	789b      	ldrb	r3, [r3, #2]
 810d146:	78fa      	ldrb	r2, [r7, #3]
 810d148:	429a      	cmp	r2, r3
 810d14a:	d008      	beq.n	810d15e <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 810d14c:	2300      	movs	r3, #0
 810d14e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 810d150:	68fb      	ldr	r3, [r7, #12]
 810d152:	885b      	ldrh	r3, [r3, #2]
 810d154:	b29a      	uxth	r2, r3
 810d156:	897b      	ldrh	r3, [r7, #10]
 810d158:	429a      	cmp	r2, r3
 810d15a:	d8e5      	bhi.n	810d128 <USBD_GetEpDesc+0x2e>
 810d15c:	e000      	b.n	810d160 <USBD_GetEpDesc+0x66>
          break;
 810d15e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 810d160:	693b      	ldr	r3, [r7, #16]
}
 810d162:	4618      	mov	r0, r3
 810d164:	3718      	adds	r7, #24
 810d166:	46bd      	mov	sp, r7
 810d168:	bd80      	pop	{r7, pc}

0810d16a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 810d16a:	b480      	push	{r7}
 810d16c:	b085      	sub	sp, #20
 810d16e:	af00      	add	r7, sp, #0
 810d170:	6078      	str	r0, [r7, #4]
 810d172:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 810d174:	687b      	ldr	r3, [r7, #4]
 810d176:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 810d178:	683b      	ldr	r3, [r7, #0]
 810d17a:	881b      	ldrh	r3, [r3, #0]
 810d17c:	68fa      	ldr	r2, [r7, #12]
 810d17e:	7812      	ldrb	r2, [r2, #0]
 810d180:	4413      	add	r3, r2
 810d182:	b29a      	uxth	r2, r3
 810d184:	683b      	ldr	r3, [r7, #0]
 810d186:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 810d188:	68fb      	ldr	r3, [r7, #12]
 810d18a:	781b      	ldrb	r3, [r3, #0]
 810d18c:	461a      	mov	r2, r3
 810d18e:	687b      	ldr	r3, [r7, #4]
 810d190:	4413      	add	r3, r2
 810d192:	60fb      	str	r3, [r7, #12]

  return (pnext);
 810d194:	68fb      	ldr	r3, [r7, #12]
}
 810d196:	4618      	mov	r0, r3
 810d198:	3714      	adds	r7, #20
 810d19a:	46bd      	mov	sp, r7
 810d19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1a0:	4770      	bx	lr

0810d1a2 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 810d1a2:	b480      	push	{r7}
 810d1a4:	b087      	sub	sp, #28
 810d1a6:	af00      	add	r7, sp, #0
 810d1a8:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 810d1aa:	687b      	ldr	r3, [r7, #4]
 810d1ac:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 810d1ae:	697b      	ldr	r3, [r7, #20]
 810d1b0:	781b      	ldrb	r3, [r3, #0]
 810d1b2:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 810d1b4:	697b      	ldr	r3, [r7, #20]
 810d1b6:	3301      	adds	r3, #1
 810d1b8:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 810d1ba:	697b      	ldr	r3, [r7, #20]
 810d1bc:	781b      	ldrb	r3, [r3, #0]
 810d1be:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 810d1c0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 810d1c4:	021b      	lsls	r3, r3, #8
 810d1c6:	b21a      	sxth	r2, r3
 810d1c8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 810d1cc:	4313      	orrs	r3, r2
 810d1ce:	b21b      	sxth	r3, r3
 810d1d0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 810d1d2:	89fb      	ldrh	r3, [r7, #14]
}
 810d1d4:	4618      	mov	r0, r3
 810d1d6:	371c      	adds	r7, #28
 810d1d8:	46bd      	mov	sp, r7
 810d1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 810d1de:	4770      	bx	lr

0810d1e0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d1e0:	b580      	push	{r7, lr}
 810d1e2:	b084      	sub	sp, #16
 810d1e4:	af00      	add	r7, sp, #0
 810d1e6:	6078      	str	r0, [r7, #4]
 810d1e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810d1ea:	2300      	movs	r3, #0
 810d1ec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810d1ee:	683b      	ldr	r3, [r7, #0]
 810d1f0:	781b      	ldrb	r3, [r3, #0]
 810d1f2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 810d1f6:	2b40      	cmp	r3, #64	@ 0x40
 810d1f8:	d005      	beq.n	810d206 <USBD_StdDevReq+0x26>
 810d1fa:	2b40      	cmp	r3, #64	@ 0x40
 810d1fc:	d857      	bhi.n	810d2ae <USBD_StdDevReq+0xce>
 810d1fe:	2b00      	cmp	r3, #0
 810d200:	d00f      	beq.n	810d222 <USBD_StdDevReq+0x42>
 810d202:	2b20      	cmp	r3, #32
 810d204:	d153      	bne.n	810d2ae <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 810d206:	687b      	ldr	r3, [r7, #4]
 810d208:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 810d20c:	687b      	ldr	r3, [r7, #4]
 810d20e:	32ae      	adds	r2, #174	@ 0xae
 810d210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d214:	689b      	ldr	r3, [r3, #8]
 810d216:	6839      	ldr	r1, [r7, #0]
 810d218:	6878      	ldr	r0, [r7, #4]
 810d21a:	4798      	blx	r3
 810d21c:	4603      	mov	r3, r0
 810d21e:	73fb      	strb	r3, [r7, #15]
      break;
 810d220:	e04a      	b.n	810d2b8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 810d222:	683b      	ldr	r3, [r7, #0]
 810d224:	785b      	ldrb	r3, [r3, #1]
 810d226:	2b09      	cmp	r3, #9
 810d228:	d83b      	bhi.n	810d2a2 <USBD_StdDevReq+0xc2>
 810d22a:	a201      	add	r2, pc, #4	@ (adr r2, 810d230 <USBD_StdDevReq+0x50>)
 810d22c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d230:	0810d285 	.word	0x0810d285
 810d234:	0810d299 	.word	0x0810d299
 810d238:	0810d2a3 	.word	0x0810d2a3
 810d23c:	0810d28f 	.word	0x0810d28f
 810d240:	0810d2a3 	.word	0x0810d2a3
 810d244:	0810d263 	.word	0x0810d263
 810d248:	0810d259 	.word	0x0810d259
 810d24c:	0810d2a3 	.word	0x0810d2a3
 810d250:	0810d27b 	.word	0x0810d27b
 810d254:	0810d26d 	.word	0x0810d26d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 810d258:	6839      	ldr	r1, [r7, #0]
 810d25a:	6878      	ldr	r0, [r7, #4]
 810d25c:	f000 fa3c 	bl	810d6d8 <USBD_GetDescriptor>
          break;
 810d260:	e024      	b.n	810d2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 810d262:	6839      	ldr	r1, [r7, #0]
 810d264:	6878      	ldr	r0, [r7, #4]
 810d266:	f000 fbcb 	bl	810da00 <USBD_SetAddress>
          break;
 810d26a:	e01f      	b.n	810d2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 810d26c:	6839      	ldr	r1, [r7, #0]
 810d26e:	6878      	ldr	r0, [r7, #4]
 810d270:	f000 fc0a 	bl	810da88 <USBD_SetConfig>
 810d274:	4603      	mov	r3, r0
 810d276:	73fb      	strb	r3, [r7, #15]
          break;
 810d278:	e018      	b.n	810d2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 810d27a:	6839      	ldr	r1, [r7, #0]
 810d27c:	6878      	ldr	r0, [r7, #4]
 810d27e:	f000 fcad 	bl	810dbdc <USBD_GetConfig>
          break;
 810d282:	e013      	b.n	810d2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 810d284:	6839      	ldr	r1, [r7, #0]
 810d286:	6878      	ldr	r0, [r7, #4]
 810d288:	f000 fcde 	bl	810dc48 <USBD_GetStatus>
          break;
 810d28c:	e00e      	b.n	810d2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 810d28e:	6839      	ldr	r1, [r7, #0]
 810d290:	6878      	ldr	r0, [r7, #4]
 810d292:	f000 fd0d 	bl	810dcb0 <USBD_SetFeature>
          break;
 810d296:	e009      	b.n	810d2ac <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 810d298:	6839      	ldr	r1, [r7, #0]
 810d29a:	6878      	ldr	r0, [r7, #4]
 810d29c:	f000 fd31 	bl	810dd02 <USBD_ClrFeature>
          break;
 810d2a0:	e004      	b.n	810d2ac <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 810d2a2:	6839      	ldr	r1, [r7, #0]
 810d2a4:	6878      	ldr	r0, [r7, #4]
 810d2a6:	f000 fd88 	bl	810ddba <USBD_CtlError>
          break;
 810d2aa:	bf00      	nop
      }
      break;
 810d2ac:	e004      	b.n	810d2b8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 810d2ae:	6839      	ldr	r1, [r7, #0]
 810d2b0:	6878      	ldr	r0, [r7, #4]
 810d2b2:	f000 fd82 	bl	810ddba <USBD_CtlError>
      break;
 810d2b6:	bf00      	nop
  }

  return ret;
 810d2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 810d2ba:	4618      	mov	r0, r3
 810d2bc:	3710      	adds	r7, #16
 810d2be:	46bd      	mov	sp, r7
 810d2c0:	bd80      	pop	{r7, pc}
 810d2c2:	bf00      	nop

0810d2c4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d2c4:	b580      	push	{r7, lr}
 810d2c6:	b084      	sub	sp, #16
 810d2c8:	af00      	add	r7, sp, #0
 810d2ca:	6078      	str	r0, [r7, #4]
 810d2cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810d2ce:	2300      	movs	r3, #0
 810d2d0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810d2d2:	683b      	ldr	r3, [r7, #0]
 810d2d4:	781b      	ldrb	r3, [r3, #0]
 810d2d6:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 810d2da:	2b40      	cmp	r3, #64	@ 0x40
 810d2dc:	d005      	beq.n	810d2ea <USBD_StdItfReq+0x26>
 810d2de:	2b40      	cmp	r3, #64	@ 0x40
 810d2e0:	d852      	bhi.n	810d388 <USBD_StdItfReq+0xc4>
 810d2e2:	2b00      	cmp	r3, #0
 810d2e4:	d001      	beq.n	810d2ea <USBD_StdItfReq+0x26>
 810d2e6:	2b20      	cmp	r3, #32
 810d2e8:	d14e      	bne.n	810d388 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 810d2ea:	687b      	ldr	r3, [r7, #4]
 810d2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d2f0:	b2db      	uxtb	r3, r3
 810d2f2:	3b01      	subs	r3, #1
 810d2f4:	2b02      	cmp	r3, #2
 810d2f6:	d840      	bhi.n	810d37a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 810d2f8:	683b      	ldr	r3, [r7, #0]
 810d2fa:	889b      	ldrh	r3, [r3, #4]
 810d2fc:	b2db      	uxtb	r3, r3
 810d2fe:	2b01      	cmp	r3, #1
 810d300:	d836      	bhi.n	810d370 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 810d302:	683b      	ldr	r3, [r7, #0]
 810d304:	889b      	ldrh	r3, [r3, #4]
 810d306:	b2db      	uxtb	r3, r3
 810d308:	4619      	mov	r1, r3
 810d30a:	6878      	ldr	r0, [r7, #4]
 810d30c:	f7ff fedb 	bl	810d0c6 <USBD_CoreFindIF>
 810d310:	4603      	mov	r3, r0
 810d312:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810d314:	7bbb      	ldrb	r3, [r7, #14]
 810d316:	2bff      	cmp	r3, #255	@ 0xff
 810d318:	d01d      	beq.n	810d356 <USBD_StdItfReq+0x92>
 810d31a:	7bbb      	ldrb	r3, [r7, #14]
 810d31c:	2b00      	cmp	r3, #0
 810d31e:	d11a      	bne.n	810d356 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 810d320:	7bba      	ldrb	r2, [r7, #14]
 810d322:	687b      	ldr	r3, [r7, #4]
 810d324:	32ae      	adds	r2, #174	@ 0xae
 810d326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d32a:	689b      	ldr	r3, [r3, #8]
 810d32c:	2b00      	cmp	r3, #0
 810d32e:	d00f      	beq.n	810d350 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 810d330:	7bba      	ldrb	r2, [r7, #14]
 810d332:	687b      	ldr	r3, [r7, #4]
 810d334:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 810d338:	7bba      	ldrb	r2, [r7, #14]
 810d33a:	687b      	ldr	r3, [r7, #4]
 810d33c:	32ae      	adds	r2, #174	@ 0xae
 810d33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d342:	689b      	ldr	r3, [r3, #8]
 810d344:	6839      	ldr	r1, [r7, #0]
 810d346:	6878      	ldr	r0, [r7, #4]
 810d348:	4798      	blx	r3
 810d34a:	4603      	mov	r3, r0
 810d34c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 810d34e:	e004      	b.n	810d35a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 810d350:	2303      	movs	r3, #3
 810d352:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 810d354:	e001      	b.n	810d35a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 810d356:	2303      	movs	r3, #3
 810d358:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 810d35a:	683b      	ldr	r3, [r7, #0]
 810d35c:	88db      	ldrh	r3, [r3, #6]
 810d35e:	2b00      	cmp	r3, #0
 810d360:	d110      	bne.n	810d384 <USBD_StdItfReq+0xc0>
 810d362:	7bfb      	ldrb	r3, [r7, #15]
 810d364:	2b00      	cmp	r3, #0
 810d366:	d10d      	bne.n	810d384 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 810d368:	6878      	ldr	r0, [r7, #4]
 810d36a:	f000 fdfd 	bl	810df68 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 810d36e:	e009      	b.n	810d384 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 810d370:	6839      	ldr	r1, [r7, #0]
 810d372:	6878      	ldr	r0, [r7, #4]
 810d374:	f000 fd21 	bl	810ddba <USBD_CtlError>
          break;
 810d378:	e004      	b.n	810d384 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 810d37a:	6839      	ldr	r1, [r7, #0]
 810d37c:	6878      	ldr	r0, [r7, #4]
 810d37e:	f000 fd1c 	bl	810ddba <USBD_CtlError>
          break;
 810d382:	e000      	b.n	810d386 <USBD_StdItfReq+0xc2>
          break;
 810d384:	bf00      	nop
      }
      break;
 810d386:	e004      	b.n	810d392 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 810d388:	6839      	ldr	r1, [r7, #0]
 810d38a:	6878      	ldr	r0, [r7, #4]
 810d38c:	f000 fd15 	bl	810ddba <USBD_CtlError>
      break;
 810d390:	bf00      	nop
  }

  return ret;
 810d392:	7bfb      	ldrb	r3, [r7, #15]
}
 810d394:	4618      	mov	r0, r3
 810d396:	3710      	adds	r7, #16
 810d398:	46bd      	mov	sp, r7
 810d39a:	bd80      	pop	{r7, pc}

0810d39c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d39c:	b580      	push	{r7, lr}
 810d39e:	b084      	sub	sp, #16
 810d3a0:	af00      	add	r7, sp, #0
 810d3a2:	6078      	str	r0, [r7, #4]
 810d3a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 810d3a6:	2300      	movs	r3, #0
 810d3a8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 810d3aa:	683b      	ldr	r3, [r7, #0]
 810d3ac:	889b      	ldrh	r3, [r3, #4]
 810d3ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 810d3b0:	683b      	ldr	r3, [r7, #0]
 810d3b2:	781b      	ldrb	r3, [r3, #0]
 810d3b4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 810d3b8:	2b40      	cmp	r3, #64	@ 0x40
 810d3ba:	d007      	beq.n	810d3cc <USBD_StdEPReq+0x30>
 810d3bc:	2b40      	cmp	r3, #64	@ 0x40
 810d3be:	f200 817f 	bhi.w	810d6c0 <USBD_StdEPReq+0x324>
 810d3c2:	2b00      	cmp	r3, #0
 810d3c4:	d02a      	beq.n	810d41c <USBD_StdEPReq+0x80>
 810d3c6:	2b20      	cmp	r3, #32
 810d3c8:	f040 817a 	bne.w	810d6c0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 810d3cc:	7bbb      	ldrb	r3, [r7, #14]
 810d3ce:	4619      	mov	r1, r3
 810d3d0:	6878      	ldr	r0, [r7, #4]
 810d3d2:	f7ff fe85 	bl	810d0e0 <USBD_CoreFindEP>
 810d3d6:	4603      	mov	r3, r0
 810d3d8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810d3da:	7b7b      	ldrb	r3, [r7, #13]
 810d3dc:	2bff      	cmp	r3, #255	@ 0xff
 810d3de:	f000 8174 	beq.w	810d6ca <USBD_StdEPReq+0x32e>
 810d3e2:	7b7b      	ldrb	r3, [r7, #13]
 810d3e4:	2b00      	cmp	r3, #0
 810d3e6:	f040 8170 	bne.w	810d6ca <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 810d3ea:	7b7a      	ldrb	r2, [r7, #13]
 810d3ec:	687b      	ldr	r3, [r7, #4]
 810d3ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 810d3f2:	7b7a      	ldrb	r2, [r7, #13]
 810d3f4:	687b      	ldr	r3, [r7, #4]
 810d3f6:	32ae      	adds	r2, #174	@ 0xae
 810d3f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d3fc:	689b      	ldr	r3, [r3, #8]
 810d3fe:	2b00      	cmp	r3, #0
 810d400:	f000 8163 	beq.w	810d6ca <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 810d404:	7b7a      	ldrb	r2, [r7, #13]
 810d406:	687b      	ldr	r3, [r7, #4]
 810d408:	32ae      	adds	r2, #174	@ 0xae
 810d40a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d40e:	689b      	ldr	r3, [r3, #8]
 810d410:	6839      	ldr	r1, [r7, #0]
 810d412:	6878      	ldr	r0, [r7, #4]
 810d414:	4798      	blx	r3
 810d416:	4603      	mov	r3, r0
 810d418:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 810d41a:	e156      	b.n	810d6ca <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 810d41c:	683b      	ldr	r3, [r7, #0]
 810d41e:	785b      	ldrb	r3, [r3, #1]
 810d420:	2b03      	cmp	r3, #3
 810d422:	d008      	beq.n	810d436 <USBD_StdEPReq+0x9a>
 810d424:	2b03      	cmp	r3, #3
 810d426:	f300 8145 	bgt.w	810d6b4 <USBD_StdEPReq+0x318>
 810d42a:	2b00      	cmp	r3, #0
 810d42c:	f000 809b 	beq.w	810d566 <USBD_StdEPReq+0x1ca>
 810d430:	2b01      	cmp	r3, #1
 810d432:	d03c      	beq.n	810d4ae <USBD_StdEPReq+0x112>
 810d434:	e13e      	b.n	810d6b4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 810d436:	687b      	ldr	r3, [r7, #4]
 810d438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d43c:	b2db      	uxtb	r3, r3
 810d43e:	2b02      	cmp	r3, #2
 810d440:	d002      	beq.n	810d448 <USBD_StdEPReq+0xac>
 810d442:	2b03      	cmp	r3, #3
 810d444:	d016      	beq.n	810d474 <USBD_StdEPReq+0xd8>
 810d446:	e02c      	b.n	810d4a2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 810d448:	7bbb      	ldrb	r3, [r7, #14]
 810d44a:	2b00      	cmp	r3, #0
 810d44c:	d00d      	beq.n	810d46a <USBD_StdEPReq+0xce>
 810d44e:	7bbb      	ldrb	r3, [r7, #14]
 810d450:	2b80      	cmp	r3, #128	@ 0x80
 810d452:	d00a      	beq.n	810d46a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 810d454:	7bbb      	ldrb	r3, [r7, #14]
 810d456:	4619      	mov	r1, r3
 810d458:	6878      	ldr	r0, [r7, #4]
 810d45a:	f001 fa2f 	bl	810e8bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 810d45e:	2180      	movs	r1, #128	@ 0x80
 810d460:	6878      	ldr	r0, [r7, #4]
 810d462:	f001 fa2b 	bl	810e8bc <USBD_LL_StallEP>
 810d466:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 810d468:	e020      	b.n	810d4ac <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 810d46a:	6839      	ldr	r1, [r7, #0]
 810d46c:	6878      	ldr	r0, [r7, #4]
 810d46e:	f000 fca4 	bl	810ddba <USBD_CtlError>
              break;
 810d472:	e01b      	b.n	810d4ac <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 810d474:	683b      	ldr	r3, [r7, #0]
 810d476:	885b      	ldrh	r3, [r3, #2]
 810d478:	2b00      	cmp	r3, #0
 810d47a:	d10e      	bne.n	810d49a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 810d47c:	7bbb      	ldrb	r3, [r7, #14]
 810d47e:	2b00      	cmp	r3, #0
 810d480:	d00b      	beq.n	810d49a <USBD_StdEPReq+0xfe>
 810d482:	7bbb      	ldrb	r3, [r7, #14]
 810d484:	2b80      	cmp	r3, #128	@ 0x80
 810d486:	d008      	beq.n	810d49a <USBD_StdEPReq+0xfe>
 810d488:	683b      	ldr	r3, [r7, #0]
 810d48a:	88db      	ldrh	r3, [r3, #6]
 810d48c:	2b00      	cmp	r3, #0
 810d48e:	d104      	bne.n	810d49a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 810d490:	7bbb      	ldrb	r3, [r7, #14]
 810d492:	4619      	mov	r1, r3
 810d494:	6878      	ldr	r0, [r7, #4]
 810d496:	f001 fa11 	bl	810e8bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 810d49a:	6878      	ldr	r0, [r7, #4]
 810d49c:	f000 fd64 	bl	810df68 <USBD_CtlSendStatus>

              break;
 810d4a0:	e004      	b.n	810d4ac <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 810d4a2:	6839      	ldr	r1, [r7, #0]
 810d4a4:	6878      	ldr	r0, [r7, #4]
 810d4a6:	f000 fc88 	bl	810ddba <USBD_CtlError>
              break;
 810d4aa:	bf00      	nop
          }
          break;
 810d4ac:	e107      	b.n	810d6be <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 810d4ae:	687b      	ldr	r3, [r7, #4]
 810d4b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d4b4:	b2db      	uxtb	r3, r3
 810d4b6:	2b02      	cmp	r3, #2
 810d4b8:	d002      	beq.n	810d4c0 <USBD_StdEPReq+0x124>
 810d4ba:	2b03      	cmp	r3, #3
 810d4bc:	d016      	beq.n	810d4ec <USBD_StdEPReq+0x150>
 810d4be:	e04b      	b.n	810d558 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 810d4c0:	7bbb      	ldrb	r3, [r7, #14]
 810d4c2:	2b00      	cmp	r3, #0
 810d4c4:	d00d      	beq.n	810d4e2 <USBD_StdEPReq+0x146>
 810d4c6:	7bbb      	ldrb	r3, [r7, #14]
 810d4c8:	2b80      	cmp	r3, #128	@ 0x80
 810d4ca:	d00a      	beq.n	810d4e2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 810d4cc:	7bbb      	ldrb	r3, [r7, #14]
 810d4ce:	4619      	mov	r1, r3
 810d4d0:	6878      	ldr	r0, [r7, #4]
 810d4d2:	f001 f9f3 	bl	810e8bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 810d4d6:	2180      	movs	r1, #128	@ 0x80
 810d4d8:	6878      	ldr	r0, [r7, #4]
 810d4da:	f001 f9ef 	bl	810e8bc <USBD_LL_StallEP>
 810d4de:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 810d4e0:	e040      	b.n	810d564 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 810d4e2:	6839      	ldr	r1, [r7, #0]
 810d4e4:	6878      	ldr	r0, [r7, #4]
 810d4e6:	f000 fc68 	bl	810ddba <USBD_CtlError>
              break;
 810d4ea:	e03b      	b.n	810d564 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 810d4ec:	683b      	ldr	r3, [r7, #0]
 810d4ee:	885b      	ldrh	r3, [r3, #2]
 810d4f0:	2b00      	cmp	r3, #0
 810d4f2:	d136      	bne.n	810d562 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 810d4f4:	7bbb      	ldrb	r3, [r7, #14]
 810d4f6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810d4fa:	2b00      	cmp	r3, #0
 810d4fc:	d004      	beq.n	810d508 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 810d4fe:	7bbb      	ldrb	r3, [r7, #14]
 810d500:	4619      	mov	r1, r3
 810d502:	6878      	ldr	r0, [r7, #4]
 810d504:	f001 f9f9 	bl	810e8fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 810d508:	6878      	ldr	r0, [r7, #4]
 810d50a:	f000 fd2d 	bl	810df68 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 810d50e:	7bbb      	ldrb	r3, [r7, #14]
 810d510:	4619      	mov	r1, r3
 810d512:	6878      	ldr	r0, [r7, #4]
 810d514:	f7ff fde4 	bl	810d0e0 <USBD_CoreFindEP>
 810d518:	4603      	mov	r3, r0
 810d51a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 810d51c:	7b7b      	ldrb	r3, [r7, #13]
 810d51e:	2bff      	cmp	r3, #255	@ 0xff
 810d520:	d01f      	beq.n	810d562 <USBD_StdEPReq+0x1c6>
 810d522:	7b7b      	ldrb	r3, [r7, #13]
 810d524:	2b00      	cmp	r3, #0
 810d526:	d11c      	bne.n	810d562 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 810d528:	7b7a      	ldrb	r2, [r7, #13]
 810d52a:	687b      	ldr	r3, [r7, #4]
 810d52c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 810d530:	7b7a      	ldrb	r2, [r7, #13]
 810d532:	687b      	ldr	r3, [r7, #4]
 810d534:	32ae      	adds	r2, #174	@ 0xae
 810d536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d53a:	689b      	ldr	r3, [r3, #8]
 810d53c:	2b00      	cmp	r3, #0
 810d53e:	d010      	beq.n	810d562 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 810d540:	7b7a      	ldrb	r2, [r7, #13]
 810d542:	687b      	ldr	r3, [r7, #4]
 810d544:	32ae      	adds	r2, #174	@ 0xae
 810d546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810d54a:	689b      	ldr	r3, [r3, #8]
 810d54c:	6839      	ldr	r1, [r7, #0]
 810d54e:	6878      	ldr	r0, [r7, #4]
 810d550:	4798      	blx	r3
 810d552:	4603      	mov	r3, r0
 810d554:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 810d556:	e004      	b.n	810d562 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 810d558:	6839      	ldr	r1, [r7, #0]
 810d55a:	6878      	ldr	r0, [r7, #4]
 810d55c:	f000 fc2d 	bl	810ddba <USBD_CtlError>
              break;
 810d560:	e000      	b.n	810d564 <USBD_StdEPReq+0x1c8>
              break;
 810d562:	bf00      	nop
          }
          break;
 810d564:	e0ab      	b.n	810d6be <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 810d566:	687b      	ldr	r3, [r7, #4]
 810d568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810d56c:	b2db      	uxtb	r3, r3
 810d56e:	2b02      	cmp	r3, #2
 810d570:	d002      	beq.n	810d578 <USBD_StdEPReq+0x1dc>
 810d572:	2b03      	cmp	r3, #3
 810d574:	d032      	beq.n	810d5dc <USBD_StdEPReq+0x240>
 810d576:	e097      	b.n	810d6a8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 810d578:	7bbb      	ldrb	r3, [r7, #14]
 810d57a:	2b00      	cmp	r3, #0
 810d57c:	d007      	beq.n	810d58e <USBD_StdEPReq+0x1f2>
 810d57e:	7bbb      	ldrb	r3, [r7, #14]
 810d580:	2b80      	cmp	r3, #128	@ 0x80
 810d582:	d004      	beq.n	810d58e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 810d584:	6839      	ldr	r1, [r7, #0]
 810d586:	6878      	ldr	r0, [r7, #4]
 810d588:	f000 fc17 	bl	810ddba <USBD_CtlError>
                break;
 810d58c:	e091      	b.n	810d6b2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810d58e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d592:	2b00      	cmp	r3, #0
 810d594:	da0b      	bge.n	810d5ae <USBD_StdEPReq+0x212>
 810d596:	7bbb      	ldrb	r3, [r7, #14]
 810d598:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810d59c:	4613      	mov	r3, r2
 810d59e:	009b      	lsls	r3, r3, #2
 810d5a0:	4413      	add	r3, r2
 810d5a2:	009b      	lsls	r3, r3, #2
 810d5a4:	3310      	adds	r3, #16
 810d5a6:	687a      	ldr	r2, [r7, #4]
 810d5a8:	4413      	add	r3, r2
 810d5aa:	3304      	adds	r3, #4
 810d5ac:	e00b      	b.n	810d5c6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 810d5ae:	7bbb      	ldrb	r3, [r7, #14]
 810d5b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810d5b4:	4613      	mov	r3, r2
 810d5b6:	009b      	lsls	r3, r3, #2
 810d5b8:	4413      	add	r3, r2
 810d5ba:	009b      	lsls	r3, r3, #2
 810d5bc:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 810d5c0:	687a      	ldr	r2, [r7, #4]
 810d5c2:	4413      	add	r3, r2
 810d5c4:	3304      	adds	r3, #4
 810d5c6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 810d5c8:	68bb      	ldr	r3, [r7, #8]
 810d5ca:	2200      	movs	r2, #0
 810d5cc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 810d5ce:	68bb      	ldr	r3, [r7, #8]
 810d5d0:	2202      	movs	r2, #2
 810d5d2:	4619      	mov	r1, r3
 810d5d4:	6878      	ldr	r0, [r7, #4]
 810d5d6:	f000 fc6d 	bl	810deb4 <USBD_CtlSendData>
              break;
 810d5da:	e06a      	b.n	810d6b2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 810d5dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d5e0:	2b00      	cmp	r3, #0
 810d5e2:	da11      	bge.n	810d608 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 810d5e4:	7bbb      	ldrb	r3, [r7, #14]
 810d5e6:	f003 020f 	and.w	r2, r3, #15
 810d5ea:	6879      	ldr	r1, [r7, #4]
 810d5ec:	4613      	mov	r3, r2
 810d5ee:	009b      	lsls	r3, r3, #2
 810d5f0:	4413      	add	r3, r2
 810d5f2:	009b      	lsls	r3, r3, #2
 810d5f4:	440b      	add	r3, r1
 810d5f6:	3324      	adds	r3, #36	@ 0x24
 810d5f8:	881b      	ldrh	r3, [r3, #0]
 810d5fa:	2b00      	cmp	r3, #0
 810d5fc:	d117      	bne.n	810d62e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 810d5fe:	6839      	ldr	r1, [r7, #0]
 810d600:	6878      	ldr	r0, [r7, #4]
 810d602:	f000 fbda 	bl	810ddba <USBD_CtlError>
                  break;
 810d606:	e054      	b.n	810d6b2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 810d608:	7bbb      	ldrb	r3, [r7, #14]
 810d60a:	f003 020f 	and.w	r2, r3, #15
 810d60e:	6879      	ldr	r1, [r7, #4]
 810d610:	4613      	mov	r3, r2
 810d612:	009b      	lsls	r3, r3, #2
 810d614:	4413      	add	r3, r2
 810d616:	009b      	lsls	r3, r3, #2
 810d618:	440b      	add	r3, r1
 810d61a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 810d61e:	881b      	ldrh	r3, [r3, #0]
 810d620:	2b00      	cmp	r3, #0
 810d622:	d104      	bne.n	810d62e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 810d624:	6839      	ldr	r1, [r7, #0]
 810d626:	6878      	ldr	r0, [r7, #4]
 810d628:	f000 fbc7 	bl	810ddba <USBD_CtlError>
                  break;
 810d62c:	e041      	b.n	810d6b2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810d62e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 810d632:	2b00      	cmp	r3, #0
 810d634:	da0b      	bge.n	810d64e <USBD_StdEPReq+0x2b2>
 810d636:	7bbb      	ldrb	r3, [r7, #14]
 810d638:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810d63c:	4613      	mov	r3, r2
 810d63e:	009b      	lsls	r3, r3, #2
 810d640:	4413      	add	r3, r2
 810d642:	009b      	lsls	r3, r3, #2
 810d644:	3310      	adds	r3, #16
 810d646:	687a      	ldr	r2, [r7, #4]
 810d648:	4413      	add	r3, r2
 810d64a:	3304      	adds	r3, #4
 810d64c:	e00b      	b.n	810d666 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 810d64e:	7bbb      	ldrb	r3, [r7, #14]
 810d650:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 810d654:	4613      	mov	r3, r2
 810d656:	009b      	lsls	r3, r3, #2
 810d658:	4413      	add	r3, r2
 810d65a:	009b      	lsls	r3, r3, #2
 810d65c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 810d660:	687a      	ldr	r2, [r7, #4]
 810d662:	4413      	add	r3, r2
 810d664:	3304      	adds	r3, #4
 810d666:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 810d668:	7bbb      	ldrb	r3, [r7, #14]
 810d66a:	2b00      	cmp	r3, #0
 810d66c:	d002      	beq.n	810d674 <USBD_StdEPReq+0x2d8>
 810d66e:	7bbb      	ldrb	r3, [r7, #14]
 810d670:	2b80      	cmp	r3, #128	@ 0x80
 810d672:	d103      	bne.n	810d67c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 810d674:	68bb      	ldr	r3, [r7, #8]
 810d676:	2200      	movs	r2, #0
 810d678:	601a      	str	r2, [r3, #0]
 810d67a:	e00e      	b.n	810d69a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 810d67c:	7bbb      	ldrb	r3, [r7, #14]
 810d67e:	4619      	mov	r1, r3
 810d680:	6878      	ldr	r0, [r7, #4]
 810d682:	f001 f959 	bl	810e938 <USBD_LL_IsStallEP>
 810d686:	4603      	mov	r3, r0
 810d688:	2b00      	cmp	r3, #0
 810d68a:	d003      	beq.n	810d694 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 810d68c:	68bb      	ldr	r3, [r7, #8]
 810d68e:	2201      	movs	r2, #1
 810d690:	601a      	str	r2, [r3, #0]
 810d692:	e002      	b.n	810d69a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 810d694:	68bb      	ldr	r3, [r7, #8]
 810d696:	2200      	movs	r2, #0
 810d698:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 810d69a:	68bb      	ldr	r3, [r7, #8]
 810d69c:	2202      	movs	r2, #2
 810d69e:	4619      	mov	r1, r3
 810d6a0:	6878      	ldr	r0, [r7, #4]
 810d6a2:	f000 fc07 	bl	810deb4 <USBD_CtlSendData>
              break;
 810d6a6:	e004      	b.n	810d6b2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 810d6a8:	6839      	ldr	r1, [r7, #0]
 810d6aa:	6878      	ldr	r0, [r7, #4]
 810d6ac:	f000 fb85 	bl	810ddba <USBD_CtlError>
              break;
 810d6b0:	bf00      	nop
          }
          break;
 810d6b2:	e004      	b.n	810d6be <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 810d6b4:	6839      	ldr	r1, [r7, #0]
 810d6b6:	6878      	ldr	r0, [r7, #4]
 810d6b8:	f000 fb7f 	bl	810ddba <USBD_CtlError>
          break;
 810d6bc:	bf00      	nop
      }
      break;
 810d6be:	e005      	b.n	810d6cc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 810d6c0:	6839      	ldr	r1, [r7, #0]
 810d6c2:	6878      	ldr	r0, [r7, #4]
 810d6c4:	f000 fb79 	bl	810ddba <USBD_CtlError>
      break;
 810d6c8:	e000      	b.n	810d6cc <USBD_StdEPReq+0x330>
      break;
 810d6ca:	bf00      	nop
  }

  return ret;
 810d6cc:	7bfb      	ldrb	r3, [r7, #15]
}
 810d6ce:	4618      	mov	r0, r3
 810d6d0:	3710      	adds	r7, #16
 810d6d2:	46bd      	mov	sp, r7
 810d6d4:	bd80      	pop	{r7, pc}
	...

0810d6d8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810d6d8:	b580      	push	{r7, lr}
 810d6da:	b084      	sub	sp, #16
 810d6dc:	af00      	add	r7, sp, #0
 810d6de:	6078      	str	r0, [r7, #4]
 810d6e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 810d6e2:	2300      	movs	r3, #0
 810d6e4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 810d6e6:	2300      	movs	r3, #0
 810d6e8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 810d6ea:	2300      	movs	r3, #0
 810d6ec:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 810d6ee:	683b      	ldr	r3, [r7, #0]
 810d6f0:	885b      	ldrh	r3, [r3, #2]
 810d6f2:	0a1b      	lsrs	r3, r3, #8
 810d6f4:	b29b      	uxth	r3, r3
 810d6f6:	3b01      	subs	r3, #1
 810d6f8:	2b0e      	cmp	r3, #14
 810d6fa:	f200 8152 	bhi.w	810d9a2 <USBD_GetDescriptor+0x2ca>
 810d6fe:	a201      	add	r2, pc, #4	@ (adr r2, 810d704 <USBD_GetDescriptor+0x2c>)
 810d700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d704:	0810d775 	.word	0x0810d775
 810d708:	0810d78d 	.word	0x0810d78d
 810d70c:	0810d7cd 	.word	0x0810d7cd
 810d710:	0810d9a3 	.word	0x0810d9a3
 810d714:	0810d9a3 	.word	0x0810d9a3
 810d718:	0810d943 	.word	0x0810d943
 810d71c:	0810d96f 	.word	0x0810d96f
 810d720:	0810d9a3 	.word	0x0810d9a3
 810d724:	0810d9a3 	.word	0x0810d9a3
 810d728:	0810d9a3 	.word	0x0810d9a3
 810d72c:	0810d9a3 	.word	0x0810d9a3
 810d730:	0810d9a3 	.word	0x0810d9a3
 810d734:	0810d9a3 	.word	0x0810d9a3
 810d738:	0810d9a3 	.word	0x0810d9a3
 810d73c:	0810d741 	.word	0x0810d741
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 810d740:	687b      	ldr	r3, [r7, #4]
 810d742:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d746:	69db      	ldr	r3, [r3, #28]
 810d748:	2b00      	cmp	r3, #0
 810d74a:	d00b      	beq.n	810d764 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 810d74c:	687b      	ldr	r3, [r7, #4]
 810d74e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d752:	69db      	ldr	r3, [r3, #28]
 810d754:	687a      	ldr	r2, [r7, #4]
 810d756:	7c12      	ldrb	r2, [r2, #16]
 810d758:	f107 0108 	add.w	r1, r7, #8
 810d75c:	4610      	mov	r0, r2
 810d75e:	4798      	blx	r3
 810d760:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810d762:	e126      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810d764:	6839      	ldr	r1, [r7, #0]
 810d766:	6878      	ldr	r0, [r7, #4]
 810d768:	f000 fb27 	bl	810ddba <USBD_CtlError>
        err++;
 810d76c:	7afb      	ldrb	r3, [r7, #11]
 810d76e:	3301      	adds	r3, #1
 810d770:	72fb      	strb	r3, [r7, #11]
      break;
 810d772:	e11e      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 810d774:	687b      	ldr	r3, [r7, #4]
 810d776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d77a:	681b      	ldr	r3, [r3, #0]
 810d77c:	687a      	ldr	r2, [r7, #4]
 810d77e:	7c12      	ldrb	r2, [r2, #16]
 810d780:	f107 0108 	add.w	r1, r7, #8
 810d784:	4610      	mov	r0, r2
 810d786:	4798      	blx	r3
 810d788:	60f8      	str	r0, [r7, #12]
      break;
 810d78a:	e112      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810d78c:	687b      	ldr	r3, [r7, #4]
 810d78e:	7c1b      	ldrb	r3, [r3, #16]
 810d790:	2b00      	cmp	r3, #0
 810d792:	d10d      	bne.n	810d7b0 <USBD_GetDescriptor+0xd8>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 810d794:	687b      	ldr	r3, [r7, #4]
 810d796:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810d79c:	f107 0208 	add.w	r2, r7, #8
 810d7a0:	4610      	mov	r0, r2
 810d7a2:	4798      	blx	r3
 810d7a4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 810d7a6:	68fb      	ldr	r3, [r7, #12]
 810d7a8:	3301      	adds	r3, #1
 810d7aa:	2202      	movs	r2, #2
 810d7ac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 810d7ae:	e100      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 810d7b0:	687b      	ldr	r3, [r7, #4]
 810d7b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d7b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810d7b8:	f107 0208 	add.w	r2, r7, #8
 810d7bc:	4610      	mov	r0, r2
 810d7be:	4798      	blx	r3
 810d7c0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 810d7c2:	68fb      	ldr	r3, [r7, #12]
 810d7c4:	3301      	adds	r3, #1
 810d7c6:	2202      	movs	r2, #2
 810d7c8:	701a      	strb	r2, [r3, #0]
      break;
 810d7ca:	e0f2      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 810d7cc:	683b      	ldr	r3, [r7, #0]
 810d7ce:	885b      	ldrh	r3, [r3, #2]
 810d7d0:	b2db      	uxtb	r3, r3
 810d7d2:	2b05      	cmp	r3, #5
 810d7d4:	f200 80ac 	bhi.w	810d930 <USBD_GetDescriptor+0x258>
 810d7d8:	a201      	add	r2, pc, #4	@ (adr r2, 810d7e0 <USBD_GetDescriptor+0x108>)
 810d7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810d7de:	bf00      	nop
 810d7e0:	0810d7f9 	.word	0x0810d7f9
 810d7e4:	0810d82d 	.word	0x0810d82d
 810d7e8:	0810d861 	.word	0x0810d861
 810d7ec:	0810d895 	.word	0x0810d895
 810d7f0:	0810d8c9 	.word	0x0810d8c9
 810d7f4:	0810d8fd 	.word	0x0810d8fd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 810d7f8:	687b      	ldr	r3, [r7, #4]
 810d7fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d7fe:	685b      	ldr	r3, [r3, #4]
 810d800:	2b00      	cmp	r3, #0
 810d802:	d00b      	beq.n	810d81c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 810d804:	687b      	ldr	r3, [r7, #4]
 810d806:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d80a:	685b      	ldr	r3, [r3, #4]
 810d80c:	687a      	ldr	r2, [r7, #4]
 810d80e:	7c12      	ldrb	r2, [r2, #16]
 810d810:	f107 0108 	add.w	r1, r7, #8
 810d814:	4610      	mov	r0, r2
 810d816:	4798      	blx	r3
 810d818:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d81a:	e091      	b.n	810d940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d81c:	6839      	ldr	r1, [r7, #0]
 810d81e:	6878      	ldr	r0, [r7, #4]
 810d820:	f000 facb 	bl	810ddba <USBD_CtlError>
            err++;
 810d824:	7afb      	ldrb	r3, [r7, #11]
 810d826:	3301      	adds	r3, #1
 810d828:	72fb      	strb	r3, [r7, #11]
          break;
 810d82a:	e089      	b.n	810d940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 810d82c:	687b      	ldr	r3, [r7, #4]
 810d82e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d832:	689b      	ldr	r3, [r3, #8]
 810d834:	2b00      	cmp	r3, #0
 810d836:	d00b      	beq.n	810d850 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 810d838:	687b      	ldr	r3, [r7, #4]
 810d83a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d83e:	689b      	ldr	r3, [r3, #8]
 810d840:	687a      	ldr	r2, [r7, #4]
 810d842:	7c12      	ldrb	r2, [r2, #16]
 810d844:	f107 0108 	add.w	r1, r7, #8
 810d848:	4610      	mov	r0, r2
 810d84a:	4798      	blx	r3
 810d84c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d84e:	e077      	b.n	810d940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d850:	6839      	ldr	r1, [r7, #0]
 810d852:	6878      	ldr	r0, [r7, #4]
 810d854:	f000 fab1 	bl	810ddba <USBD_CtlError>
            err++;
 810d858:	7afb      	ldrb	r3, [r7, #11]
 810d85a:	3301      	adds	r3, #1
 810d85c:	72fb      	strb	r3, [r7, #11]
          break;
 810d85e:	e06f      	b.n	810d940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 810d860:	687b      	ldr	r3, [r7, #4]
 810d862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d866:	68db      	ldr	r3, [r3, #12]
 810d868:	2b00      	cmp	r3, #0
 810d86a:	d00b      	beq.n	810d884 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 810d86c:	687b      	ldr	r3, [r7, #4]
 810d86e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d872:	68db      	ldr	r3, [r3, #12]
 810d874:	687a      	ldr	r2, [r7, #4]
 810d876:	7c12      	ldrb	r2, [r2, #16]
 810d878:	f107 0108 	add.w	r1, r7, #8
 810d87c:	4610      	mov	r0, r2
 810d87e:	4798      	blx	r3
 810d880:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d882:	e05d      	b.n	810d940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d884:	6839      	ldr	r1, [r7, #0]
 810d886:	6878      	ldr	r0, [r7, #4]
 810d888:	f000 fa97 	bl	810ddba <USBD_CtlError>
            err++;
 810d88c:	7afb      	ldrb	r3, [r7, #11]
 810d88e:	3301      	adds	r3, #1
 810d890:	72fb      	strb	r3, [r7, #11]
          break;
 810d892:	e055      	b.n	810d940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 810d894:	687b      	ldr	r3, [r7, #4]
 810d896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d89a:	691b      	ldr	r3, [r3, #16]
 810d89c:	2b00      	cmp	r3, #0
 810d89e:	d00b      	beq.n	810d8b8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 810d8a0:	687b      	ldr	r3, [r7, #4]
 810d8a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d8a6:	691b      	ldr	r3, [r3, #16]
 810d8a8:	687a      	ldr	r2, [r7, #4]
 810d8aa:	7c12      	ldrb	r2, [r2, #16]
 810d8ac:	f107 0108 	add.w	r1, r7, #8
 810d8b0:	4610      	mov	r0, r2
 810d8b2:	4798      	blx	r3
 810d8b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d8b6:	e043      	b.n	810d940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d8b8:	6839      	ldr	r1, [r7, #0]
 810d8ba:	6878      	ldr	r0, [r7, #4]
 810d8bc:	f000 fa7d 	bl	810ddba <USBD_CtlError>
            err++;
 810d8c0:	7afb      	ldrb	r3, [r7, #11]
 810d8c2:	3301      	adds	r3, #1
 810d8c4:	72fb      	strb	r3, [r7, #11]
          break;
 810d8c6:	e03b      	b.n	810d940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 810d8c8:	687b      	ldr	r3, [r7, #4]
 810d8ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d8ce:	695b      	ldr	r3, [r3, #20]
 810d8d0:	2b00      	cmp	r3, #0
 810d8d2:	d00b      	beq.n	810d8ec <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 810d8d4:	687b      	ldr	r3, [r7, #4]
 810d8d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d8da:	695b      	ldr	r3, [r3, #20]
 810d8dc:	687a      	ldr	r2, [r7, #4]
 810d8de:	7c12      	ldrb	r2, [r2, #16]
 810d8e0:	f107 0108 	add.w	r1, r7, #8
 810d8e4:	4610      	mov	r0, r2
 810d8e6:	4798      	blx	r3
 810d8e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d8ea:	e029      	b.n	810d940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d8ec:	6839      	ldr	r1, [r7, #0]
 810d8ee:	6878      	ldr	r0, [r7, #4]
 810d8f0:	f000 fa63 	bl	810ddba <USBD_CtlError>
            err++;
 810d8f4:	7afb      	ldrb	r3, [r7, #11]
 810d8f6:	3301      	adds	r3, #1
 810d8f8:	72fb      	strb	r3, [r7, #11]
          break;
 810d8fa:	e021      	b.n	810d940 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 810d8fc:	687b      	ldr	r3, [r7, #4]
 810d8fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d902:	699b      	ldr	r3, [r3, #24]
 810d904:	2b00      	cmp	r3, #0
 810d906:	d00b      	beq.n	810d920 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 810d908:	687b      	ldr	r3, [r7, #4]
 810d90a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 810d90e:	699b      	ldr	r3, [r3, #24]
 810d910:	687a      	ldr	r2, [r7, #4]
 810d912:	7c12      	ldrb	r2, [r2, #16]
 810d914:	f107 0108 	add.w	r1, r7, #8
 810d918:	4610      	mov	r0, r2
 810d91a:	4798      	blx	r3
 810d91c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 810d91e:	e00f      	b.n	810d940 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 810d920:	6839      	ldr	r1, [r7, #0]
 810d922:	6878      	ldr	r0, [r7, #4]
 810d924:	f000 fa49 	bl	810ddba <USBD_CtlError>
            err++;
 810d928:	7afb      	ldrb	r3, [r7, #11]
 810d92a:	3301      	adds	r3, #1
 810d92c:	72fb      	strb	r3, [r7, #11]
          break;
 810d92e:	e007      	b.n	810d940 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 810d930:	6839      	ldr	r1, [r7, #0]
 810d932:	6878      	ldr	r0, [r7, #4]
 810d934:	f000 fa41 	bl	810ddba <USBD_CtlError>
          err++;
 810d938:	7afb      	ldrb	r3, [r7, #11]
 810d93a:	3301      	adds	r3, #1
 810d93c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 810d93e:	bf00      	nop
      }
      break;
 810d940:	e037      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810d942:	687b      	ldr	r3, [r7, #4]
 810d944:	7c1b      	ldrb	r3, [r3, #16]
 810d946:	2b00      	cmp	r3, #0
 810d948:	d109      	bne.n	810d95e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 810d94a:	687b      	ldr	r3, [r7, #4]
 810d94c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810d952:	f107 0208 	add.w	r2, r7, #8
 810d956:	4610      	mov	r0, r2
 810d958:	4798      	blx	r3
 810d95a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810d95c:	e029      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810d95e:	6839      	ldr	r1, [r7, #0]
 810d960:	6878      	ldr	r0, [r7, #4]
 810d962:	f000 fa2a 	bl	810ddba <USBD_CtlError>
        err++;
 810d966:	7afb      	ldrb	r3, [r7, #11]
 810d968:	3301      	adds	r3, #1
 810d96a:	72fb      	strb	r3, [r7, #11]
      break;
 810d96c:	e021      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 810d96e:	687b      	ldr	r3, [r7, #4]
 810d970:	7c1b      	ldrb	r3, [r3, #16]
 810d972:	2b00      	cmp	r3, #0
 810d974:	d10d      	bne.n	810d992 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 810d976:	687b      	ldr	r3, [r7, #4]
 810d978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 810d97c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810d97e:	f107 0208 	add.w	r2, r7, #8
 810d982:	4610      	mov	r0, r2
 810d984:	4798      	blx	r3
 810d986:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 810d988:	68fb      	ldr	r3, [r7, #12]
 810d98a:	3301      	adds	r3, #1
 810d98c:	2207      	movs	r2, #7
 810d98e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 810d990:	e00f      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 810d992:	6839      	ldr	r1, [r7, #0]
 810d994:	6878      	ldr	r0, [r7, #4]
 810d996:	f000 fa10 	bl	810ddba <USBD_CtlError>
        err++;
 810d99a:	7afb      	ldrb	r3, [r7, #11]
 810d99c:	3301      	adds	r3, #1
 810d99e:	72fb      	strb	r3, [r7, #11]
      break;
 810d9a0:	e007      	b.n	810d9b2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 810d9a2:	6839      	ldr	r1, [r7, #0]
 810d9a4:	6878      	ldr	r0, [r7, #4]
 810d9a6:	f000 fa08 	bl	810ddba <USBD_CtlError>
      err++;
 810d9aa:	7afb      	ldrb	r3, [r7, #11]
 810d9ac:	3301      	adds	r3, #1
 810d9ae:	72fb      	strb	r3, [r7, #11]
      break;
 810d9b0:	bf00      	nop
  }

  if (err != 0U)
 810d9b2:	7afb      	ldrb	r3, [r7, #11]
 810d9b4:	2b00      	cmp	r3, #0
 810d9b6:	d11e      	bne.n	810d9f6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 810d9b8:	683b      	ldr	r3, [r7, #0]
 810d9ba:	88db      	ldrh	r3, [r3, #6]
 810d9bc:	2b00      	cmp	r3, #0
 810d9be:	d016      	beq.n	810d9ee <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 810d9c0:	893b      	ldrh	r3, [r7, #8]
 810d9c2:	2b00      	cmp	r3, #0
 810d9c4:	d00e      	beq.n	810d9e4 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 810d9c6:	683b      	ldr	r3, [r7, #0]
 810d9c8:	88da      	ldrh	r2, [r3, #6]
 810d9ca:	893b      	ldrh	r3, [r7, #8]
 810d9cc:	4293      	cmp	r3, r2
 810d9ce:	bf28      	it	cs
 810d9d0:	4613      	movcs	r3, r2
 810d9d2:	b29b      	uxth	r3, r3
 810d9d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 810d9d6:	893b      	ldrh	r3, [r7, #8]
 810d9d8:	461a      	mov	r2, r3
 810d9da:	68f9      	ldr	r1, [r7, #12]
 810d9dc:	6878      	ldr	r0, [r7, #4]
 810d9de:	f000 fa69 	bl	810deb4 <USBD_CtlSendData>
 810d9e2:	e009      	b.n	810d9f8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 810d9e4:	6839      	ldr	r1, [r7, #0]
 810d9e6:	6878      	ldr	r0, [r7, #4]
 810d9e8:	f000 f9e7 	bl	810ddba <USBD_CtlError>
 810d9ec:	e004      	b.n	810d9f8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 810d9ee:	6878      	ldr	r0, [r7, #4]
 810d9f0:	f000 faba 	bl	810df68 <USBD_CtlSendStatus>
 810d9f4:	e000      	b.n	810d9f8 <USBD_GetDescriptor+0x320>
    return;
 810d9f6:	bf00      	nop
  }
}
 810d9f8:	3710      	adds	r7, #16
 810d9fa:	46bd      	mov	sp, r7
 810d9fc:	bd80      	pop	{r7, pc}
 810d9fe:	bf00      	nop

0810da00 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810da00:	b580      	push	{r7, lr}
 810da02:	b084      	sub	sp, #16
 810da04:	af00      	add	r7, sp, #0
 810da06:	6078      	str	r0, [r7, #4]
 810da08:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 810da0a:	683b      	ldr	r3, [r7, #0]
 810da0c:	889b      	ldrh	r3, [r3, #4]
 810da0e:	2b00      	cmp	r3, #0
 810da10:	d131      	bne.n	810da76 <USBD_SetAddress+0x76>
 810da12:	683b      	ldr	r3, [r7, #0]
 810da14:	88db      	ldrh	r3, [r3, #6]
 810da16:	2b00      	cmp	r3, #0
 810da18:	d12d      	bne.n	810da76 <USBD_SetAddress+0x76>
 810da1a:	683b      	ldr	r3, [r7, #0]
 810da1c:	885b      	ldrh	r3, [r3, #2]
 810da1e:	2b7f      	cmp	r3, #127	@ 0x7f
 810da20:	d829      	bhi.n	810da76 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 810da22:	683b      	ldr	r3, [r7, #0]
 810da24:	885b      	ldrh	r3, [r3, #2]
 810da26:	b2db      	uxtb	r3, r3
 810da28:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 810da2c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810da2e:	687b      	ldr	r3, [r7, #4]
 810da30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810da34:	b2db      	uxtb	r3, r3
 810da36:	2b03      	cmp	r3, #3
 810da38:	d104      	bne.n	810da44 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 810da3a:	6839      	ldr	r1, [r7, #0]
 810da3c:	6878      	ldr	r0, [r7, #4]
 810da3e:	f000 f9bc 	bl	810ddba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810da42:	e01d      	b.n	810da80 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 810da44:	687b      	ldr	r3, [r7, #4]
 810da46:	7bfa      	ldrb	r2, [r7, #15]
 810da48:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 810da4c:	7bfb      	ldrb	r3, [r7, #15]
 810da4e:	4619      	mov	r1, r3
 810da50:	6878      	ldr	r0, [r7, #4]
 810da52:	f000 ff9d 	bl	810e990 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 810da56:	6878      	ldr	r0, [r7, #4]
 810da58:	f000 fa86 	bl	810df68 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 810da5c:	7bfb      	ldrb	r3, [r7, #15]
 810da5e:	2b00      	cmp	r3, #0
 810da60:	d004      	beq.n	810da6c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 810da62:	687b      	ldr	r3, [r7, #4]
 810da64:	2202      	movs	r2, #2
 810da66:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810da6a:	e009      	b.n	810da80 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 810da6c:	687b      	ldr	r3, [r7, #4]
 810da6e:	2201      	movs	r2, #1
 810da70:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 810da74:	e004      	b.n	810da80 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 810da76:	6839      	ldr	r1, [r7, #0]
 810da78:	6878      	ldr	r0, [r7, #4]
 810da7a:	f000 f99e 	bl	810ddba <USBD_CtlError>
  }
}
 810da7e:	bf00      	nop
 810da80:	bf00      	nop
 810da82:	3710      	adds	r7, #16
 810da84:	46bd      	mov	sp, r7
 810da86:	bd80      	pop	{r7, pc}

0810da88 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810da88:	b580      	push	{r7, lr}
 810da8a:	b084      	sub	sp, #16
 810da8c:	af00      	add	r7, sp, #0
 810da8e:	6078      	str	r0, [r7, #4]
 810da90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 810da92:	2300      	movs	r3, #0
 810da94:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 810da96:	683b      	ldr	r3, [r7, #0]
 810da98:	885b      	ldrh	r3, [r3, #2]
 810da9a:	b2da      	uxtb	r2, r3
 810da9c:	4b4e      	ldr	r3, [pc, #312]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810da9e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 810daa0:	4b4d      	ldr	r3, [pc, #308]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810daa2:	781b      	ldrb	r3, [r3, #0]
 810daa4:	2b01      	cmp	r3, #1
 810daa6:	d905      	bls.n	810dab4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 810daa8:	6839      	ldr	r1, [r7, #0]
 810daaa:	6878      	ldr	r0, [r7, #4]
 810daac:	f000 f985 	bl	810ddba <USBD_CtlError>
    return USBD_FAIL;
 810dab0:	2303      	movs	r3, #3
 810dab2:	e08c      	b.n	810dbce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 810dab4:	687b      	ldr	r3, [r7, #4]
 810dab6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810daba:	b2db      	uxtb	r3, r3
 810dabc:	2b02      	cmp	r3, #2
 810dabe:	d002      	beq.n	810dac6 <USBD_SetConfig+0x3e>
 810dac0:	2b03      	cmp	r3, #3
 810dac2:	d029      	beq.n	810db18 <USBD_SetConfig+0x90>
 810dac4:	e075      	b.n	810dbb2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 810dac6:	4b44      	ldr	r3, [pc, #272]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810dac8:	781b      	ldrb	r3, [r3, #0]
 810daca:	2b00      	cmp	r3, #0
 810dacc:	d020      	beq.n	810db10 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 810dace:	4b42      	ldr	r3, [pc, #264]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810dad0:	781b      	ldrb	r3, [r3, #0]
 810dad2:	461a      	mov	r2, r3
 810dad4:	687b      	ldr	r3, [r7, #4]
 810dad6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 810dad8:	4b3f      	ldr	r3, [pc, #252]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810dada:	781b      	ldrb	r3, [r3, #0]
 810dadc:	4619      	mov	r1, r3
 810dade:	6878      	ldr	r0, [r7, #4]
 810dae0:	f7fe ffb9 	bl	810ca56 <USBD_SetClassConfig>
 810dae4:	4603      	mov	r3, r0
 810dae6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 810dae8:	7bfb      	ldrb	r3, [r7, #15]
 810daea:	2b00      	cmp	r3, #0
 810daec:	d008      	beq.n	810db00 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 810daee:	6839      	ldr	r1, [r7, #0]
 810daf0:	6878      	ldr	r0, [r7, #4]
 810daf2:	f000 f962 	bl	810ddba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 810daf6:	687b      	ldr	r3, [r7, #4]
 810daf8:	2202      	movs	r2, #2
 810dafa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 810dafe:	e065      	b.n	810dbcc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 810db00:	6878      	ldr	r0, [r7, #4]
 810db02:	f000 fa31 	bl	810df68 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 810db06:	687b      	ldr	r3, [r7, #4]
 810db08:	2203      	movs	r2, #3
 810db0a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 810db0e:	e05d      	b.n	810dbcc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 810db10:	6878      	ldr	r0, [r7, #4]
 810db12:	f000 fa29 	bl	810df68 <USBD_CtlSendStatus>
      break;
 810db16:	e059      	b.n	810dbcc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 810db18:	4b2f      	ldr	r3, [pc, #188]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810db1a:	781b      	ldrb	r3, [r3, #0]
 810db1c:	2b00      	cmp	r3, #0
 810db1e:	d112      	bne.n	810db46 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 810db20:	687b      	ldr	r3, [r7, #4]
 810db22:	2202      	movs	r2, #2
 810db24:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 810db28:	4b2b      	ldr	r3, [pc, #172]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810db2a:	781b      	ldrb	r3, [r3, #0]
 810db2c:	461a      	mov	r2, r3
 810db2e:	687b      	ldr	r3, [r7, #4]
 810db30:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 810db32:	4b29      	ldr	r3, [pc, #164]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810db34:	781b      	ldrb	r3, [r3, #0]
 810db36:	4619      	mov	r1, r3
 810db38:	6878      	ldr	r0, [r7, #4]
 810db3a:	f7fe ffa8 	bl	810ca8e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 810db3e:	6878      	ldr	r0, [r7, #4]
 810db40:	f000 fa12 	bl	810df68 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 810db44:	e042      	b.n	810dbcc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 810db46:	4b24      	ldr	r3, [pc, #144]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810db48:	781b      	ldrb	r3, [r3, #0]
 810db4a:	461a      	mov	r2, r3
 810db4c:	687b      	ldr	r3, [r7, #4]
 810db4e:	685b      	ldr	r3, [r3, #4]
 810db50:	429a      	cmp	r2, r3
 810db52:	d02a      	beq.n	810dbaa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 810db54:	687b      	ldr	r3, [r7, #4]
 810db56:	685b      	ldr	r3, [r3, #4]
 810db58:	b2db      	uxtb	r3, r3
 810db5a:	4619      	mov	r1, r3
 810db5c:	6878      	ldr	r0, [r7, #4]
 810db5e:	f7fe ff96 	bl	810ca8e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 810db62:	4b1d      	ldr	r3, [pc, #116]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810db64:	781b      	ldrb	r3, [r3, #0]
 810db66:	461a      	mov	r2, r3
 810db68:	687b      	ldr	r3, [r7, #4]
 810db6a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 810db6c:	4b1a      	ldr	r3, [pc, #104]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810db6e:	781b      	ldrb	r3, [r3, #0]
 810db70:	4619      	mov	r1, r3
 810db72:	6878      	ldr	r0, [r7, #4]
 810db74:	f7fe ff6f 	bl	810ca56 <USBD_SetClassConfig>
 810db78:	4603      	mov	r3, r0
 810db7a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 810db7c:	7bfb      	ldrb	r3, [r7, #15]
 810db7e:	2b00      	cmp	r3, #0
 810db80:	d00f      	beq.n	810dba2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 810db82:	6839      	ldr	r1, [r7, #0]
 810db84:	6878      	ldr	r0, [r7, #4]
 810db86:	f000 f918 	bl	810ddba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 810db8a:	687b      	ldr	r3, [r7, #4]
 810db8c:	685b      	ldr	r3, [r3, #4]
 810db8e:	b2db      	uxtb	r3, r3
 810db90:	4619      	mov	r1, r3
 810db92:	6878      	ldr	r0, [r7, #4]
 810db94:	f7fe ff7b 	bl	810ca8e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 810db98:	687b      	ldr	r3, [r7, #4]
 810db9a:	2202      	movs	r2, #2
 810db9c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 810dba0:	e014      	b.n	810dbcc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 810dba2:	6878      	ldr	r0, [r7, #4]
 810dba4:	f000 f9e0 	bl	810df68 <USBD_CtlSendStatus>
      break;
 810dba8:	e010      	b.n	810dbcc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 810dbaa:	6878      	ldr	r0, [r7, #4]
 810dbac:	f000 f9dc 	bl	810df68 <USBD_CtlSendStatus>
      break;
 810dbb0:	e00c      	b.n	810dbcc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 810dbb2:	6839      	ldr	r1, [r7, #0]
 810dbb4:	6878      	ldr	r0, [r7, #4]
 810dbb6:	f000 f900 	bl	810ddba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 810dbba:	4b07      	ldr	r3, [pc, #28]	@ (810dbd8 <USBD_SetConfig+0x150>)
 810dbbc:	781b      	ldrb	r3, [r3, #0]
 810dbbe:	4619      	mov	r1, r3
 810dbc0:	6878      	ldr	r0, [r7, #4]
 810dbc2:	f7fe ff64 	bl	810ca8e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 810dbc6:	2303      	movs	r3, #3
 810dbc8:	73fb      	strb	r3, [r7, #15]
      break;
 810dbca:	bf00      	nop
  }

  return ret;
 810dbcc:	7bfb      	ldrb	r3, [r7, #15]
}
 810dbce:	4618      	mov	r0, r3
 810dbd0:	3710      	adds	r7, #16
 810dbd2:	46bd      	mov	sp, r7
 810dbd4:	bd80      	pop	{r7, pc}
 810dbd6:	bf00      	nop
 810dbd8:	10034f94 	.word	0x10034f94

0810dbdc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dbdc:	b580      	push	{r7, lr}
 810dbde:	b082      	sub	sp, #8
 810dbe0:	af00      	add	r7, sp, #0
 810dbe2:	6078      	str	r0, [r7, #4]
 810dbe4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 810dbe6:	683b      	ldr	r3, [r7, #0]
 810dbe8:	88db      	ldrh	r3, [r3, #6]
 810dbea:	2b01      	cmp	r3, #1
 810dbec:	d004      	beq.n	810dbf8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 810dbee:	6839      	ldr	r1, [r7, #0]
 810dbf0:	6878      	ldr	r0, [r7, #4]
 810dbf2:	f000 f8e2 	bl	810ddba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 810dbf6:	e023      	b.n	810dc40 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 810dbf8:	687b      	ldr	r3, [r7, #4]
 810dbfa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810dbfe:	b2db      	uxtb	r3, r3
 810dc00:	2b02      	cmp	r3, #2
 810dc02:	dc02      	bgt.n	810dc0a <USBD_GetConfig+0x2e>
 810dc04:	2b00      	cmp	r3, #0
 810dc06:	dc03      	bgt.n	810dc10 <USBD_GetConfig+0x34>
 810dc08:	e015      	b.n	810dc36 <USBD_GetConfig+0x5a>
 810dc0a:	2b03      	cmp	r3, #3
 810dc0c:	d00b      	beq.n	810dc26 <USBD_GetConfig+0x4a>
 810dc0e:	e012      	b.n	810dc36 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 810dc10:	687b      	ldr	r3, [r7, #4]
 810dc12:	2200      	movs	r2, #0
 810dc14:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 810dc16:	687b      	ldr	r3, [r7, #4]
 810dc18:	3308      	adds	r3, #8
 810dc1a:	2201      	movs	r2, #1
 810dc1c:	4619      	mov	r1, r3
 810dc1e:	6878      	ldr	r0, [r7, #4]
 810dc20:	f000 f948 	bl	810deb4 <USBD_CtlSendData>
        break;
 810dc24:	e00c      	b.n	810dc40 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 810dc26:	687b      	ldr	r3, [r7, #4]
 810dc28:	3304      	adds	r3, #4
 810dc2a:	2201      	movs	r2, #1
 810dc2c:	4619      	mov	r1, r3
 810dc2e:	6878      	ldr	r0, [r7, #4]
 810dc30:	f000 f940 	bl	810deb4 <USBD_CtlSendData>
        break;
 810dc34:	e004      	b.n	810dc40 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 810dc36:	6839      	ldr	r1, [r7, #0]
 810dc38:	6878      	ldr	r0, [r7, #4]
 810dc3a:	f000 f8be 	bl	810ddba <USBD_CtlError>
        break;
 810dc3e:	bf00      	nop
}
 810dc40:	bf00      	nop
 810dc42:	3708      	adds	r7, #8
 810dc44:	46bd      	mov	sp, r7
 810dc46:	bd80      	pop	{r7, pc}

0810dc48 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dc48:	b580      	push	{r7, lr}
 810dc4a:	b082      	sub	sp, #8
 810dc4c:	af00      	add	r7, sp, #0
 810dc4e:	6078      	str	r0, [r7, #4]
 810dc50:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 810dc52:	687b      	ldr	r3, [r7, #4]
 810dc54:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810dc58:	b2db      	uxtb	r3, r3
 810dc5a:	3b01      	subs	r3, #1
 810dc5c:	2b02      	cmp	r3, #2
 810dc5e:	d81e      	bhi.n	810dc9e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 810dc60:	683b      	ldr	r3, [r7, #0]
 810dc62:	88db      	ldrh	r3, [r3, #6]
 810dc64:	2b02      	cmp	r3, #2
 810dc66:	d004      	beq.n	810dc72 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 810dc68:	6839      	ldr	r1, [r7, #0]
 810dc6a:	6878      	ldr	r0, [r7, #4]
 810dc6c:	f000 f8a5 	bl	810ddba <USBD_CtlError>
        break;
 810dc70:	e01a      	b.n	810dca8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 810dc72:	687b      	ldr	r3, [r7, #4]
 810dc74:	2201      	movs	r2, #1
 810dc76:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 810dc78:	687b      	ldr	r3, [r7, #4]
 810dc7a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 810dc7e:	2b00      	cmp	r3, #0
 810dc80:	d005      	beq.n	810dc8e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 810dc82:	687b      	ldr	r3, [r7, #4]
 810dc84:	68db      	ldr	r3, [r3, #12]
 810dc86:	f043 0202 	orr.w	r2, r3, #2
 810dc8a:	687b      	ldr	r3, [r7, #4]
 810dc8c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 810dc8e:	687b      	ldr	r3, [r7, #4]
 810dc90:	330c      	adds	r3, #12
 810dc92:	2202      	movs	r2, #2
 810dc94:	4619      	mov	r1, r3
 810dc96:	6878      	ldr	r0, [r7, #4]
 810dc98:	f000 f90c 	bl	810deb4 <USBD_CtlSendData>
      break;
 810dc9c:	e004      	b.n	810dca8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 810dc9e:	6839      	ldr	r1, [r7, #0]
 810dca0:	6878      	ldr	r0, [r7, #4]
 810dca2:	f000 f88a 	bl	810ddba <USBD_CtlError>
      break;
 810dca6:	bf00      	nop
  }
}
 810dca8:	bf00      	nop
 810dcaa:	3708      	adds	r7, #8
 810dcac:	46bd      	mov	sp, r7
 810dcae:	bd80      	pop	{r7, pc}

0810dcb0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dcb0:	b580      	push	{r7, lr}
 810dcb2:	b082      	sub	sp, #8
 810dcb4:	af00      	add	r7, sp, #0
 810dcb6:	6078      	str	r0, [r7, #4]
 810dcb8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 810dcba:	683b      	ldr	r3, [r7, #0]
 810dcbc:	885b      	ldrh	r3, [r3, #2]
 810dcbe:	2b01      	cmp	r3, #1
 810dcc0:	d107      	bne.n	810dcd2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 810dcc2:	687b      	ldr	r3, [r7, #4]
 810dcc4:	2201      	movs	r2, #1
 810dcc6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 810dcca:	6878      	ldr	r0, [r7, #4]
 810dccc:	f000 f94c 	bl	810df68 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 810dcd0:	e013      	b.n	810dcfa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 810dcd2:	683b      	ldr	r3, [r7, #0]
 810dcd4:	885b      	ldrh	r3, [r3, #2]
 810dcd6:	2b02      	cmp	r3, #2
 810dcd8:	d10b      	bne.n	810dcf2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 810dcda:	683b      	ldr	r3, [r7, #0]
 810dcdc:	889b      	ldrh	r3, [r3, #4]
 810dcde:	0a1b      	lsrs	r3, r3, #8
 810dce0:	b29b      	uxth	r3, r3
 810dce2:	b2da      	uxtb	r2, r3
 810dce4:	687b      	ldr	r3, [r7, #4]
 810dce6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 810dcea:	6878      	ldr	r0, [r7, #4]
 810dcec:	f000 f93c 	bl	810df68 <USBD_CtlSendStatus>
}
 810dcf0:	e003      	b.n	810dcfa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 810dcf2:	6839      	ldr	r1, [r7, #0]
 810dcf4:	6878      	ldr	r0, [r7, #4]
 810dcf6:	f000 f860 	bl	810ddba <USBD_CtlError>
}
 810dcfa:	bf00      	nop
 810dcfc:	3708      	adds	r7, #8
 810dcfe:	46bd      	mov	sp, r7
 810dd00:	bd80      	pop	{r7, pc}

0810dd02 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810dd02:	b580      	push	{r7, lr}
 810dd04:	b082      	sub	sp, #8
 810dd06:	af00      	add	r7, sp, #0
 810dd08:	6078      	str	r0, [r7, #4]
 810dd0a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 810dd0c:	687b      	ldr	r3, [r7, #4]
 810dd0e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 810dd12:	b2db      	uxtb	r3, r3
 810dd14:	3b01      	subs	r3, #1
 810dd16:	2b02      	cmp	r3, #2
 810dd18:	d80b      	bhi.n	810dd32 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 810dd1a:	683b      	ldr	r3, [r7, #0]
 810dd1c:	885b      	ldrh	r3, [r3, #2]
 810dd1e:	2b01      	cmp	r3, #1
 810dd20:	d10c      	bne.n	810dd3c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 810dd22:	687b      	ldr	r3, [r7, #4]
 810dd24:	2200      	movs	r2, #0
 810dd26:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 810dd2a:	6878      	ldr	r0, [r7, #4]
 810dd2c:	f000 f91c 	bl	810df68 <USBD_CtlSendStatus>
      }
      break;
 810dd30:	e004      	b.n	810dd3c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 810dd32:	6839      	ldr	r1, [r7, #0]
 810dd34:	6878      	ldr	r0, [r7, #4]
 810dd36:	f000 f840 	bl	810ddba <USBD_CtlError>
      break;
 810dd3a:	e000      	b.n	810dd3e <USBD_ClrFeature+0x3c>
      break;
 810dd3c:	bf00      	nop
  }
}
 810dd3e:	bf00      	nop
 810dd40:	3708      	adds	r7, #8
 810dd42:	46bd      	mov	sp, r7
 810dd44:	bd80      	pop	{r7, pc}

0810dd46 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 810dd46:	b580      	push	{r7, lr}
 810dd48:	b084      	sub	sp, #16
 810dd4a:	af00      	add	r7, sp, #0
 810dd4c:	6078      	str	r0, [r7, #4]
 810dd4e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 810dd50:	683b      	ldr	r3, [r7, #0]
 810dd52:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 810dd54:	68fb      	ldr	r3, [r7, #12]
 810dd56:	781a      	ldrb	r2, [r3, #0]
 810dd58:	687b      	ldr	r3, [r7, #4]
 810dd5a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 810dd5c:	68fb      	ldr	r3, [r7, #12]
 810dd5e:	3301      	adds	r3, #1
 810dd60:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 810dd62:	68fb      	ldr	r3, [r7, #12]
 810dd64:	781a      	ldrb	r2, [r3, #0]
 810dd66:	687b      	ldr	r3, [r7, #4]
 810dd68:	705a      	strb	r2, [r3, #1]

  pbuff++;
 810dd6a:	68fb      	ldr	r3, [r7, #12]
 810dd6c:	3301      	adds	r3, #1
 810dd6e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 810dd70:	68f8      	ldr	r0, [r7, #12]
 810dd72:	f7ff fa16 	bl	810d1a2 <SWAPBYTE>
 810dd76:	4603      	mov	r3, r0
 810dd78:	461a      	mov	r2, r3
 810dd7a:	687b      	ldr	r3, [r7, #4]
 810dd7c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 810dd7e:	68fb      	ldr	r3, [r7, #12]
 810dd80:	3301      	adds	r3, #1
 810dd82:	60fb      	str	r3, [r7, #12]
  pbuff++;
 810dd84:	68fb      	ldr	r3, [r7, #12]
 810dd86:	3301      	adds	r3, #1
 810dd88:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 810dd8a:	68f8      	ldr	r0, [r7, #12]
 810dd8c:	f7ff fa09 	bl	810d1a2 <SWAPBYTE>
 810dd90:	4603      	mov	r3, r0
 810dd92:	461a      	mov	r2, r3
 810dd94:	687b      	ldr	r3, [r7, #4]
 810dd96:	809a      	strh	r2, [r3, #4]

  pbuff++;
 810dd98:	68fb      	ldr	r3, [r7, #12]
 810dd9a:	3301      	adds	r3, #1
 810dd9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 810dd9e:	68fb      	ldr	r3, [r7, #12]
 810dda0:	3301      	adds	r3, #1
 810dda2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 810dda4:	68f8      	ldr	r0, [r7, #12]
 810dda6:	f7ff f9fc 	bl	810d1a2 <SWAPBYTE>
 810ddaa:	4603      	mov	r3, r0
 810ddac:	461a      	mov	r2, r3
 810ddae:	687b      	ldr	r3, [r7, #4]
 810ddb0:	80da      	strh	r2, [r3, #6]
}
 810ddb2:	bf00      	nop
 810ddb4:	3710      	adds	r7, #16
 810ddb6:	46bd      	mov	sp, r7
 810ddb8:	bd80      	pop	{r7, pc}

0810ddba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 810ddba:	b580      	push	{r7, lr}
 810ddbc:	b082      	sub	sp, #8
 810ddbe:	af00      	add	r7, sp, #0
 810ddc0:	6078      	str	r0, [r7, #4]
 810ddc2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 810ddc4:	2180      	movs	r1, #128	@ 0x80
 810ddc6:	6878      	ldr	r0, [r7, #4]
 810ddc8:	f000 fd78 	bl	810e8bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 810ddcc:	2100      	movs	r1, #0
 810ddce:	6878      	ldr	r0, [r7, #4]
 810ddd0:	f000 fd74 	bl	810e8bc <USBD_LL_StallEP>
}
 810ddd4:	bf00      	nop
 810ddd6:	3708      	adds	r7, #8
 810ddd8:	46bd      	mov	sp, r7
 810ddda:	bd80      	pop	{r7, pc}

0810dddc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 810dddc:	b580      	push	{r7, lr}
 810ddde:	b086      	sub	sp, #24
 810dde0:	af00      	add	r7, sp, #0
 810dde2:	60f8      	str	r0, [r7, #12]
 810dde4:	60b9      	str	r1, [r7, #8]
 810dde6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 810dde8:	2300      	movs	r3, #0
 810ddea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 810ddec:	68fb      	ldr	r3, [r7, #12]
 810ddee:	2b00      	cmp	r3, #0
 810ddf0:	d042      	beq.n	810de78 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 810ddf2:	68fb      	ldr	r3, [r7, #12]
 810ddf4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 810ddf6:	6938      	ldr	r0, [r7, #16]
 810ddf8:	f000 f842 	bl	810de80 <USBD_GetLen>
 810ddfc:	4603      	mov	r3, r0
 810ddfe:	3301      	adds	r3, #1
 810de00:	005b      	lsls	r3, r3, #1
 810de02:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810de06:	d808      	bhi.n	810de1a <USBD_GetString+0x3e>
 810de08:	6938      	ldr	r0, [r7, #16]
 810de0a:	f000 f839 	bl	810de80 <USBD_GetLen>
 810de0e:	4603      	mov	r3, r0
 810de10:	3301      	adds	r3, #1
 810de12:	b29b      	uxth	r3, r3
 810de14:	005b      	lsls	r3, r3, #1
 810de16:	b29a      	uxth	r2, r3
 810de18:	e001      	b.n	810de1e <USBD_GetString+0x42>
 810de1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810de1e:	687b      	ldr	r3, [r7, #4]
 810de20:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 810de22:	7dfb      	ldrb	r3, [r7, #23]
 810de24:	68ba      	ldr	r2, [r7, #8]
 810de26:	4413      	add	r3, r2
 810de28:	687a      	ldr	r2, [r7, #4]
 810de2a:	7812      	ldrb	r2, [r2, #0]
 810de2c:	701a      	strb	r2, [r3, #0]
  idx++;
 810de2e:	7dfb      	ldrb	r3, [r7, #23]
 810de30:	3301      	adds	r3, #1
 810de32:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 810de34:	7dfb      	ldrb	r3, [r7, #23]
 810de36:	68ba      	ldr	r2, [r7, #8]
 810de38:	4413      	add	r3, r2
 810de3a:	2203      	movs	r2, #3
 810de3c:	701a      	strb	r2, [r3, #0]
  idx++;
 810de3e:	7dfb      	ldrb	r3, [r7, #23]
 810de40:	3301      	adds	r3, #1
 810de42:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 810de44:	e013      	b.n	810de6e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 810de46:	7dfb      	ldrb	r3, [r7, #23]
 810de48:	68ba      	ldr	r2, [r7, #8]
 810de4a:	4413      	add	r3, r2
 810de4c:	693a      	ldr	r2, [r7, #16]
 810de4e:	7812      	ldrb	r2, [r2, #0]
 810de50:	701a      	strb	r2, [r3, #0]
    pdesc++;
 810de52:	693b      	ldr	r3, [r7, #16]
 810de54:	3301      	adds	r3, #1
 810de56:	613b      	str	r3, [r7, #16]
    idx++;
 810de58:	7dfb      	ldrb	r3, [r7, #23]
 810de5a:	3301      	adds	r3, #1
 810de5c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 810de5e:	7dfb      	ldrb	r3, [r7, #23]
 810de60:	68ba      	ldr	r2, [r7, #8]
 810de62:	4413      	add	r3, r2
 810de64:	2200      	movs	r2, #0
 810de66:	701a      	strb	r2, [r3, #0]
    idx++;
 810de68:	7dfb      	ldrb	r3, [r7, #23]
 810de6a:	3301      	adds	r3, #1
 810de6c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 810de6e:	693b      	ldr	r3, [r7, #16]
 810de70:	781b      	ldrb	r3, [r3, #0]
 810de72:	2b00      	cmp	r3, #0
 810de74:	d1e7      	bne.n	810de46 <USBD_GetString+0x6a>
 810de76:	e000      	b.n	810de7a <USBD_GetString+0x9e>
    return;
 810de78:	bf00      	nop
  }
}
 810de7a:	3718      	adds	r7, #24
 810de7c:	46bd      	mov	sp, r7
 810de7e:	bd80      	pop	{r7, pc}

0810de80 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 810de80:	b480      	push	{r7}
 810de82:	b085      	sub	sp, #20
 810de84:	af00      	add	r7, sp, #0
 810de86:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 810de88:	2300      	movs	r3, #0
 810de8a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 810de8c:	687b      	ldr	r3, [r7, #4]
 810de8e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 810de90:	e005      	b.n	810de9e <USBD_GetLen+0x1e>
  {
    len++;
 810de92:	7bfb      	ldrb	r3, [r7, #15]
 810de94:	3301      	adds	r3, #1
 810de96:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 810de98:	68bb      	ldr	r3, [r7, #8]
 810de9a:	3301      	adds	r3, #1
 810de9c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 810de9e:	68bb      	ldr	r3, [r7, #8]
 810dea0:	781b      	ldrb	r3, [r3, #0]
 810dea2:	2b00      	cmp	r3, #0
 810dea4:	d1f5      	bne.n	810de92 <USBD_GetLen+0x12>
  }

  return len;
 810dea6:	7bfb      	ldrb	r3, [r7, #15]
}
 810dea8:	4618      	mov	r0, r3
 810deaa:	3714      	adds	r7, #20
 810deac:	46bd      	mov	sp, r7
 810deae:	f85d 7b04 	ldr.w	r7, [sp], #4
 810deb2:	4770      	bx	lr

0810deb4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 810deb4:	b580      	push	{r7, lr}
 810deb6:	b084      	sub	sp, #16
 810deb8:	af00      	add	r7, sp, #0
 810deba:	60f8      	str	r0, [r7, #12]
 810debc:	60b9      	str	r1, [r7, #8]
 810debe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 810dec0:	68fb      	ldr	r3, [r7, #12]
 810dec2:	2202      	movs	r2, #2
 810dec4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 810dec8:	68fb      	ldr	r3, [r7, #12]
 810deca:	687a      	ldr	r2, [r7, #4]
 810decc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 810dece:	68fb      	ldr	r3, [r7, #12]
 810ded0:	687a      	ldr	r2, [r7, #4]
 810ded2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 810ded4:	687b      	ldr	r3, [r7, #4]
 810ded6:	68ba      	ldr	r2, [r7, #8]
 810ded8:	2100      	movs	r1, #0
 810deda:	68f8      	ldr	r0, [r7, #12]
 810dedc:	f000 fd77 	bl	810e9ce <USBD_LL_Transmit>

  return USBD_OK;
 810dee0:	2300      	movs	r3, #0
}
 810dee2:	4618      	mov	r0, r3
 810dee4:	3710      	adds	r7, #16
 810dee6:	46bd      	mov	sp, r7
 810dee8:	bd80      	pop	{r7, pc}

0810deea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 810deea:	b580      	push	{r7, lr}
 810deec:	b084      	sub	sp, #16
 810deee:	af00      	add	r7, sp, #0
 810def0:	60f8      	str	r0, [r7, #12]
 810def2:	60b9      	str	r1, [r7, #8]
 810def4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 810def6:	687b      	ldr	r3, [r7, #4]
 810def8:	68ba      	ldr	r2, [r7, #8]
 810defa:	2100      	movs	r1, #0
 810defc:	68f8      	ldr	r0, [r7, #12]
 810defe:	f000 fd66 	bl	810e9ce <USBD_LL_Transmit>

  return USBD_OK;
 810df02:	2300      	movs	r3, #0
}
 810df04:	4618      	mov	r0, r3
 810df06:	3710      	adds	r7, #16
 810df08:	46bd      	mov	sp, r7
 810df0a:	bd80      	pop	{r7, pc}

0810df0c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 810df0c:	b580      	push	{r7, lr}
 810df0e:	b084      	sub	sp, #16
 810df10:	af00      	add	r7, sp, #0
 810df12:	60f8      	str	r0, [r7, #12]
 810df14:	60b9      	str	r1, [r7, #8]
 810df16:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 810df18:	68fb      	ldr	r3, [r7, #12]
 810df1a:	2203      	movs	r2, #3
 810df1c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 810df20:	68fb      	ldr	r3, [r7, #12]
 810df22:	687a      	ldr	r2, [r7, #4]
 810df24:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 810df28:	68fb      	ldr	r3, [r7, #12]
 810df2a:	687a      	ldr	r2, [r7, #4]
 810df2c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 810df30:	687b      	ldr	r3, [r7, #4]
 810df32:	68ba      	ldr	r2, [r7, #8]
 810df34:	2100      	movs	r1, #0
 810df36:	68f8      	ldr	r0, [r7, #12]
 810df38:	f000 fd6a 	bl	810ea10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 810df3c:	2300      	movs	r3, #0
}
 810df3e:	4618      	mov	r0, r3
 810df40:	3710      	adds	r7, #16
 810df42:	46bd      	mov	sp, r7
 810df44:	bd80      	pop	{r7, pc}

0810df46 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 810df46:	b580      	push	{r7, lr}
 810df48:	b084      	sub	sp, #16
 810df4a:	af00      	add	r7, sp, #0
 810df4c:	60f8      	str	r0, [r7, #12]
 810df4e:	60b9      	str	r1, [r7, #8]
 810df50:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 810df52:	687b      	ldr	r3, [r7, #4]
 810df54:	68ba      	ldr	r2, [r7, #8]
 810df56:	2100      	movs	r1, #0
 810df58:	68f8      	ldr	r0, [r7, #12]
 810df5a:	f000 fd59 	bl	810ea10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 810df5e:	2300      	movs	r3, #0
}
 810df60:	4618      	mov	r0, r3
 810df62:	3710      	adds	r7, #16
 810df64:	46bd      	mov	sp, r7
 810df66:	bd80      	pop	{r7, pc}

0810df68 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 810df68:	b580      	push	{r7, lr}
 810df6a:	b082      	sub	sp, #8
 810df6c:	af00      	add	r7, sp, #0
 810df6e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 810df70:	687b      	ldr	r3, [r7, #4]
 810df72:	2204      	movs	r2, #4
 810df74:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 810df78:	2300      	movs	r3, #0
 810df7a:	2200      	movs	r2, #0
 810df7c:	2100      	movs	r1, #0
 810df7e:	6878      	ldr	r0, [r7, #4]
 810df80:	f000 fd25 	bl	810e9ce <USBD_LL_Transmit>

  return USBD_OK;
 810df84:	2300      	movs	r3, #0
}
 810df86:	4618      	mov	r0, r3
 810df88:	3708      	adds	r7, #8
 810df8a:	46bd      	mov	sp, r7
 810df8c:	bd80      	pop	{r7, pc}

0810df8e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 810df8e:	b580      	push	{r7, lr}
 810df90:	b082      	sub	sp, #8
 810df92:	af00      	add	r7, sp, #0
 810df94:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 810df96:	687b      	ldr	r3, [r7, #4]
 810df98:	2205      	movs	r2, #5
 810df9a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 810df9e:	2300      	movs	r3, #0
 810dfa0:	2200      	movs	r2, #0
 810dfa2:	2100      	movs	r1, #0
 810dfa4:	6878      	ldr	r0, [r7, #4]
 810dfa6:	f000 fd33 	bl	810ea10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 810dfaa:	2300      	movs	r3, #0
}
 810dfac:	4618      	mov	r0, r3
 810dfae:	3708      	adds	r7, #8
 810dfb0:	46bd      	mov	sp, r7
 810dfb2:	bd80      	pop	{r7, pc}

0810dfb4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 810dfb4:	b580      	push	{r7, lr}
 810dfb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 810dfb8:	2200      	movs	r2, #0
 810dfba:	4913      	ldr	r1, [pc, #76]	@ (810e008 <MX_USB_DEVICE_Init+0x54>)
 810dfbc:	4813      	ldr	r0, [pc, #76]	@ (810e00c <MX_USB_DEVICE_Init+0x58>)
 810dfbe:	f7fe fccd 	bl	810c95c <USBD_Init>
 810dfc2:	4603      	mov	r3, r0
 810dfc4:	2b00      	cmp	r3, #0
 810dfc6:	d001      	beq.n	810dfcc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 810dfc8:	f7f4 f92a 	bl	8102220 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 810dfcc:	4910      	ldr	r1, [pc, #64]	@ (810e010 <MX_USB_DEVICE_Init+0x5c>)
 810dfce:	480f      	ldr	r0, [pc, #60]	@ (810e00c <MX_USB_DEVICE_Init+0x58>)
 810dfd0:	f7fe fcf4 	bl	810c9bc <USBD_RegisterClass>
 810dfd4:	4603      	mov	r3, r0
 810dfd6:	2b00      	cmp	r3, #0
 810dfd8:	d001      	beq.n	810dfde <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 810dfda:	f7f4 f921 	bl	8102220 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 810dfde:	490d      	ldr	r1, [pc, #52]	@ (810e014 <MX_USB_DEVICE_Init+0x60>)
 810dfe0:	480a      	ldr	r0, [pc, #40]	@ (810e00c <MX_USB_DEVICE_Init+0x58>)
 810dfe2:	f7fe fbeb 	bl	810c7bc <USBD_CDC_RegisterInterface>
 810dfe6:	4603      	mov	r3, r0
 810dfe8:	2b00      	cmp	r3, #0
 810dfea:	d001      	beq.n	810dff0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 810dfec:	f7f4 f918 	bl	8102220 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 810dff0:	4806      	ldr	r0, [pc, #24]	@ (810e00c <MX_USB_DEVICE_Init+0x58>)
 810dff2:	f7fe fd19 	bl	810ca28 <USBD_Start>
 810dff6:	4603      	mov	r3, r0
 810dff8:	2b00      	cmp	r3, #0
 810dffa:	d001      	beq.n	810e000 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 810dffc:	f7f4 f910 	bl	8102220 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 810e000:	f7f7 fc9c 	bl	810593c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 810e004:	bf00      	nop
 810e006:	bd80      	pop	{r7, pc}
 810e008:	100321a8 	.word	0x100321a8
 810e00c:	10034f98 	.word	0x10034f98
 810e010:	1003210c 	.word	0x1003210c
 810e014:	1003218c 	.word	0x1003218c

0810e018 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 810e018:	b580      	push	{r7, lr}
 810e01a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 810e01c:	2200      	movs	r2, #0
 810e01e:	4905      	ldr	r1, [pc, #20]	@ (810e034 <CDC_Init_FS+0x1c>)
 810e020:	4805      	ldr	r0, [pc, #20]	@ (810e038 <CDC_Init_FS+0x20>)
 810e022:	f7fe fbe5 	bl	810c7f0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 810e026:	4905      	ldr	r1, [pc, #20]	@ (810e03c <CDC_Init_FS+0x24>)
 810e028:	4803      	ldr	r0, [pc, #12]	@ (810e038 <CDC_Init_FS+0x20>)
 810e02a:	f7fe fc03 	bl	810c834 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 810e02e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 810e030:	4618      	mov	r0, r3
 810e032:	bd80      	pop	{r7, pc}
 810e034:	10035a78 	.word	0x10035a78
 810e038:	10034f98 	.word	0x10034f98
 810e03c:	10035278 	.word	0x10035278

0810e040 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 810e040:	b480      	push	{r7}
 810e042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 810e044:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 810e046:	4618      	mov	r0, r3
 810e048:	46bd      	mov	sp, r7
 810e04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e04e:	4770      	bx	lr

0810e050 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 810e050:	b580      	push	{r7, lr}
 810e052:	b084      	sub	sp, #16
 810e054:	af00      	add	r7, sp, #0
 810e056:	4603      	mov	r3, r0
 810e058:	6039      	str	r1, [r7, #0]
 810e05a:	71fb      	strb	r3, [r7, #7]
 810e05c:	4613      	mov	r3, r2
 810e05e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  USBD_SetupReqTypedef * req;
  static uint8_t lineCoding[7] // 115200bps, 1stop, no parity, 8bit
			    = { 0x00, 0xC2, 0x01, 0x00, 0x00, 0x00, 0x08 };
  switch(cmd)
 810e060:	79fb      	ldrb	r3, [r7, #7]
 810e062:	2b23      	cmp	r3, #35	@ 0x23
 810e064:	d86e      	bhi.n	810e144 <CDC_Control_FS+0xf4>
 810e066:	a201      	add	r2, pc, #4	@ (adr r2, 810e06c <CDC_Control_FS+0x1c>)
 810e068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810e06c:	0810e145 	.word	0x0810e145
 810e070:	0810e145 	.word	0x0810e145
 810e074:	0810e145 	.word	0x0810e145
 810e078:	0810e145 	.word	0x0810e145
 810e07c:	0810e145 	.word	0x0810e145
 810e080:	0810e145 	.word	0x0810e145
 810e084:	0810e145 	.word	0x0810e145
 810e088:	0810e145 	.word	0x0810e145
 810e08c:	0810e145 	.word	0x0810e145
 810e090:	0810e145 	.word	0x0810e145
 810e094:	0810e145 	.word	0x0810e145
 810e098:	0810e145 	.word	0x0810e145
 810e09c:	0810e145 	.word	0x0810e145
 810e0a0:	0810e145 	.word	0x0810e145
 810e0a4:	0810e145 	.word	0x0810e145
 810e0a8:	0810e145 	.word	0x0810e145
 810e0ac:	0810e145 	.word	0x0810e145
 810e0b0:	0810e145 	.word	0x0810e145
 810e0b4:	0810e145 	.word	0x0810e145
 810e0b8:	0810e145 	.word	0x0810e145
 810e0bc:	0810e145 	.word	0x0810e145
 810e0c0:	0810e145 	.word	0x0810e145
 810e0c4:	0810e145 	.word	0x0810e145
 810e0c8:	0810e145 	.word	0x0810e145
 810e0cc:	0810e145 	.word	0x0810e145
 810e0d0:	0810e145 	.word	0x0810e145
 810e0d4:	0810e145 	.word	0x0810e145
 810e0d8:	0810e145 	.word	0x0810e145
 810e0dc:	0810e145 	.word	0x0810e145
 810e0e0:	0810e145 	.word	0x0810e145
 810e0e4:	0810e145 	.word	0x0810e145
 810e0e8:	0810e145 	.word	0x0810e145
 810e0ec:	0810e0fd 	.word	0x0810e0fd
 810e0f0:	0810e10f 	.word	0x0810e10f
 810e0f4:	0810e121 	.word	0x0810e121
 810e0f8:	0810e145 	.word	0x0810e145
  /*                                        3 - Mark                             */
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    	memcpy(lineCoding, pbuf, sizeof(lineCoding));
 810e0fc:	4b14      	ldr	r3, [pc, #80]	@ (810e150 <CDC_Control_FS+0x100>)
 810e0fe:	683a      	ldr	r2, [r7, #0]
 810e100:	6810      	ldr	r0, [r2, #0]
 810e102:	6018      	str	r0, [r3, #0]
 810e104:	8891      	ldrh	r1, [r2, #4]
 810e106:	7992      	ldrb	r2, [r2, #6]
 810e108:	8099      	strh	r1, [r3, #4]
 810e10a:	719a      	strb	r2, [r3, #6]
    break;
 810e10c:	e01b      	b.n	810e146 <CDC_Control_FS+0xf6>

    case CDC_GET_LINE_CODING:
    	memcpy(pbuf, lineCoding, sizeof(lineCoding));
 810e10e:	683b      	ldr	r3, [r7, #0]
 810e110:	4a0f      	ldr	r2, [pc, #60]	@ (810e150 <CDC_Control_FS+0x100>)
 810e112:	6810      	ldr	r0, [r2, #0]
 810e114:	6018      	str	r0, [r3, #0]
 810e116:	8891      	ldrh	r1, [r2, #4]
 810e118:	7992      	ldrb	r2, [r2, #6]
 810e11a:	8099      	strh	r1, [r3, #4]
 810e11c:	719a      	strb	r2, [r3, #6]
    break;
 810e11e:	e012      	b.n	810e146 <CDC_Control_FS+0xf6>

    case CDC_SET_CONTROL_LINE_STATE:
        req = (USBD_SetupReqTypedef *)pbuf;
 810e120:	683b      	ldr	r3, [r7, #0]
 810e122:	60fb      	str	r3, [r7, #12]
    	if((req->wValue & 0x0001) != 0)
 810e124:	68fb      	ldr	r3, [r7, #12]
 810e126:	885b      	ldrh	r3, [r3, #2]
 810e128:	f003 0301 	and.w	r3, r3, #1
 810e12c:	2b00      	cmp	r3, #0
 810e12e:	d003      	beq.n	810e138 <CDC_Control_FS+0xe8>
    	{
    		hostComPort_isOpen = true;
 810e130:	4b08      	ldr	r3, [pc, #32]	@ (810e154 <CDC_Control_FS+0x104>)
 810e132:	2201      	movs	r2, #1
 810e134:	701a      	strb	r2, [r3, #0]
 810e136:	e002      	b.n	810e13e <CDC_Control_FS+0xee>
    	}
    	else
    	{
    		hostComPort_isOpen = false;
 810e138:	4b06      	ldr	r3, [pc, #24]	@ (810e154 <CDC_Control_FS+0x104>)
 810e13a:	2200      	movs	r2, #0
 810e13c:	701a      	strb	r2, [r3, #0]
    	}
    	USB_Check_Notify();
 810e13e:	f7f3 f901 	bl	8101344 <USB_Check_Notify>
    break;
 810e142:	e000      	b.n	810e146 <CDC_Control_FS+0xf6>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 810e144:	bf00      	nop
  }

  return (USBD_OK);
 810e146:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 810e148:	4618      	mov	r0, r3
 810e14a:	3710      	adds	r7, #16
 810e14c:	46bd      	mov	sp, r7
 810e14e:	bd80      	pop	{r7, pc}
 810e150:	100321a0 	.word	0x100321a0
 810e154:	10035274 	.word	0x10035274

0810e158 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 810e158:	b580      	push	{r7, lr}
 810e15a:	b084      	sub	sp, #16
 810e15c:	af00      	add	r7, sp, #0
 810e15e:	6078      	str	r0, [r7, #4]
 810e160:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 810e162:	6879      	ldr	r1, [r7, #4]
 810e164:	480f      	ldr	r0, [pc, #60]	@ (810e1a4 <CDC_Receive_FS+0x4c>)
 810e166:	f7fe fb65 	bl	810c834 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 810e16a:	480e      	ldr	r0, [pc, #56]	@ (810e1a4 <CDC_Receive_FS+0x4c>)
 810e16c:	f7fe fbc0 	bl	810c8f0 <USBD_CDC_ReceivePacket>

  uint32_t written = CDC_RX_RingBuffer_PutBuffer(Buf, *Len);
 810e170:	683b      	ldr	r3, [r7, #0]
 810e172:	681b      	ldr	r3, [r3, #0]
 810e174:	4619      	mov	r1, r3
 810e176:	6878      	ldr	r0, [r7, #4]
 810e178:	f7f3 f895 	bl	81012a6 <CDC_RX_RingBuffer_PutBuffer>
 810e17c:	60f8      	str	r0, [r7, #12]
  if (written != *Len) {
 810e17e:	683b      	ldr	r3, [r7, #0]
 810e180:	681b      	ldr	r3, [r3, #0]
 810e182:	68fa      	ldr	r2, [r7, #12]
 810e184:	429a      	cmp	r2, r3
 810e186:	d003      	beq.n	810e190 <CDC_Receive_FS+0x38>
      (void)CDC_SendString("CDC RX Buffer Full!!!\r\n", 24);
 810e188:	2118      	movs	r1, #24
 810e18a:	4807      	ldr	r0, [pc, #28]	@ (810e1a8 <CDC_Receive_FS+0x50>)
 810e18c:	f7f3 f91e 	bl	81013cc <CDC_SendString>
  }
  if (written) {
 810e190:	68fb      	ldr	r3, [r7, #12]
 810e192:	2b00      	cmp	r3, #0
 810e194:	d001      	beq.n	810e19a <CDC_Receive_FS+0x42>
      CDC_ISR_RxNotify();
 810e196:	f7f3 f8c9 	bl	810132c <CDC_ISR_RxNotify>
  }

  return (USBD_OK);
 810e19a:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 810e19c:	4618      	mov	r0, r3
 810e19e:	3710      	adds	r7, #16
 810e1a0:	46bd      	mov	sp, r7
 810e1a2:	bd80      	pop	{r7, pc}
 810e1a4:	10034f98 	.word	0x10034f98
 810e1a8:	0810ebdc 	.word	0x0810ebdc

0810e1ac <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 810e1ac:	b580      	push	{r7, lr}
 810e1ae:	b084      	sub	sp, #16
 810e1b0:	af00      	add	r7, sp, #0
 810e1b2:	6078      	str	r0, [r7, #4]
 810e1b4:	460b      	mov	r3, r1
 810e1b6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 810e1b8:	2300      	movs	r3, #0
 810e1ba:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 810e1bc:	4b0d      	ldr	r3, [pc, #52]	@ (810e1f4 <CDC_Transmit_FS+0x48>)
 810e1be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 810e1c2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 810e1c4:	68bb      	ldr	r3, [r7, #8]
 810e1c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 810e1ca:	2b00      	cmp	r3, #0
 810e1cc:	d001      	beq.n	810e1d2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 810e1ce:	2301      	movs	r3, #1
 810e1d0:	e00b      	b.n	810e1ea <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 810e1d2:	887b      	ldrh	r3, [r7, #2]
 810e1d4:	461a      	mov	r2, r3
 810e1d6:	6879      	ldr	r1, [r7, #4]
 810e1d8:	4806      	ldr	r0, [pc, #24]	@ (810e1f4 <CDC_Transmit_FS+0x48>)
 810e1da:	f7fe fb09 	bl	810c7f0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 810e1de:	4805      	ldr	r0, [pc, #20]	@ (810e1f4 <CDC_Transmit_FS+0x48>)
 810e1e0:	f7fe fb46 	bl	810c870 <USBD_CDC_TransmitPacket>
 810e1e4:	4603      	mov	r3, r0
 810e1e6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 810e1e8:	7bfb      	ldrb	r3, [r7, #15]
}
 810e1ea:	4618      	mov	r0, r3
 810e1ec:	3710      	adds	r7, #16
 810e1ee:	46bd      	mov	sp, r7
 810e1f0:	bd80      	pop	{r7, pc}
 810e1f2:	bf00      	nop
 810e1f4:	10034f98 	.word	0x10034f98

0810e1f8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 810e1f8:	b480      	push	{r7}
 810e1fa:	b087      	sub	sp, #28
 810e1fc:	af00      	add	r7, sp, #0
 810e1fe:	60f8      	str	r0, [r7, #12]
 810e200:	60b9      	str	r1, [r7, #8]
 810e202:	4613      	mov	r3, r2
 810e204:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 810e206:	2300      	movs	r3, #0
 810e208:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 810e20a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 810e20e:	4618      	mov	r0, r3
 810e210:	371c      	adds	r7, #28
 810e212:	46bd      	mov	sp, r7
 810e214:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e218:	4770      	bx	lr
	...

0810e21c <CDC_ComPort_IsOpen>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
_Bool CDC_ComPort_IsOpen()
{
 810e21c:	b480      	push	{r7}
 810e21e:	af00      	add	r7, sp, #0
	return(hostComPort_isOpen);
 810e220:	4b03      	ldr	r3, [pc, #12]	@ (810e230 <CDC_ComPort_IsOpen+0x14>)
 810e222:	781b      	ldrb	r3, [r3, #0]
}
 810e224:	4618      	mov	r0, r3
 810e226:	46bd      	mov	sp, r7
 810e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e22c:	4770      	bx	lr
 810e22e:	bf00      	nop
 810e230:	10035274 	.word	0x10035274

0810e234 <CDC_IsTxReady>:

_Bool CDC_IsTxReady(void)
{
 810e234:	b480      	push	{r7}
 810e236:	b083      	sub	sp, #12
 810e238:	af00      	add	r7, sp, #0
    USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 810e23a:	4b09      	ldr	r3, [pc, #36]	@ (810e260 <CDC_IsTxReady+0x2c>)
 810e23c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 810e240:	607b      	str	r3, [r7, #4]
    return (hcdc->TxState == 0);
 810e242:	687b      	ldr	r3, [r7, #4]
 810e244:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 810e248:	2b00      	cmp	r3, #0
 810e24a:	bf0c      	ite	eq
 810e24c:	2301      	moveq	r3, #1
 810e24e:	2300      	movne	r3, #0
 810e250:	b2db      	uxtb	r3, r3
}
 810e252:	4618      	mov	r0, r3
 810e254:	370c      	adds	r7, #12
 810e256:	46bd      	mov	sp, r7
 810e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e25c:	4770      	bx	lr
 810e25e:	bf00      	nop
 810e260:	10034f98 	.word	0x10034f98

0810e264 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e264:	b480      	push	{r7}
 810e266:	b083      	sub	sp, #12
 810e268:	af00      	add	r7, sp, #0
 810e26a:	4603      	mov	r3, r0
 810e26c:	6039      	str	r1, [r7, #0]
 810e26e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 810e270:	683b      	ldr	r3, [r7, #0]
 810e272:	2212      	movs	r2, #18
 810e274:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 810e276:	4b03      	ldr	r3, [pc, #12]	@ (810e284 <USBD_FS_DeviceDescriptor+0x20>)
}
 810e278:	4618      	mov	r0, r3
 810e27a:	370c      	adds	r7, #12
 810e27c:	46bd      	mov	sp, r7
 810e27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e282:	4770      	bx	lr
 810e284:	100321c8 	.word	0x100321c8

0810e288 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e288:	b480      	push	{r7}
 810e28a:	b083      	sub	sp, #12
 810e28c:	af00      	add	r7, sp, #0
 810e28e:	4603      	mov	r3, r0
 810e290:	6039      	str	r1, [r7, #0]
 810e292:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 810e294:	683b      	ldr	r3, [r7, #0]
 810e296:	2204      	movs	r2, #4
 810e298:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 810e29a:	4b03      	ldr	r3, [pc, #12]	@ (810e2a8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 810e29c:	4618      	mov	r0, r3
 810e29e:	370c      	adds	r7, #12
 810e2a0:	46bd      	mov	sp, r7
 810e2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e2a6:	4770      	bx	lr
 810e2a8:	100321dc 	.word	0x100321dc

0810e2ac <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e2ac:	b580      	push	{r7, lr}
 810e2ae:	b082      	sub	sp, #8
 810e2b0:	af00      	add	r7, sp, #0
 810e2b2:	4603      	mov	r3, r0
 810e2b4:	6039      	str	r1, [r7, #0]
 810e2b6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 810e2b8:	79fb      	ldrb	r3, [r7, #7]
 810e2ba:	2b00      	cmp	r3, #0
 810e2bc:	d105      	bne.n	810e2ca <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 810e2be:	683a      	ldr	r2, [r7, #0]
 810e2c0:	4907      	ldr	r1, [pc, #28]	@ (810e2e0 <USBD_FS_ProductStrDescriptor+0x34>)
 810e2c2:	4808      	ldr	r0, [pc, #32]	@ (810e2e4 <USBD_FS_ProductStrDescriptor+0x38>)
 810e2c4:	f7ff fd8a 	bl	810dddc <USBD_GetString>
 810e2c8:	e004      	b.n	810e2d4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 810e2ca:	683a      	ldr	r2, [r7, #0]
 810e2cc:	4904      	ldr	r1, [pc, #16]	@ (810e2e0 <USBD_FS_ProductStrDescriptor+0x34>)
 810e2ce:	4805      	ldr	r0, [pc, #20]	@ (810e2e4 <USBD_FS_ProductStrDescriptor+0x38>)
 810e2d0:	f7ff fd84 	bl	810dddc <USBD_GetString>
  }
  return USBD_StrDesc;
 810e2d4:	4b02      	ldr	r3, [pc, #8]	@ (810e2e0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 810e2d6:	4618      	mov	r0, r3
 810e2d8:	3708      	adds	r7, #8
 810e2da:	46bd      	mov	sp, r7
 810e2dc:	bd80      	pop	{r7, pc}
 810e2de:	bf00      	nop
 810e2e0:	10036278 	.word	0x10036278
 810e2e4:	0810ebf4 	.word	0x0810ebf4

0810e2e8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e2e8:	b580      	push	{r7, lr}
 810e2ea:	b082      	sub	sp, #8
 810e2ec:	af00      	add	r7, sp, #0
 810e2ee:	4603      	mov	r3, r0
 810e2f0:	6039      	str	r1, [r7, #0]
 810e2f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 810e2f4:	683a      	ldr	r2, [r7, #0]
 810e2f6:	4904      	ldr	r1, [pc, #16]	@ (810e308 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 810e2f8:	4804      	ldr	r0, [pc, #16]	@ (810e30c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 810e2fa:	f7ff fd6f 	bl	810dddc <USBD_GetString>
  return USBD_StrDesc;
 810e2fe:	4b02      	ldr	r3, [pc, #8]	@ (810e308 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 810e300:	4618      	mov	r0, r3
 810e302:	3708      	adds	r7, #8
 810e304:	46bd      	mov	sp, r7
 810e306:	bd80      	pop	{r7, pc}
 810e308:	10036278 	.word	0x10036278
 810e30c:	0810ec0c 	.word	0x0810ec0c

0810e310 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e310:	b580      	push	{r7, lr}
 810e312:	b082      	sub	sp, #8
 810e314:	af00      	add	r7, sp, #0
 810e316:	4603      	mov	r3, r0
 810e318:	6039      	str	r1, [r7, #0]
 810e31a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 810e31c:	683b      	ldr	r3, [r7, #0]
 810e31e:	221a      	movs	r2, #26
 810e320:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 810e322:	f000 f843 	bl	810e3ac <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 810e326:	4b02      	ldr	r3, [pc, #8]	@ (810e330 <USBD_FS_SerialStrDescriptor+0x20>)
}
 810e328:	4618      	mov	r0, r3
 810e32a:	3708      	adds	r7, #8
 810e32c:	46bd      	mov	sp, r7
 810e32e:	bd80      	pop	{r7, pc}
 810e330:	100321e0 	.word	0x100321e0

0810e334 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e334:	b580      	push	{r7, lr}
 810e336:	b082      	sub	sp, #8
 810e338:	af00      	add	r7, sp, #0
 810e33a:	4603      	mov	r3, r0
 810e33c:	6039      	str	r1, [r7, #0]
 810e33e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 810e340:	79fb      	ldrb	r3, [r7, #7]
 810e342:	2b00      	cmp	r3, #0
 810e344:	d105      	bne.n	810e352 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 810e346:	683a      	ldr	r2, [r7, #0]
 810e348:	4907      	ldr	r1, [pc, #28]	@ (810e368 <USBD_FS_ConfigStrDescriptor+0x34>)
 810e34a:	4808      	ldr	r0, [pc, #32]	@ (810e36c <USBD_FS_ConfigStrDescriptor+0x38>)
 810e34c:	f7ff fd46 	bl	810dddc <USBD_GetString>
 810e350:	e004      	b.n	810e35c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 810e352:	683a      	ldr	r2, [r7, #0]
 810e354:	4904      	ldr	r1, [pc, #16]	@ (810e368 <USBD_FS_ConfigStrDescriptor+0x34>)
 810e356:	4805      	ldr	r0, [pc, #20]	@ (810e36c <USBD_FS_ConfigStrDescriptor+0x38>)
 810e358:	f7ff fd40 	bl	810dddc <USBD_GetString>
  }
  return USBD_StrDesc;
 810e35c:	4b02      	ldr	r3, [pc, #8]	@ (810e368 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 810e35e:	4618      	mov	r0, r3
 810e360:	3708      	adds	r7, #8
 810e362:	46bd      	mov	sp, r7
 810e364:	bd80      	pop	{r7, pc}
 810e366:	bf00      	nop
 810e368:	10036278 	.word	0x10036278
 810e36c:	0810ec1c 	.word	0x0810ec1c

0810e370 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 810e370:	b580      	push	{r7, lr}
 810e372:	b082      	sub	sp, #8
 810e374:	af00      	add	r7, sp, #0
 810e376:	4603      	mov	r3, r0
 810e378:	6039      	str	r1, [r7, #0]
 810e37a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 810e37c:	79fb      	ldrb	r3, [r7, #7]
 810e37e:	2b00      	cmp	r3, #0
 810e380:	d105      	bne.n	810e38e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 810e382:	683a      	ldr	r2, [r7, #0]
 810e384:	4907      	ldr	r1, [pc, #28]	@ (810e3a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 810e386:	4808      	ldr	r0, [pc, #32]	@ (810e3a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 810e388:	f7ff fd28 	bl	810dddc <USBD_GetString>
 810e38c:	e004      	b.n	810e398 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 810e38e:	683a      	ldr	r2, [r7, #0]
 810e390:	4904      	ldr	r1, [pc, #16]	@ (810e3a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 810e392:	4805      	ldr	r0, [pc, #20]	@ (810e3a8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 810e394:	f7ff fd22 	bl	810dddc <USBD_GetString>
  }
  return USBD_StrDesc;
 810e398:	4b02      	ldr	r3, [pc, #8]	@ (810e3a4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 810e39a:	4618      	mov	r0, r3
 810e39c:	3708      	adds	r7, #8
 810e39e:	46bd      	mov	sp, r7
 810e3a0:	bd80      	pop	{r7, pc}
 810e3a2:	bf00      	nop
 810e3a4:	10036278 	.word	0x10036278
 810e3a8:	0810ec28 	.word	0x0810ec28

0810e3ac <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 810e3ac:	b580      	push	{r7, lr}
 810e3ae:	b084      	sub	sp, #16
 810e3b0:	af00      	add	r7, sp, #0

//  deviceserial0 = DEVICE_SERIAL0;
//  deviceserial1 = DEVICE_SERIALW1;
//  deviceserial2 = DEVICE_SERIAL2;

  deviceserial0 = 0xAA;//*(uint32_t *) DEVICE_ID1;
 810e3b2:	23aa      	movs	r3, #170	@ 0xaa
 810e3b4:	60fb      	str	r3, [r7, #12]
  deviceserial1 = 0xAA;//*(uint32_t *) DEVICE_ID2;
 810e3b6:	23aa      	movs	r3, #170	@ 0xaa
 810e3b8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = 0xAA;//*(uint32_t *) DEVICE_ID3;
 810e3ba:	23aa      	movs	r3, #170	@ 0xaa
 810e3bc:	607b      	str	r3, [r7, #4]

/* USER CODE END SerialNum */

  deviceserial0 += deviceserial2;
 810e3be:	68fa      	ldr	r2, [r7, #12]
 810e3c0:	687b      	ldr	r3, [r7, #4]
 810e3c2:	4413      	add	r3, r2
 810e3c4:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 810e3c6:	68fb      	ldr	r3, [r7, #12]
 810e3c8:	2b00      	cmp	r3, #0
 810e3ca:	d009      	beq.n	810e3e0 <Get_SerialNum+0x34>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 810e3cc:	2208      	movs	r2, #8
 810e3ce:	4906      	ldr	r1, [pc, #24]	@ (810e3e8 <Get_SerialNum+0x3c>)
 810e3d0:	68f8      	ldr	r0, [r7, #12]
 810e3d2:	f000 f80d 	bl	810e3f0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 810e3d6:	2204      	movs	r2, #4
 810e3d8:	4904      	ldr	r1, [pc, #16]	@ (810e3ec <Get_SerialNum+0x40>)
 810e3da:	68b8      	ldr	r0, [r7, #8]
 810e3dc:	f000 f808 	bl	810e3f0 <IntToUnicode>
  }
}
 810e3e0:	bf00      	nop
 810e3e2:	3710      	adds	r7, #16
 810e3e4:	46bd      	mov	sp, r7
 810e3e6:	bd80      	pop	{r7, pc}
 810e3e8:	100321e2 	.word	0x100321e2
 810e3ec:	100321f2 	.word	0x100321f2

0810e3f0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 810e3f0:	b480      	push	{r7}
 810e3f2:	b087      	sub	sp, #28
 810e3f4:	af00      	add	r7, sp, #0
 810e3f6:	60f8      	str	r0, [r7, #12]
 810e3f8:	60b9      	str	r1, [r7, #8]
 810e3fa:	4613      	mov	r3, r2
 810e3fc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 810e3fe:	2300      	movs	r3, #0
 810e400:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 810e402:	2300      	movs	r3, #0
 810e404:	75fb      	strb	r3, [r7, #23]
 810e406:	e027      	b.n	810e458 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 810e408:	68fb      	ldr	r3, [r7, #12]
 810e40a:	0f1b      	lsrs	r3, r3, #28
 810e40c:	2b09      	cmp	r3, #9
 810e40e:	d80b      	bhi.n	810e428 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 810e410:	68fb      	ldr	r3, [r7, #12]
 810e412:	0f1b      	lsrs	r3, r3, #28
 810e414:	b2da      	uxtb	r2, r3
 810e416:	7dfb      	ldrb	r3, [r7, #23]
 810e418:	005b      	lsls	r3, r3, #1
 810e41a:	4619      	mov	r1, r3
 810e41c:	68bb      	ldr	r3, [r7, #8]
 810e41e:	440b      	add	r3, r1
 810e420:	3230      	adds	r2, #48	@ 0x30
 810e422:	b2d2      	uxtb	r2, r2
 810e424:	701a      	strb	r2, [r3, #0]
 810e426:	e00a      	b.n	810e43e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 810e428:	68fb      	ldr	r3, [r7, #12]
 810e42a:	0f1b      	lsrs	r3, r3, #28
 810e42c:	b2da      	uxtb	r2, r3
 810e42e:	7dfb      	ldrb	r3, [r7, #23]
 810e430:	005b      	lsls	r3, r3, #1
 810e432:	4619      	mov	r1, r3
 810e434:	68bb      	ldr	r3, [r7, #8]
 810e436:	440b      	add	r3, r1
 810e438:	3237      	adds	r2, #55	@ 0x37
 810e43a:	b2d2      	uxtb	r2, r2
 810e43c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 810e43e:	68fb      	ldr	r3, [r7, #12]
 810e440:	011b      	lsls	r3, r3, #4
 810e442:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 810e444:	7dfb      	ldrb	r3, [r7, #23]
 810e446:	005b      	lsls	r3, r3, #1
 810e448:	3301      	adds	r3, #1
 810e44a:	68ba      	ldr	r2, [r7, #8]
 810e44c:	4413      	add	r3, r2
 810e44e:	2200      	movs	r2, #0
 810e450:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 810e452:	7dfb      	ldrb	r3, [r7, #23]
 810e454:	3301      	adds	r3, #1
 810e456:	75fb      	strb	r3, [r7, #23]
 810e458:	7dfa      	ldrb	r2, [r7, #23]
 810e45a:	79fb      	ldrb	r3, [r7, #7]
 810e45c:	429a      	cmp	r2, r3
 810e45e:	d3d3      	bcc.n	810e408 <IntToUnicode+0x18>
  }
}
 810e460:	bf00      	nop
 810e462:	bf00      	nop
 810e464:	371c      	adds	r7, #28
 810e466:	46bd      	mov	sp, r7
 810e468:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e46c:	4770      	bx	lr
	...

0810e470 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 810e470:	b580      	push	{r7, lr}
 810e472:	b0ba      	sub	sp, #232	@ 0xe8
 810e474:	af00      	add	r7, sp, #0
 810e476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 810e478:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810e47c:	2200      	movs	r2, #0
 810e47e:	601a      	str	r2, [r3, #0]
 810e480:	605a      	str	r2, [r3, #4]
 810e482:	609a      	str	r2, [r3, #8]
 810e484:	60da      	str	r2, [r3, #12]
 810e486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 810e488:	f107 0310 	add.w	r3, r7, #16
 810e48c:	22c0      	movs	r2, #192	@ 0xc0
 810e48e:	2100      	movs	r1, #0
 810e490:	4618      	mov	r0, r3
 810e492:	f000 fb35 	bl	810eb00 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 810e496:	687b      	ldr	r3, [r7, #4]
 810e498:	681b      	ldr	r3, [r3, #0]
 810e49a:	4a34      	ldr	r2, [pc, #208]	@ (810e56c <HAL_PCD_MspInit+0xfc>)
 810e49c:	4293      	cmp	r3, r2
 810e49e:	d160      	bne.n	810e562 <HAL_PCD_MspInit+0xf2>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 810e4a0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 810e4a4:	f04f 0300 	mov.w	r3, #0
 810e4a8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 5;
 810e4ac:	2305      	movs	r3, #5
 810e4ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3N = 48;
 810e4b0:	2330      	movs	r3, #48	@ 0x30
 810e4b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 810e4b4:	2302      	movs	r3, #2
 810e4b6:	643b      	str	r3, [r7, #64]	@ 0x40
    PeriphClkInitStruct.PLL3.PLL3Q = 5;
 810e4b8:	2305      	movs	r3, #5
 810e4ba:	647b      	str	r3, [r7, #68]	@ 0x44
    PeriphClkInitStruct.PLL3.PLL3R = 4;
 810e4bc:	2304      	movs	r3, #4
 810e4be:	64bb      	str	r3, [r7, #72]	@ 0x48
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 810e4c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 810e4c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 810e4c6:	2300      	movs	r3, #0
 810e4c8:	657b      	str	r3, [r7, #84]	@ 0x54
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 810e4ca:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 810e4ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810e4d2:	f107 0310 	add.w	r3, r7, #16
 810e4d6:	4618      	mov	r0, r3
 810e4d8:	f7f7 fc44 	bl	8105d64 <HAL_RCCEx_PeriphCLKConfig>
 810e4dc:	4603      	mov	r3, r0
 810e4de:	2b00      	cmp	r3, #0
 810e4e0:	d001      	beq.n	810e4e6 <HAL_PCD_MspInit+0x76>
    {
      Error_Handler();
 810e4e2:	f7f3 fe9d 	bl	8102220 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 810e4e6:	f7f7 fa29 	bl	810593c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810e4ea:	4b21      	ldr	r3, [pc, #132]	@ (810e570 <HAL_PCD_MspInit+0x100>)
 810e4ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810e4f0:	4a1f      	ldr	r2, [pc, #124]	@ (810e570 <HAL_PCD_MspInit+0x100>)
 810e4f2:	f043 0301 	orr.w	r3, r3, #1
 810e4f6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810e4fa:	4b1d      	ldr	r3, [pc, #116]	@ (810e570 <HAL_PCD_MspInit+0x100>)
 810e4fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810e500:	f003 0301 	and.w	r3, r3, #1
 810e504:	60fb      	str	r3, [r7, #12]
 810e506:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 810e508:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 810e50c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810e510:	2302      	movs	r3, #2
 810e512:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 810e516:	2300      	movs	r3, #0
 810e518:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 810e51c:	2303      	movs	r3, #3
 810e51e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 810e522:	230a      	movs	r3, #10
 810e524:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 810e528:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 810e52c:	4619      	mov	r1, r3
 810e52e:	4811      	ldr	r0, [pc, #68]	@ (810e574 <HAL_PCD_MspInit+0x104>)
 810e530:	f7f4 fb6a 	bl	8102c08 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 810e534:	4b0e      	ldr	r3, [pc, #56]	@ (810e570 <HAL_PCD_MspInit+0x100>)
 810e536:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810e53a:	4a0d      	ldr	r2, [pc, #52]	@ (810e570 <HAL_PCD_MspInit+0x100>)
 810e53c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 810e540:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 810e544:	4b0a      	ldr	r3, [pc, #40]	@ (810e570 <HAL_PCD_MspInit+0x100>)
 810e546:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 810e54a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810e54e:	60bb      	str	r3, [r7, #8]
 810e550:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 810e552:	2200      	movs	r2, #0
 810e554:	2100      	movs	r1, #0
 810e556:	2065      	movs	r0, #101	@ 0x65
 810e558:	f7f4 fb1c 	bl	8102b94 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 810e55c:	2065      	movs	r0, #101	@ 0x65
 810e55e:	f7f4 fb33 	bl	8102bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 810e562:	bf00      	nop
 810e564:	37e8      	adds	r7, #232	@ 0xe8
 810e566:	46bd      	mov	sp, r7
 810e568:	bd80      	pop	{r7, pc}
 810e56a:	bf00      	nop
 810e56c:	40080000 	.word	0x40080000
 810e570:	58024400 	.word	0x58024400
 810e574:	58020000 	.word	0x58020000

0810e578 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e578:	b580      	push	{r7, lr}
 810e57a:	b082      	sub	sp, #8
 810e57c:	af00      	add	r7, sp, #0
 810e57e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 810e580:	687b      	ldr	r3, [r7, #4]
 810e582:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 810e586:	687b      	ldr	r3, [r7, #4]
 810e588:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 810e58c:	4619      	mov	r1, r3
 810e58e:	4610      	mov	r0, r2
 810e590:	f7fe fa97 	bl	810cac2 <USBD_LL_SetupStage>
}
 810e594:	bf00      	nop
 810e596:	3708      	adds	r7, #8
 810e598:	46bd      	mov	sp, r7
 810e59a:	bd80      	pop	{r7, pc}

0810e59c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e59c:	b580      	push	{r7, lr}
 810e59e:	b082      	sub	sp, #8
 810e5a0:	af00      	add	r7, sp, #0
 810e5a2:	6078      	str	r0, [r7, #4]
 810e5a4:	460b      	mov	r3, r1
 810e5a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 810e5a8:	687b      	ldr	r3, [r7, #4]
 810e5aa:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 810e5ae:	78fa      	ldrb	r2, [r7, #3]
 810e5b0:	6879      	ldr	r1, [r7, #4]
 810e5b2:	4613      	mov	r3, r2
 810e5b4:	00db      	lsls	r3, r3, #3
 810e5b6:	4413      	add	r3, r2
 810e5b8:	009b      	lsls	r3, r3, #2
 810e5ba:	440b      	add	r3, r1
 810e5bc:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 810e5c0:	681a      	ldr	r2, [r3, #0]
 810e5c2:	78fb      	ldrb	r3, [r7, #3]
 810e5c4:	4619      	mov	r1, r3
 810e5c6:	f7fe fad1 	bl	810cb6c <USBD_LL_DataOutStage>
}
 810e5ca:	bf00      	nop
 810e5cc:	3708      	adds	r7, #8
 810e5ce:	46bd      	mov	sp, r7
 810e5d0:	bd80      	pop	{r7, pc}

0810e5d2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e5d2:	b580      	push	{r7, lr}
 810e5d4:	b082      	sub	sp, #8
 810e5d6:	af00      	add	r7, sp, #0
 810e5d8:	6078      	str	r0, [r7, #4]
 810e5da:	460b      	mov	r3, r1
 810e5dc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 810e5de:	687b      	ldr	r3, [r7, #4]
 810e5e0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 810e5e4:	78fa      	ldrb	r2, [r7, #3]
 810e5e6:	6879      	ldr	r1, [r7, #4]
 810e5e8:	4613      	mov	r3, r2
 810e5ea:	00db      	lsls	r3, r3, #3
 810e5ec:	4413      	add	r3, r2
 810e5ee:	009b      	lsls	r3, r3, #2
 810e5f0:	440b      	add	r3, r1
 810e5f2:	3320      	adds	r3, #32
 810e5f4:	681a      	ldr	r2, [r3, #0]
 810e5f6:	78fb      	ldrb	r3, [r7, #3]
 810e5f8:	4619      	mov	r1, r3
 810e5fa:	f7fe fb6a 	bl	810ccd2 <USBD_LL_DataInStage>
}
 810e5fe:	bf00      	nop
 810e600:	3708      	adds	r7, #8
 810e602:	46bd      	mov	sp, r7
 810e604:	bd80      	pop	{r7, pc}

0810e606 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e606:	b580      	push	{r7, lr}
 810e608:	b082      	sub	sp, #8
 810e60a:	af00      	add	r7, sp, #0
 810e60c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 810e60e:	687b      	ldr	r3, [r7, #4]
 810e610:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e614:	4618      	mov	r0, r3
 810e616:	f7fe fca4 	bl	810cf62 <USBD_LL_SOF>
}
 810e61a:	bf00      	nop
 810e61c:	3708      	adds	r7, #8
 810e61e:	46bd      	mov	sp, r7
 810e620:	bd80      	pop	{r7, pc}

0810e622 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e622:	b580      	push	{r7, lr}
 810e624:	b084      	sub	sp, #16
 810e626:	af00      	add	r7, sp, #0
 810e628:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 810e62a:	2301      	movs	r3, #1
 810e62c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 810e62e:	687b      	ldr	r3, [r7, #4]
 810e630:	79db      	ldrb	r3, [r3, #7]
 810e632:	2b00      	cmp	r3, #0
 810e634:	d102      	bne.n	810e63c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 810e636:	2300      	movs	r3, #0
 810e638:	73fb      	strb	r3, [r7, #15]
 810e63a:	e008      	b.n	810e64e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 810e63c:	687b      	ldr	r3, [r7, #4]
 810e63e:	79db      	ldrb	r3, [r3, #7]
 810e640:	2b02      	cmp	r3, #2
 810e642:	d102      	bne.n	810e64a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 810e644:	2301      	movs	r3, #1
 810e646:	73fb      	strb	r3, [r7, #15]
 810e648:	e001      	b.n	810e64e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 810e64a:	f7f3 fde9 	bl	8102220 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 810e64e:	687b      	ldr	r3, [r7, #4]
 810e650:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e654:	7bfa      	ldrb	r2, [r7, #15]
 810e656:	4611      	mov	r1, r2
 810e658:	4618      	mov	r0, r3
 810e65a:	f7fe fc3e 	bl	810ceda <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 810e65e:	687b      	ldr	r3, [r7, #4]
 810e660:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e664:	4618      	mov	r0, r3
 810e666:	f7fe fbe6 	bl	810ce36 <USBD_LL_Reset>
}
 810e66a:	bf00      	nop
 810e66c:	3710      	adds	r7, #16
 810e66e:	46bd      	mov	sp, r7
 810e670:	bd80      	pop	{r7, pc}
	...

0810e674 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e674:	b580      	push	{r7, lr}
 810e676:	b082      	sub	sp, #8
 810e678:	af00      	add	r7, sp, #0
 810e67a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 810e67c:	687b      	ldr	r3, [r7, #4]
 810e67e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e682:	4618      	mov	r0, r3
 810e684:	f7fe fc39 	bl	810cefa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 810e688:	687b      	ldr	r3, [r7, #4]
 810e68a:	681b      	ldr	r3, [r3, #0]
 810e68c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 810e690:	681b      	ldr	r3, [r3, #0]
 810e692:	687a      	ldr	r2, [r7, #4]
 810e694:	6812      	ldr	r2, [r2, #0]
 810e696:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 810e69a:	f043 0301 	orr.w	r3, r3, #1
 810e69e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 810e6a0:	687b      	ldr	r3, [r7, #4]
 810e6a2:	7adb      	ldrb	r3, [r3, #11]
 810e6a4:	2b00      	cmp	r3, #0
 810e6a6:	d005      	beq.n	810e6b4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 810e6a8:	4b04      	ldr	r3, [pc, #16]	@ (810e6bc <HAL_PCD_SuspendCallback+0x48>)
 810e6aa:	691b      	ldr	r3, [r3, #16]
 810e6ac:	4a03      	ldr	r2, [pc, #12]	@ (810e6bc <HAL_PCD_SuspendCallback+0x48>)
 810e6ae:	f043 0306 	orr.w	r3, r3, #6
 810e6b2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 810e6b4:	bf00      	nop
 810e6b6:	3708      	adds	r7, #8
 810e6b8:	46bd      	mov	sp, r7
 810e6ba:	bd80      	pop	{r7, pc}
 810e6bc:	e000ed00 	.word	0xe000ed00

0810e6c0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e6c0:	b580      	push	{r7, lr}
 810e6c2:	b082      	sub	sp, #8
 810e6c4:	af00      	add	r7, sp, #0
 810e6c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 810e6c8:	687b      	ldr	r3, [r7, #4]
 810e6ca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e6ce:	4618      	mov	r0, r3
 810e6d0:	f7fe fc2f 	bl	810cf32 <USBD_LL_Resume>
}
 810e6d4:	bf00      	nop
 810e6d6:	3708      	adds	r7, #8
 810e6d8:	46bd      	mov	sp, r7
 810e6da:	bd80      	pop	{r7, pc}

0810e6dc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e6dc:	b580      	push	{r7, lr}
 810e6de:	b082      	sub	sp, #8
 810e6e0:	af00      	add	r7, sp, #0
 810e6e2:	6078      	str	r0, [r7, #4]
 810e6e4:	460b      	mov	r3, r1
 810e6e6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 810e6e8:	687b      	ldr	r3, [r7, #4]
 810e6ea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e6ee:	78fa      	ldrb	r2, [r7, #3]
 810e6f0:	4611      	mov	r1, r2
 810e6f2:	4618      	mov	r0, r3
 810e6f4:	f7fe fc87 	bl	810d006 <USBD_LL_IsoOUTIncomplete>
}
 810e6f8:	bf00      	nop
 810e6fa:	3708      	adds	r7, #8
 810e6fc:	46bd      	mov	sp, r7
 810e6fe:	bd80      	pop	{r7, pc}

0810e700 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e700:	b580      	push	{r7, lr}
 810e702:	b082      	sub	sp, #8
 810e704:	af00      	add	r7, sp, #0
 810e706:	6078      	str	r0, [r7, #4]
 810e708:	460b      	mov	r3, r1
 810e70a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 810e70c:	687b      	ldr	r3, [r7, #4]
 810e70e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e712:	78fa      	ldrb	r2, [r7, #3]
 810e714:	4611      	mov	r1, r2
 810e716:	4618      	mov	r0, r3
 810e718:	f7fe fc43 	bl	810cfa2 <USBD_LL_IsoINIncomplete>
}
 810e71c:	bf00      	nop
 810e71e:	3708      	adds	r7, #8
 810e720:	46bd      	mov	sp, r7
 810e722:	bd80      	pop	{r7, pc}

0810e724 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e724:	b580      	push	{r7, lr}
 810e726:	b082      	sub	sp, #8
 810e728:	af00      	add	r7, sp, #0
 810e72a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 810e72c:	687b      	ldr	r3, [r7, #4]
 810e72e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e732:	4618      	mov	r0, r3
 810e734:	f7fe fc99 	bl	810d06a <USBD_LL_DevConnected>
}
 810e738:	bf00      	nop
 810e73a:	3708      	adds	r7, #8
 810e73c:	46bd      	mov	sp, r7
 810e73e:	bd80      	pop	{r7, pc}

0810e740 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 810e740:	b580      	push	{r7, lr}
 810e742:	b082      	sub	sp, #8
 810e744:	af00      	add	r7, sp, #0
 810e746:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 810e748:	687b      	ldr	r3, [r7, #4]
 810e74a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 810e74e:	4618      	mov	r0, r3
 810e750:	f7fe fc96 	bl	810d080 <USBD_LL_DevDisconnected>
}
 810e754:	bf00      	nop
 810e756:	3708      	adds	r7, #8
 810e758:	46bd      	mov	sp, r7
 810e75a:	bd80      	pop	{r7, pc}

0810e75c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 810e75c:	b580      	push	{r7, lr}
 810e75e:	b082      	sub	sp, #8
 810e760:	af00      	add	r7, sp, #0
 810e762:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 810e764:	687b      	ldr	r3, [r7, #4]
 810e766:	781b      	ldrb	r3, [r3, #0]
 810e768:	2b00      	cmp	r3, #0
 810e76a:	d13e      	bne.n	810e7ea <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 810e76c:	4a21      	ldr	r2, [pc, #132]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e76e:	687b      	ldr	r3, [r7, #4]
 810e770:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 810e774:	687b      	ldr	r3, [r7, #4]
 810e776:	4a1f      	ldr	r2, [pc, #124]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e778:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 810e77c:	4b1d      	ldr	r3, [pc, #116]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e77e:	4a1e      	ldr	r2, [pc, #120]	@ (810e7f8 <USBD_LL_Init+0x9c>)
 810e780:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 810e782:	4b1c      	ldr	r3, [pc, #112]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e784:	2209      	movs	r2, #9
 810e786:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 810e788:	4b1a      	ldr	r3, [pc, #104]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e78a:	2202      	movs	r2, #2
 810e78c:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = ENABLE;
 810e78e:	4b19      	ldr	r3, [pc, #100]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e790:	2201      	movs	r2, #1
 810e792:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 810e794:	4b17      	ldr	r3, [pc, #92]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e796:	2202      	movs	r2, #2
 810e798:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 810e79a:	4b16      	ldr	r3, [pc, #88]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e79c:	2200      	movs	r2, #0
 810e79e:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 810e7a0:	4b14      	ldr	r3, [pc, #80]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7a2:	2200      	movs	r2, #0
 810e7a4:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 810e7a6:	4b13      	ldr	r3, [pc, #76]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7a8:	2200      	movs	r2, #0
 810e7aa:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 810e7ac:	4b11      	ldr	r3, [pc, #68]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7ae:	2200      	movs	r2, #0
 810e7b0:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 810e7b2:	4b10      	ldr	r3, [pc, #64]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7b4:	2200      	movs	r2, #0
 810e7b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 810e7b8:	4b0e      	ldr	r3, [pc, #56]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7ba:	2200      	movs	r2, #0
 810e7bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 810e7be:	480d      	ldr	r0, [pc, #52]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7c0:	f7f5 fd94 	bl	81042ec <HAL_PCD_Init>
 810e7c4:	4603      	mov	r3, r0
 810e7c6:	2b00      	cmp	r3, #0
 810e7c8:	d001      	beq.n	810e7ce <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 810e7ca:	f7f3 fd29 	bl	8102220 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 810e7ce:	2180      	movs	r1, #128	@ 0x80
 810e7d0:	4808      	ldr	r0, [pc, #32]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7d2:	f7f6 ffea 	bl	81057aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 810e7d6:	2240      	movs	r2, #64	@ 0x40
 810e7d8:	2100      	movs	r1, #0
 810e7da:	4806      	ldr	r0, [pc, #24]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7dc:	f7f6 ff9e 	bl	810571c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 810e7e0:	2280      	movs	r2, #128	@ 0x80
 810e7e2:	2101      	movs	r1, #1
 810e7e4:	4803      	ldr	r0, [pc, #12]	@ (810e7f4 <USBD_LL_Init+0x98>)
 810e7e6:	f7f6 ff99 	bl	810571c <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 810e7ea:	2300      	movs	r3, #0
}
 810e7ec:	4618      	mov	r0, r3
 810e7ee:	3708      	adds	r7, #8
 810e7f0:	46bd      	mov	sp, r7
 810e7f2:	bd80      	pop	{r7, pc}
 810e7f4:	10036478 	.word	0x10036478
 810e7f8:	40080000 	.word	0x40080000

0810e7fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 810e7fc:	b580      	push	{r7, lr}
 810e7fe:	b084      	sub	sp, #16
 810e800:	af00      	add	r7, sp, #0
 810e802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e804:	2300      	movs	r3, #0
 810e806:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e808:	2300      	movs	r3, #0
 810e80a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 810e80c:	687b      	ldr	r3, [r7, #4]
 810e80e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e812:	4618      	mov	r0, r3
 810e814:	f7f5 fe76 	bl	8104504 <HAL_PCD_Start>
 810e818:	4603      	mov	r3, r0
 810e81a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e81c:	7bfb      	ldrb	r3, [r7, #15]
 810e81e:	4618      	mov	r0, r3
 810e820:	f000 f942 	bl	810eaa8 <USBD_Get_USB_Status>
 810e824:	4603      	mov	r3, r0
 810e826:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e828:	7bbb      	ldrb	r3, [r7, #14]
}
 810e82a:	4618      	mov	r0, r3
 810e82c:	3710      	adds	r7, #16
 810e82e:	46bd      	mov	sp, r7
 810e830:	bd80      	pop	{r7, pc}

0810e832 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 810e832:	b580      	push	{r7, lr}
 810e834:	b084      	sub	sp, #16
 810e836:	af00      	add	r7, sp, #0
 810e838:	6078      	str	r0, [r7, #4]
 810e83a:	4608      	mov	r0, r1
 810e83c:	4611      	mov	r1, r2
 810e83e:	461a      	mov	r2, r3
 810e840:	4603      	mov	r3, r0
 810e842:	70fb      	strb	r3, [r7, #3]
 810e844:	460b      	mov	r3, r1
 810e846:	70bb      	strb	r3, [r7, #2]
 810e848:	4613      	mov	r3, r2
 810e84a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e84c:	2300      	movs	r3, #0
 810e84e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e850:	2300      	movs	r3, #0
 810e852:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 810e854:	687b      	ldr	r3, [r7, #4]
 810e856:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 810e85a:	78bb      	ldrb	r3, [r7, #2]
 810e85c:	883a      	ldrh	r2, [r7, #0]
 810e85e:	78f9      	ldrb	r1, [r7, #3]
 810e860:	f7f6 fb77 	bl	8104f52 <HAL_PCD_EP_Open>
 810e864:	4603      	mov	r3, r0
 810e866:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e868:	7bfb      	ldrb	r3, [r7, #15]
 810e86a:	4618      	mov	r0, r3
 810e86c:	f000 f91c 	bl	810eaa8 <USBD_Get_USB_Status>
 810e870:	4603      	mov	r3, r0
 810e872:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e874:	7bbb      	ldrb	r3, [r7, #14]
}
 810e876:	4618      	mov	r0, r3
 810e878:	3710      	adds	r7, #16
 810e87a:	46bd      	mov	sp, r7
 810e87c:	bd80      	pop	{r7, pc}

0810e87e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810e87e:	b580      	push	{r7, lr}
 810e880:	b084      	sub	sp, #16
 810e882:	af00      	add	r7, sp, #0
 810e884:	6078      	str	r0, [r7, #4]
 810e886:	460b      	mov	r3, r1
 810e888:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e88a:	2300      	movs	r3, #0
 810e88c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e88e:	2300      	movs	r3, #0
 810e890:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 810e892:	687b      	ldr	r3, [r7, #4]
 810e894:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e898:	78fa      	ldrb	r2, [r7, #3]
 810e89a:	4611      	mov	r1, r2
 810e89c:	4618      	mov	r0, r3
 810e89e:	f7f6 fbc2 	bl	8105026 <HAL_PCD_EP_Close>
 810e8a2:	4603      	mov	r3, r0
 810e8a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e8a6:	7bfb      	ldrb	r3, [r7, #15]
 810e8a8:	4618      	mov	r0, r3
 810e8aa:	f000 f8fd 	bl	810eaa8 <USBD_Get_USB_Status>
 810e8ae:	4603      	mov	r3, r0
 810e8b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e8b2:	7bbb      	ldrb	r3, [r7, #14]
}
 810e8b4:	4618      	mov	r0, r3
 810e8b6:	3710      	adds	r7, #16
 810e8b8:	46bd      	mov	sp, r7
 810e8ba:	bd80      	pop	{r7, pc}

0810e8bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810e8bc:	b580      	push	{r7, lr}
 810e8be:	b084      	sub	sp, #16
 810e8c0:	af00      	add	r7, sp, #0
 810e8c2:	6078      	str	r0, [r7, #4]
 810e8c4:	460b      	mov	r3, r1
 810e8c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e8c8:	2300      	movs	r3, #0
 810e8ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e8cc:	2300      	movs	r3, #0
 810e8ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 810e8d0:	687b      	ldr	r3, [r7, #4]
 810e8d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e8d6:	78fa      	ldrb	r2, [r7, #3]
 810e8d8:	4611      	mov	r1, r2
 810e8da:	4618      	mov	r0, r3
 810e8dc:	f7f6 fc7a 	bl	81051d4 <HAL_PCD_EP_SetStall>
 810e8e0:	4603      	mov	r3, r0
 810e8e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e8e4:	7bfb      	ldrb	r3, [r7, #15]
 810e8e6:	4618      	mov	r0, r3
 810e8e8:	f000 f8de 	bl	810eaa8 <USBD_Get_USB_Status>
 810e8ec:	4603      	mov	r3, r0
 810e8ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e8f0:	7bbb      	ldrb	r3, [r7, #14]
}
 810e8f2:	4618      	mov	r0, r3
 810e8f4:	3710      	adds	r7, #16
 810e8f6:	46bd      	mov	sp, r7
 810e8f8:	bd80      	pop	{r7, pc}

0810e8fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810e8fa:	b580      	push	{r7, lr}
 810e8fc:	b084      	sub	sp, #16
 810e8fe:	af00      	add	r7, sp, #0
 810e900:	6078      	str	r0, [r7, #4]
 810e902:	460b      	mov	r3, r1
 810e904:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e906:	2300      	movs	r3, #0
 810e908:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e90a:	2300      	movs	r3, #0
 810e90c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 810e90e:	687b      	ldr	r3, [r7, #4]
 810e910:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e914:	78fa      	ldrb	r2, [r7, #3]
 810e916:	4611      	mov	r1, r2
 810e918:	4618      	mov	r0, r3
 810e91a:	f7f6 fcbe 	bl	810529a <HAL_PCD_EP_ClrStall>
 810e91e:	4603      	mov	r3, r0
 810e920:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e922:	7bfb      	ldrb	r3, [r7, #15]
 810e924:	4618      	mov	r0, r3
 810e926:	f000 f8bf 	bl	810eaa8 <USBD_Get_USB_Status>
 810e92a:	4603      	mov	r3, r0
 810e92c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e92e:	7bbb      	ldrb	r3, [r7, #14]
}
 810e930:	4618      	mov	r0, r3
 810e932:	3710      	adds	r7, #16
 810e934:	46bd      	mov	sp, r7
 810e936:	bd80      	pop	{r7, pc}

0810e938 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810e938:	b480      	push	{r7}
 810e93a:	b085      	sub	sp, #20
 810e93c:	af00      	add	r7, sp, #0
 810e93e:	6078      	str	r0, [r7, #4]
 810e940:	460b      	mov	r3, r1
 810e942:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 810e944:	687b      	ldr	r3, [r7, #4]
 810e946:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e94a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 810e94c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 810e950:	2b00      	cmp	r3, #0
 810e952:	da0b      	bge.n	810e96c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 810e954:	78fb      	ldrb	r3, [r7, #3]
 810e956:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810e95a:	68f9      	ldr	r1, [r7, #12]
 810e95c:	4613      	mov	r3, r2
 810e95e:	00db      	lsls	r3, r3, #3
 810e960:	4413      	add	r3, r2
 810e962:	009b      	lsls	r3, r3, #2
 810e964:	440b      	add	r3, r1
 810e966:	3316      	adds	r3, #22
 810e968:	781b      	ldrb	r3, [r3, #0]
 810e96a:	e00b      	b.n	810e984 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 810e96c:	78fb      	ldrb	r3, [r7, #3]
 810e96e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 810e972:	68f9      	ldr	r1, [r7, #12]
 810e974:	4613      	mov	r3, r2
 810e976:	00db      	lsls	r3, r3, #3
 810e978:	4413      	add	r3, r2
 810e97a:	009b      	lsls	r3, r3, #2
 810e97c:	440b      	add	r3, r1
 810e97e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 810e982:	781b      	ldrb	r3, [r3, #0]
  }
}
 810e984:	4618      	mov	r0, r3
 810e986:	3714      	adds	r7, #20
 810e988:	46bd      	mov	sp, r7
 810e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810e98e:	4770      	bx	lr

0810e990 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 810e990:	b580      	push	{r7, lr}
 810e992:	b084      	sub	sp, #16
 810e994:	af00      	add	r7, sp, #0
 810e996:	6078      	str	r0, [r7, #4]
 810e998:	460b      	mov	r3, r1
 810e99a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e99c:	2300      	movs	r3, #0
 810e99e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e9a0:	2300      	movs	r3, #0
 810e9a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 810e9a4:	687b      	ldr	r3, [r7, #4]
 810e9a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810e9aa:	78fa      	ldrb	r2, [r7, #3]
 810e9ac:	4611      	mov	r1, r2
 810e9ae:	4618      	mov	r0, r3
 810e9b0:	f7f6 faab 	bl	8104f0a <HAL_PCD_SetAddress>
 810e9b4:	4603      	mov	r3, r0
 810e9b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e9b8:	7bfb      	ldrb	r3, [r7, #15]
 810e9ba:	4618      	mov	r0, r3
 810e9bc:	f000 f874 	bl	810eaa8 <USBD_Get_USB_Status>
 810e9c0:	4603      	mov	r3, r0
 810e9c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 810e9c4:	7bbb      	ldrb	r3, [r7, #14]
}
 810e9c6:	4618      	mov	r0, r3
 810e9c8:	3710      	adds	r7, #16
 810e9ca:	46bd      	mov	sp, r7
 810e9cc:	bd80      	pop	{r7, pc}

0810e9ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 810e9ce:	b580      	push	{r7, lr}
 810e9d0:	b086      	sub	sp, #24
 810e9d2:	af00      	add	r7, sp, #0
 810e9d4:	60f8      	str	r0, [r7, #12]
 810e9d6:	607a      	str	r2, [r7, #4]
 810e9d8:	603b      	str	r3, [r7, #0]
 810e9da:	460b      	mov	r3, r1
 810e9dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810e9de:	2300      	movs	r3, #0
 810e9e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810e9e2:	2300      	movs	r3, #0
 810e9e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 810e9e6:	68fb      	ldr	r3, [r7, #12]
 810e9e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 810e9ec:	7af9      	ldrb	r1, [r7, #11]
 810e9ee:	683b      	ldr	r3, [r7, #0]
 810e9f0:	687a      	ldr	r2, [r7, #4]
 810e9f2:	f7f6 fbb5 	bl	8105160 <HAL_PCD_EP_Transmit>
 810e9f6:	4603      	mov	r3, r0
 810e9f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810e9fa:	7dfb      	ldrb	r3, [r7, #23]
 810e9fc:	4618      	mov	r0, r3
 810e9fe:	f000 f853 	bl	810eaa8 <USBD_Get_USB_Status>
 810ea02:	4603      	mov	r3, r0
 810ea04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 810ea06:	7dbb      	ldrb	r3, [r7, #22]
}
 810ea08:	4618      	mov	r0, r3
 810ea0a:	3718      	adds	r7, #24
 810ea0c:	46bd      	mov	sp, r7
 810ea0e:	bd80      	pop	{r7, pc}

0810ea10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 810ea10:	b580      	push	{r7, lr}
 810ea12:	b086      	sub	sp, #24
 810ea14:	af00      	add	r7, sp, #0
 810ea16:	60f8      	str	r0, [r7, #12]
 810ea18:	607a      	str	r2, [r7, #4]
 810ea1a:	603b      	str	r3, [r7, #0]
 810ea1c:	460b      	mov	r3, r1
 810ea1e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 810ea20:	2300      	movs	r3, #0
 810ea22:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810ea24:	2300      	movs	r3, #0
 810ea26:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 810ea28:	68fb      	ldr	r3, [r7, #12]
 810ea2a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 810ea2e:	7af9      	ldrb	r1, [r7, #11]
 810ea30:	683b      	ldr	r3, [r7, #0]
 810ea32:	687a      	ldr	r2, [r7, #4]
 810ea34:	f7f6 fb41 	bl	81050ba <HAL_PCD_EP_Receive>
 810ea38:	4603      	mov	r3, r0
 810ea3a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 810ea3c:	7dfb      	ldrb	r3, [r7, #23]
 810ea3e:	4618      	mov	r0, r3
 810ea40:	f000 f832 	bl	810eaa8 <USBD_Get_USB_Status>
 810ea44:	4603      	mov	r3, r0
 810ea46:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 810ea48:	7dbb      	ldrb	r3, [r7, #22]
}
 810ea4a:	4618      	mov	r0, r3
 810ea4c:	3718      	adds	r7, #24
 810ea4e:	46bd      	mov	sp, r7
 810ea50:	bd80      	pop	{r7, pc}

0810ea52 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 810ea52:	b580      	push	{r7, lr}
 810ea54:	b082      	sub	sp, #8
 810ea56:	af00      	add	r7, sp, #0
 810ea58:	6078      	str	r0, [r7, #4]
 810ea5a:	460b      	mov	r3, r1
 810ea5c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 810ea5e:	687b      	ldr	r3, [r7, #4]
 810ea60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 810ea64:	78fa      	ldrb	r2, [r7, #3]
 810ea66:	4611      	mov	r1, r2
 810ea68:	4618      	mov	r0, r3
 810ea6a:	f7f6 fb61 	bl	8105130 <HAL_PCD_EP_GetRxCount>
 810ea6e:	4603      	mov	r3, r0
}
 810ea70:	4618      	mov	r0, r3
 810ea72:	3708      	adds	r7, #8
 810ea74:	46bd      	mov	sp, r7
 810ea76:	bd80      	pop	{r7, pc}

0810ea78 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 810ea78:	b480      	push	{r7}
 810ea7a:	b083      	sub	sp, #12
 810ea7c:	af00      	add	r7, sp, #0
 810ea7e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 810ea80:	4b03      	ldr	r3, [pc, #12]	@ (810ea90 <USBD_static_malloc+0x18>)
}
 810ea82:	4618      	mov	r0, r3
 810ea84:	370c      	adds	r7, #12
 810ea86:	46bd      	mov	sp, r7
 810ea88:	f85d 7b04 	ldr.w	r7, [sp], #4
 810ea8c:	4770      	bx	lr
 810ea8e:	bf00      	nop
 810ea90:	1003695c 	.word	0x1003695c

0810ea94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 810ea94:	b480      	push	{r7}
 810ea96:	b083      	sub	sp, #12
 810ea98:	af00      	add	r7, sp, #0
 810ea9a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 810ea9c:	bf00      	nop
 810ea9e:	370c      	adds	r7, #12
 810eaa0:	46bd      	mov	sp, r7
 810eaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eaa6:	4770      	bx	lr

0810eaa8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 810eaa8:	b480      	push	{r7}
 810eaaa:	b085      	sub	sp, #20
 810eaac:	af00      	add	r7, sp, #0
 810eaae:	4603      	mov	r3, r0
 810eab0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 810eab2:	2300      	movs	r3, #0
 810eab4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 810eab6:	79fb      	ldrb	r3, [r7, #7]
 810eab8:	2b03      	cmp	r3, #3
 810eaba:	d817      	bhi.n	810eaec <USBD_Get_USB_Status+0x44>
 810eabc:	a201      	add	r2, pc, #4	@ (adr r2, 810eac4 <USBD_Get_USB_Status+0x1c>)
 810eabe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810eac2:	bf00      	nop
 810eac4:	0810ead5 	.word	0x0810ead5
 810eac8:	0810eadb 	.word	0x0810eadb
 810eacc:	0810eae1 	.word	0x0810eae1
 810ead0:	0810eae7 	.word	0x0810eae7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 810ead4:	2300      	movs	r3, #0
 810ead6:	73fb      	strb	r3, [r7, #15]
    break;
 810ead8:	e00b      	b.n	810eaf2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 810eada:	2303      	movs	r3, #3
 810eadc:	73fb      	strb	r3, [r7, #15]
    break;
 810eade:	e008      	b.n	810eaf2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 810eae0:	2301      	movs	r3, #1
 810eae2:	73fb      	strb	r3, [r7, #15]
    break;
 810eae4:	e005      	b.n	810eaf2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 810eae6:	2303      	movs	r3, #3
 810eae8:	73fb      	strb	r3, [r7, #15]
    break;
 810eaea:	e002      	b.n	810eaf2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 810eaec:	2303      	movs	r3, #3
 810eaee:	73fb      	strb	r3, [r7, #15]
    break;
 810eaf0:	bf00      	nop
  }
  return usb_status;
 810eaf2:	7bfb      	ldrb	r3, [r7, #15]
}
 810eaf4:	4618      	mov	r0, r3
 810eaf6:	3714      	adds	r7, #20
 810eaf8:	46bd      	mov	sp, r7
 810eafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 810eafe:	4770      	bx	lr

0810eb00 <memset>:
 810eb00:	4402      	add	r2, r0
 810eb02:	4603      	mov	r3, r0
 810eb04:	4293      	cmp	r3, r2
 810eb06:	d100      	bne.n	810eb0a <memset+0xa>
 810eb08:	4770      	bx	lr
 810eb0a:	f803 1b01 	strb.w	r1, [r3], #1
 810eb0e:	e7f9      	b.n	810eb04 <memset+0x4>

0810eb10 <strncpy>:
 810eb10:	b510      	push	{r4, lr}
 810eb12:	3901      	subs	r1, #1
 810eb14:	4603      	mov	r3, r0
 810eb16:	b132      	cbz	r2, 810eb26 <strncpy+0x16>
 810eb18:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 810eb1c:	f803 4b01 	strb.w	r4, [r3], #1
 810eb20:	3a01      	subs	r2, #1
 810eb22:	2c00      	cmp	r4, #0
 810eb24:	d1f7      	bne.n	810eb16 <strncpy+0x6>
 810eb26:	441a      	add	r2, r3
 810eb28:	2100      	movs	r1, #0
 810eb2a:	4293      	cmp	r3, r2
 810eb2c:	d100      	bne.n	810eb30 <strncpy+0x20>
 810eb2e:	bd10      	pop	{r4, pc}
 810eb30:	f803 1b01 	strb.w	r1, [r3], #1
 810eb34:	e7f9      	b.n	810eb2a <strncpy+0x1a>
	...

0810eb38 <__libc_init_array>:
 810eb38:	b570      	push	{r4, r5, r6, lr}
 810eb3a:	4d0d      	ldr	r5, [pc, #52]	@ (810eb70 <__libc_init_array+0x38>)
 810eb3c:	4c0d      	ldr	r4, [pc, #52]	@ (810eb74 <__libc_init_array+0x3c>)
 810eb3e:	1b64      	subs	r4, r4, r5
 810eb40:	10a4      	asrs	r4, r4, #2
 810eb42:	2600      	movs	r6, #0
 810eb44:	42a6      	cmp	r6, r4
 810eb46:	d109      	bne.n	810eb5c <__libc_init_array+0x24>
 810eb48:	4d0b      	ldr	r5, [pc, #44]	@ (810eb78 <__libc_init_array+0x40>)
 810eb4a:	4c0c      	ldr	r4, [pc, #48]	@ (810eb7c <__libc_init_array+0x44>)
 810eb4c:	f000 f826 	bl	810eb9c <_init>
 810eb50:	1b64      	subs	r4, r4, r5
 810eb52:	10a4      	asrs	r4, r4, #2
 810eb54:	2600      	movs	r6, #0
 810eb56:	42a6      	cmp	r6, r4
 810eb58:	d105      	bne.n	810eb66 <__libc_init_array+0x2e>
 810eb5a:	bd70      	pop	{r4, r5, r6, pc}
 810eb5c:	f855 3b04 	ldr.w	r3, [r5], #4
 810eb60:	4798      	blx	r3
 810eb62:	3601      	adds	r6, #1
 810eb64:	e7ee      	b.n	810eb44 <__libc_init_array+0xc>
 810eb66:	f855 3b04 	ldr.w	r3, [r5], #4
 810eb6a:	4798      	blx	r3
 810eb6c:	3601      	adds	r6, #1
 810eb6e:	e7f2      	b.n	810eb56 <__libc_init_array+0x1e>
 810eb70:	0810eca0 	.word	0x0810eca0
 810eb74:	0810eca0 	.word	0x0810eca0
 810eb78:	0810eca0 	.word	0x0810eca0
 810eb7c:	0810eca4 	.word	0x0810eca4

0810eb80 <memcpy>:
 810eb80:	440a      	add	r2, r1
 810eb82:	4291      	cmp	r1, r2
 810eb84:	f100 33ff 	add.w	r3, r0, #4294967295
 810eb88:	d100      	bne.n	810eb8c <memcpy+0xc>
 810eb8a:	4770      	bx	lr
 810eb8c:	b510      	push	{r4, lr}
 810eb8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 810eb92:	f803 4f01 	strb.w	r4, [r3, #1]!
 810eb96:	4291      	cmp	r1, r2
 810eb98:	d1f9      	bne.n	810eb8e <memcpy+0xe>
 810eb9a:	bd10      	pop	{r4, pc}

0810eb9c <_init>:
 810eb9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810eb9e:	bf00      	nop
 810eba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810eba2:	bc08      	pop	{r3}
 810eba4:	469e      	mov	lr, r3
 810eba6:	4770      	bx	lr

0810eba8 <_fini>:
 810eba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810ebaa:	bf00      	nop
 810ebac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810ebae:	bc08      	pop	{r3}
 810ebb0:	469e      	mov	lr, r3
 810ebb2:	4770      	bx	lr
